FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 06 5B LJMP  _DUALADC_CNT1_ISR  (0149)     ljmp	_DUALADC_CNT1_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 06 61 LJMP  _DUALADC_PWM16_ISR (0157)     ljmp	_DUALADC_PWM16_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 06 5E LJMP  _DUALADC_CNT2_ISR  (0161)     ljmp	_DUALADC_CNT2_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0181)     // call	void_handler
0060: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0185)     // call	void_handler
0064: 7E       RETI                     (0186)     reti
0068: 71 10    OR    F,0x10             
                                        (0187)     ;---------------------------------------------------
                                        (0188)     ; Insert your custom code above this banner
                                        (0189)     ;---------------------------------------------------
                                        (0190)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0191) 
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  Start of Execution.
                                        (0194) ;-----------------------------------------------------------------------------
                                        (0195) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0196) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0197) ;
                                        (0198) 
                                        (0199) IF	(TOOLCHAIN & HITECH)
                                        (0200)  	AREA PD_startup(CODE, REL, CON)
                                        (0201) ELSE
                                        (0202)     org 68h
                                        (0203) ENDIF
                                        (0204) __Start:
                                        (0205) 
                                        (0206)     ; initialize SMP values for voltage stabilization, if required,
                                        (0207)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0208)     ; least for now. 
                                        (0209)     ;
                                        (0210)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0211)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0212)     M8C_SetBank0
                                        (0213) 
                                        (0214) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0215) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0216)     M8C_EnableWatchDog
                                        (0217) ENDIF
                                        (0218) 
                                        (0219) IF ( SELECT_32K )
                                        (0220)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0221) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0222)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0223) ENDIF
                                        (0224) 
                                        (0225) IF	(TOOLCHAIN & HITECH) 
                                        (0226)     ;---------------------------
                                        (0227)     ; Set up the Temporary stack
                                        (0228)     ;---------------------------
                                        (0229)     ; A temporary stack is set up for the SSC instructions.
                                        (0230)     ; The real stack start will be assigned later.
                                        (0231)     ;
                                        (0232) 	global		__Lstackps
                                        (0233) 	mov     a,low __Lstackps
                                        (0234) 	swap    a,sp
                                        (0235) ELSE
                                        (0236)     ;------------------
                                        (0237)     ; Set up the stack
                                        (0238)     ;------------------
0075: 50 10    MOV   A,0x10             (0239)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0240)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0241) ENDIF
                                        (0242) 
                                        (0243)     ;-----------------------------------------------
                                        (0244)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0245)     ;-----------------------------------------------
                                        (0246) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0247) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0248)  IF ( AGND_BYPASS )
                                        (0249)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0250)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0251)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0252)     ; value using the proper trim values.
                                        (0253)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0254)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0255)  ENDIF
                                        (0256) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0257)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0258) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0259) 
007B: 55 F8 00 MOV   [0xF8],0x0         (0260)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [0xF9],0x0         (0261)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0262) 
                                        (0263)     ;---------------------------------------
                                        (0264)     ; Initialize Crystal Oscillator and PLL
                                        (0265)     ;---------------------------------------
                                        (0266) 
                                        (0267) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0268)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0269)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0270)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0271)     ; the ECO to stabilize.
                                        (0272)     ;
                                        (0273)     M8C_SetBank1
                                        (0274)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0275)     M8C_SetBank0
                                        (0276)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0277)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0278)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0279) .WaitFor1s:
                                        (0280)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0281)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0282)                                           ;   since interrupts are not globally enabled
                                        (0283) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0284)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0285)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0286)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0287)     M8C_SetBank0
                                        (0288)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0289) 
                                        (0290) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0291) 
                                        (0292) IF ( PLL_MODE )
                                        (0293)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0294)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0295)     ;
                                        (0296)     M8C_SetBank1
                                        (0297)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0298)     M8C_SetBank0
                                        (0299)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0300)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0301) 
                                        (0302) .WaitFor16ms:
                                        (0303)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0304)     jz   .WaitFor16ms
                                        (0305)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0306)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0307)     M8C_SetBank0
                                        (0308) 
                                        (0309) IF      ( WAIT_FOR_32K )
                                        (0310) ELSE ; !( WAIT_FOR_32K )
                                        (0311)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0312)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0313) ENDIF ;(WAIT_FOR_32K)
                                        (0314) ENDIF ;(PLL_MODE)
                                        (0315) 
                                        (0316) 	;-------------------------------------------------------
                                        (0317)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0318)     ;-------------------------------------------------------
                                        (0319) 
                                        (0320)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0321) 
                                        (0322) IF (SYSCLK_SOURCE)
                                        (0323)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0324) ENDIF
                                        (0325)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0326) 
                                        (0327)     ;------------------------
                                        (0328)     ; Close CT leakage path.
                                        (0329)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0330)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0331)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0332)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0333)     mov   reg[ACB03CR0], 05h
                                        (0334) 
                                        (0335)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0336)     ;---------------------------------------------------
                                        (0337)     ; Insert your custom code below this banner
                                        (0338)     ;---------------------------------------------------
                                        (0339) 
                                        (0340)     ;---------------------------------------------------
                                        (0341)     ; Insert your custom code above this banner
                                        (0342)     ;---------------------------------------------------
                                        (0343)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0344) 
                                        (0345)     ;-------------------------
                                        (0346)     ; Load Base Configuration
                                        (0347)     ;-------------------------
                                        (0348)     ; Load global parameter settings and load the user modules in the
                                        (0349)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0350)     ; to minimize start up time; (2) We may still need to play with the
                                        (0351)     ; Sleep Timer.
                                        (0352)     ;
0097: 7C 02 C8 LCALL 0x02C8             (0353)     lcall LoadConfigInit
                                        (0354) 
                                        (0355)     ;-----------------------------------
                                        (0356)     ; Initialize C Run-Time Environment
                                        (0357)     ;-----------------------------------
                                        (0358) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0359)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 04 10 MOV   [__r0],0x10        (0360)     mov  [__r0],<__bss_start
                                        (0361) BssLoop:
009F: 3C 04 10 CMP   [__r0],0x10        (0362)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0363)     jz   BssDone
00A4: 3F 04    MVI   [__r0],A           (0364)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0365)     jmp  BssLoop
                                        (0366) BssDone:
00A8: 50 01    MOV   A,0x1              (0367)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 FF    MOV   X,0xFF             (0368)     mov  X,<__idata_start
00AC: 55 04 00 MOV   [__r0],0x0         (0369)     mov  [__r0],<__data_start
                                        (0370) IDataLoop:
00AF: 3C 04 04 CMP   [__r0],0x4         (0371)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0372)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0373)     push A
00B5: 28       ROMX                     (0374)     romx
00B6: 3F 04    MVI   [__r0],A           (0375)     mvi  [__r0],A
00B8: 18       POP   A                  (0376)     pop  A
00B9: 75       INC   X                  (0377)     inc  X
00BA: 09 00    ADC   A,0x0              (0378)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0379)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
                                        (0380) 
                                        (0381) C_RTE_Done:
                                        (0382) 
                                        (0383) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0384) 
                                        (0385)     ;-------------------------------
                                        (0386)     ; Voltage Stabilization for SMP
                                        (0387)     ;-------------------------------
                                        (0388) 
                                        (0389) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0390) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0391)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0392)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0393)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0394)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0395)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0396)     M8C_SetBank1
                                        (0397)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0398)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0399)     M8C_SetBank0
                                        (0400)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0401)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0402) .WaitFor2ms:
                                        (0403)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0404)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0405) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0406) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0407) 
                                        (0408)     ;-------------------------------
                                        (0409)     ; Set Power-On Reset (POR) Level
                                        (0410)     ;-------------------------------
                                        (0411)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0412)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0413)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0414)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0415)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0416) 
                                        (0417)     M8C_SetBank1
                                        (0418) 
                                        (0419) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0420)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0421)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0422)  ELSE ; 24HMz                               ;
00C0: 43 E3 20 OR    REG[0xE3],0x20     (0423)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
00C3: 70 EF    AND   F,0xEF             
                                        (0424)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0425) ENDIF ; 5V
                                        (0426) 
                                        (0427)     M8C_SetBank0
                                        (0428) 
                                        (0429)     ;----------------------------
                                        (0430)     ; Wrap up and invoke "main"
                                        (0431)     ;----------------------------
                                        (0432) 
                                        (0433)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0434)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0435)     ;
00C5: 62 E0 00 MOV   REG[0xE0],0x0      (0436)     mov  reg[INT_MSK0],0
00C8: 71 10    OR    F,0x10             
                                        (0437) 
                                        (0438)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0439)     ;
                                        (0440)     M8C_SetBank1
00CA: 62 E0 03 MOV   REG[0xE0],0x3      (0441)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CD: 70 EF    AND   F,0xEF             
                                        (0442)     M8C_SetBank0
                                        (0443) 
                                        (0444)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0445)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0446)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0447)     ;
00CF: 62 E2 00 MOV   REG[0xE2],0x0      (0448)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0449)                                    ; have been set during the boot process.
                                        (0450) IF	(TOOLCHAIN & HITECH)
                                        (0451) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0452) ELSE
                                        (0453) IF ENABLE_LJMP_TO_MAIN
                                        (0454)     ljmp  _main                    ; goto main (no return)
                                        (0455) ELSE
00D2: 7C 07 FD LCALL __UserModules_end|__text_start|_main|_main(0456)     lcall _main                    ; call main
                                        (0457) .Exit:
00D5: 8F FF    JMP   0x00D5             (0458)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0459) ENDIF
                                        (0460) ENDIF ; TOOLCHAIN
                                        (0461) 
                                        (0462)     ;---------------------------------
                                        (0463)     ; Library Access to Global Parms
                                        (0464)     ;---------------------------------
                                        (0465)     ;
                                        (0466)  bGetPowerSetting:
                                        (0467) _bGetPowerSetting:
                                        (0468)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0469)     ; Returns value of POWER_SETTING in the A register.
                                        (0470)     ; No inputs. No Side Effects.
                                        (0471)     ;
                                        (0472) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D7: 50 10    MOV   A,0x10             (0473)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0474) ELSE        
                                        (0475)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0476) ENDIF
00D9: 7F       RET                      (0477)     ret
                                        (0478) 
                                        (0479) IF	(TOOLCHAIN & HITECH)
                                        (0480) ELSE
                                        (0481)     ;---------------------------------
                                        (0482)     ; Order Critical RAM & ROM AREAs
                                        (0483)     ;---------------------------------
                                        (0484)     ;  'TOP' is all that has been defined so far...
                                        (0485) 
                                        (0486)     ;  ROM AREAs for C CONST, static & global items
                                        (0487)     ;
                                        (0488)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0489)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0490) __idata_start:
                                        (0491) 
                                        (0492)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0493) __func_lit_start:
                                        (0494) 
                                        (0495)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0496)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0497) 
                                        (0498)     ; CODE segment for general use
                                        (0499)     ;
                                        (0500)     AREA text (ROM, REL, CON)
                                        (0501) __text_start:
                                        (0502) 
                                        (0503)     ; RAM area usage
                                        (0504)     ;
                                        (0505)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0506) __data_start:
                                        (0507) 
                                        (0508)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0509)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0510)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0511) __bss_start:
                                        (0512) 
                                        (0513) ENDIF ; TOOLCHAIN
                                        (0514) 
                                        (0515) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.2.2551
0203: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_Accelerometer_Bank1
                                        (0006) export LoadConfigTBL_Accelerometer_Bank0
                                        (0007) export LoadConfigTBL_Accelerometer_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_Accelerometer_Bank0:
                                        (0010) ;  Instance name DUALADC, User Module DUALADC
                                        (0011) ;       Instance name DUALADC, Block Name ADC1(ASC10)
                                        (0012) 	db		80h, 90h		;DUALADC_bfADC1cr0(ASC10CR0)
                                        (0013) 	db		81h, 00h		;DUALADC_bfADC1cr1(ASC10CR1)
                                        (0014) 	db		82h, 61h		;DUALADC_bfADC1cr2(ASC10CR2)
                                        (0015) 	db		83h, f0h		;DUALADC_bfADC1cr3(ASC10CR3)
                                        (0016) ;       Instance name DUALADC, Block Name ADC2(ASD11)
                                        (0017) 	db		84h, 90h		;DUALADC_bfADC2cr0(ASD11CR0)
                                        (0018) 	db		85h, 00h		;DUALADC_bfADC2cr1(ASD11CR1)
                                        (0019) 	db		86h, 60h		;DUALADC_bfADC2cr2(ASD11CR2)
                                        (0020) 	db		87h, f0h		;DUALADC_bfADC2cr3(ASD11CR3)
                                        (0021) ;       Instance name DUALADC, Block Name CNT1(DBB00)
                                        (0022) 	db		23h, 00h		;DUALADC_bCounter1_CR0(DBB00CR0)
                                        (0023) 	db		21h, 00h		;DUALADC_bPeriod1(DBB00DR1)
                                        (0024) 	db		22h, 00h		;DUALADC_bCompare1(DBB00DR2)
                                        (0025) ;       Instance name DUALADC, Block Name CNT2(DCB03)
                                        (0026) 	db		2fh, 00h		;DUALADC_bCounter2_CR0(DCB03CR0)
                                        (0027) 	db		2dh, 00h		;DUALADC_bPeriod2(DCB03DR1)
                                        (0028) 	db		2eh, 00h		;DUALADC_bCompare2(DCB03DR2)
                                        (0029) ;       Instance name DUALADC, Block Name PWM16_LSB(DBB01)
                                        (0030) 	db		27h, 00h		;DUALADC_fPWM_LSB_CR0(DBB01CR0)
                                        (0031) 	db		25h, 00h		;DUALADC_bPWM_Period_LSB(DBB01DR1)
                                        (0032) 	db		26h, 00h		;DUALADC_bPWM_IntTime_LSB(DBB01DR2)
                                        (0033) ;       Instance name DUALADC, Block Name PWM16_MSB(DCB02)
                                        (0034) 	db		2bh, 00h		;DUALADC_fPWM_MSB_CR0(DCB02CR0)
                                        (0035) 	db		29h, 00h		;DUALADC_bPWM_Period_MSB(DCB02DR1)
                                        (0036) 	db		2ah, 00h		;DUALADC_bPWM_IntTime_MSB(DCB02DR2)
                                        (0037) ;  Instance name LCD, User Module LCD
                                        (0038) ;  Instance name PGA_X_Achse, User Module PGA
                                        (0039) ;       Instance name PGA_X_Achse, Block Name GAIN(ACB01)
                                        (0040) 	db		75h, feh		;PGA_X_Achse_GAIN_CR0(ACB01CR0)
                                        (0041) 	db		76h, 21h		;PGA_X_Achse_GAIN_CR1(ACB01CR1)
                                        (0042) 	db		77h, 20h		;PGA_X_Achse_GAIN_CR2(ACB01CR2)
                                        (0043) 	db		74h, 00h		;PGA_X_Achse_GAIN_CR3(ACB01CR3)
                                        (0044) ;  Instance name PGA_Y_Achse, User Module PGA
                                        (0045) ;       Instance name PGA_Y_Achse, Block Name GAIN(ACB00)
                                        (0046) 	db		71h, feh		;PGA_Y_Achse_GAIN_CR0(ACB00CR0)
                                        (0047) 	db		72h, 21h		;PGA_Y_Achse_GAIN_CR1(ACB00CR1)
                                        (0048) 	db		73h, 20h		;PGA_Y_Achse_GAIN_CR2(ACB00CR2)
                                        (0049) 	db		70h, 00h		;PGA_Y_Achse_GAIN_CR3(ACB00CR3)
                                        (0050) ;  Global Register values Bank 0
                                        (0051) 	db		60h, 25h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0052) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0053) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0054) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0055) 	db		e6h, 30h		; DecimatorControl_0 register (DEC_CR0)
                                        (0056) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0057) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0058) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0059) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0060) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0061) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0062) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0063) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0064) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0065) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0066) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0067) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0068) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0069) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0070) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0071) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0072) 	db		ffh
                                        (0073) LoadConfigTBL_Accelerometer_Bank1:
                                        (0074) ;  Instance name DUALADC, User Module DUALADC
                                        (0075) ;       Instance name DUALADC, Block Name ADC1(ASC10)
                                        (0076) ;       Instance name DUALADC, Block Name ADC2(ASD11)
                                        (0077) ;       Instance name DUALADC, Block Name CNT1(DBB00)
                                        (0078) 	db		20h, 21h		;DUALADC_fCounter1FN(DBB00FN)
                                        (0079) 	db		21h, 45h		;DUALADC_fCounter1SL(DBB00IN)
                                        (0080) 	db		22h, 40h		;DUALADC_fCounter1OS(DBB00OU)
                                        (0081) ;       Instance name DUALADC, Block Name CNT2(DCB03)
                                        (0082) 	db		2ch, 21h		;DUALADC_fCounter2FN(DCB03FN)
                                        (0083) 	db		2dh, 55h		;DUALADC_fCounter2SL(DCB03IN)
                                        (0084) 	db		2eh, 40h		;DUALADC_fCounter2OS(DCB03OU)
                                        (0085) ;       Instance name DUALADC, Block Name PWM16_LSB(DBB01)
                                        (0086) 	db		24h, 01h		;DUALADC_bfPWM_LSB_FN(DBB01FN)
                                        (0087) 	db		25h, 15h		;DUALADC_(DBB01IN)
                                        (0088) 	db		26h, 40h		;DUALADC_(DBB01OU)
                                        (0089) ;       Instance name DUALADC, Block Name PWM16_MSB(DCB02)
                                        (0090) 	db		28h, 21h		;DUALADC_bfPWM_MSB_FN(DCB02FN)
                                        (0091) 	db		29h, 35h		;DUALADC_(DCB02IN)
                                        (0092) 	db		2ah, 40h		;DUALADC_(DCB02OU)
                                        (0093) ;  Instance name LCD, User Module LCD
                                        (0094) ;  Instance name PGA_X_Achse, User Module PGA
                                        (0095) ;       Instance name PGA_X_Achse, Block Name GAIN(ACB01)
                                        (0096) ;  Instance name PGA_Y_Achse, User Module PGA
                                        (0097) ;       Instance name PGA_Y_Achse, Block Name GAIN(ACB00)
                                        (0098) ;  Global Register values Bank 1
                                        (0099) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0100) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0101) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0102) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0103) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0104) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0105) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0106) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0107) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0108) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0109) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0110) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0111) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0112) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0113) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0114) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0115) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0116) 	db		ffh
                                        (0117) AREA psoc_config(rom, rel)
                                        (0118) LoadConfigTBL_Accelerometer_Ordered:
                                        (0119) ;  Ordered Global Register values
                                        (0120) 	M8C_SetBank0
0205: 62 00 00 MOV   REG[0x0],0x0       (0121) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0208: 71 10    OR    F,0x10             
                                        (0122) 	M8C_SetBank1
020A: 62 00 00 MOV   REG[0x0],0x0       (0123) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
020D: 62 01 FF MOV   REG[0x1],0xFF      (0124) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0210: 70 EF    AND   F,0xEF             
                                        (0125) 	M8C_SetBank0
0212: 62 03 FF MOV   REG[0x3],0xFF      (0126) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0215: 62 02 00 MOV   REG[0x2],0x0       (0127) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0218: 71 10    OR    F,0x10             
                                        (0128) 	M8C_SetBank1
021A: 62 02 00 MOV   REG[0x2],0x0       (0129) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
021D: 62 03 00 MOV   REG[0x3],0x0       (0130) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0220: 70 EF    AND   F,0xEF             
                                        (0131) 	M8C_SetBank0
0222: 62 01 00 MOV   REG[0x1],0x0       (0132) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0225: 62 04 00 MOV   REG[0x4],0x0       (0133) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0228: 71 10    OR    F,0x10             
                                        (0134) 	M8C_SetBank1
022A: 62 04 00 MOV   REG[0x4],0x0       (0135) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
022D: 62 05 FF MOV   REG[0x5],0xFF      (0136) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0230: 70 EF    AND   F,0xEF             
                                        (0137) 	M8C_SetBank0
0232: 62 07 FF MOV   REG[0x7],0xFF      (0138) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0235: 62 06 00 MOV   REG[0x6],0x0       (0139) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0238: 71 10    OR    F,0x10             
                                        (0140) 	M8C_SetBank1
023A: 62 06 00 MOV   REG[0x6],0x0       (0141) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
023D: 62 07 00 MOV   REG[0x7],0x0       (0142) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0240: 70 EF    AND   F,0xEF             
                                        (0143) 	M8C_SetBank0
0242: 62 05 00 MOV   REG[0x5],0x0       (0144) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0245: 62 08 00 MOV   REG[0x8],0x0       (0145) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0248: 71 10    OR    F,0x10             
                                        (0146) 	M8C_SetBank1
024A: 62 08 00 MOV   REG[0x8],0x0       (0147) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
024D: 62 09 FF MOV   REG[0x9],0xFF      (0148) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
0250: 70 EF    AND   F,0xEF             
                                        (0149) 	M8C_SetBank0
0252: 62 0B FF MOV   REG[0xB],0xFF      (0150) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
0255: 62 0A 00 MOV   REG[0xA],0x0       (0151) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0258: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
025A: 62 0A 00 MOV   REG[0xA],0x0       (0153) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
025D: 62 0B 00 MOV   REG[0xB],0x0       (0154) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0260: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
0262: 62 09 00 MOV   REG[0x9],0x0       (0156) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0265: 62 0C 00 MOV   REG[0xC],0x0       (0157) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0268: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
026A: 62 0C 00 MOV   REG[0xC],0x0       (0159) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
026D: 62 0D FF MOV   REG[0xD],0xFF      (0160) 	mov	reg[0dh], ffh		; Port_3_DriveMode_1 register (PRT3DM1)
0270: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
0272: 62 0F FF MOV   REG[0xF],0xFF      (0162) 	mov	reg[0fh], ffh		; Port_3_DriveMode_2 register (PRT3DM2)
0275: 62 0E 00 MOV   REG[0xE],0x0       (0163) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0278: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
027A: 62 0E 00 MOV   REG[0xE],0x0       (0165) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
027D: 62 0F 00 MOV   REG[0xF],0x0       (0166) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0280: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
0282: 62 0D 00 MOV   REG[0xD],0x0       (0168) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0285: 62 10 00 MOV   REG[0x10],0x0      (0169) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0288: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
028A: 62 10 7F MOV   REG[0x10],0x7F     (0171) 	mov	reg[10h], 7fh		; Port_4_DriveMode_0 register (PRT4DM0)
028D: 62 11 80 MOV   REG[0x11],0x80     (0172) 	mov	reg[11h], 80h		; Port_4_DriveMode_1 register (PRT4DM1)
0290: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
0292: 62 13 80 MOV   REG[0x13],0x80     (0174) 	mov	reg[13h], 80h		; Port_4_DriveMode_2 register (PRT4DM2)
0295: 62 12 00 MOV   REG[0x12],0x0      (0175) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0298: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
029A: 62 12 00 MOV   REG[0x12],0x0      (0177) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
029D: 62 13 00 MOV   REG[0x13],0x0      (0178) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02A0: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
02A2: 62 11 00 MOV   REG[0x11],0x0      (0180) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02A5: 62 14 00 MOV   REG[0x14],0x0      (0181) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02A8: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
02AA: 62 14 00 MOV   REG[0x14],0x0      (0183) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02AD: 62 15 0F MOV   REG[0x15],0xF      (0184) 	mov	reg[15h], 0fh		; Port_5_DriveMode_1 register (PRT5DM1)
02B0: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
02B2: 62 17 0F MOV   REG[0x17],0xF      (0186) 	mov	reg[17h], 0fh		; Port_5_DriveMode_2 register (PRT5DM2)
02B5: 62 16 00 MOV   REG[0x16],0x0      (0187) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02B8: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
02BA: 62 16 00 MOV   REG[0x16],0x0      (0189) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02BD: 62 17 00 MOV   REG[0x17],0x0      (0190) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02C0: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
02C2: 62 15 00 MOV   REG[0x15],0x0      (0192) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02C5: 70 EF    AND   F,0xEF             
                                        (0193) 	M8C_SetBank0
02C7: 7F       RET                      (0194) 	ret
                                        (0195) 
                                        (0196) 
                                        (0197) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_Accelerometer
                                        (0026) export _LoadConfig_Accelerometer
                                        (0027) export Port_4_Data_SHADE
                                        (0028) export _Port_4_Data_SHADE
                                        (0029) export Port_4_DriveMode_0_SHADE
                                        (0030) export _Port_4_DriveMode_0_SHADE
                                        (0031) export Port_4_DriveMode_1_SHADE
                                        (0032) export _Port_4_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
02C8: 55 05 00 MOV   [0x5],0x0          (0065) 	mov		[Port_4_Data_SHADE], 0h
02CB: 55 06 7F MOV   [0x6],0x7F         (0066) 	mov		[Port_4_DriveMode_0_SHADE], 7fh
02CE: 55 07 80 MOV   [0x7],0x80         (0067) 	mov		[Port_4_DriveMode_1_SHADE], 80h
                                        (0068) 
02D1: 7C 02 D8 LCALL 0x02D8             (0069) 	lcall	LoadConfig_Accelerometer
02D4: 7C 02 03 LCALL 0x0203             (0070) 	lcall	LoadConfigTBL_Accelerometer_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
02D7: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration Accelerometer
                                        (0078) ;
                                        (0079) ;    Load configuration registers for Accelerometer.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_Accelerometer:
                                        (0096)  LoadConfig_Accelerometer:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
02D8: 10       PUSH  X                  (0099) 	push	x
02D9: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
02DB: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
02DD: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
02DE: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_Accelerometer_Bank0
02E0: 57 61    MOV   X,0x61             (0105)     mov     X, <LoadConfigTBL_Accelerometer_Bank0
02E2: 7C 02 F3 LCALL 0x02F3             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
02E5: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
02E7: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
02E8: 50 01    MOV   A,0x1              (0111)     mov     A, >LoadConfigTBL_Accelerometer_Bank1
02EA: 57 C4    MOV   X,0xC4             (0112)     mov     X, <LoadConfigTBL_Accelerometer_Bank1
02EC: 7C 02 F3 LCALL 0x02F3             (0113)     lcall   LoadConfig              ; Load the bank 1 values
02EF: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
02F1: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
02F2: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
02F3: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
02F5: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
02F6: 08       PUSH  A                  (0143)     push    A
02F7: 4F       MOV   X,SP               (0144)     mov     X, SP
02F8: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
02FB: D0 04    JNC   0x0300             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
02FD: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
0300: 18       POP   A                  (0149)     pop     A
0301: 20       POP   X                  (0150)     pop     X
0302: 70 EF    AND   F,0xEF             
0304: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0307: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
0308: 08       PUSH  A                  (0156)     push    A
0309: 28       ROMX                     (0157)     romx                            ; Load register address from table
030A: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
030C: A0 1F    JZ    0x032C             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
030E: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
030F: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
0312: A0 03    JZ    0x0316             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0314: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
0316: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
0318: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
0319: 20       POP   X                  (0167)     pop     X
031A: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
031B: 09 00    ADC   A,0x0              (0169)     adc     A, 0
031D: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
031E: 08       PUSH  A                  (0171)     push    A
031F: 28       ROMX                     (0172)     romx                            ; load config data from the table
0320: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
0321: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
0323: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
0325: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
0326: 20       POP   X                  (0177)     pop     X
0327: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
0328: 09 00    ADC   A,0x0              (0179)     adc     A, 0
032A: 8F D7    JMP   0x0302             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
032C: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
032E: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_4_Data_SHADE:
                                        (0192) Port_4_Data_SHADE:	BLK	1
                                        (0193) _Port_4_DriveMode_0_SHADE:
                                        (0194) Port_4_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_4_DriveMode_1_SHADE:
                                        (0196) Port_4_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\pga_y_achse.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_Y_Achse.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2012/3/2 at 9:15:6
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_Y_Achse.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_Y_Achse_Start
                                        (0060) export _PGA_Y_Achse_Start
                                        (0061) export  PGA_Y_Achse_SetPower
                                        (0062) export _PGA_Y_Achse_SetPower
                                        (0063) 
                                        (0064) export  PGA_Y_Achse_SetGain
                                        (0065) export _PGA_Y_Achse_SetGain
                                        (0066) 
                                        (0067) export  PGA_Y_Achse_Stop
                                        (0068) export _PGA_Y_Achse_Stop
                                        (0069) 
                                        (0070) IF (PGA_Y_Achse_AGNDBUFAPI)
                                        (0071) export  PGA_Y_Achse_EnableAGNDBuffer
                                        (0072) export _PGA_Y_Achse_EnableAGNDBuffer
                                        (0073) export  PGA_Y_Achse_DisableAGNDBuffer
                                        (0074) export _PGA_Y_Achse_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_Y_Achse_Start
                                        (0092) ;  FUNCTION NAME: PGA_Y_Achse_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_Y_Achse_Start:
                                        (0111) _PGA_Y_Achse_Start:
                                        (0112)  PGA_Y_Achse_SetPower:
                                        (0113) _PGA_Y_Achse_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
032F: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0331: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0332: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0333: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_Y_Achse_GAIN_CR2]                       ; read power value
0335: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0337: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0339: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_Y_Achse_GAIN_CR2], A                  ; move complete value back to register
033B: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
033C: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_Y_Achse_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_Y_Achse_SetGain:
                                        (0154) _PGA_Y_Achse_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
033D: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
033F: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0340: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0341: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_Y_Achse_GAIN_CR0]                       ; read mux settings
0343: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
0345: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0348: B0 0A    JNZ   0x0353             (0164)    jnz  .SETHIGHGAIN
034A: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_Y_Achse_GAIN_CR3],~EXGAIN                  ; Clear High Gain bit.
034D: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
034F: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_Y_Achse_GAIN_CR0], A                       ; move complete value back to register
0351: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0352: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0353: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0356: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0358: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_Y_Achse_GAIN_CR0], A                       ; move complete value back to register
035A: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_Y_Achse_GAIN_CR3], EXGAIN                  ; Set High Gain bit.
035D: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
035E: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_Y_Achse_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_Y_Achse_Stop:
                                        (0203) _PGA_Y_Achse_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
035F: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_Y_Achse_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0362: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_Y_Achse_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_Y_Achse_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_Y_Achse_EnableAGNDBuffer:
                                        (0233) _PGA_Y_Achse_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_Y_Achse_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_Y_Achse_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_Y_Achse_DisableAGNDBuffer:
                                        (0261) _PGA_Y_Achse_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_Y_Achse_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_Y_Achse.asm
FILE: lib\pga_x_achse.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA_X_Achse.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2012/3/2 at 9:15:6
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA_X_Achse.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_X_Achse_Start
                                        (0060) export _PGA_X_Achse_Start
                                        (0061) export  PGA_X_Achse_SetPower
                                        (0062) export _PGA_X_Achse_SetPower
                                        (0063) 
                                        (0064) export  PGA_X_Achse_SetGain
                                        (0065) export _PGA_X_Achse_SetGain
                                        (0066) 
                                        (0067) export  PGA_X_Achse_Stop
                                        (0068) export _PGA_X_Achse_Stop
                                        (0069) 
                                        (0070) IF (PGA_X_Achse_AGNDBUFAPI)
                                        (0071) export  PGA_X_Achse_EnableAGNDBuffer
                                        (0072) export _PGA_X_Achse_EnableAGNDBuffer
                                        (0073) export  PGA_X_Achse_DisableAGNDBuffer
                                        (0074) export _PGA_X_Achse_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_X_Achse_Start
                                        (0092) ;  FUNCTION NAME: PGA_X_Achse_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_X_Achse_Start:
                                        (0111) _PGA_X_Achse_Start:
                                        (0112)  PGA_X_Achse_SetPower:
                                        (0113) _PGA_X_Achse_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0363: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0365: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0366: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0367: 5D 77    MOV   A,REG[0x77]        (0120)    mov  A, reg[PGA_X_Achse_GAIN_CR2]                       ; read power value
0369: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
036B: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
036D: 60 77    MOV   REG[0x77],A        (0123)    mov  reg[PGA_X_Achse_GAIN_CR2], A                  ; move complete value back to register
036F: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0370: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_X_Achse_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_X_Achse_SetGain:
                                        (0154) _PGA_X_Achse_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0371: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0373: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0374: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0375: 5D 75    MOV   A,REG[0x75]        (0161)    mov  A, reg[PGA_X_Achse_GAIN_CR0]                       ; read mux settings
0377: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
0379: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
037C: B0 0A    JNZ   0x0387             (0164)    jnz  .SETHIGHGAIN
037E: 41 74 FE AND   REG[0x74],0xFE     (0165)    and  reg[PGA_X_Achse_GAIN_CR3],~EXGAIN                  ; Clear High Gain bit.
0381: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0383: 60 75    MOV   REG[0x75],A        (0167)    mov  reg[PGA_X_Achse_GAIN_CR0], A                       ; move complete value back to register
0385: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0386: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0387: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
038A: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
038C: 60 75    MOV   REG[0x75],A        (0175)    mov  reg[PGA_X_Achse_GAIN_CR0], A                       ; move complete value back to register
038E: 43 74 01 OR    REG[0x74],0x1      (0176)    or   reg[PGA_X_Achse_GAIN_CR3], EXGAIN                  ; Set High Gain bit.
0391: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0392: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_X_Achse_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_X_Achse_Stop:
                                        (0203) _PGA_X_Achse_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0393: 41 77 FC AND   REG[0x77],0xFC     (0206)    and REG[PGA_X_Achse_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0396: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_X_Achse_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_X_Achse_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_X_Achse_EnableAGNDBuffer:
                                        (0233) _PGA_X_Achse_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_X_Achse_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_X_Achse_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_X_Achse_DisableAGNDBuffer:
                                        (0261) _PGA_X_Achse_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_X_Achse_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA_X_Achse.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2012/3/2 at 9:14:48
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT4DR
                                        (0135) LCD_PortMode0:      equ    PRT4DM0
                                        (0136) LCD_PortMode1:      equ    PRT4DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    90h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D0h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0397: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0398: 10       PUSH  X                  (0209)     push  X
0399: 28       ROMX                     (0210)     romx                               ; Get character from ROM
039A: B0 04    JNZ   0x039F             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
039C: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
039D: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
039E: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
039F: 90 3C    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
03A1: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
03A2: 18       POP   A                  (0220)     pop   A
03A3: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
03A4: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
03A6: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
03A7: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
03B9: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
03BA: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
03BB: 67       ASR   A                  (0262)     asr   A
03BC: 67       ASR   A                  (0263)     asr   A
03BD: 67       ASR   A                  (0264)     asr   A
03BE: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
03C0: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
03C2: 90 19    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
03C4: 18       POP   A                  (0268)     pop   A                            ; Restore value
03C5: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
03C7: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
03C9: 90 12    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
03CB: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
03CC: 4B       SWAP  A,X                (0305)     swap  A,X
03CD: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
03CF: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
03D0: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
03D2: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
03D3: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
03D5: A0 06    JZ    0x03DC             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
03D7: 90 04    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
03D9: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
03DA: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
03DC: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
03DD: 90 5F    CALL  0x043E             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
03DF: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
03E0: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
03E1: 67       ASR   A                  (0390)     asr   A
03E2: 67       ASR   A                  (0391)     asr   A
03E3: 67       ASR   A                  (0392)     asr   A
03E4: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
03E6: 90 38    CALL  0x0420             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
03E8: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
03E9: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
03EB: 40       NOP                      (0397)     nop
03EC: 40       NOP                      (0398)     nop
03ED: 40       NOP                      (0399)     nop
03EE: 90 30    CALL  0x0420             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
03F0: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
03F1: 90 4B    CALL  0x043E             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
03F3: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
03F4: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
03F5: 67       ASR   A                  (0436)     asr   A
03F6: 67       ASR   A                  (0437)     asr   A
03F7: 67       ASR   A                  (0438)     asr   A
03F8: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
03FA: 90 09    CALL  0x0405             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
03FC: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
03FD: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
03FF: 40       NOP                      (0443)     nop
0400: 40       NOP                      (0444)     nop
0401: 40       NOP                      (0445)     nop
0402: 90 01    CALL  0x0405             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0404: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0405: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_4_Data_SHADE           ; Set CUR_PP to LCD variable address
0406: 26 05 80 AND   [0x5],0x80         (0479)     and   [Port_4_Data_SHADE],~LCD_PORT_MASK
0409: 51 05    MOV   A,[0x5]            (0480)     mov   A,[Port_4_Data_SHADE]
040B: 60 10    MOV   REG[0x10],A        (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
040D: 18       POP   A                  (0483)     pop   A
040E: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0410: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0412: 2A 05    OR    A,[0x5]            (0486)     or    A,[Port_4_Data_SHADE]                  ; OR in bit 7 just
0414: 60 10    MOV   REG[0x10],A        (0487)     mov   reg[LCD_Port], A                       ; Write data
0416: 53 05    MOV   [0x5],A            (0488)     mov   [Port_4_Data_SHADE],A                  ; Keep shadow register in sync
0418: 40       NOP                      (0489)     nop
0419: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
041B: 53 05    MOV   [0x5],A            (0491)     mov   [Port_4_Data_SHADE],A                  ; Keep shadow register in sync
041D: 60 10    MOV   REG[0x10],A        (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
041F: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0420: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_4_Data_SHADE          ; Set CUR_PP to LCD variable address
0421: 26 05 80 AND   [0x5],0x80         (0525)     and   [Port_4_Data_SHADE],~LCD_PORT_MASK
0424: 2E 05 20 OR    [0x5],0x20         (0526)     or    [Port_4_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0427: 51 05    MOV   A,[0x5]            (0527)     mov   A,[Port_4_Data_SHADE]
0429: 60 10    MOV   REG[0x10],A        (0528)     mov   reg[LCD_Port],A
                                        (0529) 
042B: 18       POP   A                  (0530)     pop   A
042C: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
042E: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0430: 2A 05    OR    A,[0x5]            (0533)     or    A,[Port_4_Data_SHADE]                       ; Keep shadow in sync
0432: 60 10    MOV   REG[0x10],A        (0534)     mov   reg[LCD_Port], A                            ; Write data
0434: 53 05    MOV   [0x5],A            (0535)     mov   [Port_4_Data_SHADE],A                       ; Keep shadow in sync
0436: 40       NOP                      (0536)     NOP
0437: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0439: 53 05    MOV   [0x5],A            (0538)     mov   [Port_4_Data_SHADE],A                       ; keep shadow in sync
043B: 60 10    MOV   REG[0x10],A        (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
043D: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
043E: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_4_Data_SHADE                ; Set CUR_PP to LCD variable address
043F: 26 05 80 AND   [0x5],0x80         (0573)     and   [Port_4_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0442: 51 05    MOV   A,[0x5]            (0574)     mov   A,[Port_4_Data_SHADE]
0444: 60 10    MOV   REG[0x10],A        (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0446: 26 06 F0 AND   [0x6],0xF0         (0577)     and   [Port_4_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0449: 51 06    MOV   A,[0x6]            (0578)     mov   A,[Port_4_DriveMode_0_SHADE]
044B: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
044D: 60 10    MOV   REG[0x10],A        (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
044F: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0451: 2E 05 40 OR    [0x5],0x40         (0583)     or    [Port_4_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0454: 51 05    MOV   A,[0x5]            (0584)     mov   A,[Port_4_Data_SHADE]
0456: 60 10    MOV   REG[0x10],A        (0585)     mov   reg[LCD_Port],A
0458: 40       NOP                      (0586)     NOP
                                        (0587) 
0459: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
045A: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
045C: 2E 05 50 OR    [0x5],0x50         (0592)     or    [Port_4_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
045F: 51 05    MOV   A,[0x5]            (0593)     mov   A,[Port_4_Data_SHADE]
0461: 60 10    MOV   REG[0x10],A        (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0463: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0464: 40       NOP                      (0597)     nop
0465: 5D 10    MOV   A,REG[0x10]        (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0467: 08       PUSH  A                  (0610)     push  A
0468: 26 05 C0 AND   [0x5],0xC0         (0611)     and   [Port_4_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
046B: 51 05    MOV   A,[0x5]            (0612)     mov   A,[Port_4_Data_SHADE]
046D: 60 10    MOV   REG[0x10],A        (0613)     mov   reg[LCD_Port],A
                                        (0614) 
046F: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0470: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0471: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0472: 2E 05 50 OR    [0x5],0x50         (0619)     or    [Port_4_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0475: 51 05    MOV   A,[0x5]            (0620)     mov   A,[Port_4_Data_SHADE]
0477: 60 10    MOV   REG[0x10],A        (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0479: 40       NOP                      (0623)     nop
047A: 40       NOP                      (0624)     nop
                                        (0625) 
047B: 26 05 C0 AND   [0x5],0xC0         (0626)     and   [Port_4_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
047E: 51 05    MOV   A,[0x5]            (0627)     mov   A,[Port_4_Data_SHADE]
0480: 60 10    MOV   REG[0x10],A        (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0482: 18       POP   A                  (0630)     pop   A
0483: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0485: A0 04    JZ    0x048A             (0633)     jz    .UNLOCK
0487: 79       DEC   X                  (0634)     dec   X
0488: BF D3    JNZ   0x045C             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
048A: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
048B: 2E 06 7F OR    [0x6],0x7F         (0639)     or    [Port_4_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
048E: 51 06    MOV   A,[0x6]            (0640)     mov   A,[Port_4_DriveMode_0_SHADE]
0490: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0492: 60 10    MOV   REG[0x10],A        (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0494: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0496: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0497: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_4_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0498: 26 06 80 AND   [0x6],0x80         (0685)     and   [Port_4_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
049B: 2E 06 7F OR    [0x6],0x7F         (0686)     or    [Port_4_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
049E: 26 07 80 AND   [0x7],0x80         (0687)     and   [Port_4_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
04A1: 51 06    MOV   A,[0x6]            (0689)     mov   A,[Port_4_DriveMode_0_SHADE]
04A3: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
04A5: 60 10    MOV   REG[0x10],A        (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
04A7: 51 07    MOV   A,[0x7]            (0692)     mov   A,[Port_4_DriveMode_1_SHADE]
04A9: 60 11    MOV   REG[0x11],A        (0693)     mov   reg[LCD_PortMode1],A
04AB: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
04AD: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
04AF: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
04B1: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
04B3: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
04B5: 50 03    MOV   A,0x3              (0701)     mov   A,03h
04B7: 9F 4C    CALL  0x0405             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
04B9: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
04BB: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
04BD: 50 03    MOV   A,0x3              (0707)     mov   A,03h
04BF: 9F 44    CALL  0x0405             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
04C1: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
04C3: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
04C5: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
04C7: 50 03    MOV   A,0x3              (0714)     mov   A,03h
04C9: 9F 3A    CALL  0x0405             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
04CB: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04CD: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
04CF: 50 02    MOV   A,0x2              (0720)     mov   A,02h
04D1: 9F 32    CALL  0x0405             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
04D3: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04D5: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
04D7: 50 08    MOV   A,0x8              (0726)     mov   A,08h
04D9: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
04DB: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04DD: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
04DF: 50 01    MOV   A,0x1              (0731)     mov   A,01h
04E1: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
04E3: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04E5: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
04E7: 50 06    MOV   A,0x6              (0736)     mov   A,06h
04E9: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
04EB: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
04ED: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
04EF: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
04F1: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
04F3: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
04F5: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
04F7: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
04F9: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
04FB: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
04FD: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
04FF: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0501: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0503: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0508: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
050A: 10       PUSH  X                  (0791)     push  X                            ; Store COL
050B: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
050D: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
050E: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0510: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0511: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0513: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0514: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0516: 78       DEC   A                  (0828)     dec   A
0517: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0519: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0522: 08       PUSH  A                  (0871)     push  A
0523: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0525: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0527: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0529: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
052B: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
052D: D0 06    JNC   0x0534             (0877)     jnc   .Delay50u_End
052F: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0531: 78       DEC   A                  (0880)     dec   A                              ; [4]
0532: BF FE    JNZ   0x0531             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0534: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0535: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
0536: 10       PUSH  X                  (0943)     push  X
0537: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
0539: 9F CD    CALL  _LCD_Position      (0945)     call  LCD_Position                 ; Set cursor position
053B: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
053C: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
053F: B0 05    JNZ   0x0545             (0950)     jnz   .LCD_CHECK1X
0541: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
0543: 80 11    JMP   0x0555             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
0545: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
0548: D0 07    JNC   0x0550             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
054A: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
054C: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
054E: 80 06    JMP   0x0555             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
0550: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
0552: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
0555: 9E 86    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
0557: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
0559: BF E2    JNZ   0x053C             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
055B: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
055C: 4F       MOV   X,SP               (1015)     mov   X, SP
055D: 10       PUSH  X                  (1016)     push  X
055E: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
0560: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
0562: 9F A4    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0564: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0565: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0568: B0 05    JNZ   0x056E             (1026)     jnz   .LCD_CHECK1
056A: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
056C: 80 11    JMP   0x057E             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
056E: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
0571: D0 07    JNC   0x0579             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0573: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0575: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0577: 80 06    JMP   0x057E             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
0579: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
057B: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
057E: 9E 5D    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
0580: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
0582: BF E2    JNZ   0x0565             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
0584: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
0585: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
0587: 08       PUSH  A                  (1098)     push  A
0588: FF 7A    INDEX LCD_ROW_OFFSET     (1099)     index LCD_ROW_OFFSET  ; Get row offset
058A: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
058C: 9E 63    CALL  _LCD_Control       (1101)     call  LCD_Control                  ; Position Cursor
058E: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
0591: B0 05    JNZ   0x0597             (1103)     jnz   .VBG_NZ_SEGX
0593: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
0595: 80 13    JMP   0x05A9             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
0597: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
059A: D0 09    JNC   0x05A4             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
059C: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
059E: 78       DEC   A                  (1111)     dec   A
059F: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
05A2: 80 06    JMP   0x05A9             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
05A4: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
05A7: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
05A9: 9E 32    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1120)     call  LCD_WriteData                ; Write value
05AB: 18       POP   A                  (1121)     pop   A
05AC: 78       DEC   A                  (1122)     dec   A
05AD: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
05AF: BF D7    JNZ   0x0587             (1124)     jnz   .VBG_LOOPX
05B1: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
05B2: 4F       MOV   X,SP               (1168)     mov   X, SP
05B3: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
05B5: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
05B7: 08       PUSH  A                  (1172)     push  A
05B8: FF 4A    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
05BA: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
05BC: 9E 33    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
05BE: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
05C1: B0 05    JNZ   0x05C7             (1177)     jnz   .VBG_NZ_SEG
05C3: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
05C5: 80 13    JMP   0x05D9             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
05C7: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
05CA: D0 09    JNC   0x05D4             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
05CC: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
05CE: 78       DEC   A                  (1185)     dec   A
05CF: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
05D2: 80 06    JMP   0x05D9             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
05D4: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
05D7: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
05D9: 9E 02    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1194)     call  LCD_WriteData                ; Write value
05DB: 18       POP   A                  (1195)     pop   A
05DC: 78       DEC   A                  (1196)     dec   A
05DD: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
05DF: BF D7    JNZ   0x05B7             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
05E1: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
05E2: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
05E3: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
05E4: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
05E5: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
05E7: 9E 08    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
05E9: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
05EC: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
05EF: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
05F1: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
05F3: D0 05    JNC   0x05F9             (1251)     jnc   .VBG_SOLID
05F5: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
05F7: 80 03    JMP   0x05FB             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
05F9: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
05FB: 9D E0    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1257)     call  LCD_WriteData                ; character data
05FD: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
05FF: BF EF    JNZ   0x05EF             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
0601: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
0603: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0606: BF E5    JNZ   0x05EC             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0608: 18       POP   A                  (1264)     pop  A
0609: 18       POP   A                  (1265)     pop  A
060A: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
060C: 9D E3    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
060E: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
061D: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
061E: 38 03    ADD   SP,0x3             (1320)     add   SP,3
0620: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0622: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0624: 9D CB    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0626: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0629: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
062C: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
062E: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
0631: B0 05    JNZ   0x0637             (1332)     jnz   .BG_OTHER
0633: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0635: 80 03    JMP   0x0639             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0637: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0639: 9D A2    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1338)     call  LCD_WriteData
063B: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
063D: BF EE    JNZ   0x062C             (1340)     jnz   .BG_Loop2
063F: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
0641: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0644: BF E4    JNZ   0x0629             (1343)     jnz   .BG_Loop1
                                        (1344) 
0646: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0648: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
064A: 9D A5    CALL  _LCD_Control       (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
064C: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\dualadcint.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   DUALADCINT.asm
                                        (0004) ;;  Version: 2.30, Updated on 2012/3/2 at 9:14:34
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC Interrupt Service Routines.
                                        (0008) ;;
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "DUALADC.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export _DUALADC_CNT1_ISR
                                        (0022) export _DUALADC_CNT2_ISR
                                        (0023) export _DUALADC_PWM16_ISR
                                        (0024) 
                                        (0025) export  DUALADC_cCounter1U
                                        (0026) export  DUALADC_cCounter2U
                                        (0027) export _DUALADC_iResult1
                                        (0028) export  DUALADC_iResult1
                                        (0029) export _DUALADC_iResult2
                                        (0030) export  DUALADC_iResult2
                                        (0031) export _DUALADC_bfStatus
                                        (0032) export  DUALADC_bfStatus
                                        (0033) export  DUALADC_bSampC
                                        (0034) 
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM, REL, CON)
                                        (0040) 
                                        (0041)  DUALADC_cCounter1U:     BLK   1  ;The Upper byte of the Counter
                                        (0042)  DUALADC_cCounter2U:     BLK   1  ;The Upper byte of the Counter
                                        (0043) _DUALADC_iResult1:
                                        (0044)  DUALADC_iResult1:       BLK   2  ;A/D value
                                        (0045) _DUALADC_iResult2:
                                        (0046)  DUALADC_iResult2:       BLK   2  ;A/D value
                                        (0047) _DUALADC_bfStatus:
                                        (0048)  DUALADC_bfStatus:       BLK   1  ;Data Valid Flag
                                        (0049)  DUALADC_bSampC:         BLK   1  ;# of times to run A/D
                                        (0050) 
                                        (0051) 
                                        (0052) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0053) ;---------------------------------------------------
                                        (0054) ; Insert your custom declarations below this banner
                                        (0055) ;---------------------------------------------------
                                        (0056) 
                                        (0057) ;------------------------
                                        (0058) ; Includes
                                        (0059) ;------------------------
                                        (0060) 
                                        (0061) 	
                                        (0062) ;------------------------
                                        (0063) ;  Constant Definitions
                                        (0064) ;------------------------
                                        (0065) 
                                        (0066) 
                                        (0067) ;------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;------------------------
                                        (0070) 
                                        (0071) 
                                        (0072) ;---------------------------------------------------
                                        (0073) ; Insert your custom declarations above this banner
                                        (0074) ;---------------------------------------------------
                                        (0075) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0076) 
                                        (0077) 
                                        (0078) ;-----------------------------------------------
                                        (0079) ;  EQUATES and TABLES
                                        (0080) ;-----------------------------------------------
                                        (0081) ; Constant Definitions
                                        (0082) LowByte:   equ 1
                                        (0083) HighByte:  equ 0
                                        (0084) 
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) 
                                        (0088) 
                                        (0089) .LITERAL
                                        (0090) DUALADCMaxNegX4Table:
                                        (0091) ; Bits  7    8    9   10   11   12   13
                                        (0092)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0093) 
                                        (0094) DUALADCMaxPosX4Table:
                                        (0095) IF (DUALADC_DATA_FORMAT)
                                        (0096) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0097)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0098) ELSE
                                        (0099) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0100)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0101) 
                                        (0102) ENDIF
                                        (0103) .ENDLITERAL
                                        (0104) 
                                        (0105) 
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) ;  FUNCTION NAME: _DUALADC_CNT1_ISR (Counter8 Interrupt)
                                        (0108) ;
                                        (0109) ;
                                        (0110) ;  DESCRIPTION:
                                        (0111) ;    Increment the upper (software) half on the counter whenever the
                                        (0112) ;    lower (hardware) half of the counter underflows.  This counter
                                        (0113) ;    should start out at the most negative value (0xFF).
                                        (0114) ;
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;
                                        (0117) _DUALADC_CNT1_ISR:
065B: 76 08    INC   [0x8]              (0118)    inc [DUALADC_cCounter1U]
                                        (0119)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0120)    ;---------------------------------------------------
                                        (0121)    ; Insert your custom assembly code below this banner
                                        (0122)    ;---------------------------------------------------
                                        (0123)    ;   NOTE: interrupt service routines must preserve
                                        (0124)    ;   the values of the A and X CPU registers.
                                        (0125)    
                                        (0126)    ;---------------------------------------------------
                                        (0127)    ; Insert your custom assembly code above this banner
                                        (0128)    ;---------------------------------------------------
                                        (0129)    
                                        (0130)    ;---------------------------------------------------
                                        (0131)    ; Insert a lcall to a C function below this banner
                                        (0132)    ; and un-comment the lines between these banners
                                        (0133)    ;---------------------------------------------------
                                        (0134)    
                                        (0135)    ;PRESERVE_CPU_CONTEXT
                                        (0136)    ;lcall _My_C_Function
                                        (0137)    ;RESTORE_CPU_CONTEXT
                                        (0138)    
                                        (0139)    ;---------------------------------------------------
                                        (0140)    ; Insert a lcall to a C function above this banner
                                        (0141)    ; and un-comment the lines between these banners
                                        (0142)    ;---------------------------------------------------
                                        (0143)    ;@PSoC_UserCode_END@ (Do not change this line.)
065D: 7E       RETI                     (0144)    reti
                                        (0145) 
                                        (0146) 
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148) ;  FUNCTION NAME: _DUALADC_CNT2_ISR (Counter8 Interrupt)
                                        (0149) ;
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;  Increment the upper (software) half on the counter whenever the
                                        (0153) ;  lower (hardware) half of the counter underflows.  This counter
                                        (0154) ;  should start out at the most negative value (0xFF).
                                        (0155) ;
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;
                                        (0158) _DUALADC_CNT2_ISR:
065E: 76 09    INC   [0x9]              (0159)    inc [DUALADC_cCounter2U]
                                        (0160)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0161)    ;---------------------------------------------------
                                        (0162)    ; Insert your custom assembly code below this banner
                                        (0163)    ;---------------------------------------------------
                                        (0164)    ;   NOTE: interrupt service routines must preserve
                                        (0165)    ;   the values of the A and X CPU registers.
                                        (0166)    
                                        (0167)    ;---------------------------------------------------
                                        (0168)    ; Insert your custom assembly code above this banner
                                        (0169)    ;---------------------------------------------------
                                        (0170)    
                                        (0171)    ;---------------------------------------------------
                                        (0172)    ; Insert a lcall to a C function below this banner
                                        (0173)    ; and un-comment the lines between these banners
                                        (0174)    ;---------------------------------------------------
                                        (0175)    
                                        (0176)    ;PRESERVE_CPU_CONTEXT
                                        (0177)    ;lcall _My_C_Function
                                        (0178)    ;RESTORE_CPU_CONTEXT
                                        (0179)    
                                        (0180)    ;---------------------------------------------------
                                        (0181)    ; Insert a lcall to a C function above this banner
                                        (0182)    ; and un-comment the lines between these banners
                                        (0183)    ;---------------------------------------------------
                                        (0184)    ;@PSoC_UserCode_END@ (Do not change this line.)
0660: 7E       RETI                     (0185)    reti
                                        (0186) 
                                        (0187) 
                                        (0188) ;-----------------------------------------------------------------------------
                                        (0189) ;  FUNCTION NAME: _DUALADC_PWM16_ISR  (PWM16 Interrupt)
                                        (0190) ;
                                        (0191) ;  DESCRIPTION:
                                        (0192) ;  This ISR is called when the ADC has completed and integrate cycle.
                                        (0193) ;  The ADC value is calculated and stored in a global location before
                                        (0194) ;  the end of the ISR.
                                        (0195) ;
                                        (0196) ;-----------------------------------------------------------------------------
                                        (0197) ;
                                        (0198) _DUALADC_PWM16_ISR:
0661: 41 23 FE AND   REG[0x23],0xFE     (0199)    and   reg[DUALADC_bCounter1_CR0], ~DUALADC_fDBLK_ENABLE ; Disable Counter
0664: 41 2F FE AND   REG[0x2F],0xFE     (0200)    and   reg[DUALADC_bCounter2_CR0], ~DUALADC_fDBLK_ENABLE ; Disable Counter
                                        (0201) IF DUALADC_NoAZ
0667: 43 82 20 OR    REG[0x82],0x20     (0202)    or    reg[DUALADC_bfADC1cr2], DUALADC_fAutoZero         ; Put Integrator in AutoZero
066A: 43 86 20 OR    REG[0x86],0x20     (0203)    or    reg[DUALADC_bfADC2cr2], DUALADC_fAutoZero         ; Put Integrator in AutoZero
                                        (0204) ENDIF
066D: 43 83 10 OR    REG[0x83],0x10     (0205)    or   reg[DUALADC_bfADC1cr3],DUALADC_fFSW0               ; Put Integrator in reset
0670: 43 87 10 OR    REG[0x87],0x10     (0206)    or   reg[DUALADC_bfADC2cr3],DUALADC_fFSW0               ; Put Integrator in reset
0673: 71 01    OR    F,0x1              
                                        (0207) 
                                        (0208)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0209)                                                            ; Make sure we didn't have a counter interrupt ready to fire
                                        (0210)    M8C_EnableGInt
0675: 40       NOP                      (0211)    nop                                                     ; Wait a couple cycles
0676: 70 FE    AND   F,0xFE             
                                        (0212)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
0678: 08       PUSH  A                  (0213)    push  A                                                 ; Save the Accumulator
                                        (0214) 
                                        (0215) 
                                        (0216)    ; Get ADC1 result
0679: 5D 20    MOV   A,REG[0x20]        (0217)    mov   A,reg[DUALADC_bCount1]                            ; Read counter value  (Bogus read puts value in Period register)
067B: 5D 22    MOV   A,REG[0x22]        (0218)    mov   A,reg[DUALADC_bCompare1]                          ; Read counter value
067D: 78       DEC   A                  (0219)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
067E: 73       CPL   A                  (0220)    cpl   A                                                 ; Invert the value
067F: D0 03    JNC   0x0683             (0221)    jnc   DUALADC_INT_CALCV1                                ; if carry, then inc MSB as well
0681: 76 08    INC   [0x8]              (0222)    inc   [DUALADC_cCounter1U]
                                        (0223) DUALADC_INT_CALCV1:
0683: 53 0B    MOV   [0xB],A            (0224)    mov   [(DUALADC_iResult1 + LowByte)],A                  ; Store LSB value
0685: 51 08    MOV   A,[0x8]            (0225)    mov   A, [DUALADC_cCounter1U]                           ; Store MSB from temp counter
0687: 53 0A    MOV   [0xA],A            (0226)    mov   [(DUALADC_iResult1 + HighByte)],A
                                        (0227) 
                                        (0228)    ; Get ADC2 result
0689: 5D 2C    MOV   A,REG[0x2C]        (0229)    mov   A,reg[DUALADC_bCount2]                            ; Read counter value  (Bogus read puts value in Period register)
068B: 5D 2E    MOV   A,REG[0x2E]        (0230)    mov   A,reg[DUALADC_bCompare2]                          ; Read counter value
068D: 78       DEC   A                  (0231)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
068E: 73       CPL   A                  (0232)    cpl   A                                                 ; Invert the value
068F: D0 03    JNC   0x0693             (0233)    jnc   DUALADC_INT_CALCV2                                ; if carry, then inc MSB as well
0691: 76 09    INC   [0x9]              (0234)    inc   [DUALADC_cCounter2U]
                                        (0235) DUALADC_INT_CALCV2:
0693: 53 0D    MOV   [0xD],A            (0236)    mov   [(DUALADC_iResult2 + LowByte)],A                  ; Store LSB value
0695: 51 09    MOV   A,[0x9]            (0237)    mov   A, [DUALADC_cCounter2U]                           ; Store MSB from temp counter
0697: 53 0C    MOV   [0xC],A            (0238)    mov   [(DUALADC_iResult2 + HighByte)],A
                                        (0239) 
                                        (0240)                                                            ; The new value has been stored,
                                        (0241)                                                            ; so get counters ready for next reading first.
0699: 62 21 FF MOV   REG[0x21],0xFF     (0242)    mov   reg[DUALADC_bPeriod1], ffh                        ; Initialize counter1 to FF - Set to overflow after 256 counts
069C: 62 2D FF MOV   REG[0x2D],0xFF     (0243)    mov   reg[DUALADC_bPeriod2], ffh                        ; Initialize counter2 to FF - Set to overflow after 256 counts
069F: 43 23 01 OR    REG[0x23],0x1      (0244)    or    reg[DUALADC_bCounter1_CR0],DUALADC_fDBLK_ENABLE   ; Enable Counter1
06A2: 43 2F 01 OR    REG[0x2F],0x1      (0245)    or    reg[DUALADC_bCounter2_CR0],DUALADC_fDBLK_ENABLE   ; Enable Counter2
                                        (0246) 
                                        (0247) 
                                        (0248) IF (DUALADC_DATA_FORMAT)                                   ; Only check for Negative numbers if SIGNED result
                                        (0249)    mov   A, [DUALADC_bfStatus]                             ; Get Status with Resolution
                                        (0250)    and   A, DUALADC_bRES_MASK                              ; Mask of resolution
                                        (0251)    index DUALADCMaxNegX4Table                              ; Get Maximum negative value from table
                                        (0252)    mov   [DUALADC_cCounter1U], A                           ; Place result back into MSB of counter
                                        (0253)    mov   [DUALADC_cCounter2U], A                           ; Place result back into MSB of counter
                                        (0254) ELSE
06A5: 55 08 00 MOV   [0x8],0x0          (0255)    mov   [DUALADC_cCounter1U], 00h                         ; Place result back into MSB of counter
06A8: 55 09 00 MOV   [0x9],0x0          (0256)    mov   [DUALADC_cCounter2U], 00h                         ; Place result back into MSB of counter
                                        (0257) ENDIF
                                        (0258) 
                                        (0259)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0260)    ;---------------------------------------------------
                                        (0261)    ; If the input is muxed with multiple inputs
                                        (0262)    ; this is a good place to change inputs.
                                        (0263)    ; Insert your custom code below this banner
                                        (0264)    ;---------------------------------------------------
                                        (0265)    ;   NOTE: interrupt service routines must preserve
                                        (0266)    ;   the values of the A and X CPU registers. At this
                                        (0267)    ;   point A has been preserved on the stack and will
                                        (0268)    ;   be restored before the return from interrupt.
                                        (0269)    ;   However, if you use the X register, you must
                                        (0270)    ;   preserve its value and restore it here.
                                        (0271) 
                                        (0272) 
                                        (0273)    ;---------------------------------------------------
                                        (0274)    ; Insert your custom code above this banner
                                        (0275)    ;---------------------------------------------------
                                        (0276)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0277) 
06AB: 41 83 EF AND   REG[0x83],0xEF     (0278)    and   reg[DUALADC_bfADC1cr3],~DUALADC_fFSW0             ; Take Integrator out of reset
06AE: 41 87 EF AND   REG[0x87],0xEF     (0279)    and   reg[DUALADC_bfADC2cr3],~DUALADC_fFSW0             ; Take Integrator out of reset
                                        (0280) IF DUALADC_NoAZ
06B1: 41 82 DF AND   REG[0x82],0xDF     (0281)    and   reg[DUALADC_bfADC1cr2],~DUALADC_fAutoZero         ; Take Integrator out of AutoZero
06B4: 41 86 DF AND   REG[0x86],0xDF     (0282)    and   reg[DUALADC_bfADC2cr2],~DUALADC_fAutoZero         ; Take Integrator out of AutoZero
                                        (0283) ENDIF
                                        (0284) 
                                        (0285) 
                                        (0286)    ;****************************************************************************
                                        (0287)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0288)    ;                          ; if stack space isn't at a premium.
                                        (0289)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0290)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0291)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0292)    ;        successful acquisition of the next byte.
                                        (0293)    ;****************************************************************************
                                        (0294) 
                                        (0295) ; ADC1
                                        (0296) IF (DUALADC_DATA_FORMAT)                         ; Only check for Negative numbers if SIGNED result
                                        (0297)                                                  ; Negative Overflow Check
                                        (0298)    tst   [(DUALADC_iResult1 + HighByte)],80h
                                        (0299)    jnz   DUALADC_NOT_2POVFL1
                                        (0300) 
                                        (0301) ENDIF
                                        (0302)                                                  ; Postive Overflow Check
                                        (0303)                                                  ; Get MSB of Max Positive value x4 + 1
06B7: 51 0E    MOV   A,[0xE]            (0304)    mov   A,[DUALADC_bfStatus]                    ; Get Status with Resolution
06B9: 21 0F    AND   A,0xF              (0305)    and   A,DUALADC_bRES_MASK                     ; Mask of resolution normalized to 0
06BB: FF 97    INDEX 0x0654             (0306)    index DUALADCMaxPosX4Table                    ; Get Maximum positive value x4 + 1 from table
06BD: 08       PUSH  A                  (0307)    push  A
06BE: 22 0A    AND   A,[0xA]            (0308)    and   A, [(DUALADC_iResult1 + HighByte)]
06C0: A0 0B    JZ    0x06CC             (0309)    jz    DUALADC_NOT_POVFL1
                                        (0310)                                                  ; Positive overflow, fix it - set to Max Positive + 1
06C2: 18       POP   A                  (0311)    pop   A
06C3: 11 01    SUB   A,0x1              (0312)    sub   A, 01h
                                        (0313)                                                  ; Force most positive * 4 into result
06C5: 53 0A    MOV   [0xA],A            (0314)    mov   [(DUALADC_iResult1 + HighByte)], A
06C7: 55 0B FF MOV   [0xB],0xFF         (0315)    mov   [(DUALADC_iResult1 + LowByte)], ffh
06CA: 80 02    JMP   0x06CD             (0316)    jmp   DUALADC_NOT_2POVFL1
                                        (0317) DUALADC_NOT_POVFL1:
06CC: 18       POP   A                  (0318)    pop   A
                                        (0319) 
                                        (0320) DUALADC_NOT_2POVFL1:
06CD: 68 0A    ASR   [0xA]              (0321)    asr   [(DUALADC_iResult1 + HighByte)]         ; Shift MSB and LSB right twice to divide by four
06CF: 6E 0B    RRC   [0xB]              (0322)    rrc   [(DUALADC_iResult1 + LowByte)]          ; Remember digital clock 4 times analog clock
06D1: 68 0A    ASR   [0xA]              (0323)    asr   [(DUALADC_iResult1 + HighByte)]
06D3: 6E 0B    RRC   [0xB]              (0324)    rrc   [(DUALADC_iResult1 + LowByte)]
                                        (0325) 
                                        (0326) ; ADC2
                                        (0327) IF (DUALADC_DATA_FORMAT)                         ; Only check for Negative numbers if SIGNED result
                                        (0328)                                                  ; Negative Overflow Check
                                        (0329)    tst   [(DUALADC_iResult2 + HighByte)],80h
                                        (0330)    jnz   DUALADC_NOT_2POVFL2
                                        (0331) 
                                        (0332) ENDIF
                                        (0333)                                                  ; Postive Overflow Check
                                        (0334)                                                  ; Get MSB of Max Positive value x4 + 1
06D5: 51 0E    MOV   A,[0xE]            (0335)    mov   A,[DUALADC_bfStatus]                    ; Get Status with Resolution
06D7: 21 0F    AND   A,0xF              (0336)    and   A,DUALADC_bRES_MASK                     ; Mask of resolution normalized to 0
06D9: FF 79    INDEX 0x0654             (0337)    index DUALADCMaxPosX4Table                    ; Get Maximum positive value x4 + 1 from table
06DB: 08       PUSH  A                  (0338)    push  A
06DC: 22 0C    AND   A,[0xC]            (0339)    and   A, [(DUALADC_iResult2 + HighByte)]
06DE: A0 0B    JZ    0x06EA             (0340)    jz    DUALADC_NOT_POVFL2
                                        (0341)                                                  ; Positive overflow, fix it - set to Max Positive + 1
06E0: 18       POP   A                  (0342)    pop   A
06E1: 11 01    SUB   A,0x1              (0343)    sub   A, 01h
                                        (0344)                                                  ; Force most positive * 4 into result
06E3: 53 0C    MOV   [0xC],A            (0345)    mov   [(DUALADC_iResult2 + HighByte)], A
06E5: 55 0D FF MOV   [0xD],0xFF         (0346)    mov   [(DUALADC_iResult2 + LowByte)], ffh
06E8: 80 02    JMP   0x06EB             (0347)    jmp   DUALADC_NOT_2POVFL2
                                        (0348) DUALADC_NOT_POVFL2:
06EA: 18       POP   A                  (0349)    pop   A
                                        (0350) 
                                        (0351) DUALADC_NOT_2POVFL2:
06EB: 68 0C    ASR   [0xC]              (0352)    asr   [(DUALADC_iResult2 + HighByte)]         ; Shift MSB and LSB right twice to divide by four
06ED: 6E 0D    RRC   [0xD]              (0353)    rrc   [(DUALADC_iResult2 + LowByte)]          ; Remember digital clock 4 times analog clock
06EF: 68 0C    ASR   [0xC]              (0354)    asr   [(DUALADC_iResult2 + HighByte)]
06F1: 6E 0D    RRC   [0xD]              (0355)    rrc   [(DUALADC_iResult2 + LowByte)]
                                        (0356) 
                                        (0357)    ;**********************************************
                                        (0358)    ; Data is ready at this point.
                                        (0359)    ; If processing Data at Interrupt level - add
                                        (0360)    ;     User Code to handle the data
                                        (0361)    ;**********************************************
                                        (0362)    ;@PSoC_UserCode_BODY_4@ (Do not change this line.)
                                        (0363)    ;---------------------------------------------------
                                        (0364)    ; Insert your custom code below this banner
                                        (0365)    ;---------------------------------------------------
                                        (0366)    ;   NOTE: interrupt service routines must preserve
                                        (0367)    ;   the values of the A and X CPU registers. At this
                                        (0368)    ;   point A has been preserved on the stack and wil
                                        (0369)    ;   be restored later. However, if you use X, be
                                        (0370)    ;   sure to take care of it yourself!
                                        (0371) 
                                        (0372) 
                                        (0373)    ;---------------------------------------------------
                                        (0374)    ; Insert your custom code above this banner
                                        (0375)    ;---------------------------------------------------
                                        (0376)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0377) 
06F3: 18       POP   A                  (0378)    pop   A                                       ; Restore A, not used any more
                                        (0379) 
06F4: 2E 0E 10 OR    [0xE],0x10         (0380)    or    [DUALADC_bfStatus],DUALADC_fDATA_READY  ; Set Data ready bit
                                        (0381) 
06F7: 47 0F FF TST   [0xF],0xFF         (0382)    tst   [DUALADC_bSampC], ffh                   ; If sample_counter == 0 -->> continuous data collection
06FA: A0 23    JZ    0x071E             (0383)    jz    DUALADC_END_PWM16_ISR
                                        (0384) 
06FC: 7A 0F    DEC   [0xF]              (0385)    dec   [DUALADC_bSampC]                        ; Dec sample counter and check for zero
06FE: B0 1F    JNZ   0x071E             (0386)    jnz   DUALADC_END_PWM16_ISR
                                        (0387) 
0700: 41 27 FE AND   REG[0x27],0xFE     (0388)    and   reg[DUALADC_fPWM_LSB_CR0], ~DUALADC_fDBLK_ENABLE      ; Disable the PWM
                                        (0389) 
0703: 41 23 FE AND   REG[0x23],0xFE     (0390)    and   reg[DUALADC_bCounter1_CR0], ~DUALADC_fDBLK_ENABLE           ; Disable the Counter
0706: 41 2F FE AND   REG[0x2F],0xFE     (0391)    and   reg[DUALADC_bCounter2_CR0], ~DUALADC_fDBLK_ENABLE           ; Disable the Counter
                                        (0392) 
                                        (0393) IF DUALADC_NoAZ
0709: 43 82 20 OR    REG[0x82],0x20     (0394)    or    reg[DUALADC_bfADC1cr2], DUALADC_fAutoZero             ; Put the Integrator into Autozero mode
070C: 43 86 20 OR    REG[0x86],0x20     (0395)    or    reg[DUALADC_bfADC2cr2], DUALADC_fAutoZero             ; Put the Integrator into Autozero mode
                                        (0396) ENDIF
                                        (0397) 
070F: 43 83 10 OR    REG[0x83],0x10     (0398)    or    reg[DUALADC_bfADC1cr3], DUALADC_fFSW0                 ; Put Integrator into reset
0712: 43 87 10 OR    REG[0x87],0x10     (0399)    or    reg[DUALADC_bfADC2cr3], DUALADC_fFSW0                 ; Put Integrator into reset
                                        (0400) 
0715: 41 E1 FB AND   REG[0xE1],0xFB     (0401)    and   reg[DUALADC_bfPWM16_INT_REG], ~DUALADC_bfPWM16_Mask      ; Disable interrupts
0718: 41 E1 FE AND   REG[0xE1],0xFE     (0402)    and   reg[DUALADC_bfCounter1_INT_REG], ~DUALADC_bfCounter1_Mask
071B: 41 E1 F7 AND   REG[0xE1],0xF7     (0403)    and   reg[DUALADC_bfCounter2_INT_REG], ~DUALADC_bfCounter2_Mask
                                        (0404) 
                                        (0405) DUALADC_END_PWM16_ISR:
071E: 7E       RETI                     (0406)    reti
                                        (0407) 
                                        (0408) DUALADC_APIINT_END:
FILE: lib\dualadc.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  DUALADC.asm
                                        (0004) ;;  Version: 2.30, Updated on 2012/3/2 at 9:14:34
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DualADC User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) include "DUALADC.inc"
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) 
                                        (0025) ;-----------------------------------------------
                                        (0026) ;  Global Symbols
                                        (0027) ;-----------------------------------------------
                                        (0028) 
                                        (0029) export  DUALADC_Start
                                        (0030) export _DUALADC_Start
                                        (0031) export  DUALADC_SetPower
                                        (0032) export _DUALADC_SetPower
                                        (0033) export  DUALADC_Stop
                                        (0034) export _DUALADC_Stop
                                        (0035) export  DUALADC_GetSamples
                                        (0036) export _DUALADC_GetSamples
                                        (0037) export  DUALADC_StopAD
                                        (0038) export _DUALADC_StopAD
                                        (0039) export  DUALADC_fIsData
                                        (0040) export _DUALADC_fIsData
                                        (0041) export  DUALADC_fIsDataAvailable
                                        (0042) export _DUALADC_fIsDataAvailable
                                        (0043) export  DUALADC_iGetData1
                                        (0044) export _DUALADC_iGetData1
                                        (0045) export  DUALADC_iGetData2
                                        (0046) export _DUALADC_iGetData2
                                        (0047) export  DUALADC_ClearFlag
                                        (0048) export _DUALADC_ClearFlag
                                        (0049) export  DUALADC_iGetData1ClearFlag
                                        (0050) export _DUALADC_iGetData1ClearFlag
                                        (0051) export  DUALADC_iGetData2ClearFlag
                                        (0052) export _DUALADC_iGetData2ClearFlag
                                        (0053) export  DUALADC_SetResolution
                                        (0054) export _DUALADC_SetResolution
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  EQUATES
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) ; Calctime parameters
                                        (0061) wCalcTime:     equ   DUALADC_bCALCTIME
                                        (0062) 
                                        (0063) ; Constants
                                        (0064) LowByte:       equ 1
                                        (0065) HighByte:      equ 0
                                        (0066) 
                                        (0067) AREA UserModules (ROM, REL)
                                        (0068) .SECTION
                                        (0069) ;-----------------------------------------------------------------------------
                                        (0070) ;  FUNCTION NAME: DUALADC_Start
                                        (0071) ;  FUNCTION NAME: DUALADC_SetPower
                                        (0072) ;
                                        (0073) ;  DESCRIPTION:
                                        (0074) ;  Applies power setting to the module's analog PSoc block.
                                        (0075) ;
                                        (0076) ;-----------------------------------------------------------------------------
                                        (0077) ;
                                        (0078) ;  ARGUMENTS:
                                        (0079) ;   A  Contains power level setting 0 to 3
                                        (0080) ;
                                        (0081) ;  RETURNS:  none
                                        (0082) ;
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;          
                                        (0090) ;    Currently only the page pointer registers listed below are modified: 
                                        (0091) ;          CUR_PP
                                        (0092) ;
                                        (0093) ;  THEORY of OPERATION or PROCEDURE:
                                        (0094) ;
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096)  DUALADC_Start:
                                        (0097) _DUALADC_Start:
                                        (0098)  DUALADC_SetPower:
                                        (0099) _DUALADC_SetPower:
                                        (0100)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0102)    RAM_SETPAGE_CUR >DUALADC_bfStatus
                                        (0103) 
071F: 21 03    AND   A,0x3              (0104)    and   A,DUALADC_bfPOWERMASK                       ; Mask only the valid power setting bits
0721: 4F       MOV   X,SP               (0105)    mov   X, SP                                       ; Get location of next location on stack
0722: 08       PUSH  A                  (0106)    push  A                                           ; Save power value on temp location
                                        (0107) 
                                        (0108)                                                      ; Set power for ADC1
0723: 5D 83    MOV   A,REG[0x83]        (0109)    mov   A, reg[DUALADC_bfADC1cr3]                   ; Get current value of ADC1cr3
0725: 21 FC    AND   A,0xFC             (0110)    and   A, ~DUALADC_bfPOWERMASK                     ; Mask off old power value
0727: 2B 00    OR    A,[X+0]            (0111)    or    A, [X]                                      ; OR in new power value
0729: 29 F0    OR    A,0xF0             (0112)    or    A, f0h                                      ; Make sure other register is set correctly
072B: 60 83    MOV   REG[0x83],A        (0113)    mov   reg[DUALADC_bfADC1cr3], A                   ; Reload CR with new power value
                                        (0114) 
                                        (0115)                                                      ; Set power for ADC2
072D: 5D 87    MOV   A,REG[0x87]        (0116)    mov   A, reg[DUALADC_bfADC2cr3]                   ; Get current value of ADC2cr3
072F: 21 FC    AND   A,0xFC             (0117)    and   A, ~DUALADC_bfPOWERMASK                     ; Mask off old power value
0731: 2B 00    OR    A,[X+0]            (0118)    or    A, [X]                                      ; OR in new power value
0733: 29 F0    OR    A,0xF0             (0119)    or    A, f0h                                      ; Make sure other register is set correctly
0735: 60 87    MOV   REG[0x87],A        (0120)    mov   reg[DUALADC_bfADC2cr3], A                   ; Reload CR with new power value
                                        (0121) 
0737: 49 82 01 TST   REG[0x82],0x1      (0122)    tst   reg[DUALADC_bfADC1cr2], DUALADC_fRES_SET
073A: A0 05    JZ    0x0740             (0123)    jz    .DoNotLoadRes
073C: 50 05    MOV   A,0x5              (0124)    mov   A,DUALADC_bNUMBITS - DUALADC_bMINRES                   ; get and set the resolution
073E: 53 0E    MOV   [0xE],A            (0125)    mov   [DUALADC_bfStatus], A              ; place it in the status variable
                                        (0126) .DoNotLoadRes:
                                        (0127) 
0740: 18       POP   A                  (0128)    pop   A                                           ; Restore the stack and power value
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0130)    RAM_EPILOGUE RAM_USE_CLASS_4
0741: 7F       RET                      (0131)    ret
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) .SECTION
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  FUNCTION NAME: DUALADC_Stop
                                        (0137) ;
                                        (0138) ;  DESCRIPTION:
                                        (0139) ;  Removes power from the module's analog PSoc blocks, but the digital
                                        (0140) ;  blocks keep on running.
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS: None
                                        (0145) ;
                                        (0146) ;  RETURNS:   NA
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS:
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155)  DUALADC_Stop:
                                        (0156) _DUALADC_Stop:
                                        (0157)    RAM_PROLOGUE RAM_USE_CLASS_1
0742: 41 83 FC AND   REG[0x83],0xFC     (0158)    and   reg[DUALADC_bfADC1cr3], ~DUALADC_bfPOWERMASK
0745: 41 87 FC AND   REG[0x87],0xFC     (0159)    and   reg[DUALADC_bfADC2cr3], ~DUALADC_bfPOWERMASK
                                        (0160)    RAM_EPILOGUE RAM_USE_CLASS_1
0748: 7F       RET                      (0161)    ret
                                        (0162) .ENDSECTION
                                        (0163) 
                                        (0164) .SECTION
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;  FUNCTION NAME: DUALADC_Get_Samples
                                        (0167) ;
                                        (0168) ;  DESCRIPTION:
                                        (0169) ;  Starts the A/D convertor and will place data is memory.  A flag
                                        (0170) ;  is set whenever a new data value is available.
                                        (0171) ;
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;
                                        (0174) ;  ARGUMENTS:
                                        (0175) ;  A  Number of samples to be taken.  A zero will cause the ADC to run
                                        (0176) ;     continuously.  A flag is set whenever a new data values are available.
                                        (0177) ;
                                        (0178) ;  RETURNS:  NA
                                        (0179) ;
                                        (0180) ;  SIDE EFFECTS:
                                        (0181) ;    The A and X registers may be modified by this or future implementations
                                        (0182) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0183) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0184) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0185) ;    functions.
                                        (0186) ;          
                                        (0187) ;    Currently only the page pointer registers listed below are modified: 
                                        (0188) ;          CUR_PP
                                        (0189) ;
                                        (0190)  DUALADC_GetSamples:
                                        (0191) _DUALADC_GetSamples:
                                        (0192)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0193)    RAM_SETPAGE_CUR >DUALADC_bSampC
0749: 53 0F    MOV   [0xF],A            (0194)    mov   [DUALADC_bSampC], A                               ; Store sample count
                                        (0195)                                                            ; Interrupts, Put A/D in reset
074B: 51 0E    MOV   A,[0xE]            (0196)    mov   A,[DUALADC_bfStatus]                              ; get and set the resolution
074D: 21 0F    AND   A,0xF              (0197)    and   A,DUALADC_bRES_MASK
074F: 01 07    ADD   A,0x7              (0198)    add   A,DUALADC_bMINRES
0751: 90 7A    CALL  _DUALADC_SetResolution(0199)    call  DUALADC_SetResolution
                                        (0200) 
                                        (0201) DUALADC_LoadMSBCounter:                                    ; The PWM has been setup by SetResolution, now set the upper
                                        (0202)                                                            ; counter which will be the same as the period.
                                        (0203)                                                            ; Reset MSB of counter to most negative value
                                        (0204) 
0753: 5D 2A    MOV   A,REG[0x2A]        (0205)    mov   A,reg[DUALADC_bPWM_IntTime_MSB]                   ; Get MSB of PWM and move it into RAM
0755: 53 08    MOV   [0x8],A            (0206)    mov   [DUALADC_cCounter1U], A                           ; Use counter as temp location
0757: 50 00    MOV   A,0x0              (0207)    mov   A, 00h                                            ; Load A with zero for the calculation
0759: 12 08    SUB   A,[0x8]            (0208)    sub   A, [DUALADC_cCounter1U]                           ; 0 - MSB_PWM = MSB_of_most_neg_value
075B: 67       ASR   A                  (0209)    asr   A                                                 ; Half the range (+ and -)
                                        (0210) IF (DUALADC_DATA_FORMAT)
                                        (0211)    mov   [DUALADC_cCounter1U], A                           ; Place result back into MSB of counter1
                                        (0212)    mov   [DUALADC_cCounter2U], A                           ; Place result back into MSB of counter2
                                        (0213) ELSE
075C: 55 08 00 MOV   [0x8],0x0          (0214)    mov   [DUALADC_cCounter1U], 00h                         ; Always start at zero for unsigned values for ADC1
075F: 55 09 00 MOV   [0x9],0x0          (0215)    mov   [DUALADC_cCounter2U], 00h                         ; Always start at zero for unsigned values for ADC2
                                        (0216) ENDIF
0762: 5D 26    MOV   A,REG[0x26]        (0217)    mov   A, reg[DUALADC_bPWM_IntTime_LSB]                  ; Dummy Read  - required do not remove
0764: 62 21 FF MOV   REG[0x21],0xFF     (0218)    mov   reg[DUALADC_bPeriod1], FFh                        ; Make sure counter1 starts at FF
0767: 62 2D FF MOV   REG[0x2D],0xFF     (0219)    mov   reg[DUALADC_bPeriod2], FFh                        ; Make sure counter2 starts at FF
                                        (0220) 
076A: 41 83 EF AND   REG[0x83],0xEF     (0221)    and   reg[DUALADC_bfADC1cr3],~DUALADC_fFSW0             ; Take Integrator out of reset
076D: 41 87 EF AND   REG[0x87],0xEF     (0222)    and   reg[DUALADC_bfADC2cr3],~DUALADC_fFSW0             ; Take Integrator out of reset
                                        (0223) IF DUALADC_NoAZ
0770: 41 82 DF AND   REG[0x82],0xDF     (0224)     and  reg[DUALADC_bfADC1cr2],~DUALADC_fAutoZero         ; Take Integrator out of AutoZero
0773: 41 86 DF AND   REG[0x86],0xDF     (0225)     and  reg[DUALADC_bfADC2cr2],~DUALADC_fAutoZero         ; Take Integrator out of AutoZero
                                        (0226) ENDIF
                                        (0227) 
0776: 43 23 05 OR    REG[0x23],0x5      (0228)    or    reg[DUALADC_bCounter1_CR0], (DUALADC_fDBLK_ENABLE|DUALADC_fPULSE_WIDE)   ; Enable the Counter
0779: 43 2F 05 OR    REG[0x2F],0x5      (0229)    or    reg[DUALADC_bCounter2_CR0], (DUALADC_fDBLK_ENABLE|DUALADC_fPULSE_WIDE)   ; Enable the Counter
077C: 43 27 01 OR    REG[0x27],0x1      (0230)    or    reg[DUALADC_fPWM_LSB_CR0], DUALADC_fDBLK_ENABLE          ; Enable PWM
077F: 43 E1 04 OR    REG[0xE1],0x4      (0231)    or    reg[DUALADC_bfPWM16_INT_REG], DUALADC_bfPWM16_Mask    ; Enable PWM and Counter interrupts
0782: 43 E1 01 OR    REG[0xE1],0x1      (0232)    or    reg[DUALADC_bfCounter1_INT_REG], DUALADC_bfCounter1_Mask
0785: 43 E1 08 OR    REG[0xE1],0x8      (0233)    or    reg[DUALADC_bfCounter2_INT_REG], DUALADC_bfCounter2_Mask
                                        (0234) 
0788: 7F       RET                      (0235)    ret
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0237) .ENDSECTION
                                        (0238) 
                                        (0239) .SECTION
                                        (0240) ;-----------------------------------------------------------------------------
                                        (0241) ;  FUNCTION NAME: DUALADC_StopAD
                                        (0242) ;
                                        (0243) ;  DESCRIPTION:
                                        (0244) ;  Completely shuts down the A/D is an orderly manner.  Both the
                                        (0245) ;  Timer and Counter are disabled and their interrupts are deactivated.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS:  None
                                        (0250) ;
                                        (0251) ;  RETURNS: NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;     The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  DUALADC_StopAD:
                                        (0261) _DUALADC_StopAD:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
0789: 41 27 FE AND   REG[0x27],0xFE     (0263)    and   reg[DUALADC_fPWM_LSB_CR0], ~DUALADC_fDBLK_ENABLE      ; Disable the PWM
                                        (0264) 
078C: 41 23 FE AND   REG[0x23],0xFE     (0265)    and   reg[DUALADC_bCounter1_CR0], ~DUALADC_fDBLK_ENABLE           ; Disable the Counter
078F: 41 2F FE AND   REG[0x2F],0xFE     (0266)    and   reg[DUALADC_bCounter2_CR0], ~DUALADC_fDBLK_ENABLE           ; Disable the Counter
                                        (0267) 
                                        (0268) IF DUALADC_NoAZ
0792: 43 82 20 OR    REG[0x82],0x20     (0269)    or    reg[DUALADC_bfADC1cr2], DUALADC_fAutoZero             ; Put the Integrator into Autozero mode
0795: 43 86 20 OR    REG[0x86],0x20     (0270)    or    reg[DUALADC_bfADC2cr2], DUALADC_fAutoZero             ; Put the Integrator into Autozero mode
                                        (0271) ENDIF
                                        (0272) 
0798: 43 83 10 OR    REG[0x83],0x10     (0273)    or   reg[DUALADC_bfADC1cr3], DUALADC_fFSW0                  ; Put Integrator into reset
079B: 43 87 10 OR    REG[0x87],0x10     (0274)    or   reg[DUALADC_bfADC2cr3], DUALADC_fFSW0                  ; Put Integrator into reset
                                        (0275) 
079E: 08       PUSH  A                  (0276)    push A
079F: 41 E1 FB AND   REG[0xE1],0xFB     
07A2: 41 E1 FE AND   REG[0xE1],0xFE     
07A5: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0277)    M8C_DisableIntMask DUALADC_bfPWM16_INT_REG, DUALADC_bfPWM16_Mask      ; Disable interrupts
                                        (0278)    M8C_DisableIntMask DUALADC_bfCounter1_INT_REG, DUALADC_bfCounter1_Mask
                                        (0279)    M8C_DisableIntMask DUALADC_bfCounter2_INT_REG, DUALADC_bfCounter1_Mask
07A8: 18       POP   A                  (0280)    pop  A
                                        (0281)    
                                        (0282)    RAM_EPILOGUE RAM_USE_CLASS_1
07A9: 7F       RET                      (0283)    ret
                                        (0284) .ENDSECTION
                                        (0285) 
                                        (0286) .SECTION
                                        (0287) ;-----------------------------------------------------------------------------
                                        (0288) ;  FUNCTION NAME: DUALADC_fIsData
                                        (0289) ;  FUNCTION NAME: DUALADC_fIsDataAvailable
                                        (0290) ;
                                        (0291) ;  DESCRIPTION:
                                        (0292) ;  Returns the status of the A/D Data is set whenever a new data
                                        (0293) ;  value is available.
                                        (0294) ;
                                        (0295) ;-----------------------------------------------------------------------------
                                        (0296) ;
                                        (0297) ;  ARGUMENTS: None
                                        (0298) ;
                                        (0299) ;  RETURNS:
                                        (0300) ;  A  Returns data status  A == 0 no data available
                                        (0301) ;                          A != 0 data available
                                        (0302) ;
                                        (0303) ;  SIDE EFFECTS:
                                        (0304) ;    The A and X registers may be modified by this or future implementations
                                        (0305) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0306) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0307) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0308) ;    functions.
                                        (0309) ;          
                                        (0310) ;    Currently only the page pointer registers listed below are modified:
                                        (0311) ;          CUR_PP
                                        (0312) ;
                                        (0313)  DUALADC_fIsData:
                                        (0314) _DUALADC_fIsData:
                                        (0315)  DUALADC_fIsDataAvailable:
                                        (0316) _DUALADC_fIsDataAvailable:
                                        (0317)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0318)    RAM_SETPAGE_CUR >DUALADC_bfStatus
07AA: 51 0E    MOV   A,[0xE]            (0319)    mov   A, [DUALADC_bfStatus]                        ; Get status byte
07AC: 21 10    AND   A,0x10             (0320)    and   A, DUALADC_fDATA_READY                       ; Mask off other bits
                                        (0321)    RAM_EPILOGUE RAM_USE_CLASS_4
07AE: 7F       RET                      (0322)    ret
                                        (0323) .ENDSECTION
                                        (0324) 
                                        (0325) .SECTION
                                        (0326) ;-----------------------------------------------------------------------------
                                        (0327) ;  FUNCTION NAME: DUALADC_iGetData1ClearFlag
                                        (0328) ;  FUNCTION NAME: DUALADC_iGetData1
                                        (0329) ;
                                        (0330) ;  DESCRIPTION:
                                        (0331) ;  Returns the data from channel-1 of A/D.  Does not check if data is available.
                                        (0332) ;  iGetData1ClearFlag clears the result ready flag as well.
                                        (0333) ;
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;
                                        (0336) ;  ARGUMENTS: None
                                        (0337) ;
                                        (0338) ;  RETURNS:
                                        (0339) ;    A  Contains the LSB of the 16 bit result
                                        (0340) ;    X  Contains the MSB of the 16 bit result
                                        (0341) ;
                                        (0342) ;  SIDE EFFECTS:
                                        (0343) ;    The A and X registers may be modified by this or future implementations
                                        (0344) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0345) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0346) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0347) ;    functions.
                                        (0348) ;          
                                        (0349) ;    Currently only the page pointer registers listed below are modified:
                                        (0350) ;          CUR_PP
                                        (0351) ;
                                        (0352)  DUALADC_iGetData1ClearFlag:
                                        (0353) _DUALADC_iGetData1ClearFlag:
                                        (0354)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0355)    RAM_SETPAGE_CUR >DUALADC_iResult1 
07AF: 26 0E EF AND   [0xE],0xEF         (0356)    and   [DUALADC_bfStatus], ~DUALADC_fDATA_READY  ; Clear Data ready bit
07B2: 58 0A    MOV   X,[0xA]            (0357)    mov   X, [(DUALADC_iResult1 + HighByte)]
07B4: 51 0B    MOV   A,[0xB]            (0358)    mov   A, [(DUALADC_iResult1 + LowByte)]
                                        (0359)    RAM_EPILOGUE RAM_USE_CLASS_4
07B6: 7F       RET                      (0360)    ret
                                        (0361) 
                                        (0362)  DUALADC_iGetData1:
                                        (0363) _DUALADC_iGetData1:
                                        (0364)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0365)    RAM_SETPAGE_CUR >DUALADC_iResult1  
07B7: 58 0A    MOV   X,[0xA]            (0366)    mov   X, [(DUALADC_iResult1 + HighByte)]
07B9: 51 0B    MOV   A,[0xB]            (0367)    mov   A, [(DUALADC_iResult1 + LowByte)]
                                        (0368)    RAM_EPILOGUE RAM_USE_CLASS_4
07BB: 7F       RET                      (0369)    ret
                                        (0370) .ENDSECTION
                                        (0371) 
                                        (0372) .SECTION
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: DUALADC_iGetData2ClearFlag
                                        (0375) ;  FUNCTION NAME: DUALADC_iGetData2
                                        (0376) ;
                                        (0377) ;  DESCRIPTION:
                                        (0378) ;  Returns the data from channel-1 of A/D.  Does not check if data is available.
                                        (0379) ;  iGetData1ClearFlag clears the result ready flag as well.
                                        (0380) ;
                                        (0381) ;-----------------------------------------------------------------------------
                                        (0382) ;
                                        (0383) ;  ARGUMENTS: None
                                        (0384) ;
                                        (0385) ;  RETURNS:
                                        (0386) ;    A  Contains the LSB of the 16 bit result
                                        (0387) ;    X  Contains the MSB of the 16 bit result
                                        (0388) ;
                                        (0389) ;  SIDE EFFECTS:
                                        (0390) ;    The A and X registers may be modified by this or future implementations
                                        (0391) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0392) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0393) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0394) ;    functions.
                                        (0395) ;          
                                        (0396) ;    Currently only the page pointer registers listed below are modified:
                                        (0397) ;          CUR_PP
                                        (0398) ;
                                        (0399)  DUALADC_iGetData2ClearFlag:
                                        (0400) _DUALADC_iGetData2ClearFlag:
                                        (0401)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0402)    RAM_SETPAGE_CUR >DUALADC_iResult1  
07BC: 26 0E EF AND   [0xE],0xEF         (0403)    and   [DUALADC_bfStatus], ~DUALADC_fDATA_READY  ; Clear Data ready bit
07BF: 58 0C    MOV   X,[0xC]            (0404)    mov   X, [(DUALADC_iResult2 + HighByte)]
07C1: 51 0D    MOV   A,[0xD]            (0405)    mov   A, [(DUALADC_iResult2 + LowByte)]
                                        (0406)    RAM_EPILOGUE RAM_USE_CLASS_4
07C3: 7F       RET                      (0407)    ret
                                        (0408) 
                                        (0409)  DUALADC_iGetData2:
                                        (0410) _DUALADC_iGetData2:
                                        (0411)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0412)    RAM_SETPAGE_CUR >DUALADC_iResult1  
07C4: 58 0C    MOV   X,[0xC]            (0413)    mov   X, [(DUALADC_iResult2 + HighByte)]
07C6: 51 0D    MOV   A,[0xD]            (0414)    mov   A, [(DUALADC_iResult2 + LowByte)]
                                        (0415)    RAM_EPILOGUE RAM_USE_CLASS_4
07C8: 7F       RET                      (0416)    ret
                                        (0417) .ENDSECTION
                                        (0418) 
                                        (0419) .SECTION
                                        (0420) ;-----------------------------------------------------------------------------
                                        (0421) ;  FUNCTION NAME: DUALADC_ClearFlag
                                        (0422) ;
                                        (0423) ;  DESCRIPTION:
                                        (0424) ;  Clears the data ready flag.
                                        (0425) ;
                                        (0426) ;-----------------------------------------------------------------------------
                                        (0427) ;
                                        (0428) ;  ARGUMENTS: None
                                        (0429) ;
                                        (0430) ;  RETURNS: NA
                                        (0431) ;
                                        (0432) ;  SIDE EFFECTS:
                                        (0433) ;    The A and X registers may be modified by this or future implementations
                                        (0434) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0435) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0436) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0437) ;    functions.
                                        (0438) ;          
                                        (0439) ;    Currently only the page pointer registers listed below are modified:
                                        (0440) ;          CUR_PP
                                        (0441) ;
                                        (0442)  DUALADC_ClearFlag:
                                        (0443) _DUALADC_ClearFlag:
                                        (0444)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0445)    RAM_SETPAGE_CUR >DUALADC_bfStatus  
07C9: 26 0E EF AND   [0xE],0xEF         (0446)    and   [DUALADC_bfStatus], ~DUALADC_fDATA_READY  ; Clear Data ready bit
                                        (0447)    RAM_EPILOGUE RAM_USE_CLASS_4
07CC: 7F       RET                      (0448)    ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: DUALADC_SetResolution
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;  Sets A/D resolution between 7 and 13 bits.
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;  A  Passes the number of bits of resolution, between 7 and 13.
                                        (0462) ;
                                        (0463) ;  RETURNS:  NA
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475) ;    This function halts the PWM and the counter to sync the A/D , but
                                        (0476) ;    does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0477) ;    should be called. It sets the resolution for both channels at the
                                        (0478) ;    same time.
                                        (0479) ;
                                        (0480)  DUALADC_SetResolution:
                                        (0481) _DUALADC_SetResolution:
                                        (0482)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0483)    RAM_SETPAGE_CUR >DUALADC_bfStatus  
                                        (0484) 
07CD: 41 82 FE AND   REG[0x82],0xFE     (0485)    and   reg[DUALADC_bfADC1cr2], ~DUALADC_fRES_SET
                                        (0486)    
07D0: 9F B7    CALL  _DUALADC_StopAD    (0487)    call  DUALADC_StopAD                            ; Stop the A/D if it is running
07D2: 55 0E 00 MOV   [0xE],0x0          (0488)    mov   [DUALADC_bfStatus], 00h                   ; and clear status and old resolution
                                        (0489) 
                                        (0490)                                                    ; Check for resolution to be within min and max values
07D5: 39 07    CMP   A,0x7              (0491)    cmp   A,DUALADC_bMINRES                         ; Check low end of resolution
07D7: D0 05    JNC   0x07DD             (0492)    jnc   DUALADC_CHECKHI
07D9: 50 07    MOV   A,0x7              (0493)    mov   A,DUALADC_bMINRES                         ; Too low - load legal low value
07DB: 80 07    JMP   0x07E3             (0494)    jmp   DUALADC_RES_OK
                                        (0495) 
                                        (0496) DUALADC_CHECKHI:                                   ; Check high end of resolution
07DD: 39 0D    CMP   A,0xD              (0497)    cmp   A,DUALADC_bMAXRES
07DF: C0 03    JC    0x07E3             (0498)    jc    DUALADC_RES_OK
07E1: 50 0D    MOV   A,0xD              (0499)    mov   A,DUALADC_bMAXRES                         ; Too high - load legal Max value
                                        (0500) 
                                        (0501) DUALADC_RES_OK:
                                        (0502)                                                    ; Calculate compare value for the PWM which
                                        (0503)                                                    ; computes the integrate time
07E3: 11 07    SUB   A,0x7              (0504)    sub   A, DUALADC_bMINRES                        ; Normalize with min resolution
07E5: 2C 0E    OR    [0xE],A            (0505)    or    [DUALADC_bfStatus], A
                                        (0506)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0507)                                                    ; is running 4x so 128*4=512 or 0x0200
07E7: 01 01    ADD   A,0x1              (0508)    add   A,01h                                     ; The MSB is 02h.
07E9: 5C       MOV   X,A                (0509)    mov   X,A
07EA: 50 01    MOV   A,0x1              (0510)    mov   A,01h
                                        (0511) 
                                        (0512) DUALADC_CALC_INTTIME:                              ; Now shift the MSB left for every bit of resolution of min (7).
07EC: 64       ASL   A                  (0513)    asl   A
07ED: 79       DEC   X                  (0514)    dec   X
07EE: BF FD    JNZ   0x07EC             (0515)    jnz   DUALADC_CALC_INTTIME
                                        (0516) 
                                        (0517) DUALADC_LOAD_INTTIME:                              ; Load compare value and Calc time into registers
                                        (0518)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
07F0: 62 26 00 MOV   REG[0x26],0x0      (0519)    mov   reg[DUALADC_bPWM_IntTime_LSB], 00h
07F3: 60 2A    MOV   REG[0x2A],A        (0520)    mov   reg[DUALADC_bPWM_IntTime_MSB], A
                                        (0521) 
                                        (0522)                                                    ; Load the CalcTime into the PWM Period
07F5: 62 25 01 MOV   REG[0x25],0x1      (0523)    mov   reg[DUALADC_bPWM_Period_LSB], <wCalcTime
07F8: 01 00    ADD   A,0x0              (0524)    add   A, >wCalcTime
07FA: 60 29    MOV   REG[0x29],A        (0525)    mov   reg[DUALADC_bPWM_Period_MSB],A
                                        (0526)    RAM_EPILOGUE RAM_USE_CLASS_4
07FC: 7F       RET                      (0527)    ret
                                        (0528) .ENDSECTION
                                        (0529) 
                                        (0530) ; End of File DUALADC.asm
FILE: H:\Hobby\PROGRA~1\PSOCPR~1\ACCELE~1\ACCELE~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        																// Part specific constants and macros
(0006) #include "PSoCAPI.h"    																// PSoC API definitions for all User Modules
(0007) 
(0008) int Position_X_Achse = 0x00;
(0009) int Position_Y_Achse = 0x00;
(0010) 
(0011) void main(void)
(0012) {
(0013) 	M8C_EnableGInt; 
__UserModules_end|__text_start|_main|_main:
    07FD: 71 01    OR    F,0x1
(0014) 	LCD_Start();                  														// LCD initialisieren
    07FF: 10       PUSH  X
    0800: 7C 04 98 LCALL _LCD_Init|LCD_Start|_LCD_Start|LCD_Init
(0015) 	PGA_X_Achse_Start(PGA_X_Achse_MEDPOWER);											// PGA für X-Achse starten
    0803: 50 02    MOV   A,0x2
    0805: 7C 03 63 LCALL PGA_X_Achse_Start|_PGA_X_Achse_SetPower|PGA_X_Achse_SetPower|_PGA_X_Achse_Start
(0016) 	PGA_Y_Achse_Start(PGA_Y_Achse_MEDPOWER);											// PGA für Y-Achse starten
    0808: 50 02    MOV   A,0x2
    080A: 7C 03 2F LCALL _PGA_Y_Achse_SetPower|PGA_Y_Achse_Start|_PGA_Y_Achse_Start|PGA_Y_Achse_SetPower
(0017) 	DUALADC_Start(DUALADC_HIGHPOWER);     												// ADC starten
    080D: 50 03    MOV   A,0x3
    080F: 7C 07 1F LCALL _DUALADC_Start|_DUALADC_SetPower|DUALADC_SetPower|DUALADC_Start
(0018)    	DUALADC_SetResolution(10);            												// Auflösung setzen
    0812: 50 0A    MOV   A,0xA
    0814: 7C 07 CD LCALL _DUALADC_SetResolution
(0019)    	DUALADC_GetSamples(0);                												// ADC auf permanente Wandlung stellen
    0817: 50 00    MOV   A,0x0
    0819: 7C 07 49 LCALL _DUALADC_GetSamples
    081C: 20       POP   X
    081D: 80 62    JMP   0x0880
(0020) 
(0021) 	while(1)
(0022) 	{
(0023)     	while(DUALADC_fIsDataAvailable() == 0);  										// Warten bis Daten bereit sind
    081F: 10       PUSH  X
    0820: 7C 07 AA LCALL DUALADC_fIsData|DUALADC_fIsDataAvailable|_DUALADC_fIsData|_DUALADC_fIsDataAvailable
    0823: 20       POP   X
    0824: 39 00    CMP   A,0x0
    0826: AF F8    JZ    0x081F
(0024)     		Position_X_Achse = DUALADC_iGetData2();          						 
    0828: 10       PUSH  X
    0829: 7C 07 C4 LCALL _DUALADC_iGetData2
    082C: 5A 04    MOV   [__r0],X
    082E: 20       POP   X
    082F: 53 01    MOV   [Position_X_Achse+1],A
    0831: 5F 00 04 MOV   [Position_X_Achse],[__r0]
(0025)     		Position_Y_Achse = DUALADC_iGetData1ClearFlag(); 						
    0834: 10       PUSH  X
    0835: 7C 07 AF LCALL _DUALADC_iGetData1ClearFlag
    0838: 5A 04    MOV   [__r0],X
    083A: 20       POP   X
    083B: 53 03    MOV   [Position_Y_Achse+1],A
    083D: 5F 02 04 MOV   [Position_Y_Achse],[__r0]
(0026) 	
(0027) 			LCD_Position(0,0);            
    0840: 10       PUSH  X
    0841: 50 00    MOV   A,0x0
    0843: 57 00    MOV   X,0x0
    0845: 7C 05 08 LCALL _LCD_Position
(0028)    			LCD_PrCString("X-Achse:");  
    0848: 50 01    MOV   A,0x1
    084A: 08       PUSH  A
    084B: 50 58    MOV   A,0x58
    084D: 5C       MOV   X,A
    084E: 18       POP   A
    084F: 7C 03 97 LCALL _LCD_PrCString
(0029) 			LCD_Position(2,0);   
    0852: 57 00    MOV   X,0x0
    0854: 50 02    MOV   A,0x2
    0856: 7C 05 08 LCALL _LCD_Position
(0030) 			LCD_PrCString("Y-Achse");  
    0859: 50 01    MOV   A,0x1
    085B: 08       PUSH  A
    085C: 50 50    MOV   A,0x50
    085E: 5C       MOV   X,A
    085F: 18       POP   A
    0860: 7C 03 97 LCALL _LCD_PrCString
(0031) 			LCD_Position(1,0);     
    0863: 57 00    MOV   X,0x0
    0865: 50 01    MOV   A,0x1
    0867: 7C 05 08 LCALL _LCD_Position
(0032)    			LCD_PrHexInt(Position_X_Achse); 
    086A: 58 00    MOV   X,[Position_X_Achse]
    086C: 51 01    MOV   A,[Position_X_Achse+1]
    086E: 7C 03 CC LCALL _LCD_PrHexInt
(0033) 			LCD_Position(3,0);            
    0871: 57 00    MOV   X,0x0
    0873: 50 03    MOV   A,0x3
    0875: 7C 05 08 LCALL _LCD_Position
(0034)    			LCD_PrHexInt(Position_Y_Achse); 
    0878: 58 02    MOV   X,[Position_Y_Achse]
    087A: 51 03    MOV   A,[Position_Y_Achse+1]
    087C: 7C 03 CC LCALL _LCD_PrHexInt
    087F: 20       POP   X
(0035) 	}
    0880: 8F 9E    JMP   0x081F
(0036) }
    0882: 8F FF    JMP   0x0882
