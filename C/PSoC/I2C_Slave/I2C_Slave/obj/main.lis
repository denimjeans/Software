 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _Wert::
 0000 96                .byte 150
 0001                   .dbfile I:\ASUSWE~1\UPLOAD~1\Hobby\PROGRA~1\PSOCPR~1\I2C_SL~1\I2C_SL~1\main.c
 0001                   .dbsym e Wert _Wert c
                        .area data(ram, con, rel)
 0000                   .dbfile I:\ASUSWE~1\UPLOAD~1\Hobby\PROGRA~1\PSOCPR~1\I2C_SL~1\I2C_SL~1\main.c
                        .area text(rom, con, rel)
 0000                   .dbfile I:\ASUSWE~1\UPLOAD~1\Hobby\PROGRA~1\PSOCPR~1\I2C_SL~1\I2C_SL~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 15
 0000           ; //----------------------------------------------------------------------------
 0000           ; // C main line
 0000           ; //----------------------------------------------------------------------------
 0000           ; 
 0000           ; #include <m8c.h>                                                                                                                              // Part specific constants and macros
 0000           ; #include "PSoCAPI.h"                                                                                                                          // PSoC API definitions for all User Modules
 0000           ; 
 0000           ; // Variablen
 0000           ; char Wert = 150;
 0000           ; 
 0000           ; // Funktionen
 0000           ; void I2C_Init(void);
 0000           ; 
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 16
 0000           ;       M8C_EnableGInt; 
 0000 7101                      or  F, 01h
 0002           
 0002                   .dbline 17
 0002           ;       LCD_Start();                                                                                                                                    // LCD Modul aktivieren
 0002 10                push X
 0003 7C0000            xcall _LCD_Start
 0006                   .dbline 19
 0006           ;       
 0006           ;       LCD_Position(0,0); 
 0006 5000              mov A,0
 0008 5700              mov X,0
 000A 7C0000            xcall _LCD_Position
 000D                   .dbline 20
 000D           ;       LCD_PrCString("PSoC I2C Slave");
 000D 5006              mov A,>L2
 000F 08                push A
 0010 5006              mov A,<L2
 0012 5C                mov X,A
 0013 18                pop A
 0014 7C0000            xcall _LCD_PrCString
 0017                   .dbline 22
 0017           ;       
 0017           ;       EzI2Cs_SetRamBuffer(1, 1, (char *)&Wert);                                                                               // I²C Buffer setzen, 1 Byte Größe, 1 Byte Schreib/Lesbar
 0017 5000              mov A,>_Wert
 0019 08                push A
 001A 5000              mov A,<_Wert
 001C 08                push A
 001D 5001              mov A,1
 001F 08                push A
 0020 08                push A
 0021 7C0000            xcall _EzI2Cs_SetRamBuffer
 0024 38FC              add SP,-4
 0026 20                pop X
 0027                   .dbline 24
 0027           ;       
 0027           ;       I2C_Init();
 0027 9035              xcall _I2C_Init
 0029 8030              xjmp L4
 002B           L3:
 002B                   .dbline 27
 002B           ;       
 002B           ;       while(1)
 002B           ;       {
 002B                   .dbline 28
 002B           ;               LCD_Position(1,0); 
 002B 10                push X
 002C 5700              mov X,0
 002E 5001              mov A,1
 0030 7C0000            xcall _LCD_Position
 0033                   .dbline 29
 0033           ;               LCD_PrCString("Wert:");
 0033 5000              mov A,>L6
 0035 08                push A
 0036 5000              mov A,<L6
 0038 5C                mov X,A
 0039 18                pop A
 003A 7C0000            xcall _LCD_PrCString
 003D                   .dbline 30
 003D           ;               LCD_Position(2,0);
 003D 5700              mov X,0
 003F 5002              mov A,2
 0041 7C0000            xcall _LCD_Position
 0044 20                pop X
 0045                   .dbline 31
 0045           ;               LCD_PrHexInt(Wert);
 0045 62D000            mov REG[0xd0],>_Wert
 0048 5100              mov A,[_Wert]
 004A 62D000            mov REG[0xd0],>__r0
 004D 5300              mov [__r1],A
 004F 10                push X
 0050 5000              mov A,0
 0052 08                push A
 0053 5100              mov A,[__r1]
 0055 20                pop X
 0056 7C0000            xcall _LCD_PrHexInt
 0059 20                pop X
 005A                   .dbline 32
 005A           ;       }
 005A           L4:
 005A                   .dbline 26
 005A 8FD0              xjmp L3
 005C           X0:
 005C                   .dbline -2
 005C           L1:
 005C                   .dbline 0 ; func end
 005C 8FFF              jmp .
 005E                   .dbend
 005E                   .dbfunc e I2C_Init _I2C_Init fV
 005E           _I2C_Init::
 005E                   .dbline -1
 005E                   .dbline 36
 005E           ; }
 005E           ; 
 005E           ; void I2C_Init(void)
 005E           ; {
 005E                   .dbline 37
 005E           ;       EzI2Cs_Start();                                                                                                                                 // I²C Modul starten
 005E 10                push X
 005F 7C0000            xcall _EzI2Cs_Start
 0062                   .dbline 38
 0062           ;       EzI2Cs_EnableInt();                                                                                                                             // I²C Interrupts aktivieren
 0062 7C0000            xcall _EzI2Cs_EnableInt
 0065 20                pop X
 0066                   .dbline -2
 0066           L7:
 0066                   .dbline 0 ; func end
 0066 7F                ret
 0067                   .dbend
                        .area lit(rom, con, rel, lit)
 0000           L6:
 0000 576572743A00      .byte 'W,'e,'r,'t,58,0
 0006           L2:
 0006 50536F432049324320536C61766500    .byte 'P,'S,'o,'C,32,'I,50,'C,32,'S,'l,'a,'v,'e,0
