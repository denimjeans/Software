FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#892 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.21
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C24x90 microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2010. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0068) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0069) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0070) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0071) ; bytes on the stack which are otherwise required for the return address. If
                                        (0072) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0073) ; release, the C compiler automatically places an infinite loop at the end
                                        (0074) ; of main, rather than a return instruction.)
                                        (0075) ;
                                        (0076) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0077) 
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ; Interrupt Vector Table
                                        (0081) ;-----------------------------------------------------------------------------
                                        (0082) ;
                                        (0083) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0084) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0085) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0086) ; vector jump targets are modified automatically according to the user
                                        (0087) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0088) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0089) ; configuration files. If you need to hard code a vector, update the
                                        (0090) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0091) ; of this file.
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) 
                                        (0094)     AREA TOP (ROM, ABS, CON)
                                        (0095) 
                                        (0096)     org   0                        ;Reset Interrupt Vector
                                        (0097) IF	(TOOLCHAIN & HITECH)
                                        (0098) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0099) ELSE
0000: 80 67    JMP   0x0068             (0100)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0101) ENDIF
                                        (0102) 
                                        (0103)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0104)     halt                           ;Stop execution if power falls too low
                                        (0105) 
                                        (0106)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0107)     // call	void_handler
0008: 7E       RETI                     (0108)     reti
                                        (0109) 
                                        (0110)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0111)     // call	void_handler
000C: 7E       RETI                     (0112)     reti
                                        (0113) 
                                        (0114)     org   18h                      ;VC3 Interrupt Vector
                                        (0115)     // call	void_handler
0018: 7E       RETI                     (0116)     reti
                                        (0117) 
                                        (0118)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0119)     // call	void_handler
001C: 7E       RETI                     (0120)     reti
                                        (0121) 
                                        (0122)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0123)     // call	void_handler
0020: 7E       RETI                     (0124)     reti
                                        (0125) 
                                        (0126)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 0E B8 LJMP  _Timer16_ISR       (0127)     ljmp	_Timer16_ISR
0027: 7E       RETI                     (0128)     reti
                                        (0129) 
                                        (0130)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0131)     // call	void_handler
0028: 7E       RETI                     (0132)     reti
                                        (0133) 
                                        (0134)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0135)     // call	void_handler
002C: 7E       RETI                     (0136)     reti
                                        (0137) 
                                        (0138)     org   40h                      ;USB Reset Interrupt Vector
0040: 7D 10 01 LJMP  _USBFS_RESET_ISR   (0139)     ljmp	_USBFS_RESET_ISR
0043: 7E       RETI                     (0140)     reti
                                        (0141) 
                                        (0142)     org   44h                      ;USB SOF Interrupt Vector
0044: 7D 10 30 LJMP  _USBFS_SOF_ISR     (0143)     ljmp	_USBFS_SOF_ISR
0047: 7E       RETI                     (0144)     reti
                                        (0145) 
                                        (0146)     org   48h                      ;USB EP0 Interrupt Vector
0048: 7D 07 A6 LJMP  _USBFS_EP0_ISR     (0147)     ljmp	_USBFS_EP0_ISR
004B: 7E       RETI                     (0148)     reti
                                        (0149) 
                                        (0150)     org   4Ch                      ;USB EP1 Interrupt Vector
004C: 7D 0F C5 LJMP  _USBFS_EP1_ISR     (0151)     ljmp	_USBFS_EP1_ISR
004F: 7E       RETI                     (0152)     reti
                                        (0153) 
                                        (0154)     org   50h                      ;USB EP2 Interrupt Vector
0050: 7D 0F D4 LJMP  _USBFS_EP2_ISR     (0155)     ljmp	_USBFS_EP2_ISR
0053: 7E       RETI                     (0156)     reti
                                        (0157) 
                                        (0158)     org   54h                      ;USB EP3 Interrupt Vector
0054: 7D 0F E3 LJMP  _USBFS_EP3_ISR     (0159)     ljmp	_USBFS_EP3_ISR
0057: 7E       RETI                     (0160)     reti
                                        (0161) 
                                        (0162)     org   58h                      ;USB EP4 Interrupt Vector
0058: 7D 0F F2 LJMP  _USBFS_EP4_ISR     (0163)     ljmp	_USBFS_EP4_ISR
005B: 7E       RETI                     (0164)     reti
                                        (0165) 
                                        (0166)     org   5Ch                      ;USB Wakeup Interrupt Vector
005C: 7D 10 31 LJMP  _USBFS_WAKEUP_ISR  (0167)     ljmp	_USBFS_WAKEUP_ISR
005F: 7E       RETI                     (0168)     reti
                                        (0169) 
                                        (0170)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0171)     // call	void_handler
0060: 7E       RETI                     (0172)     reti
                                        (0173) 
                                        (0174)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0175)     // call	void_handler
0064: 7E       RETI                     (0176)     reti
0068: 71 10    OR    F,0x10             
                                        (0177) 
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  Start of Execution.
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0182) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0183) ;
                                        (0184) 
                                        (0185) IF	(TOOLCHAIN & HITECH)
                                        (0186)  	AREA PD_startup(CODE, REL, CON)
                                        (0187) ELSE
                                        (0188)     org 68h
                                        (0189) ENDIF
                                        (0190) __Start:
                                        (0191) 
                                        (0192)     ; initialize values for voltage stabilization, if required,
                                        (0193)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0194)     ; least for now. 
                                        (0195)     ;
                                        (0196)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0197)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 07 MOV   REG[0xE3],0x7      (0198)     mov   reg[VLT_CR], LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0199)     M8C_SetBank0
                                        (0200) 
                                        (0201)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0202)     mov   A, 20h
0074: 28       ROMX                     (0203)     romx
0075: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0204)     ; %45%20%46%46% End workaround
                                        (0205) 	
                                        (0206) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0207) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0208)     M8C_EnableWatchDog
                                        (0209) ENDIF
                                        (0210) 
0078: 41 FE FB AND   REG[0xFE],0xFB     (0211)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0212) 
                                        (0213)     ;---------------------------
                                        (0214)     ; Set up the Temporary stack
                                        (0215)     ;---------------------------
                                        (0216)     ; A temporary stack is set up for the SSC instructions.
                                        (0217)     ; The real stack start will be assigned later.
                                        (0218)     ;
                                        (0219) _stack_start:          equ 80h
007B: 50 80    MOV   A,0x80             (0220)     mov   A, _stack_start          ; Set top of stack to end of used RAM
007D: 4E       SWAP  SP,A               (0221)     swap  SP, A                    ; This is only temporary if going to LMM
007E: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0222) 
                                        (0223)     ;------------------------
                                        (0224)     ; Set Power-related Trim 
                                        (0225)     ;------------------------
                                        (0226) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0227) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0228) 
                                        (0229)   IF ( AGND_BYPASS )
                                        (0230)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0231)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0232)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0233)     ; value using the proper trim values.
                                        (0234)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0235)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0236)   ENDIF
                                        (0237) ELSE
                                        (0238) 	; 3.3V operation trim codes
                                        (0239) 	; Set the IMO and Bandgap trims for 3v operation
                                        (0240)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGN_BYPASS_JUST
                                        (0241) 	
                                        (0242) 	; Set the IMO Gain Trim for 3v operation
                                        (0243) 	M8SSC_SetTableIMOGainTrim 2, SSCTBL2_TRIM_IMO_GAIN_3V
                                        (0244) 
                                        (0245) ENDIF ; 3.3 Volt Operation
                                        (0246) 
0081: 55 F8 00 MOV   [Zeit+172],0x0     (0247)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0084: 55 F9 00 MOV   [Zeit+173],0x0     (0248)     mov  [bSSC_KEYSP], 0
0087: 71 10    OR    F,0x10             
                                        (0249) 				
                                        (0250)     ;---------------------------------------
                                        (0251)     ; Initialize Crystal Oscillator and PLL
                                        (0252)     ;---------------------------------------
                                        (0253) 
                                        (0254)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0255)     M8C_SetBank1
0089: 62 E0 02 MOV   REG[0xE0],0x2      (0256)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
008C: 70 EF    AND   F,0xEF             
008E: 62 E3 38 MOV   REG[0xE3],0x38     
0091: 62 D1 03 MOV   REG[0xD1],0x3      
                                        (0257)     M8C_SetBank0
                                        (0258)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0259) 
                                        (0260)     ;------------------------------------------------------- 
                                        (0261)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0262)     ;-------------------------------------------------------
                                        (0263)  
                                        (0264)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0265) IF (SYSCLK_SOURCE)
                                        (0266)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register  
                                        (0267) ENDIF 
                                        (0268)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0269) 
                                        (0270) 
                                        (0271) 
                                        (0272) IF	(TOOLCHAIN & HITECH)
                                        (0273)     ;---------------------------------------------
                                        (0274)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0275)     ;---------------------------------------------
                                        (0276) 	global		__Lstackps
                                        (0277) 	mov     a,low __Lstackps
                                        (0278) 	swap    a,sp
                                        (0279) 
                                        (0280) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0281)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0282)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0283)     RAM_SETPAGE_CUR 0
                                        (0284)     RAM_SETPAGE_MVW 0
                                        (0285)     RAM_SETPAGE_MVR 0
                                        (0286)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0287)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0288)     ELSE
                                        (0289)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0290)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0291) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0292) ELSE
                                        (0293)     ;---------------------------------------------
                                        (0294)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0295)     ;---------------------------------------------
                                        (0296) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0297)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
0094: 50 00    MOV   A,0x0              (0298)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
0096: 4E       SWAP  SP,A               (0299)     swap  A, SP
0097: 62 D3 03 MOV   REG[0xD3],0x3      
009A: 62 D0 00 MOV   REG[0xD0],0x0      
009D: 62 D5 00 MOV   REG[0xD5],0x0      
00A0: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0300)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0301)     RAM_SETPAGE_CUR 0
                                        (0302)     RAM_SETPAGE_MVW 0
                                        (0303)     RAM_SETPAGE_MVR 0
                                        (0304) 
                                        (0305)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00A3: 71 C0    OR    F,0xC0             (0306)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0307)   ELSE
                                        (0308)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0309)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0310) ELSE
                                        (0311)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0312)     swap  SP, A
                                        (0313) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0314) ENDIF ;	TOOLCHAIN
                                        (0315) 
                                        (0316)     ;------------------------
                                        (0317)     ; Close CT leakage path.
                                        (0318)     ;------------------------
00A5: 62 71 05 MOV   REG[0x71],0x5      (0319)     mov   reg[ACB00CR0], 05h
00A8: 62 75 05 MOV   REG[0x75],0x5      (0320)     mov   reg[ACB01CR0], 05h
                                        (0321) 
                                        (0322)     ;-------------------------
                                        (0323)     ; Load Base Configuration
                                        (0324)     ;-------------------------
                                        (0325)     ; Load global parameter settings and load the user modules in the
                                        (0326)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0327)     ; to minimize start up time; (2) We may still need to play with the
                                        (0328)     ; Sleep Timer.
                                        (0329)     ;
00AB: 7C 04 45 LCALL 0x0445             (0330)     lcall LoadConfigInit
00AE: 71 10    OR    F,0x10             
                                        (0331) 	M8C_SetBank1
00B0: 41 E7 3F AND   REG[0xE7],0x3F     (0332) 	and  reg[DEC_CR1], 0x3F
00B3: 43 E7 80 OR    REG[0xE7],0x80     (0333) 	or   reg[DEC_CR1], 0x80
00B6: 70 EF    AND   F,0xEF             
                                        (0334) 	M8C_SetBank0
                                        (0335)     ;-----------------------------------
                                        (0336)     ; Initialize C Run-Time Environment
                                        (0337)     ;-----------------------------------
                                        (0338) IF ( C_LANGUAGE_SUPPORT )
                                        (0339) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0340)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0341)     mov  [__r0],<__bss_start
                                        (0342) BssLoop:
                                        (0343)     cmp  [__r0],<__bss_end
                                        (0344)     jz   BssDone
                                        (0345)     mvi  [__r0],A
                                        (0346)     jmp  BssLoop
                                        (0347) BssDone:
                                        (0348)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0349)     mov  X,<__idata_start
                                        (0350)     mov  [__r0],<__data_start
                                        (0351) IDataLoop:
                                        (0352)     cmp  [__r0],<__data_end
                                        (0353)     jz   C_RTE_Done
                                        (0354)     push A
                                        (0355)     romx
                                        (0356)     mvi  [__r0],A
                                        (0357)     pop  A
                                        (0358)     inc  X
                                        (0359)     adc  A,0
                                        (0360)     jmp  IDataLoop
                                        (0361) 
                                        (0362) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0363) 
                                        (0364) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00B8: 62 D0 00 MOV   REG[0xD0],0x0      (0365)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0366)                                        ; to use the Virtual Register page.
                                        (0367) 
                                        (0368)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0369)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0370)     ; text segment and may have been relocated by the Code Compressor.
                                        (0371)     ;
00BB: 50 03    MOV   A,0x3              (0372)     mov   A, >__pXIData                ; Get the address of the flash
00BD: 57 5E    MOV   X,0x5E             (0373)     mov   X, <__pXIData                ;   pointer to the xidata area.
00BF: 08       PUSH  A                  (0374)     push  A
00C0: 28       ROMX                     (0375)     romx                               ; get the MSB of xidata's address
00C1: 53 4B    MOV   [__r0],A           (0376)     mov   [__r0], A
00C3: 18       POP   A                  (0377)     pop   A
00C4: 75       INC   X                  (0378)     inc   X
00C5: 09 00    ADC   A,0x0              (0379)     adc   A, 0
00C7: 28       ROMX                     (0380)     romx                               ; get the LSB of xidata's address
00C8: 4B       SWAP  A,X                (0381)     swap  A, X
00C9: 51 4B    MOV   A,[__r0]           (0382)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0383)                                        ;   XIData structure list in flash
00CB: 80 04    JMP   0x00D0             (0384)     jmp   .AccessStruct
                                        (0385) 
                                        (0386)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0387)     ; values of C variables. Each structure contains 3 member elements.
                                        (0388)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0389)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0390)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0391)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0392)     ; value in the second member element, an unsigned byte:
                                        (0393)     ; (1) If the value of the second element is non-zero, it represents
                                        (0394)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0395)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0396)     ; the bytes are copied to the block of RAM.
                                        (0397)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0398)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0399)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0400) 
                                        (0401) .AccessNextStructLoop:
00CD: 75       INC   X                  (0402)     inc   X                            ; pXIData++
00CE: 09 00    ADC   A,0x0              (0403)     adc   A, 0
00D0: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0404) .AccessStruct:                         ; Entry point for first block
                                        (0405)     ;
                                        (0406)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0407)     ;
                                        (0408)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D3: 08       PUSH  A                  (0409)     push  A
00D4: 28       ROMX                     (0410)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D5: 60 D5    MOV   REG[0xD5],A        (0411)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D7: 74       INC   A                  (0412)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00D8: A0 4B    JZ    0x0124             (0413)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DA: 18       POP   A                  (0414)     pop   A                            ; restore pXIData to [A,X]
00DB: 75       INC   X                  (0415)     inc   X                            ; pXIData++
00DC: 09 00    ADC   A,0x0              (0416)     adc   A, 0
00DE: 08       PUSH  A                  (0417)     push  A
00DF: 28       ROMX                     (0418)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E0: 53 4B    MOV   [__r0],A           (0419)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E2: 18       POP   A                  (0420)     pop   A                            ; restore pXIData to [A,X]
00E3: 75       INC   X                  (0421)     inc   X                            ; pXIData++ (point to size)
00E4: 09 00    ADC   A,0x0              (0422)     adc   A, 0
00E6: 08       PUSH  A                  (0423)     push  A
00E7: 28       ROMX                     (0424)     romx                               ; Get the size (CPU.A <- *pXIData)
00E8: A0 1C    JZ    0x0105             (0425)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EA: 53 4A    MOV   [__r1],A           (0426)     mov   [__r1], A                    ;             else downcount in __r1
00EC: 18       POP   A                  (0427)     pop   A                            ; restore pXIData to [A,X]
                                        (0428) 
                                        (0429) .CopyNextByteLoop:
                                        (0430)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0431)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0432)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0433)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0434)     ;
00ED: 75       INC   X                  (0435)     inc   X                            ; pXIData++ (point to next data byte)
00EE: 09 00    ADC   A,0x0              (0436)     adc   A, 0
00F0: 08       PUSH  A                  (0437)     push  A
00F1: 28       ROMX                     (0438)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F2: 3F 4B    MVI   [__r0],A           (0439)     mvi   [__r0], A                    ; Transfer the data to RAM
00F4: 47 4B FF TST   [__r0],0xFF        (0440)     tst   [__r0], 0xff                 ; Check for page crossing
00F7: B0 06    JNZ   0x00FE             (0441)     jnz   .CopyLoopTail                ;   No crossing, keep going
00F9: 5D D5    MOV   A,REG[0xD5]        (0442)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FB: 74       INC   A                  (0443)     inc   A
00FC: 60 D5    MOV   REG[0xD5],A        (0444)     mov   reg[ MVW_PP], A
                                        (0445) .CopyLoopTail:
00FE: 18       POP   A                  (0446)     pop   A                            ; restore pXIData to [A,X]
00FF: 7A 4A    DEC   [__r1]             (0447)     dec   [__r1]                       ; End of this array in flash?
0101: BF EB    JNZ   0x00ED             (0448)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0103: 8F C9    JMP   0x00CD             (0449)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0450) 
                                        (0451) .ClearRAMBlockToZero:
0105: 18       POP   A                  (0452)     pop   A                            ; restore pXIData to [A,X]
0106: 75       INC   X                  (0453)     inc   X                            ; pXIData++ (point to next data byte)
0107: 09 00    ADC   A,0x0              (0454)     adc   A, 0
0109: 08       PUSH  A                  (0455)     push  A
010A: 28       ROMX                     (0456)     romx                               ; Get the run length (CPU.A <- *pXIData)
010B: 53 4A    MOV   [__r1],A           (0457)     mov   [__r1], A                    ; Initialize downcounter
010D: 50 00    MOV   A,0x0              (0458)     mov   A, 0                         ; Initialize source data
                                        (0459) 
                                        (0460) .ClearRAMBlockLoop:
                                        (0461)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0462)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0463)     ;
010F: 3F 4B    MVI   [__r0],A           (0464)     mvi   [__r0], A                    ; Clear a byte
0111: 47 4B FF TST   [__r0],0xFF        (0465)     tst   [__r0], 0xff                 ; Check for page crossing
0114: B0 08    JNZ   0x011D             (0466)     jnz   .ClearLoopTail               ;   No crossing, keep going
0116: 5D D5    MOV   A,REG[0xD5]        (0467)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0118: 74       INC   A                  (0468)     inc   A
0119: 60 D5    MOV   REG[0xD5],A        (0469)     mov   reg[ MVW_PP], A
011B: 50 00    MOV   A,0x0              (0470)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0471) .ClearLoopTail:
011D: 7A 4A    DEC   [__r1]             (0472)     dec   [__r1]                       ; Was this the last byte?
011F: BF EF    JNZ   0x010F             (0473)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0121: 18       POP   A                  (0474)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0122: 8F AA    JMP   0x00CD             (0475)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0476) 
                                        (0477) .C_RTE_WrapUp:
0124: 18       POP   A                  (0478)     pop   A                            ; balance stack
0125: 71 10    OR    F,0x10             
                                        (0479) 
                                        (0480) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0481) 
                                        (0482) C_RTE_Done:
                                        (0483) 
                                        (0484) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0485) 
                                        (0486) 
                                        (0487)     ;-------------------------------
                                        (0488)     ; Set Power-On Reset (POR) Level
                                        (0489)     ;-------------------------------
                                        (0490) 
                                        (0491)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0492)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0493)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0494)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0495)     ;  lead to corruption of PSoC flash.
                                        (0496) 
                                        (0497)     M8C_SetBank1
                                        (0498) 
                                        (0499) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
                                        (0500)     or   reg[VLT_CR], VLT_CR_POR_LOW           ;   Yes, change to midpoint trip
                                        (0501) ELSE										   ; 5V Operation
                                        (0502)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
0127: 43 E3 00 OR    REG[0xE3],0x0      (0503)     or   reg[VLT_CR], VLT_CR_POR_LOW           ;         No, change to midpoint trip
012A: 70 EF    AND   F,0xEF             
                                        (0504)   ELSE ; 24HMz                                 ;
                                        (0505)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
                                        (0506)   ENDIF ; 24MHz
                                        (0507) ENDIF ; 3.3V Operation
                                        (0508) 
                                        (0509)     M8C_SetBank0
                                        (0510) 
                                        (0511)     ;----------------------------
                                        (0512)     ; Wrap up and invoke "main"
                                        (0513)     ;----------------------------
                                        (0514) 
                                        (0515)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0516)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0517)     ;
012C: 62 E0 00 MOV   REG[0xE0],0x0      (0518)     mov  reg[INT_MSK0],0
012F: 71 10    OR    F,0x10             
                                        (0519) 
                                        (0520)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0521)     ;
                                        (0522)     M8C_SetBank1
0131: 62 E0 00 MOV   REG[0xE0],0x0      (0523)     mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0134: 70 EF    AND   F,0xEF             
                                        (0524)     M8C_SetBank0
                                        (0525) 
                                        (0526)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0527)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0528)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0529)     ;
0136: 62 E2 00 MOV   REG[0xE2],0x0      (0530)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0531)                                    ; have been set during the boot process.
                                        (0532) IF	(TOOLCHAIN & HITECH)
                                        (0533) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0534) ELSE
                                        (0535) IF ENABLE_LJMP_TO_MAIN
                                        (0536)     ljmp  _main                    ; goto main (no return)
                                        (0537) ELSE
0139: 7C 0F 1C LCALL __UserModules_end|_main|__text_start|_main(0538)     lcall _main                    ; call main
                                        (0539) .Exit:
013C: 8F FF    JMP   0x013C             (0540)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0541) ENDIF
                                        (0542) ENDIF ; TOOLCHAIN
                                        (0543) 
                                        (0544)     ;---------------------------------
                                        (0545)     ; Library Access to Global Parms
                                        (0546)     ;---------------------------------
                                        (0547)     ;
                                        (0548)  bGetPowerSetting:
                                        (0549) _bGetPowerSetting:
                                        (0550)     ; Returns value of POWER_SETTING in the A register.
                                        (0551)     ; No inputs. No Side Effects.
                                        (0552)     ;
013E: 50 10    MOV   A,0x10             (0553)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
0140: 7F       RET                      (0554)     ret
                                        (0555) 
                                        (0556) IF	(TOOLCHAIN & HITECH)
                                        (0557) ELSE
                                        (0558)     ;---------------------------------
                                        (0559)     ; Order Critical RAM & ROM AREAs
                                        (0560)     ;---------------------------------
                                        (0561)     ;  'TOP' is all that has been defined so far...
                                        (0562) 
                                        (0563)     ;  ROM AREAs for C CONST, static & global items
                                        (0564)     ;
                                        (0565)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
                                        (0566)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
                                        (0567) __idata_start:
                                        (0568) 
                                        (0569)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
                                        (0570) __func_lit_start:
                                        (0571) 
                                        (0572) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0573)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0574)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0575)     ; relocated by the code compressor, but the text area may shrink and
                                        (0576)     ; that moves xidata around.
                                        (0577)     ;
                                        (0578) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0579) ENDIF
                                        (0580) 
                                        (0581)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0582)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0583) 
                                        (0584)     ; CODE segment for general use
                                        (0585)     ;
                                        (0586)     AREA text (ROM, REL, CON)
                                        (0587) __text_start:
                                        (0588) 
                                        (0589)     ; RAM area usage
                                        (0590)     ;
                                        (0591)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0592) __data_start:
                                        (0593) 
                                        (0594)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0595)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0596)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0597) __bss_start:
                                        (0598) 
                                        (0599) ENDIF ; TOOLCHAIN
                                        (0600) 
                                        (0601) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.2.2551
0360: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_Maus_Bank1
                                        (0006) export LoadConfigTBL_Maus_Bank0
                                        (0007) export LoadConfigTBL_Maus_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_Maus_Bank0:
                                        (0010) ;  Instance name Timer16, User Module Timer16
                                        (0011) ;       Instance name Timer16, Block Name TIMER16_LSB(DBB00)
                                        (0012) 	db		23h, 00h		;Timer16_CONTROL_LSB_REG(DBB00CR0)
                                        (0013) 	db		21h, 00h		;Timer16_PERIOD_LSB_REG(DBB00DR1)
                                        (0014) 	db		22h, 00h		;Timer16_COMPARE_LSB_REG(DBB00DR2)
                                        (0015) ;       Instance name Timer16, Block Name TIMER16_MSB(DBB01)
                                        (0016) 	db		27h, 04h		;Timer16_CONTROL_MSB_REG(DBB01CR0)
                                        (0017) 	db		25h, 80h		;Timer16_PERIOD_MSB_REG(DBB01DR1)
                                        (0018) 	db		26h, 00h		;Timer16_COMPARE_MSB_REG(DBB01DR2)
                                        (0019) ;  Instance name USBFS, User Module USBFS
                                        (0020) ;  Global Register values Bank 0
                                        (0021) 	db		60h, 08h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0022) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0023) 	db		61h, 00h		; AnalogMuxBusConfig register (AMUXCFG)
                                        (0024) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0025) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0026) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0027) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0028) 	db		56h, 00h		; Endpoint0Control register (EP0_CR)
                                        (0029) 	db		57h, 00h		; Endpoint0Count register (EP0_CNT)
                                        (0030) 	db		58h, 00h		; Endpoint0Data0 register (EP0_DR0)
                                        (0031) 	db		59h, 00h		; Endpoint0Data1 register (EP0_DR1)
                                        (0032) 	db		5ah, 00h		; Endpoint0Data2 register (EP0_DR2)
                                        (0033) 	db		5bh, 00h		; Endpoint0Data3 register (EP0_DR3)
                                        (0034) 	db		5ch, 00h		; Endpoint0Data4 register (EP0_DR4)
                                        (0035) 	db		5dh, 00h		; Endpoint0Data5 register (EP0_DR5)
                                        (0036) 	db		5eh, 00h		; Endpoint0Data6 register (EP0_DR6)
                                        (0037) 	db		5fh, 00h		; Endpoint0Data7 register (EP0_DR7)
                                        (0038) 	db		4fh, 00h		; Endpoint1Count0 register (EP1_CNT)
                                        (0039) 	db		4eh, 00h		; Endpoint1Count1 register (EP1_CNT1)
                                        (0040) 	db		51h, 00h		; Endpoint2Count0 register (EP2_CNT)
                                        (0041) 	db		50h, 00h		; Endpoint2Count1 register (EP2_CNT1)
                                        (0042) 	db		53h, 00h		; Endpoint3Count0 register (EP3_CNT)
                                        (0043) 	db		52h, 00h		; Endpoint3Count1 register (EP3_CNT1)
                                        (0044) 	db		55h, 00h		; Endpoint4Count0 register (EP4_CNT)
                                        (0045) 	db		54h, 00h		; Endpoint4Count1 register (EP4_CNT1)
                                        (0046) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0047) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0048) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0049) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0050) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0051) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0052) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0053) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0054) 	db		4ah, 00h		; USBControl_0 register (USB_CR0)
                                        (0055) 	db		4bh, 00h		; USBIOControl_0 register (USBIO_CR0)
                                        (0056) 	db		4ch, 00h		; USBIOControl_1 register (USBIO_CR1)
                                        (0057) 	db		ffh
                                        (0058) LoadConfigTBL_Maus_Bank1:
                                        (0059) ;  Instance name Timer16, User Module Timer16
                                        (0060) ;       Instance name Timer16, Block Name TIMER16_LSB(DBB00)
                                        (0061) 	db		20h, 00h		;Timer16_FUNC_LSB_REG(DBB00FN)
                                        (0062) 	db		21h, 07h		;Timer16_INPUT_LSB_REG(DBB00IN)
                                        (0063) 	db		22h, 40h		;Timer16_OUTPUT_LSB_REG(DBB00OU)
                                        (0064) ;       Instance name Timer16, Block Name TIMER16_MSB(DBB01)
                                        (0065) 	db		24h, 20h		;Timer16_FUNC_MSB_REG(DBB01FN)
                                        (0066) 	db		25h, 37h		;Timer16_INPUT_MSB_REG(DBB01IN)
                                        (0067) 	db		26h, 40h		;Timer16_OUTPUT_MSB_REG(DBB01OU)
                                        (0068) ;  Instance name USBFS, User Module USBFS
                                        (0069) ;  Global Register values Bank 1
                                        (0070) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0071) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0072) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0073) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0074) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0075) 	db		68h, 00h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0076) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0077) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0078) 	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
                                        (0079) 	db		65h, 00h		; ComparatorGlobalOutEn1 register (CMP_GO_EN1)
                                        (0080) 	db		fdh, 80h		; DAC_Control register (DAC_CR)
                                        (0081) 	db		c4h, 00h		; Endpoint1Control register (EP1_CR)
                                        (0082) 	db		c5h, 00h		; Endpoint2Control register (EP2_CR)
                                        (0083) 	db		c6h, 00h		; Endpoint3Control register (EP3_CR)
                                        (0084) 	db		c7h, 00h		; Endpoint4Control register (EP4_CR)
                                        (0085) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0086) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0087) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0088) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0089) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0090) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0091) 	db		dfh, f9h		; OscillatorControl_3 register (OSC_CR3)
                                        (0092) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0093) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0094) 	db		d8h, 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
                                        (0095) 	db		d9h, 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
                                        (0096) 	db		dah, 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
                                        (0097) 	db		dbh, 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
                                        (0098) 	db		ech, 00h		; Port_4_MUXBusCtrl register (MUX_CR4)
                                        (0099) 	db		edh, 00h		; Port_5_MUXBusCtrl register (MUX_CR5)
                                        (0100) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0101) 	db		c1h, 00h		; USBControl_1 register (USB_CR1)
                                        (0102) 	db		ffh
                                        (0103) AREA psoc_config(rom, rel)
                                        (0104) LoadConfigTBL_Maus_Ordered:
                                        (0105) ;  Ordered Global Register values
                                        (0106) 	M8C_SetBank0
0362: 62 00 00 MOV   REG[0x0],0x0       (0107) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0365: 71 10    OR    F,0x10             
                                        (0108) 	M8C_SetBank1
0367: 62 00 00 MOV   REG[0x0],0x0       (0109) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
036A: 62 01 FF MOV   REG[0x1],0xFF      (0110) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
036D: 70 EF    AND   F,0xEF             
                                        (0111) 	M8C_SetBank0
036F: 62 03 FF MOV   REG[0x3],0xFF      (0112) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0372: 62 02 00 MOV   REG[0x2],0x0       (0113) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0375: 71 10    OR    F,0x10             
                                        (0114) 	M8C_SetBank1
0377: 62 02 00 MOV   REG[0x2],0x0       (0115) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
037A: 62 03 00 MOV   REG[0x3],0x0       (0116) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
037D: 70 EF    AND   F,0xEF             
                                        (0117) 	M8C_SetBank0
037F: 62 01 00 MOV   REG[0x1],0x0       (0118) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0382: 62 04 00 MOV   REG[0x4],0x0       (0119) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0385: 71 10    OR    F,0x10             
                                        (0120) 	M8C_SetBank1
0387: 62 04 00 MOV   REG[0x4],0x0       (0121) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
038A: 62 05 EF MOV   REG[0x5],0xEF      (0122) 	mov	reg[05h], efh		; Port_1_DriveMode_1 register (PRT1DM1)
038D: 70 EF    AND   F,0xEF             
                                        (0123) 	M8C_SetBank0
038F: 62 07 EF MOV   REG[0x7],0xEF      (0124) 	mov	reg[07h], efh		; Port_1_DriveMode_2 register (PRT1DM2)
0392: 62 06 00 MOV   REG[0x6],0x0       (0125) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0395: 71 10    OR    F,0x10             
                                        (0126) 	M8C_SetBank1
0397: 62 06 00 MOV   REG[0x6],0x0       (0127) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
039A: 62 07 00 MOV   REG[0x7],0x0       (0128) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
039D: 70 EF    AND   F,0xEF             
                                        (0129) 	M8C_SetBank0
039F: 62 05 00 MOV   REG[0x5],0x0       (0130) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
03A2: 62 08 00 MOV   REG[0x8],0x0       (0131) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
03A5: 71 10    OR    F,0x10             
                                        (0132) 	M8C_SetBank1
03A7: 62 08 2F MOV   REG[0x8],0x2F      (0133) 	mov	reg[08h], 2fh		; Port_2_DriveMode_0 register (PRT2DM0)
03AA: 62 09 D0 MOV   REG[0x9],0xD0      (0134) 	mov	reg[09h], d0h		; Port_2_DriveMode_1 register (PRT2DM1)
03AD: 70 EF    AND   F,0xEF             
                                        (0135) 	M8C_SetBank0
03AF: 62 0B D0 MOV   REG[0xB],0xD0      (0136) 	mov	reg[0bh], d0h		; Port_2_DriveMode_2 register (PRT2DM2)
03B2: 62 0A 00 MOV   REG[0xA],0x0       (0137) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
03B5: 71 10    OR    F,0x10             
                                        (0138) 	M8C_SetBank1
03B7: 62 0A 00 MOV   REG[0xA],0x0       (0139) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
03BA: 62 0B 00 MOV   REG[0xB],0x0       (0140) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
03BD: 70 EF    AND   F,0xEF             
                                        (0141) 	M8C_SetBank0
03BF: 62 09 00 MOV   REG[0x9],0x0       (0142) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
03C2: 62 0C 00 MOV   REG[0xC],0x0       (0143) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
03C5: 71 10    OR    F,0x10             
                                        (0144) 	M8C_SetBank1
03C7: 62 0C 00 MOV   REG[0xC],0x0       (0145) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
03CA: 62 0D BF MOV   REG[0xD],0xBF      (0146) 	mov	reg[0dh], bfh		; Port_3_DriveMode_1 register (PRT3DM1)
03CD: 70 EF    AND   F,0xEF             
                                        (0147) 	M8C_SetBank0
03CF: 62 0F BF MOV   REG[0xF],0xBF      (0148) 	mov	reg[0fh], bfh		; Port_3_DriveMode_2 register (PRT3DM2)
03D2: 62 0E 00 MOV   REG[0xE],0x0       (0149) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
03D5: 71 10    OR    F,0x10             
                                        (0150) 	M8C_SetBank1
03D7: 62 0E 00 MOV   REG[0xE],0x0       (0151) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
03DA: 62 0F 00 MOV   REG[0xF],0x0       (0152) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
03DD: 70 EF    AND   F,0xEF             
                                        (0153) 	M8C_SetBank0
03DF: 62 0D 00 MOV   REG[0xD],0x0       (0154) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
03E2: 62 10 00 MOV   REG[0x10],0x0      (0155) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
03E5: 71 10    OR    F,0x10             
                                        (0156) 	M8C_SetBank1
03E7: 62 10 00 MOV   REG[0x10],0x0      (0157) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
03EA: 62 11 FF MOV   REG[0x11],0xFF     (0158) 	mov	reg[11h], ffh		; Port_4_DriveMode_1 register (PRT4DM1)
03ED: 70 EF    AND   F,0xEF             
                                        (0159) 	M8C_SetBank0
03EF: 62 13 FF MOV   REG[0x13],0xFF     (0160) 	mov	reg[13h], ffh		; Port_4_DriveMode_2 register (PRT4DM2)
03F2: 62 12 00 MOV   REG[0x12],0x0      (0161) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
03F5: 71 10    OR    F,0x10             
                                        (0162) 	M8C_SetBank1
03F7: 62 12 00 MOV   REG[0x12],0x0      (0163) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
03FA: 62 13 00 MOV   REG[0x13],0x0      (0164) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
03FD: 70 EF    AND   F,0xEF             
                                        (0165) 	M8C_SetBank0
03FF: 62 11 00 MOV   REG[0x11],0x0      (0166) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0402: 62 14 00 MOV   REG[0x14],0x0      (0167) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0405: 71 10    OR    F,0x10             
                                        (0168) 	M8C_SetBank1
0407: 62 14 00 MOV   REG[0x14],0x0      (0169) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
040A: 62 15 FF MOV   REG[0x15],0xFF     (0170) 	mov	reg[15h], ffh		; Port_5_DriveMode_1 register (PRT5DM1)
040D: 70 EF    AND   F,0xEF             
                                        (0171) 	M8C_SetBank0
040F: 62 17 FF MOV   REG[0x17],0xFF     (0172) 	mov	reg[17h], ffh		; Port_5_DriveMode_2 register (PRT5DM2)
0412: 62 16 00 MOV   REG[0x16],0x0      (0173) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0415: 71 10    OR    F,0x10             
                                        (0174) 	M8C_SetBank1
0417: 62 16 00 MOV   REG[0x16],0x0      (0175) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
041A: 62 17 00 MOV   REG[0x17],0x0      (0176) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
041D: 70 EF    AND   F,0xEF             
                                        (0177) 	M8C_SetBank0
041F: 62 15 00 MOV   REG[0x15],0x0      (0178) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0422: 62 1C 00 MOV   REG[0x1C],0x0      (0179) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0425: 71 10    OR    F,0x10             
                                        (0180) 	M8C_SetBank1
0427: 62 1C 00 MOV   REG[0x1C],0x0      (0181) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
042A: 62 1D 81 MOV   REG[0x1D],0x81     (0182) 	mov	reg[1dh], 81h		; Port_7_DriveMode_1 register (PRT7DM1)
042D: 70 EF    AND   F,0xEF             
                                        (0183) 	M8C_SetBank0
042F: 62 1F 81 MOV   REG[0x1F],0x81     (0184) 	mov	reg[1fh], 81h		; Port_7_DriveMode_2 register (PRT7DM2)
0432: 62 1E 00 MOV   REG[0x1E],0x0      (0185) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0435: 71 10    OR    F,0x10             
                                        (0186) 	M8C_SetBank1
0437: 62 1E 00 MOV   REG[0x1E],0x0      (0187) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
043A: 62 1F 00 MOV   REG[0x1F],0x0      (0188) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
043D: 70 EF    AND   F,0xEF             
                                        (0189) 	M8C_SetBank0
043F: 62 1D 00 MOV   REG[0x1D],0x0      (0190) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0442: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
0444: 7F       RET                      (0192) 	ret
                                        (0193) 
                                        (0194) 
                                        (0195) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_Maus
                                        (0026) export _LoadConfig_Maus
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) 
                                        (0030) 
                                        (0031) export NO_SHADOW
                                        (0032) export _NO_SHADOW
                                        (0033) 
                                        (0034) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0035) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0036) 
                                        (0037) AREA psoc_config(rom, rel)
                                        (0038) 
                                        (0039) ;---------------------------------------------------------------------------
                                        (0040) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0041) ;                  parameters handled by boot code, like CPU speed). This
                                        (0042) ;                  function can be called from user code, but typically it
                                        (0043) ;                  is only called from boot.
                                        (0044) ;
                                        (0045) ;       INPUTS: None.
                                        (0046) ;      RETURNS: Nothing.
                                        (0047) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0048) ;               In the large memory model currently only the page
                                        (0049) ;               pointer registers listed below are modified.  This does
                                        (0050) ;               not guarantee that in future implementations of this
                                        (0051) ;               function other page pointer registers will not be
                                        (0052) ;               modified.
                                        (0053) ;          
                                        (0054) ;               Page Pointer Registers Modified: 
                                        (0055) ;               CUR_PP
                                        (0056) ;
                                        (0057) _LoadConfigInit:
                                        (0058)  LoadConfigInit:
                                        (0059)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0060)     
0445: 55 46 00 MOV   [0x46],0x0         (0061) 	mov		[Port_1_Data_SHADE], 0h
                                        (0062) 
0448: 7C 04 4F LCALL 0x044F             (0063) 	lcall	LoadConfig_Maus
044B: 7C 03 60 LCALL 0x0360             (0064) 	lcall	LoadConfigTBL_Maus_Ordered
                                        (0065) 
                                        (0066) 
                                        (0067)     RAM_EPILOGUE RAM_USE_CLASS_4
044E: 7F       RET                      (0068)     ret
                                        (0069) 
                                        (0070) ;---------------------------------------------------------------------------
                                        (0071) ; Load Configuration Maus
                                        (0072) ;
                                        (0073) ;    Load configuration registers for Maus.
                                        (0074) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0075) ;
                                        (0076) ;       INPUTS: None.
                                        (0077) ;      RETURNS: Nothing.
                                        (0078) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0079) ;               modified as may the Page Pointer registers!
                                        (0080) ;               In the large memory model currently only the page
                                        (0081) ;               pointer registers listed below are modified.  This does
                                        (0082) ;               not guarantee that in future implementations of this
                                        (0083) ;               function other page pointer registers will not be
                                        (0084) ;               modified.
                                        (0085) ;          
                                        (0086) ;               Page Pointer Registers Modified: 
                                        (0087) ;               CUR_PP
                                        (0088) ;
                                        (0089) _LoadConfig_Maus:
                                        (0090)  LoadConfig_Maus:
                                        (0091)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0092) 
044F: 10       PUSH  X                  (0093) 	push	x
0450: 70 EF    AND   F,0xEF             
                                        (0094)     M8C_SetBank0                    ; Force bank 0
0452: 50 00    MOV   A,0x0              (0095)     mov     a, 0                    ; Specify bank 0
0454: 67       ASR   A                  (0096)     asr     a                       ; Store in carry flag
                                        (0097)                                     ; Load bank 0 table:
0455: 50 02    MOV   A,0x2              (0098)     mov     A, >LoadConfigTBL_Maus_Bank0
0457: 57 BC    MOV   X,0xBC             (0099)     mov     X, <LoadConfigTBL_Maus_Bank0
0459: 7C 04 6A LCALL 0x046A             (0100)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0101) 
045C: 50 01    MOV   A,0x1              (0102)     mov     a, 1                    ; Specify bank 1
045E: 67       ASR   A                  (0103)     asr     a                       ; Store in carry flag
                                        (0104)                                     ; Load bank 1 table:
045F: 50 03    MOV   A,0x3              (0105)     mov     A, >LoadConfigTBL_Maus_Bank1
0461: 57 11    MOV   X,0x11             (0106)     mov     X, <LoadConfigTBL_Maus_Bank1
0463: 7C 04 6A LCALL 0x046A             (0107)     lcall   LoadConfig              ; Load the bank 1 values
0466: 70 EF    AND   F,0xEF             
                                        (0108) 
                                        (0109)     M8C_SetBank0                    ; Force return to bank 0
0468: 20       POP   X                  (0110) 	pop		x
                                        (0111) 
                                        (0112)     RAM_EPILOGUE RAM_USE_CLASS_4
0469: 7F       RET                      (0113)     ret
                                        (0114) 
                                        (0115) 
                                        (0116) 
                                        (0117) 
                                        (0118) ;---------------------------------------------------------------------------
                                        (0119) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0120) ;              pairs. Terminate on address=0xFF.
                                        (0121) ;
                                        (0122) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0123) ;           Flag Register Carry bit encodes the Register Bank
                                        (0124) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0125) ;
                                        (0126) ;  RETURNS: nothing.
                                        (0127) ;
                                        (0128) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0129) ;                X-3 Temporary store for register address
                                        (0130) ;                X-2 LSB of config table address
                                        (0131) ;                X-1 MSB of config table address
                                        (0132) ;
                                        (0133) LoadConfig:
                                        (0134)     RAM_PROLOGUE RAM_USE_CLASS_2
046A: 38 02    ADD   SP,0x2             (0135)     add     SP, 2                   ; Set up local vars
046C: 10       PUSH  X                  (0136)     push    X                       ; Save config table address on stack
046D: 08       PUSH  A                  (0137)     push    A
046E: 4F       MOV   X,SP               (0138)     mov     X, SP
046F: 56 FC 00 MOV   [X-4],0x0          (0139)     mov     [X-4], 0                ; Set default Destination to Bank 0
0472: D0 04    JNC   0x0477             (0140)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0474: 56 FC 01 MOV   [X-4],0x1          (0141)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0142) .BankSelectSaved:
0477: 18       POP   A                  (0143)     pop     A
0478: 20       POP   X                  (0144)     pop     X
0479: 70 EF    AND   F,0xEF             
047B: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0145) 
                                        (0146) LoadConfigLp:
                                        (0147)     M8C_SetBank0                    ; Switch to bank 0
                                        (0148)     M8C_ClearWDT                    ; Clear the watchdog for long inits
047E: 10       PUSH  X                  (0149)     push    X                       ; Preserve the config table address
047F: 08       PUSH  A                  (0150)     push    A
0480: 28       ROMX                     (0151)     romx                            ; Load register address from table
0481: 39 FF    CMP   A,0xFF             (0152)     cmp     A, END_CONFIG_TABLE     ; End of table?
0483: A0 1F    JZ    0x04A3             (0153)     jz      EndLoadConfig           ;   Yes, go wrap it up
0485: 4F       MOV   X,SP               (0154)     mov     X, SP                   ;
0486: 48 FC 01 TST   [X-4],0x1          (0155)     tst     [X-4], 1                ; Loading IO Bank 1?
0489: A0 03    JZ    0x048D             (0156)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
048B: 71 10    OR    F,0x10             
                                        (0157)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0158) .IOBankNowSet:
048D: 54 FD    MOV   [X-3],A            (0159)     mov     [X-3], A                ; Stash the register address
048F: 18       POP   A                  (0160)     pop     A                       ; Retrieve the table address
0490: 20       POP   X                  (0161)     pop     X
0491: 75       INC   X                  (0162)     inc     X                       ; Advance to the data byte
0492: 09 00    ADC   A,0x0              (0163)     adc     A, 0
0494: 10       PUSH  X                  (0164)     push    X                       ; Save the config table address again
0495: 08       PUSH  A                  (0165)     push    A
0496: 28       ROMX                     (0166)     romx                            ; load config data from the table
0497: 4F       MOV   X,SP               (0167)     mov     X, SP                   ; retrieve the register address
0498: 59 FD    MOV   X,[X-3]            (0168)     mov     X, [X-3]
049A: 61 00    MOV   REG[X+0x0],A       (0169)     mov     reg[X], A               ; Configure the register
049C: 18       POP   A                  (0170)     pop     A                       ; retrieve the table address
049D: 20       POP   X                  (0171)     pop     X
049E: 75       INC   X                  (0172)     inc     X                       ; advance to next table entry
049F: 09 00    ADC   A,0x0              (0173)     adc     A, 0
04A1: 8F D7    JMP   0x0479             (0174)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0175) EndLoadConfig:
04A3: 38 FC    ADD   SP,0xFC            (0176)     add     SP, -4
04A5: 70 3F    AND   F,0x3F             
04A7: 71 C0    OR    F,0xC0             
                                        (0177)     RAM_EPILOGUE RAM_USE_CLASS_2
04A9: 7F       RET                      (0178)     ret
                                        (0179) 
                                        (0180) AREA InterruptRAM(ram, rel)
                                        (0181) 
                                        (0182) NO_SHADOW:
                                        (0183) _NO_SHADOW:
                                        (0184) ; write only register shadows
                                        (0185) _Port_1_Data_SHADE:
                                        (0186) Port_1_Data_SHADE:	BLK	1
                                        (0187) 
FILE: lib\usbfs_std.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: USBFS_std.asm
                                        (0004) ;;  Version: 1.90, Updated on 2012/3/2 at 9:15:35
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: USB Device User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "USBFS_macros.inc"
                                        (0024) include "USBFS.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) AREA bss (RAM, REL)
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ;  Constant Definitions
                                        (0034) ;-----------------------------------------------
                                        (0035) ;-----------------------------------------------
                                        (0036) ; Variable Allocation
                                        (0037) ;-----------------------------------------------
                                        (0038) 
                                        (0039) AREA UserModules (ROM, REL)
                                        (0040) 
                                        (0041) ;-----------------------------------------------------------------------------
                                        (0042) ;  FUNCTION NAME: USBFS_Not_Supported
                                        (0043) ;
                                        (0044) ;  DESCRIPTION:
                                        (0045) ;
                                        (0046) ;-----------------------------------------------------------------------------
                                        (0047) ;
                                        (0048) ;  ARGUMENTS:
                                        (0049) ;
                                        (0050) ;  RETURNS:
                                        (0051) ;
                                        (0052) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0053) ;
                                        (0054) ;  THEORY of OPERATION or PROCEDURE:
                                        (0055) ;
                                        (0056) ;-----------------------------------------------------------------------------
                                        (0057) 
                                        (0058) ; d2h_std_dev
                                        (0059) IF (USB_CB_SRC_d2h_std_dev_00 & USB_NOT_SUPPORTED)
                                        (0060) export  USBFS_CB_d2h_std_dev_00
                                        (0061) USBFS_CB_d2h_std_dev_00:
                                        (0062) ENDIF
                                        (0063) IF (USB_CB_SRC_d2h_std_dev_01 & USB_NOT_SUPPORTED)
                                        (0064) export  USBFS_CB_d2h_std_dev_01
                                        (0065) USBFS_CB_d2h_std_dev_01:
                                        (0066) ENDIF
                                        (0067) IF (USB_CB_SRC_d2h_std_dev_02 & USB_NOT_SUPPORTED)
                                        (0068) export  USBFS_CB_d2h_std_dev_02
                                        (0069) USBFS_CB_d2h_std_dev_02:
                                        (0070) ENDIF
                                        (0071) IF (USB_CB_SRC_d2h_std_dev_03 & USB_NOT_SUPPORTED)
                                        (0072) export  USBFS_CB_d2h_std_dev_03
                                        (0073) USBFS_CB_d2h_std_dev_03:
                                        (0074) ENDIF
                                        (0075) IF (USB_CB_SRC_d2h_std_dev_04 & USB_NOT_SUPPORTED)
                                        (0076) export  USBFS_CB_d2h_std_dev_04
                                        (0077) USBFS_CB_d2h_std_dev_04:
                                        (0078) ENDIF
                                        (0079) IF (USB_CB_SRC_d2h_std_dev_05 & USB_NOT_SUPPORTED)
                                        (0080) export  USBFS_CB_d2h_std_dev_05
                                        (0081) USBFS_CB_d2h_std_dev_05:
                                        (0082) ENDIF
                                        (0083) IF (USB_CB_SRC_d2h_std_dev_06 & USB_NOT_SUPPORTED)
                                        (0084) export  USBFS_CB_d2h_std_dev_06
                                        (0085) USBFS_CB_d2h_std_dev_06:
                                        (0086) ENDIF
                                        (0087) IF (USB_CB_SRC_d2h_std_dev_07 & USB_NOT_SUPPORTED)
                                        (0088) export  USBFS_CB_d2h_std_dev_07
                                        (0089) USBFS_CB_d2h_std_dev_07:
                                        (0090) ENDIF
                                        (0091) IF (USB_CB_SRC_d2h_std_dev_08 & USB_NOT_SUPPORTED)
                                        (0092) export  USBFS_CB_d2h_std_dev_08
                                        (0093) USBFS_CB_d2h_std_dev_08:
                                        (0094) ENDIF
                                        (0095) 
                                        (0096) ; h2d_std_dev
                                        (0097) IF (USB_CB_SRC_h2d_std_dev_00 & USB_NOT_SUPPORTED)
                                        (0098) export  USBFS_CB_h2d_std_dev_00
                                        (0099) USBFS_CB_h2d_std_dev_00:
                                        (0100) ENDIF
                                        (0101) IF (USB_CB_SRC_h2d_std_dev_01 & USB_NOT_SUPPORTED)
                                        (0102) export  USBFS_CB_h2d_std_dev_01
                                        (0103) USBFS_CB_h2d_std_dev_01:
                                        (0104) ENDIF
                                        (0105) IF (USB_CB_SRC_h2d_std_dev_02 & USB_NOT_SUPPORTED)
                                        (0106) export  USBFS_CB_h2d_std_dev_02
                                        (0107) USBFS_CB_h2d_std_dev_02:
                                        (0108) ENDIF
                                        (0109) IF (USB_CB_SRC_h2d_std_dev_03 & USB_NOT_SUPPORTED)
                                        (0110) export  USBFS_CB_h2d_std_dev_03
                                        (0111) USBFS_CB_h2d_std_dev_03:
                                        (0112) ENDIF
                                        (0113) IF (USB_CB_SRC_h2d_std_dev_04 & USB_NOT_SUPPORTED)
                                        (0114) export  USBFS_CB_h2d_std_dev_04
                                        (0115) USBFS_CB_h2d_std_dev_04:
                                        (0116) ENDIF
                                        (0117) IF (USB_CB_SRC_h2d_std_dev_05 & USB_NOT_SUPPORTED)
                                        (0118) export  USBFS_CB_h2d_std_dev_05
                                        (0119) USBFS_CB_h2d_std_dev_05:
                                        (0120) ENDIF
                                        (0121) IF (USB_CB_SRC_h2d_std_dev_06 & USB_NOT_SUPPORTED)
                                        (0122) export  USBFS_CB_h2d_std_dev_06
                                        (0123) USBFS_CB_h2d_std_dev_06:
                                        (0124) ENDIF
                                        (0125) IF (USB_CB_SRC_h2d_std_dev_07 & USB_NOT_SUPPORTED)
                                        (0126) export  USBFS_CB_h2d_std_dev_07
                                        (0127) USBFS_CB_h2d_std_dev_07:
                                        (0128) ENDIF
                                        (0129) IF (USB_CB_SRC_h2d_std_dev_08 & USB_NOT_SUPPORTED)
                                        (0130) export  USBFS_CB_h2d_std_dev_08
                                        (0131) USBFS_CB_h2d_std_dev_08:
                                        (0132) ENDIF
                                        (0133) IF (USB_CB_SRC_h2d_std_dev_09 & USB_NOT_SUPPORTED)
                                        (0134) export  USBFS_CB_h2d_std_dev_09
                                        (0135) USBFS_CB_h2d_std_dev_09:
                                        (0136) ENDIF
                                        (0137) 
                                        (0138) ; d2h_std_ifc
                                        (0139) IF (USB_CB_SRC_d2h_std_ifc_00 & USB_NOT_SUPPORTED)
                                        (0140) export  USBFS_CB_d2h_std_ifc_00
                                        (0141) USBFS_CB_d2h_std_ifc_00:
                                        (0142) ENDIF
                                        (0143) IF (USB_CB_SRC_d2h_std_ifc_01 & USB_NOT_SUPPORTED)
                                        (0144) export  USBFS_CB_d2h_std_ifc_01
                                        (0145) USBFS_CB_d2h_std_ifc_01:
                                        (0146) ENDIF
                                        (0147) IF (USB_CB_SRC_d2h_std_ifc_02 & USB_NOT_SUPPORTED)
                                        (0148) export  USBFS_CB_d2h_std_ifc_02
                                        (0149) USBFS_CB_d2h_std_ifc_02:
                                        (0150) ENDIF
                                        (0151) IF (USB_CB_SRC_d2h_std_ifc_03 & USB_NOT_SUPPORTED)
                                        (0152) export  USBFS_CB_d2h_std_ifc_03
                                        (0153) USBFS_CB_d2h_std_ifc_03:
                                        (0154) ENDIF
                                        (0155) IF (USB_CB_SRC_d2h_std_ifc_04 & USB_NOT_SUPPORTED)
                                        (0156) export  USBFS_CB_d2h_std_ifc_04
                                        (0157) USBFS_CB_d2h_std_ifc_04:
                                        (0158) ENDIF
                                        (0159) IF (USB_CB_SRC_d2h_std_ifc_05 & USB_NOT_SUPPORTED)
                                        (0160) export  USBFS_CB_d2h_std_ifc_05
                                        (0161) USBFS_CB_d2h_std_ifc_05:
                                        (0162) ENDIF
                                        (0163) IF (USB_CB_SRC_d2h_std_ifc_06 & USB_NOT_SUPPORTED)
                                        (0164) export  USBFS_CB_d2h_std_ifc_06
                                        (0165) USBFS_CB_d2h_std_ifc_06:
                                        (0166) ENDIF
                                        (0167) IF (USB_CB_SRC_d2h_std_ifc_07 & USB_NOT_SUPPORTED)
                                        (0168) export  USBFS_CB_d2h_std_ifc_07
                                        (0169) USBFS_CB_d2h_std_ifc_07:
                                        (0170) ENDIF
                                        (0171) IF (USB_CB_SRC_d2h_std_ifc_08 & USB_NOT_SUPPORTED)
                                        (0172) export  USBFS_CB_d2h_std_ifc_08
                                        (0173) USBFS_CB_d2h_std_ifc_08:
                                        (0174) ENDIF
                                        (0175) IF (USB_CB_SRC_d2h_std_ifc_09 & USB_NOT_SUPPORTED)
                                        (0176) export  USBFS_CB_d2h_std_ifc_09
                                        (0177) USBFS_CB_d2h_std_ifc_09:
                                        (0178) ENDIF
                                        (0179) IF (USB_CB_SRC_d2h_std_ifc_10 & USB_NOT_SUPPORTED)
                                        (0180) export  USBFS_CB_d2h_std_ifc_10
                                        (0181) USBFS_CB_d2h_std_ifc_10:
                                        (0182) ENDIF
                                        (0183) 
                                        (0184) ; h2d_std_ifc
                                        (0185) IF (USB_CB_SRC_h2d_std_ifc_00 & USB_NOT_SUPPORTED)
                                        (0186) export  USBFS_CB_h2d_std_ifc_00
                                        (0187) USBFS_CB_h2d_std_ifc_00:
                                        (0188) ENDIF
                                        (0189) IF (USB_CB_SRC_h2d_std_ifc_01 & USB_NOT_SUPPORTED)
                                        (0190) export  USBFS_CB_h2d_std_ifc_01
                                        (0191) USBFS_CB_h2d_std_ifc_01:
                                        (0192) ENDIF
                                        (0193) IF (USB_CB_SRC_h2d_std_ifc_02 & USB_NOT_SUPPORTED)
                                        (0194) export  USBFS_CB_h2d_std_ifc_02
                                        (0195) USBFS_CB_h2d_std_ifc_02:
                                        (0196) ENDIF
                                        (0197) IF (USB_CB_SRC_h2d_std_ifc_03 & USB_NOT_SUPPORTED)
                                        (0198) export  USBFS_CB_h2d_std_ifc_03
                                        (0199) USBFS_CB_h2d_std_ifc_03:
                                        (0200) ENDIF
                                        (0201) IF (USB_CB_SRC_h2d_std_ifc_04 & USB_NOT_SUPPORTED)
                                        (0202) export  USBFS_CB_h2d_std_ifc_04
                                        (0203) USBFS_CB_h2d_std_ifc_04:
                                        (0204) ENDIF
                                        (0205) IF (USB_CB_SRC_h2d_std_ifc_05 & USB_NOT_SUPPORTED)
                                        (0206) export  USBFS_CB_h2d_std_ifc_05
                                        (0207) USBFS_CB_h2d_std_ifc_05:
                                        (0208) ENDIF
                                        (0209) IF (USB_CB_SRC_h2d_std_ifc_06 & USB_NOT_SUPPORTED)
                                        (0210) export  USBFS_CB_h2d_std_ifc_06
                                        (0211) USBFS_CB_h2d_std_ifc_06:
                                        (0212) ENDIF
                                        (0213) IF (USB_CB_SRC_h2d_std_ifc_07 & USB_NOT_SUPPORTED)
                                        (0214) export  USBFS_CB_h2d_std_ifc_07
                                        (0215) USBFS_CB_h2d_std_ifc_07:
                                        (0216) ENDIF
                                        (0217) IF (USB_CB_SRC_h2d_std_ifc_08 & USB_NOT_SUPPORTED)
                                        (0218) export  USBFS_CB_h2d_std_ifc_08
                                        (0219) USBFS_CB_h2d_std_ifc_08:
                                        (0220) ENDIF
                                        (0221) IF (USB_CB_SRC_h2d_std_ifc_09 & USB_NOT_SUPPORTED)
                                        (0222) export  USBFS_CB_h2d_std_ifc_09
                                        (0223) USBFS_CB_h2d_std_ifc_09:
                                        (0224) ENDIF
                                        (0225) IF (USB_CB_SRC_h2d_std_ifc_10 & USB_NOT_SUPPORTED)
                                        (0226) export  USBFS_CB_h2d_std_ifc_10
                                        (0227) USBFS_CB_h2d_std_ifc_10:
                                        (0228) ENDIF
                                        (0229) IF (USB_CB_SRC_h2d_std_ifc_11 & USB_NOT_SUPPORTED)
                                        (0230) export  USBFS_CB_h2d_std_ifc_11
                                        (0231) USBFS_CB_h2d_std_ifc_11:
                                        (0232) ENDIF
                                        (0233) 
                                        (0234) ; d2h_std_ep
                                        (0235) IF (USB_CB_SRC_d2h_std_ep_00 & USB_NOT_SUPPORTED)
                                        (0236) export  USBFS_CB_d2h_std_ep_00
                                        (0237) USBFS_CB_d2h_std_ep_00:
                                        (0238) ENDIF
                                        (0239) IF (USB_CB_SRC_d2h_std_ep_01 & USB_NOT_SUPPORTED)
                                        (0240) export  USBFS_CB_d2h_std_ep_01
                                        (0241) USBFS_CB_d2h_std_ep_01:
                                        (0242) ENDIF
                                        (0243) IF (USB_CB_SRC_d2h_std_ep_02 & USB_NOT_SUPPORTED)
                                        (0244) export  USBFS_CB_d2h_std_ep_02
                                        (0245) USBFS_CB_d2h_std_ep_02:
                                        (0246) ENDIF
                                        (0247) IF (USB_CB_SRC_d2h_std_ep_03 & USB_NOT_SUPPORTED)
                                        (0248) export  USBFS_CB_d2h_std_ep_03
                                        (0249) USBFS_CB_d2h_std_ep_03:
                                        (0250) ENDIF
                                        (0251) IF (USB_CB_SRC_d2h_std_ep_04 & USB_NOT_SUPPORTED)
                                        (0252) export  USBFS_CB_d2h_std_ep_04
                                        (0253) USBFS_CB_d2h_std_ep_04:
                                        (0254) ENDIF
                                        (0255) IF (USB_CB_SRC_d2h_std_ep_05 & USB_NOT_SUPPORTED)
                                        (0256) export  USBFS_CB_d2h_std_ep_05
                                        (0257) USBFS_CB_d2h_std_ep_05:
                                        (0258) ENDIF
                                        (0259) IF (USB_CB_SRC_d2h_std_ep_06 & USB_NOT_SUPPORTED)
                                        (0260) export  USBFS_CB_d2h_std_ep_06
                                        (0261) USBFS_CB_d2h_std_ep_06:
                                        (0262) ENDIF
                                        (0263) IF (USB_CB_SRC_d2h_std_ep_07 & USB_NOT_SUPPORTED)
                                        (0264) export  USBFS_CB_d2h_std_ep_07
                                        (0265) USBFS_CB_d2h_std_ep_07:
                                        (0266) ENDIF
                                        (0267) IF (USB_CB_SRC_d2h_std_ep_08 & USB_NOT_SUPPORTED)
                                        (0268) export  USBFS_CB_d2h_std_ep_08
                                        (0269) USBFS_CB_d2h_std_ep_08:
                                        (0270) ENDIF
                                        (0271) IF (USB_CB_SRC_d2h_std_ep_09 & USB_NOT_SUPPORTED)
                                        (0272) export  USBFS_CB_d2h_std_ep_09
                                        (0273) USBFS_CB_d2h_std_ep_09:
                                        (0274) ENDIF
                                        (0275) IF (USB_CB_SRC_d2h_std_ep_10 & USB_NOT_SUPPORTED)
                                        (0276) export  USBFS_CB_d2h_std_ep_10
                                        (0277) USBFS_CB_d2h_std_ep_10:
                                        (0278) ENDIF
                                        (0279) IF (USB_CB_SRC_d2h_std_ep_11 & USB_NOT_SUPPORTED)
                                        (0280) export  USBFS_CB_d2h_std_ep_11
                                        (0281) USBFS_CB_d2h_std_ep_11:
                                        (0282) ENDIF
                                        (0283) IF (USB_CB_SRC_d2h_std_ep_12 & USB_NOT_SUPPORTED)
                                        (0284) export  USBFS_CB_d2h_std_ep_12
                                        (0285) USBFS_CB_d2h_std_ep_12:
                                        (0286) ENDIF
                                        (0287) 
                                        (0288) ; h2d_std_ep
                                        (0289) IF (USB_CB_SRC_h2d_std_ep_00 & USB_NOT_SUPPORTED)
                                        (0290) export  USBFS_CB_h2d_std_ep_00
                                        (0291) USBFS_CB_h2d_std_ep_00:
                                        (0292) ENDIF
                                        (0293) IF (USB_CB_SRC_h2d_std_ep_01 & USB_NOT_SUPPORTED)
                                        (0294) export  USBFS_CB_h2d_std_ep_01
                                        (0295) USBFS_CB_h2d_std_ep_01:
                                        (0296) ENDIF
                                        (0297) IF (USB_CB_SRC_h2d_std_ep_02 & USB_NOT_SUPPORTED)
                                        (0298) export  USBFS_CB_h2d_std_ep_02
                                        (0299) USBFS_CB_h2d_std_ep_02:
                                        (0300) ENDIF
                                        (0301) IF (USB_CB_SRC_h2d_std_ep_03 & USB_NOT_SUPPORTED)
                                        (0302) export  USBFS_CB_h2d_std_ep_03
                                        (0303) USBFS_CB_h2d_std_ep_03:
                                        (0304) ENDIF
                                        (0305) 
                                        (0306) export  USBFS_Not_Supported
                                        (0307) export _USBFS_Not_Supported
                                        (0308)  USBFS_Not_Supported:
                                        (0309) _USBFS_Not_Supported:
04AA: 50 00    MOV   A,0x0              (0310)    mov    A, 0                         ; Count 0
04AC: 57 03    MOV   X,0x3              (0311)    mov    X, USB_MODE_STALL_IN_OUT     ; Stall the request
04AE: 7D 07 CE LJMP  USBFS_EP0_UPD_MODE_EXIT(0312)    ljmp   USBFS_EP0_UPD_MODE_EXIT
                                        (0313) ;-----------------------------------------------------------------------------
                                        (0314) ;  FUNCTION NAME: USBFS_CB_d2h_std_dev_00
                                        (0315) ;
                                        (0316) ;  DESCRIPTION:   Get Device Status
                                        (0317) ;
                                        (0318) ;****************************************************************
                                        (0319) ; STANDARD DEVICE IN REQUEST: Get_Device_Status
                                        (0320) ;****************************************************************
                                        (0321) ;
                                        (0322) ; bmRequestType  : (IN | STANDARD | DEVICE)       = 80h
                                        (0323) ; bRequest       : GET_STATUS                     = 00h
                                        (0324) ; wValue         : RESERVED                       = 0000h
                                        (0325) ; wIndex         : RESERVED                       = 0000h
                                        (0326) ; wLength        : SIZEOF_ENDPOINT_STATUS         = 0002h
                                        (0327) ;
                                        (0328) ; The GET_DEVICE_STATUS request returns the current device status.
                                        (0329) ;
                                        (0330) ;****************************************************************
                                        (0331) ;-----------------------------------------------------------------------------
                                        (0332) ;
                                        (0333) ;  ARGUMENTS:
                                        (0334) ;
                                        (0335) ;  RETURNS:
                                        (0336) ;
                                        (0337) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0338) ;
                                        (0339) ;  THEORY of OPERATION or PROCEDURE:
                                        (0340) ;
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) .LITERAL
                                        (0343) GetStatusTransferDescrTable:
                                        (0344)     TD_START_TABLE 1                   ; One entry
                                        (0345)     TD_ENTRY    USB_DS_RAM, 2, USBFS_TransferBuffer, NULL_PTR    ; Intermediate Buffer
                                        (0346) .ENDLITERAL
                                        (0347) IF (USB_CB_SRC_d2h_std_dev_00 & USB_UM_SUPPLIED)
                                        (0348) export  USBFS_CB_d2h_std_dev_00
                                        (0349) USBFS_CB_d2h_std_dev_00:
04BA: 55 1E 00 MOV   [0x1E],0x0         (0350)     mov     [USBFS_t2], 0              ; Use the UM temp var--Selector
                                        (0351) 
04BD: 55 0C 00 MOV   [0xC],0x0          (0352)     mov     [USBFS_TransferBuffer+1], 0    ; Use the UM Transfer Buffer
04C0: 5F 0B 02 MOV   [0xB],[0x2]        (0353)     mov     [USBFS_TransferBuffer], [USBFS_DeviceStatus]
                                        (0354) 
04C3: 50 04    MOV   A,0x4              (0355)     mov     A, >GetStatusTransferDescrTable    ; Get the ROM Address MSB
04C5: 57 B1    MOV   X,0xB1             (0356)     mov     X, <GetStatusTransferDescrTable    ; Get the ROM Address LSB
04C7: 80 E9    JMP   0x05B1             (0357)     jmp     USBFS_GetTableEntry_Local_Std
                                        (0358) ELSE
                                        (0359) IF (USB_CB_SRC_d2h_std_dev_00 & USB_APP_SUPPLIED)
                                        (0360) export  USBFS_CB_d2h_std_dev_00
                                        (0361) USBFS_CB_d2h_std_dev_00:
                                        (0362)     ljmp    APP_USBFS_CB_d2h_std_dev_00
                                        (0363) ENDIF
                                        (0364) ENDIF
                                        (0365) 
                                        (0366) ;-----------------------------------------------------------------------------
                                        (0367) ;  USB 2nd Tier Dispactch Jump Tables for Standard Requests (based on bRequest)
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;  FUNCTION NAME: ;  USB 2nd Tier Dispactch Jump Table
                                        (0370) ;
                                        (0371) ;  DESCRIPTION:   The following tables dispatch to the Standard request handler
                                        (0372) ;                 functions.  (Assumes bmRequestType(5:6) is 0, Standard)
                                        (0373) ;
                                        (0374) ;-----------------------------------------------------------------------------
                                        (0375) ;
                                        (0376) ;  ARGUMENTS:
                                        (0377) ;
                                        (0378) ;  RETURNS:
                                        (0379) ;
                                        (0380) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0381) ;
                                        (0382) ;  THEORY of OPERATION or PROCEDURE:
                                        (0383) ;
                                        (0384) ;-----------------------------------------------------------------------------
                                        (0385) USBFS_DT_d2h_std_dev:
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) 
04C9: 8F F0    JMP   USBFS_CB_d2h_std_dev_00(0388)     jmp     USBFS_CB_d2h_std_dev_00
04CB: 8F DE    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0389)     jmp     USBFS_CB_d2h_std_dev_01
04CD: 8F DC    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0390)     jmp     USBFS_CB_d2h_std_dev_02
04CF: 8F DA    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0391)     jmp     USBFS_CB_d2h_std_dev_03
04D1: 8F D8    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0392)     jmp     USBFS_CB_d2h_std_dev_04
04D3: 8F D6    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0393)     jmp     USBFS_CB_d2h_std_dev_05
04D5: 80 E1    JMP   USBFS_CB_d2h_std_dev_06(0394)     jmp     USBFS_CB_d2h_std_dev_06
04D7: 8F D2    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0395)     jmp     USBFS_CB_d2h_std_dev_07
04D9: 81 3B    JMP   USBFS_CB_d2h_std_dev_08(0396)     jmp     USBFS_CB_d2h_std_dev_08
                                        (0397) 
                                        (0398) USBFS_DT_d2h_std_dev_End:
                                        (0399) USBFS_DT_d2h_std_dev_Size: equ (USBFS_DT_d2h_std_dev_End-USBFS_DT_d2h_std_dev) / 2
                                        (0400) USBFS_DT_d2h_std_dev_Dispatch::
04DB: 5D 59    MOV   A,REG[0x59]        (0401)     mov     A, reg[USBFS_EP0DATA + bRequest]
04DD: 39 09    CMP   A,0x9              
04DF: D0 04    JNC   0x04E4             
04E1: 64       ASL   A                  
04E2: EF E6    JACC  0x04C9             
04E4: 8F C5    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...
                                        (0402)     DISPATCHER USBFS_DT_d2h_std_dev, USBFS_DT_d2h_std_dev_Size, USBFS_Not_Supported
                                        (0403) 
                                        (0404) ;-----------------------------------------------------------------------------
                                        (0405) USBFS_DT_h2d_std_dev:
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) 
04E6: 8F C3    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0408)     jmp     USBFS_CB_h2d_std_dev_00
04E8: 81 35    JMP   USBFS_CB_h2d_std_dev_01(0409)     jmp     USBFS_CB_h2d_std_dev_01
04EA: 8F BF    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0410)     jmp     USBFS_CB_h2d_std_dev_02
04EC: 81 3C    JMP   USBFS_CB_h2d_std_dev_03(0411)     jmp     USBFS_CB_h2d_std_dev_03
04EE: 8F BB    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0412)     jmp     USBFS_CB_h2d_std_dev_04
04F0: 81 4D    JMP   USBFS_CB_h2d_std_dev_05(0413)     jmp     USBFS_CB_h2d_std_dev_05
04F2: 8F B7    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0414)     jmp     USBFS_CB_h2d_std_dev_06
04F4: 8F B5    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0415)     jmp     USBFS_CB_h2d_std_dev_07
04F6: 8F B3    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0416)     jmp     USBFS_CB_h2d_std_dev_08
04F8: 81 4E    JMP   USBFS_CB_h2d_std_dev_09(0417)     jmp     USBFS_CB_h2d_std_dev_09
                                        (0418) 
                                        (0419) USBFS_DT_h2d_std_dev_End:
                                        (0420) USBFS_DT_h2d_std_dev_Size: equ (USBFS_DT_h2d_std_dev_End-USBFS_DT_h2d_std_dev) / 2
                                        (0421) USBFS_DT_h2d_std_dev_Dispatch::
                                        (0422) 
04FA: 5D 59    MOV   A,REG[0x59]        (0423)     mov     A, reg[USBFS_EP0DATA + bRequest]
04FC: 39 0A    CMP   A,0xA              
04FE: D0 04    JNC   0x0503             
0500: 64       ASL   A                  
0501: EF E4    JACC  0x04E6             
0503: 8F A6    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...
                                        (0424)     DISPATCHER USBFS_DT_h2d_std_dev, USBFS_DT_h2d_std_dev_Size, USBFS_Not_Supported
                                        (0425) 
                                        (0426) 
                                        (0427) ;-----------------------------------------------------------------------------
                                        (0428) USBFS_DT_d2h_std_ifc:
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) 
0505: 81 9B    JMP   USBFS_CB_d2h_std_ifc_00(0431)     jmp     USBFS_CB_d2h_std_ifc_00
0507: 8F A2    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0432)     jmp     USBFS_CB_d2h_std_ifc_01
0509: 8F A0    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0433)     jmp     USBFS_CB_d2h_std_ifc_02
050B: 8F 9E    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0434)     jmp     USBFS_CB_d2h_std_ifc_03
050D: 8F 9C    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0435)     jmp     USBFS_CB_d2h_std_ifc_04
050F: 8F 9A    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0436)     jmp     USBFS_CB_d2h_std_ifc_05
0511: 85 93    JMP   USBFS_CB_d2h_std_ifc_06(0437)     jmp     USBFS_CB_d2h_std_ifc_06
0513: 8F 96    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0438)     jmp     USBFS_CB_d2h_std_ifc_07
0515: 8F 94    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0439)     jmp     USBFS_CB_d2h_std_ifc_08
0517: 8F 92    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0440)     jmp     USBFS_CB_d2h_std_ifc_09
0519: 81 9F    JMP   USBFS_CB_d2h_std_ifc_10(0441)     jmp     USBFS_CB_d2h_std_ifc_10
                                        (0442) 
                                        (0443) USBFS_DT_d2h_std_ifc_End:
                                        (0444) USBFS_DT_d2h_std_ifc_Size: equ (USBFS_DT_d2h_std_ifc_End-USBFS_DT_d2h_std_ifc) / 2
                                        (0445) USBFS_DT_d2h_std_ifc_Dispatch::
051B: 3C 01 00 CMP   [0x1],0x0          (0446)     cmp     [USBFS_Configuration], 0   ; Is the device configured?
051E: B0 03    JNZ   0x0522             (0447)     jnz     .configured                ; Jump on configured
0520: 8F 89    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0448)     jmp     _USBFS_Not_Supported       ; Stall the request if not configured
                                        (0449) ; Jump here if the device is configured
                                        (0450) .configured:
0522: 5D 59    MOV   A,REG[0x59]        (0451)     mov     A, reg[USBFS_EP0DATA + bRequest]
0524: 39 0B    CMP   A,0xB              
0526: D0 04    JNC   0x052B             
0528: 64       ASL   A                  
0529: EF DB    JACC  0x0505             
052B: 8F 7E    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...
                                        (0452)     DISPATCHER USBFS_DT_d2h_std_ifc, USBFS_DT_d2h_std_ifc_Size, USBFS_Not_Supported
                                        (0453) 
                                        (0454) ;-----------------------------------------------------------------------------
                                        (0455) USBFS_DT_h2d_std_ifc:
                                        (0456) ;-----------------------------------------------------------------------------
                                        (0457) 
052D: 8F 7C    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0458)     jmp     USBFS_CB_h2d_std_ifc_00
052F: 8F 7A    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0459)     jmp     USBFS_CB_h2d_std_ifc_01
0531: 8F 78    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0460)     jmp     USBFS_CB_h2d_std_ifc_02
0533: 8F 76    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0461)     jmp     USBFS_CB_h2d_std_ifc_03
0535: 8F 74    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0462)     jmp     USBFS_CB_h2d_std_ifc_04
0537: 8F 72    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0463)     jmp     USBFS_CB_h2d_std_ifc_05
0539: 8F 70    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0464)     jmp     USBFS_CB_h2d_std_ifc_06
053B: 8F 6E    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0465)     jmp     USBFS_CB_h2d_std_ifc_07
053D: 8F 6C    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0466)     jmp     USBFS_CB_h2d_std_ifc_08
053F: 8F 6A    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0467)     jmp     USBFS_CB_h2d_std_ifc_09
0541: 8F 68    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0468)     jmp     USBFS_CB_h2d_std_ifc_10
0543: 8F 66    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0469)     jmp     USBFS_CB_h2d_std_ifc_11
                                        (0470) 
                                        (0471) USBFS_DT_h2d_std_ifc_End:
                                        (0472) USBFS_DT_h2d_std_ifc_Size: equ (USBFS_DT_h2d_std_ifc_End-USBFS_DT_h2d_std_ifc) / 2
                                        (0473) USBFS_DT_h2d_std_ifc_Dispatch::
0545: 3C 01 00 CMP   [0x1],0x0          (0474)     cmp     [USBFS_Configuration], 0   ; Is the device configured?
0548: B0 03    JNZ   0x054C             (0475)     jnz     .configured                ; Jump on configured
054A: 8F 5F    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0476)     jmp     _USBFS_Not_Supported       ; Stall the request if not configured
                                        (0477) ; Jump here if the device is configured
                                        (0478) .configured:
054C: 5D 59    MOV   A,REG[0x59]        (0479)     mov     A, reg[USBFS_EP0DATA + bRequest]
054E: 39 0C    CMP   A,0xC              
0550: D0 04    JNC   0x0555             
0552: 64       ASL   A                  
0553: EF D9    JACC  0x052D             
0555: 8F 54    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...
                                        (0480) 
                                        (0481)    ;---------------------------------------------------
                                        (0482)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0483)    ;---------------------------------------------------
                                        (0484)    ; Add your custom Interface change logic below
                                        (0485)    ;---------------------------------------------------
                                        (0486) 
                                        (0487)    ;---------------------------------------------------
                                        (0488)    ; Insert your custom code above this banner
                                        (0489)    ;---------------------------------------------------
                                        (0490)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0491) 
                                        (0492)     DISPATCHER USBFS_DT_h2d_std_ifc, USBFS_DT_h2d_std_ifc_Size, USBFS_Not_Supported
                                        (0493) 
                                        (0494) ;-----------------------------------------------------------------------------
                                        (0495) USBFS_DT_d2h_std_ep:
                                        (0496) ;-----------------------------------------------------------------------------
0557: 81 75    JMP   USBFS_CB_d2h_std_ep_00(0497)     jmp     USBFS_CB_d2h_std_ep_00
0559: 8F 50    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0498)     jmp     USBFS_CB_d2h_std_ep_01
055B: 8F 4E    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0499)     jmp     USBFS_CB_d2h_std_ep_02
055D: 8F 4C    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0500)     jmp     USBFS_CB_d2h_std_ep_03
055F: 8F 4A    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0501)     jmp     USBFS_CB_d2h_std_ep_04
0561: 8F 48    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0502)     jmp     USBFS_CB_d2h_std_ep_05
0563: 8F 46    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0503)     jmp     USBFS_CB_d2h_std_ep_06
0565: 8F 44    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0504)     jmp     USBFS_CB_d2h_std_ep_07
0567: 8F 42    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0505)     jmp     USBFS_CB_d2h_std_ep_08
0569: 8F 40    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0506)     jmp     USBFS_CB_d2h_std_ep_09
056B: 8F 3E    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0507)     jmp     USBFS_CB_d2h_std_ep_10
056D: 8F 3C    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0508)     jmp     USBFS_CB_d2h_std_ep_11
056F: 8F 3A    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0509)     jmp     USBFS_CB_d2h_std_ep_12
                                        (0510) 
                                        (0511) USBFS_DT_d2h_std_ep_End:
                                        (0512) USBFS_DT_d2h_std_ep_Size: equ (USBFS_DT_d2h_std_ep_End-USBFS_DT_d2h_std_ep) / 2
                                        (0513) USBFS_DT_d2h_std_ep_Dispatch::
0571: 3C 01 00 CMP   [0x1],0x0          (0514)     cmp     [USBFS_Configuration], 0   ; Is the device configured?
0574: B0 0D    JNZ   0x0582             (0515)     jnz     .configured                ; Jump on configured
                                        (0516) 
0576: 5D 5D    MOV   A,REG[0x5D]        (0517)     mov     A, reg[USBFS_EP0DATA + wIndexHi]   ; Is the request for EP0?
0578: 53 1E    MOV   [0x1E],A           (0518)     mov     [USBFS_t2], A              ; Use the UM temp var--Selector
057A: 5D 5C    MOV   A,REG[0x5C]        (0519)     mov     A, reg[USBFS_EP0DATA + wIndexLo]   ;
057C: 2C 1E    OR    [0x1E],A           (0520)     or      [USBFS_t2], A              ; Use the UM temp var--Selector
057E: A0 03    JZ    0x0582             (0521)     jz      .ep0_request
                                        (0522) 
0580: 8F 29    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0523)     jmp    _USBFS_Not_Supported        ; Stall the request if not configured
                                        (0524) ; Jump here if the device is configured or EP0 request
                                        (0525) .configured:
                                        (0526) .ep0_request:
0582: 5D 59    MOV   A,REG[0x59]        (0527)     mov     A, reg[USBFS_EP0DATA + bRequest]
0584: 39 0D    CMP   A,0xD              
0586: D0 04    JNC   0x058B             
0588: 64       ASL   A                  
0589: EF CD    JACC  0x0557             
058B: 8F 1E    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...
                                        (0528)     DISPATCHER USBFS_DT_d2h_std_ep, USBFS_DT_d2h_std_ep_Size, USBFS_Not_Supported
                                        (0529) 
                                        (0530) 
                                        (0531) ;-----------------------------------------------------------------------------
                                        (0532) USBFS_DT_h2d_std_ep:
                                        (0533) ;-----------------------------------------------------------------------------
058D: 8F 1C    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0534)     jmp     USBFS_CB_h2d_std_ep_00
058F: 81 56    JMP   USBFS_CB_h2d_std_ep_01(0535)     jmp     USBFS_CB_h2d_std_ep_01
0591: 8F 18    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0536)     jmp     USBFS_CB_h2d_std_ep_02
0593: 81 8F    JMP   USBFS_CB_h2d_std_ep_03(0537)     jmp     USBFS_CB_h2d_std_ep_03
                                        (0538) 
                                        (0539) USBFS_DT_h2d_std_ep_End:
                                        (0540) USBFS_DT_h2d_std_ep_Size: equ (USBFS_DT_h2d_std_ep_End-USBFS_DT_h2d_std_ep) / 2
                                        (0541) USBFS_DT_h2d_std_ep_Dispatch::
0595: 3C 01 00 CMP   [0x1],0x0          (0542)     cmp     [USBFS_Configuration], 0   ; Is the device configured?
0598: B0 0D    JNZ   0x05A6             (0543)     jnz     .configured                ; Jump on configured
                                        (0544) 
059A: 5D 5D    MOV   A,REG[0x5D]        (0545)     mov     A, reg[USBFS_EP0DATA + wIndexHi]   ; Is the request for EP0?
059C: 53 1E    MOV   [0x1E],A           (0546)     mov     [USBFS_t2], A              ; Use the UM temp var--Selector
059E: 5D 5C    MOV   A,REG[0x5C]        (0547)     mov     A, reg[USBFS_EP0DATA + wIndexLo]   ;
05A0: 2C 1E    OR    [0x1E],A           (0548)     or      [USBFS_t2], A              ; Use the UM temp var--Selector
05A2: A0 03    JZ    0x05A6             (0549)     jz      .ep0_request
                                        (0550) 
05A4: 8F 05    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0551)     jmp    _USBFS_Not_Supported        ; Stall the request if not configured
                                        (0552) ; Jump here if the device is configured or EP0 request
                                        (0553) .configured:
                                        (0554) .ep0_request:
05A6: 5D 59    MOV   A,REG[0x59]        (0555)     mov     A, reg[USBFS_EP0DATA + bRequest]
05A8: 39 04    CMP   A,0x4              
05AA: D0 04    JNC   0x05AF             
05AC: 64       ASL   A                  
05AD: EF DF    JACC  0x058D             
05AF: 8E FA    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...
                                        (0556)     DISPATCHER USBFS_DT_h2d_std_ep, USBFS_DT_h2d_std_ep_Size, USBFS_Not_Supported
                                        (0557) 
                                        (0558) USBFS_GetTableEntry_Local_Std:
05B1: 7D 09 94 LJMP  USBFS_GetTableEntry(0559)     ljmp    USBFS_GetTableEntry
                                        (0560) 
                                        (0561) USBFS_NoDataStageControlTransfer_Local_Std:
05B4: 7D 08 81 LJMP  _USBFS_InitNoDataStageControlTransfer|USBFS_NoDataStageControlTransfer(0562)     ljmp    USBFS_NoDataStageControlTransfer
                                        (0563) 
                                        (0564) ;-----------------------------------------------
                                        (0565) ; Add custom application code for routines
                                        (0566) ; redefined by USB_APP_SUPPLIED in USB_HID.inc
                                        (0567) ;-----------------------------------------------
                                        (0568) 
                                        (0569)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0570)    ;---------------------------------------------------
                                        (0571)    ; Insert your custom code below this banner
                                        (0572)    ;---------------------------------------------------
                                        (0573) 
                                        (0574)    ;---------------------------------------------------
                                        (0575)    ; Insert your custom code above this banner
                                        (0576)    ;---------------------------------------------------
                                        (0577)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0578) 
                                        (0579) ;-----------------------------------------------------------------------------
                                        (0580) ; FUNCTION NAME: USBFS_CB_d2h_std_dev_06
                                        (0581) ;
                                        (0582) ; DESCRIPTION:   Get Device Descriptor
                                        (0583) ;
                                        (0584) ;****************************************************************
                                        (0585) ; STANDARD DEVICE IN REQUEST: Get_Device_Descriptor
                                        (0586) ;****************************************************************
                                        (0587) ;
                                        (0588) ; bmRequestType  : (IN | STANDARD | DEVICE)       = 80h
                                        (0589) ; bRequest       : GET_DESCRIPTOR                 = 06h
                                        (0590) ; wValue         : DESCRIPTOR TYPE | index        = xxxxh
                                        (0591) ; wIndex         : ZERO or LANG_ID                = xxxxh
                                        (0592) ; wLength        : SIZEOF_DESCRIPTOR              = --xxh
                                        (0593) ;
                                        (0594) ; The GET_DEVICE_DESCRIPTOR returns the specified descriptor if
                                        (0595) ; the descriptor exists.
                                        (0596) ;
                                        (0597) ; The upper byte of wValue contains the descriptor type and
                                        (0598) ; the lower byte contains the descriptor index. wIndex
                                        (0599) ; contains either 0000h or the Language ID. wLength contains
                                        (0600) ; the descriptor length. The actual descriptor information is
                                        (0601) ; transferred in subsequent data packets.
                                        (0602) ;
                                        (0603) ;****************************************************************
                                        (0604) ;
                                        (0605) ;-----------------------------------------------------------------------------
                                        (0606) ;
                                        (0607) ;  ARGUMENTS:
                                        (0608) ;
                                        (0609) ;  RETURNS:
                                        (0610) ;
                                        (0611) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0612) ;
                                        (0613) ;  THEORY of OPERATION or PROCEDURE:
                                        (0614) ;
                                        (0615) ;-----------------------------------------------------------------------------
                                        (0616) IF (USB_CB_SRC_d2h_std_dev_06 & USB_UM_SUPPLIED)
                                        (0617) export  USBFS_CB_d2h_std_dev_06
                                        (0618) USBFS_CB_d2h_std_dev_06:
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ; Dispatch to the proper handler
                                        (0621) ;-----------------------------------------------------------------------------
05B7: 5D 5B    MOV   A,REG[0x5B]        (0622)     mov     A, reg[USBFS_EP0DATA+wValueHi]   ; Get the descrptor type
05B9: 64       ASL   A                  (0623)     asl     A                          ; Make it into a offset
05BA: 39 08    CMP   A,0x8              (0624)     cmp     A, GET_DESCR_DISPATCH_SIZE           ; Validity check
05BC: DE ED    JNC   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0625)     jnc     USBFS_Not_Supported
                                        (0626) 
05BE: E0 01    JACC  0x05C0             (0627)     jacc    GET_DESCR_DISPATCH
                                        (0628) 
                                        (0629) GET_DESCR_DISPATCH:
05C0: 8E E9    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0630)     jmp     USBFS_Not_Supported        ; Invalid
05C2: 80 28    JMP   0x05EB             (0631)     jmp     USBFS_SendDeviceDescr      ; Device Descriptor
05C4: 80 03    JMP   0x05C8             (0632)     jmp     USBFS_SendConfigDescr      ; Configuration Descriptor
                                        (0633) IF  USBFS_bNumStringDescrs             ; Number of String Descriptor defined with the Wizard
05C6: 80 34    JMP   0x05FB             (0634)     jmp     USBFS_SendStringDescr      ; String Descriptor
                                        (0635) ELSE
                                        (0636)     jmp     USBFS_Not_Supported        ; Not supported if we don't have
                                        (0637)                                               ; any String Descriptor
                                        (0638) ENDIF
                                        (0639) 
                                        (0640) GET_DESCR_DISPATCH_END:
                                        (0641) GET_DESCR_DISPATCH_SIZE: EQU (GET_DESCR_DISPATCH_END - GET_DESCR_DISPATCH)
                                        (0642) ;-----------------------------------------------------------------------------
                                        (0643) ; Configuration Descriptor Handler
                                        (0644) ;-----------------------------------------------------------------------------
                                        (0645) USBFS_SendConfigDescr:
05C8: 94 0F    CALL  USBFS_GET_DEVICE_TABLE_ENTRY(0646)     call    USBFS_GET_DEVICE_TABLE_ENTRY
05CA: 4B       SWAP  A,X                (0647)     swap    A, X
05CB: 01 02    ADD   A,0x2              (0648)     add     A, 2                       ; We want the pointer to the descriptor table (second entry)
05CD: 4B       SWAP  A,X                (0649)     swap    A, X
05CE: 09 00    ADC   A,0x0              (0650)     adc     A, 0                       ; Don't forget the carry
05D0: 55 1E 1F MOV   [0x1E],0x1F        (0651)     mov     [USBFS_t2], USBFS_t1       ; Set up the destination
05D3: 93 F3    CALL  USBFS_GETWORD      (0652)     call    USBFS_GETWORD              ; Get the pointer
                                        (0653) 
05D5: 51 1F    MOV   A,[0x1F]           (0654)     mov     A, [USBFS_t1]              ; Pointer MSB
05D7: 58 20    MOV   X,[0x20]           (0655)     mov     X, [USBFS_t1+1]            ; Pointer LSB
                                        (0656) 
05D9: 08       PUSH  A                  (0657)     push    A                          ; Save the MSB
                                        (0658) 
05DA: 5D 5A    MOV   A,REG[0x5A]        (0659)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the descrptor index
05DC: 53 1E    MOV   [0x1E],A           (0660)     mov     [USBFS_t2], A              ; Use the UM temp var--Selector
05DE: 18       POP   A                  (0661)     pop     A                          ; Need the MSB for the range check
05DF: 08       PUSH  A                  (0662)     push    A                          ; Save the MSB for after the range check
05E0: 28       ROMX                     (0663)     romx                               ; First entry is the table size (only a byte)
05E1: 3A 1E    CMP   A,[0x1E]           (0664)     cmp     A, [USBFS_t2]              ; Range check
05E3: D0 04    JNC   0x05E8             (0665)     jnc     .range_ok
                                        (0666) 
05E5: 18       POP   A                  (0667)     pop     A                          ; Fix the stack
05E6: 8E C3    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0668)     jmp     USBFS_Not_Supported
                                        (0669) 
                                        (0670) .range_ok:
05E8: 18       POP   A                  (0671)     pop     A                          ; Get the MSB back
05E9: 8F C7    JMP   0x05B1             (0672)     jmp     USBFS_GetTableEntry_Local_Std
                                        (0673) ;-----------------------------------------------------------------------------
                                        (0674) ; Device Descriptor Handler
                                        (0675) ;-----------------------------------------------------------------------------
                                        (0676) USBFS_SendDeviceDescr:
05EB: 5F 1E 00 MOV   [0x1E],[0x0]       (0677)     mov     [USBFS_t2], [USBFS_bCurrentDevice]    ; Use the UM temp var--Selector
05EE: 50 01    MOV   A,0x1              (0678)     mov     A, >USBFS_DEVICE_DESCR_TABLE    ; Get the ROM Address MSB
05F0: 57 F9    MOV   X,0xF9             (0679)     mov     X, <USBFS_DEVICE_DESCR_TABLE    ; Get the ROM Address LSB
05F2: 28       ROMX                     (0680)     romx                               ; First entry is the table size (only a byte)
05F3: 3A 1E    CMP   A,[0x1E]           (0681)     cmp     A, [USBFS_t2]              ; Range check
05F5: CE B4    JC    USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0682)     jc      USBFS_Not_Supported
                                        (0683) 
05F7: 50 01    MOV   A,0x1              (0684)     mov     A, >USBFS_DEVICE_DESCR_TABLE    ; Get the ROM Address MSB
                                        (0685) 
05F9: 8F B7    JMP   0x05B1             (0686)     jmp     USBFS_GetTableEntry_Local_Std
                                        (0687) ;-----------------------------------------------------------------------------
                                        (0688) ; String Descriptor Handler
                                        (0689) ;-----------------------------------------------------------------------------
                                        (0690) IF  USBFS_bNumStringDescrs    ; Not needed if we don't have any String Descriptors
                                        (0691) USBFS_SendStringDescr:
05FB: 5D 5A    MOV   A,REG[0x5A]        (0692)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the descrptor index
05FD: 53 1E    MOV   [0x1E],A           (0693)     mov     [USBFS_t2], A              ; Use the UM temp var--Selector
                                        (0694) 
05FF: 50 02    MOV   A,0x2              (0695)     mov     A, >USBFS_StringTable      ; Get the ROM Address MSB
0601: 57 68    MOV   X,0x68             (0696)     mov     X, <USBFS_StringTable      ; Get the ROM Address LSB
0603: 28       ROMX                     (0697)     romx                               ; First entry is the table size (only a byte)
0604: 3A 1E    CMP   A,[0x1E]           (0698)     cmp     A, [USBFS_t2]              ; Range check
0606: CE A3    JC    USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0699)     jc      USBFS_Not_Supported
                                        (0700) 
0608: 50 02    MOV   A,0x2              (0701)     mov     A, >USBFS_StringTable      ; Get the ROM Address MSB
                                        (0702) 
060A: 8F A6    JMP   0x05B1             (0703)     jmp     USBFS_GetTableEntry_Local_Std
                                        (0704) ENDIF
                                        (0705) ELSE
                                        (0706) IF (USB_CB_SRC_d2h_std_dev_06 & USB_APP_SUPPLIED)
                                        (0707) export  USBFS_CB_d2h_std_dev_06
                                        (0708) USBFS_CB_d2h_std_dev_06:
                                        (0709)     ljmp    APP_USBFS_CB_d2h_std_dev_06
                                        (0710) ENDIF
                                        (0711) ENDIF
                                        (0712) ;-----------------------------------------------------------------------------
                                        (0713) ;  FUNCTION NAME: USBFS_CB_d2h_std_dev_08
                                        (0714) ;
                                        (0715) ;  DESCRIPTION:   Get Device Configuration
                                        (0716) ;
                                        (0717) ;****************************************************************
                                        (0718) ; STANDARD DEVICE IN REQUEST: Get_Device_Configuration
                                        (0719) ;****************************************************************
                                        (0720) ;
                                        (0721) ; bmRequestType  : (IN | STANDARD | DEVICE)       = 80h
                                        (0722) ; bRequest       : GET_CONFIGURATION              = 08h
                                        (0723) ; wValue         : RESERVED                       = 0000h
                                        (0724) ; wIndex         : RESERVED                       = 0000h
                                        (0725) ; wLength        : SIZEOF_DEVICE_CONFIGURATION    = 0001h
                                        (0726) ;
                                        (0727) ; The GET_DEVICE_CONFIGURATION request returns the currently
                                        (0728) ; selected device configuration number.
                                        (0729) ;
                                        (0730) ; request_value and request_index contain 0000h. request_length
                                        (0731) ; contains 0001h and the one-byte configuration number is returned
                                        (0732) ; in a separate data transfer.
                                        (0733) ;
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;
                                        (0738) ;  RETURNS:
                                        (0739) ;
                                        (0740) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0741) ;
                                        (0742) ;  THEORY of OPERATION or PROCEDURE:
                                        (0743) ;
                                        (0744) ;-----------------------------------------------------------------------------
                                        (0745) IF (USB_CB_SRC_d2h_std_dev_08 & USB_UM_SUPPLIED)
                                        (0746) .LITERAL
                                        (0747) GetConfigTransferDescrTable:
                                        (0748)     TD_START_TABLE  1                  ; One entry
                                        (0749)     TD_ENTRY    USB_DS_RAM, 1, USBFS_Configuration, NULL_PTR    ; Current configuration
                                        (0750) .ENDLITERAL
                                        (0751) export  USBFS_CB_d2h_std_dev_08
                                        (0752) USBFS_CB_d2h_std_dev_08:
0615: 55 1E 00 MOV   [0x1E],0x0         (0753)     mov     [USBFS_t2], 0              ; Use the UM temp var--Selector
0618: 50 06    MOV   A,0x6              (0754)     mov     A, >GetConfigTransferDescrTable    ; Get the ROM Address MSB
061A: 57 0C    MOV   X,0xC              (0755)     mov     X, <GetConfigTransferDescrTable    ; Get the ROM Address LSB
061C: 8F 94    JMP   0x05B1             (0756)     jmp     USBFS_GetTableEntry_Local_Std
                                        (0757) ELSE
                                        (0758) IF (USB_CB_SRC_d2h_std_dev_08 & USB_APP_SUPPLIED)
                                        (0759) export  USBFS_CB_d2h_std_dev_08
                                        (0760) USBFS_CB_d2h_std_dev_08:
                                        (0761)     ljmp    APP_USBFS_CB_d2h_std_dev_08
                                        (0762) ENDIF
                                        (0763) ENDIF
                                        (0764) ;-----------------------------------------------------------------------------
                                        (0765) ;  FUNCTION NAME: USBFS_CB_h2d_std_dev_01
                                        (0766) ;
                                        (0767) ;  DESCRIPTION:   Clear Device Feature
                                        (0768) ;
                                        (0769) ;****************************************************************
                                        (0770) ; STANDARD DEVICE OUT REQUEST: Clear_Device_Feature
                                        (0771) ;****************************************************************
                                        (0772) ;
                                        (0773) ; bmRequestType  : (OUT | STANDARD | DEVICE)      = 00h
                                        (0774) ; bRequest       : CLEAR_FEATURE                  = 01h
                                        (0775) ; wValue         : FEATURE_SELECTOR               = --xxh
                                        (0776) ; wIndex         : RESERVED                       = 0000h
                                        (0777) ; wLength        : RESERVED                       = 0000h
                                        (0778) ;
                                        (0779) ; The CLEAR_DEVICE_FEATURE request disables a particular feature
                                        (0780) ; for a device. The only feature supported for a device is the
                                        (0781) ; REMOTE_WAKEUP feature.
                                        (0782) ;
                                        (0783) ;****************************************************************
                                        (0784) ;-----------------------------------------------------------------------------
                                        (0785) ;
                                        (0786) ;  ARGUMENTS:
                                        (0787) ;
                                        (0788) ;  RETURNS:
                                        (0789) ;
                                        (0790) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0791) ;
                                        (0792) ;  THEORY of OPERATION or PROCEDURE:
                                        (0793) ;
                                        (0794) ;-----------------------------------------------------------------------------
                                        (0795) IF (USB_CB_SRC_h2d_std_dev_01 & USB_UM_SUPPLIED)
                                        (0796) export  USBFS_CB_h2d_std_dev_01
                                        (0797) USBFS_CB_h2d_std_dev_01:
061E: 5D 5A    MOV   A,REG[0x5A]        (0798)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the Feature Selector
                                        (0799)                                        ; Check against valid features
                                        (0800)                                        ;  for device receipient
0620: 39 01    CMP   A,0x1              (0801)     cmp     A, USB_DEVICE_REMOTE_WAKEUP    ; Only remote wakeup is defined for clear
0622: BE 87    JNZ   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0802)     jnz     USBFS_Not_Supported        ;
0624: 26 02 FD AND   [0x2],0xFD         (0803)     and     [USBFS_DeviceStatus], ~USB_DEVICE_STATUS_REMOTE_WAKEUP
0627: 8F 8C    JMP   0x05B4             (0804)     jmp     USBFS_NoDataStageControlTransfer_Local_Std
                                        (0805) ELSE
                                        (0806) IF (USB_CB_SRC_h2d_std_dev_01 & USB_APP_SUPPLIED)
                                        (0807) export  USBFS_CB_h2d_std_dev_01
                                        (0808) USBFS_CB_h2d_std_dev_01:
                                        (0809)     ljmp    APP_USBFS_CB_h2d_std_dev_01
                                        (0810) ENDIF
                                        (0811) ENDIF
                                        (0812) ;-----------------------------------------------------------------------------
                                        (0813) ;  FUNCTION NAME: USBFS_CB_h2d_std_dev_03
                                        (0814) ;
                                        (0815) ;  DESCRIPTION:   Set Device Featue
                                        (0816) ;
                                        (0817) ;****************************************************************
                                        (0818) ; STANDARD DEVICE OUT REQUEST: Set_Device_Feature
                                        (0819) ;****************************************************************
                                        (0820) ;
                                        (0821) ; bmRequestType  : (OUT | STANDARD | DEVICE)      = 00h
                                        (0822) ; bRequest       : SET_FEATURE                    = 03h
                                        (0823) ; wValue         : FEATURE_SELECTOR               = --xxh
                                        (0824) ; wIndex         : RESERVED                       = 0000h
                                        (0825) ; wLength        : RESERVED                       = 0000h
                                        (0826) ;
                                        (0827) ; The SET_DEVICE_FEATURE request enables a particular feature
                                        (0828) ; on a device. The only feature supported for a device is the
                                        (0829) ; REMOTE_WAKEUP feature.
                                        (0830) ;
                                        (0831) ;****************************************************************
                                        (0832) ;-----------------------------------------------------------------------------
                                        (0833) ;
                                        (0834) ;  ARGUMENTS:
                                        (0835) ;
                                        (0836) ;  RETURNS:
                                        (0837) ;
                                        (0838) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0839) ;
                                        (0840) ;  THEORY of OPERATION or PROCEDURE:
                                        (0841) ;
                                        (0842) ;-----------------------------------------------------------------------------
                                        (0843) IF (USB_CB_SRC_h2d_std_dev_03 & USB_UM_SUPPLIED)
                                        (0844) export  USBFS_CB_h2d_std_dev_03
                                        (0845) USBFS_CB_h2d_std_dev_03:
0629: 5D 5A    MOV   A,REG[0x5A]        (0846)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the Feature Selector
                                        (0847)                                        ; Check against valid features
                                        (0848)                                        ;  for device receipient
062B: 39 01    CMP   A,0x1              (0849)     cmp     A, USB_DEVICE_REMOTE_WAKEUP    ; Remote wakeup?
062D: A0 07    JZ    0x0635             (0850)     jz      .remote_wakeup
                                        (0851) 
062F: 39 02    CMP   A,0x2              (0852)     cmp     A, USB_TEST_MODE           ; Test Mode
0631: A0 08    JZ    0x063A             (0853)     jz      .test_mode
                                        (0854) ; Flow here for any other selector is invalid for device receipient
0633: 8E 76    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0855)     jmp     USBFS_Not_Supported
                                        (0856) ; Jump here to enable remote wake up
                                        (0857) .remote_wakeup:
0635: 2E 02 02 OR    [0x2],0x2          (0858)     or      [USBFS_DeviceStatus], USB_DEVICE_STATUS_REMOTE_WAKEUP
0638: 80 03    JMP   0x063C             (0859)     jmp     .finish
                                        (0860) ; Jump here to enable test mode
                                        (0861) .test_mode:
063A: 8E 6F    JMP   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0862)     jmp     USBFS_Not_Supported
                                        (0863) .finish:
063C: 8F 77    JMP   0x05B4             (0864)     jmp     USBFS_NoDataStageControlTransfer_Local_Std
                                        (0865) ELSE
                                        (0866) IF (USB_CB_SRC_h2d_std_dev_03 & USB_APP_SUPPLIED)
                                        (0867) export  USBFS_CB_h2d_std_dev_03
                                        (0868) USBFS_CB_h2d_std_dev_03:
                                        (0869)     ljmp    APP_USBFS_CB_h2d_std_dev_03
                                        (0870) ENDIF
                                        (0871) ENDIF
                                        (0872) ;-----------------------------------------------------------------------------
                                        (0873) ;  FUNCTION NAME: USBFS_CB_h2d_std_dev_05
                                        (0874) ;
                                        (0875) ;  DESCRIPTION:   Set Device Address
                                        (0876) ;
                                        (0877) ;****************************************************************
                                        (0878) ; STANDARD DEVICE OUT REQUEST: Set_Device_Address
                                        (0879) ;****************************************************************
                                        (0880) ;
                                        (0881) ; bmRequestType  : (OUT | STANDARD | DEVICE)      = 00h
                                        (0882) ; bRequest       : SET_ADDRESS                    = 05h
                                        (0883) ; wValue         : DEVICE_ADDRESS                 = 00xxh
                                        (0884) ; wIndex         : RESERVED                       = 0000h
                                        (0885) ; wLength        : RESERVED                       = 0000h
                                        (0886) ;
                                        (0887) ; The SET_DEVICE_ADDRESS request sets the USB device address
                                        (0888) ; for all future USB accesses.
                                        (0889) ;
                                        (0890) ;****************************************************************
                                        (0891) ;
                                        (0892) ;-----------------------------------------------------------------------------
                                        (0893) ;
                                        (0894) ;  ARGUMENTS:
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;
                                        (0898) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0899) ;
                                        (0900) ;  THEORY of OPERATION or PROCEDURE:
                                        (0901) ;
                                        (0902) ;-----------------------------------------------------------------------------
                                        (0903) IF (USB_CB_SRC_h2d_std_dev_05 & USB_UM_SUPPLIED)
                                        (0904) export  USBFS_CB_h2d_std_dev_05
                                        (0905) USBFS_CB_h2d_std_dev_05:
                                        (0906)       
063E: 55 1D 01 MOV   [0x1D],0x1         (0907)     mov     [USBFS_fDataPending], USB_ADDRESS_CHANGE_PENDING       
0641: 5D 5A    MOV   A,REG[0x5A]        (0908)     mov     A, reg[USBFS_EP0DATA+wValueLo]       
0643: 53 0B    MOV   [0xB],A            (0909)     mov     [USBFS_TransferBuffer], A       
                                        (0910)                                                    
0645: 8F 6E    JMP   0x05B4             (0911)     jmp     USBFS_NoDataStageControlTransfer_Local_Std
                                        (0912) ELSE
                                        (0913) IF (USB_CB_SRC_h2d_std_dev_05 & USB_APP_SUPPLIED)
                                        (0914) export  USBFS_CB_h2d_std_dev_05
                                        (0915) USBFS_CB_h2d_std_dev_05:
                                        (0916)     ljmp    APP_USBFS_CB_h2d_std_dev_05
                                        (0917) ENDIF
                                        (0918) ENDIF
                                        (0919) 
                                        (0920) 
                                        (0921) ;-----------------------------------------------------------------------------
                                        (0922) ;  FUNCTION NAME: USBFS_CB_h2d_std_dev_09
                                        (0923) ;
                                        (0924) ;  DESCRIPTION:   Set Configuration
                                        (0925) ;
                                        (0926) ;****************************************************************
                                        (0927) ; STANDARD DEVICE OUT REQUEST: Set_Device_Configuration
                                        (0928) ;****************************************************************
                                        (0929) ;
                                        (0930) ; bmRequestType  : (OUT | STANDARD | DEVICE)      = 00h
                                        (0931) ; bRequest       : SET_CONFIGURATION              = 09h
                                        (0932) ; wValue         : CONFIGURATION_VALUE            = --xxh
                                        (0933) ; wIndex         : RESERVED                       = 0000h
                                        (0934) ; wLength        : RESERVED                       = 0000h
                                        (0935) ;
                                        (0936) ; The SET_DEVICE_CONFIGURATION request selects a device
                                        (0937) ; configuration to be activated as the current configuration.
                                        (0938) ;
                                        (0939) ;****************************************************************
                                        (0940) ;-----------------------------------------------------------------------------
                                        (0941) ;
                                        (0942) ;  ARGUMENTS:
                                        (0943) ;
                                        (0944) ;  RETURNS:
                                        (0945) ;
                                        (0946) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0947) ;
                                        (0948) ;  THEORY of OPERATION or PROCEDURE:
                                        (0949) ;
                                        (0950) ;-----------------------------------------------------------------------------
                                        (0951) IF (USB_CB_SRC_h2d_std_dev_09 & USB_UM_SUPPLIED)
                                        (0952) export  USBFS_CB_h2d_std_dev_09
                                        (0953) USBFS_CB_h2d_std_dev_09:
0647: 93 90    CALL  USBFS_GET_DEVICE_TABLE_ENTRY(0954)     call    USBFS_GET_DEVICE_TABLE_ENTRY    ; Get the selected device
0649: 55 1E 1F MOV   [0x1E],0x1F        (0955)     mov     [USBFS_t2], USBFS_t1       ; Set the GETWORD destination
064C: 93 7A    CALL  USBFS_GETWORD      (0956)     call    USBFS_GETWORD              ; Get the pointer to the CONFIG_LOOKUP table
                                        (0957)                                        ; ITempW has the address
064E: 5D 5A    MOV   A,REG[0x5A]        (0958)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the configuration number
0650: 53 1E    MOV   [0x1E],A           (0959)     mov     [USBFS_t2], A              ; Save it
0652: 51 1F    MOV   A,[0x1F]           (0960)     mov     A, [USBFS_t1]              ; Get the CONFIG_LOOKUP ROM Address MSB
0654: 58 20    MOV   X,[0x20]           (0961)     mov     X, [USBFS_t1+1]            ; Get the CONFIG_LOOKUP ROM Address LSB
0656: 28       ROMX                     (0962)     romx                               ; First entry is the table size (only a byte)
0657: 3A 1E    CMP   A,[0x1E]           (0963)     cmp     A, [USBFS_t2]              ; Range check
0659: CE 50    JC    USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0964)     jc      USBFS_Not_Supported
                                        (0965) 
                                        (0966) ; Refactored from the two loops below
065B: 5F 01 1E MOV   [0x1],[0x1E]       (0967)     mov     [USBFS_Configuration], [USBFS_t2]    ; Save the config number
                                        (0968) 
065E: 3C 1E 00 CMP   [0x1E],0x0         (0969)     cmp     [USBFS_t2], 0              ; Unconfigure?
0661: A0 25    JZ    0x0687             (0970)     jz      .unconfigure
                                        (0971) 
                                        (0972) ; Flow here to configure the endpoints
0663: 51 1F    MOV   A,[0x1F]           (0973)     mov     A, [USBFS_t1]              ; Get the CONFIG_LOOKUP ROM Address MSB
0665: 58 20    MOV   X,[0x20]           (0974)     mov     X, [USBFS_t1+1]            ; Get the CONFIG_LOOKUP ROM Address LSB
0667: 75       INC   X                  (0975)     inc     X                          ; Point to the first table entry
0668: 09 00    ADC   A,0x0              (0976)     adc     A, 0                       ;
066A: 55 1E 1F MOV   [0x1E],0x1F        (0977)     mov     [USBFS_t2], USBFS_t1       ; Set up the destination
066D: 93 59    CALL  USBFS_GETWORD      (0978)     call    USBFS_GETWORD              ; Get the pointer to the CONFIG_LOOKUP table
                                        (0979)                                        ; ITempW has the address
066F: 57 00    MOV   X,0x0              (0980)     mov     X, 0                       ; Start the index at 0, but we inc first
                                        (0981) .configure_next:
0671: 75       INC   X                  (0982)     inc     X                          ; Do the next one
0672: 10       PUSH  X                  (0983)     push    X                          ; Save the endpoint number
0673: 51 1F    MOV   A,[0x1F]           (0984)     mov     A, [USBFS_t1]              ; Get the CONFIG_LOOKUP ROM Address MSB
0675: 58 20    MOV   X,[0x20]           (0985)     mov     X, [USBFS_t1+1]            ; Get the CONFIG_LOOKUP ROM Address LSB
0677: 28       ROMX                     (0986)     romx
0678: 76 20    INC   [0x20]             (0987)     inc     [USBFS_t1+1]               ; Point to the next
067A: 0E 1F 00 ADC   [0x1F],0x0         (0988)     adc     [USBFS_t1], 0              ;
067D: 20       POP   X                  (0989)     pop     X
067E: 90 CF    CALL  0x074F             (0990)     call    ConfigureEP                ; X contains the EP number
                                        (0991)                                        ; A contains the EP Direction
0680: 5B       MOV   A,X                (0992)     mov     A, X                       ;
0681: 39 04    CMP   A,0x4              (0993)     cmp     A, USB_MAX_EP_NUMBER       ; Configure each of the endpoints
0683: BF ED    JNZ   0x0671             (0994)     jnz     .configure_next            ; Do another one?
                                        (0995) ; Flow here when we are done
0685: 80 10    JMP   0x0696             (0996)     jmp     .done
0687: 71 10    OR    F,0x10             
                                        (0997) 
                                        (0998) ; Jump here to unconfigure the endpoints
                                        (0999) .unconfigure:
                                        (1000)     M8C_SetBank1	; _EP1MODE is in Bank 1
0689: 57 04    MOV   X,0x4              (1001)     mov     X, USB_MAX_EP_NUMBER       ; Configure each of the endpoints
                                        (1002) .unconfigure_next:
068B: 56 21 02 MOV   [X+33],0x2         (1003)     mov     [X+USBFS_EndpointAPIStatus], NO_EVENT_ALLOWED   ; For the API
068E: 63 C3 00 MOV   REG[X+0xC3],0x0    (1004)     mov     reg[X+USBFS_EP1MODE-1], USB_MODE_DISABLE   ; Disable the endpoint
0691: 79       DEC   X                  (1005)     dec     X                          ; One more down
0692: BF F8    JNZ   0x068B             (1006)     jnz     .unconfigure_next          ; Don't unconfigure EP0
0694: 70 EF    AND   F,0xEF             
                                        (1007) 	M8C_SetBank0
                                        (1008) .done:
0696: 8F 1D    JMP   0x05B4             (1009)     jmp     USBFS_NoDataStageControlTransfer_Local_Std
                                        (1010) ELSE
                                        (1011) IF (USB_CB_SRC_h2d_std_dev_09 & USB_APP_SUPPLIED)
                                        (1012) export  USBFS_CB_h2d_std_dev_09
                                        (1013) USBFS_CB_h2d_std_dev_09:
                                        (1014)     ljmp    APP_USBFS_CB_h2d_std_dev_09
                                        (1015) ENDIF
                                        (1016) ENDIF
                                        (1017) ;-----------------------------------------------------------------------------
                                        (1018) ;  FUNCTION NAME: USBFS_CB_d2h_std_ifc_00
                                        (1019) ;
                                        (1020) ;  DESCRIPTION:   Get Interface Status
                                        (1021) ;
                                        (1022) ;****************************************************************
                                        (1023) ; STANDARD INTERFACE IN REQUEST: Get_Interface_Status
                                        (1024) ;****************************************************************
                                        (1025) ;
                                        (1026) ; bmRequestType  : (IN | STANDARD | INTERFACE)    = 81h
                                        (1027) ; bRequest       : GET_STATUS                     = 00h
                                        (1028) ; wValue         : RESERVED                       = 0000h
                                        (1029) ; wIndex         : INTERFACE                      = --xxh
                                        (1030) ; wLength        : SIZEOF_INTERFACE_STATUS        = 0002h
                                        (1031) ;
                                        (1032) ; The GET_INTERFACE_STATUS request returns status for the
                                        (1033) ; specified interface.
                                        (1034) ;
                                        (1035) ;****************************************************************
                                        (1036) ;-----------------------------------------------------------------------------
                                        (1037) ;
                                        (1038) ;  ARGUMENTS:
                                        (1039) ;
                                        (1040) ;  RETURNS:
                                        (1041) ;
                                        (1042) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (1043) ;
                                        (1044) ;  THEORY of OPERATION or PROCEDURE:
                                        (1045) ;
                                        (1046) ;-----------------------------------------------------------------------------
                                        (1047) IF (USB_CB_SRC_d2h_std_ifc_00 & USB_UM_SUPPLIED)
                                        (1048) .LITERAL
                                        (1049) GetInterfaceStatusTransferDescrTable:
                                        (1050)     TD_START_TABLE  1                  ; One entry
                                        (1051)     TD_ENTRY        USB_DS_RAM, 2, USBFS_TransferBuffer, NULL_PTR    ; Reuse the transfer buffer
                                        (1052) .ENDLITERAL
                                        (1053) export  USBFS_CB_d2h_std_ifc_00
                                        (1054) USBFS_CB_d2h_std_ifc_00:
06A1: 55 0B 00 MOV   [0xB],0x0          (1055)     mov     [USBFS_TransferBuffer], 0       ; Zero the transfer buffer
06A4: 55 0C 00 MOV   [0xC],0x0          (1056)     mov     [USBFS_TransferBuffer+1], 0    ;
                                        (1057) 
06A7: 55 1E 00 MOV   [0x1E],0x0         (1058)     mov     [USBFS_t2], 0              ; Use the UM temp var--Selector
06AA: 50 06    MOV   A,0x6              (1059)     mov     A, >GetInterfaceStatusTransferDescrTable    ; Get the ROM Address MSB
06AC: 57 98    MOV   X,0x98             (1060)     mov     X, <GetInterfaceStatusTransferDescrTable    ; Get the ROM Address LSB
                                        (1061) 
06AE: 8F 02    JMP   0x05B1             (1062)     jmp     USBFS_GetTableEntry_Local_Std
                                        (1063) ELSE
                                        (1064) IF (USB_CB_SRC_d2h_std_ifc_00 & USB_APP_SUPPLIED)
                                        (1065) export  USBFS_CB_d2h_std_ifc_00
                                        (1066) USBFS_CB_d2h_std_ifc_00:
                                        (1067)     ljmp    APP_USBFS_CB_d2h_std_ifc_00
                                        (1068) ENDIF
                                        (1069) ENDIF
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;  FUNCTION NAME: USBFS_CB_d2h_std_ifc_10
                                        (1072) ;
                                        (1073) ;  DESCRIPTION:   Get Interface
                                        (1074) ;
                                        (1075) ;****************************************************************
                                        (1076) ; STANDARD INTERFACE IN REQUEST: Get_Interface
                                        (1077) ;****************************************************************
                                        (1078) ;
                                        (1079) ; bmRequestType  : (IN | STANDARD | INTERFACE)    = 81h
                                        (1080) ; bRequest       : GET_INTERFACE                  = 0Ah
                                        (1081) ; wValue         : RESERVED                       = 0000h
                                        (1082) ; wIndex         : INTERFACE                      = xxxxh
                                        (1083) ; wLength        : SIZEOF_GET_INTERFACE           = 0001h
                                        (1084) ;
                                        (1085) ; The GET_INTERFACE request returns the selected alternate
                                        (1086) ; setting for the specified interface.
                                        (1087) ;
                                        (1088) ;****************************************************************
                                        (1089) ;-----------------------------------------------------------------------------
                                        (1090) ;
                                        (1091) ;  ARGUMENTS:
                                        (1092) ;
                                        (1093) ;  RETURNS:
                                        (1094) ;
                                        (1095) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (1096) ;
                                        (1097) ;  THEORY of OPERATION or PROCEDURE:
                                        (1098) ;
                                        (1099) ;-----------------------------------------------------------------------------
                                        (1100) IF (USB_CB_SRC_d2h_std_ifc_10 & USB_UM_SUPPLIED)
                                        (1101) .LITERAL
                                        (1102) GetInterfaceTransferDescrTable:
                                        (1103)     TD_START_TABLE  1                  ; One entry
                                        (1104)     TD_ENTRY        USB_DS_RAM, 1, USBFS_TransferBuffer, NULL_PTR    ; Reuse the transfer buffer
                                        (1105) .ENDLITERAL
                                        (1106) export  USBFS_CB_d2h_std_ifc_10
                                        (1107) USBFS_CB_d2h_std_ifc_10:
06B9: 5D 5C    MOV   A,REG[0x5C]        (1108)     mov     A, reg[USBFS_EP0DATA+wIndexLo]    ; Get the interface number
06BB: 39 01    CMP   A,0x1              (1109)     cmp     A, 1h                      ; Valid interface number? (UM Parameter: NumInterfaces)
06BD: DD EC    JNC   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(1110)     jnc     USBFS_Not_Supported
                                        (1111) 
06BF: 5C       MOV   X,A                (1112)     mov     X, A                       ; The interface number is the index into alternates settings table
                                        (1113) 
06C0: 52 03    MOV   A,[X+3]            (1114)     mov     A, [X + USBFS_InterfaceSetting]    ; Save the current interface setting
06C2: 53 0B    MOV   [0xB],A            (1115)     mov     [USBFS_TransferBuffer], A       ; into the transfer buffer
                                        (1116) 
06C4: 55 1E 00 MOV   [0x1E],0x0         (1117)     mov     [USBFS_t2], 0              ; Use the UM temp var--Selector
06C7: 50 06    MOV   A,0x6              (1118)     mov     A, >GetInterfaceTransferDescrTable    ; Get the ROM Address MSB
06C9: 57 B0    MOV   X,0xB0             (1119)     mov     X, <GetInterfaceTransferDescrTable    ; Get the ROM Address LSB
                                        (1120) 
06CB: 8E E5    JMP   0x05B1             (1121)     jmp     USBFS_GetTableEntry_Local_Std
                                        (1122) ELSE
                                        (1123) IF (USB_CB_SRC_d2h_std_ifc_10 & USB_APP_SUPPLIED)
                                        (1124) export  USBFS_CB_d2h_std_ifc_10
                                        (1125) USBFS_CB_d2h_std_ifc_10:
                                        (1126)     ljmp    APP_USBFS_CB_d2h_std_ifc_10
                                        (1127) ENDIF
                                        (1128) ENDIF
                                        (1129) ;-----------------------------------------------------------------------------
                                        (1130) ;  FUNCTION NAME: USBFS_CB_d2h_std_ep_00
                                        (1131) ;
                                        (1132) ;  DESCRIPTION:   Get Endpoint Status
                                        (1133) ;
                                        (1134) ;****************************************************************
                                        (1135) ; STANDARD ENDPOINT IN REQUEST: Get_Endpoint_Status
                                        (1136) ;****************************************************************
                                        (1137) ;
                                        (1138) ; bmRequestType  : (IN | STANDARD | ENDPOINT)     = 82h
                                        (1139) ; bRequest       : GET_STATUS                     = 00h
                                        (1140) ; wValue         : RESERVED                       = 0000h
                                        (1141) ; wIndex         : ENDPOINT                       = 00xxh
                                        (1142) ; wLength        : SIZEOF_ENDPOINT_STATUS         = 0002h
                                        (1143) ;
                                        (1144) ; The GET_ENDPOINT_STATUS request returns status for the specified
                                        (1145) ; endpoint.
                                        (1146) ;
                                        (1147) ;****************************************************************
                                        (1148) ;-----------------------------------------------------------------------------
                                        (1149) ;
                                        (1150) ;  ARGUMENTS:
                                        (1151) ;
                                        (1152) ;  RETURNS:
                                        (1153) ;
                                        (1154) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (1155) ;
                                        (1156) ;  THEORY of OPERATION or PROCEDURE:
                                        (1157) ;
                                        (1158) ;-----------------------------------------------------------------------------
                                        (1159) IF (USB_CB_SRC_d2h_std_ep_00 & USB_UM_SUPPLIED)
                                        (1160) export  USBFS_CB_d2h_std_ep_00
                                        (1161) USBFS_CB_d2h_std_ep_00:
06CD: 5D 5C    MOV   A,REG[0x5C]        (1162)     mov     A, reg[USBFS_EP0DATA+wIndexLo]    ; Get the endpoint number
06CF: 21 7F    AND   A,0x7F             (1163)     and     A, ~USB_DIR_IN             ; Strip off the direction bit
06D1: 39 05    CMP   A,0x5              (1164)     cmp     A, USB_NUM_ENDPOINTS       ; Range check
06D3: DD D6    JNC   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(1165)     jnc     USBFS_Not_Supported
                                        (1166) 
06D5: 5C       MOV   X,A                (1167)     mov     X, A                       ; The endpoint number is the index
                                        (1168) 
06D6: 55 1E 00 MOV   [0x1E],0x0         (1169)     mov     [USBFS_t2], 0              ; Use the UM temp var--Selector
                                        (1170) 
06D9: 55 0C 00 MOV   [0xC],0x0          (1171)     mov     [USBFS_TransferBuffer + 1], 0    ; Use the UM Transfer Buffer
06DC: 52 04    MOV   A,[X+4]            (1172)     mov     A, [X + USBFS_EndpointStatus]    ; Get the status
06DE: 53 0B    MOV   [0xB],A            (1173)     mov     [USBFS_TransferBuffer], A    ; Save it in the report
                                        (1174) 
06E0: 50 04    MOV   A,0x4              (1175)     mov     A, >GetStatusTransferDescrTable    ; Get the ROM Address MSB
06E2: 57 B1    MOV   X,0xB1             (1176)     mov     X, <GetStatusTransferDescrTable    ; Get the ROM Address LSB
                                        (1177) 
06E4: 8E CC    JMP   0x05B1             (1178)     jmp     USBFS_GetTableEntry_Local_Std
                                        (1179) ELSE
                                        (1180) IF (USB_CB_SRC_d2h_std_ep_00 & USB_APP_SUPPLIED)
                                        (1181) export  USBFS_CB_d2h_std_ep_00
                                        (1182) USBFS_CB_d2h_std_ep_00:
                                        (1183)     ljmp    APP_USBFS_CB_d2h_std_ep_00
                                        (1184) ENDIF
                                        (1185) ENDIF
                                        (1186) 
                                        (1187) ;-----------------------------------------------------------------------------
                                        (1188) ;  FUNCTION NAME: USBFS_CB_h2d_std_ep_01
                                        (1189) ;
                                        (1190) ;  DESCRIPTION:   Clear Endpoint Feature
                                        (1191) ;
                                        (1192) ;****************************************************************
                                        (1193) ; STANDARD ENDPOINT OUT REQUEST: Clear_Endpoint_Feature
                                        (1194) ;****************************************************************
                                        (1195) ;
                                        (1196) ; bmRequestType  : (OUT | STANDARD | ENDPOINT)    = 02h
                                        (1197) ; bRequest       : CLEAR_FEATURE                  = 01h
                                        (1198) ; wValue         : FEATURE_SELECTOR               = --xxh
                                        (1199) ; wIndex         : ENDPOINT                       = 00xxh
                                        (1200) ; wLength        : RESERVED                       = 0000h
                                        (1201) ;
                                        (1202) ; The CLEAR_ENDPOINT_FEATURE request disables a particular
                                        (1203) ; feature for an endpoint.
                                        (1204) ;
                                        (1205) ; The only feature supported for an endpoint is the EP_HALT
                                        (1206) ; feature.
                                        (1207) ;
                                        (1208) ;****************************************************************
                                        (1209) ;-----------------------------------------------------------------------------
                                        (1210) ;
                                        (1211) ;  ARGUMENTS:
                                        (1212) ;
                                        (1213) ;  RETURNS:
                                        (1214) ;
                                        (1215) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (1216) ;
                                        (1217) ;  THEORY of OPERATION or PROCEDURE:
                                        (1218) ;
                                        (1219) ;-----------------------------------------------------------------------------
                                        (1220) IF (USB_CB_SRC_h2d_std_ep_01 & USB_UM_SUPPLIED)
                                        (1221) export  USBFS_CB_h2d_std_ep_01
                                        (1222) USBFS_CB_h2d_std_ep_01:
06E6: 5D 5A    MOV   A,REG[0x5A]        (1223)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the feature selector
06E8: 39 00    CMP   A,0x0              (1224)     cmp     A, USB_ENDPOINT_HALT       ; Halt is the only selector defined for endpoints
06EA: BD BF    JNZ   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(1225)     jnz     USBFS_Not_Supported
                                        (1226) 
06EC: 5D 5C    MOV   A,REG[0x5C]        (1227)     mov     A, reg[USBFS_EP0DATA+wIndexLo]    ; Get the Endpoint number
06EE: 21 7F    AND   A,0x7F             (1228)     and     A, ~USB_DIR_IN             ; Strip off the direction bit
06F0: 39 00    CMP   A,0x0              (1229)     cmp     A, 0                       ; Since we can't halt the Control Endpoint
06F2: A0 2C    JZ    0x071F             (1230)     jz      .done
                                        (1231) 
06F4: 39 05    CMP   A,0x5              (1232)     cmp     A, USB_NUM_ENDPOINTS       ; Range check
06F6: DD B3    JNC   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(1233)     jnc     USBFS_Not_Supported
                                        (1234) 
06F8: 5C       MOV   X,A                (1235)     mov     X, A                       ; Endpoint number is the index
06F9: 27 04 FE AND   [X+4],0xFE         (1236)     and     [X+USBFS_EndpointStatus], ~USB_ENDPOINT_STATUS_HALT    ; Clear the endpoint halt
                                        (1237) 
                                        (1238) ;mykt_ukr    index   USBFS_USB_EP_BIT_LOOKUP	   ; Find bit position for endpoint
06FC: 10       PUSH  X                  (1239)     push X
06FD: 01 B7    ADD   A,0xB7             (1240)     add     A, <USBFS_USB_EP_BIT_LOOKUP           ; endpoint address LSB
06FF: 57 02    MOV   X,0x2              (1241)     mov     X, >USBFS_USB_EP_BIT_LOOKUP           ; endpoint address MSB
0701: 4B       SWAP  A,X                (1242)     swap    A, X
0702: 09 00    ADC   A,0x0              (1243)     adc     A, 0
0704: 28       ROMX                     (1244)     romx
0705: 20       POP   X                  (1245)     pop X
                                        (1246) 
0706: 31 FF    XOR   A,0xFF             (1247)     xor     A, FFh
0708: 24 1C    AND   [0x1C],A           (1248)     and     [USBFS_EPDataToggle], A ; Clear the data toggle for this endpoint
                                        (1249) 
070A: 49 5C 80 TST   REG[0x5C],0x80     (1250)     tst     reg[USBFS_EP0DATA+wIndexLo], USB_DIR_IN    ; IN or OUT endpoint?
070D: 71 10    OR    F,0x10             
                                        (1251)     M8C_SetBank1	                      ; For EP1_MODE register
070F: B0 09    JNZ   0x0719             (1252)     jnz     .in
                                        (1253) 
                                        (1254)     ; Mark endpoint as empty so it will be reloaded
0711: 56 21 00 MOV   [X+33],0x0         (1255)     mov     [X+USBFS_EndpointAPIStatus], NO_EVENT_PENDING
0714: 63 C3 09 MOV   REG[X+0xC3],0x9    (1256)     mov     reg[X + USBFS_EP1MODE - 1], USB_MODE_ACK_OUT    ; ACK the endpoint
0717: 80 07    JMP   0x071F             (1257)     jmp     .done
                                        (1258) .in:
0719: 56 21 01 MOV   [X+33],0x1         (1259)     mov     [X+USBFS_EndpointAPIStatus], EVENT_PENDING
071C: 63 C3 0C MOV   REG[X+0xC3],0xC    (1260)     mov     reg[X + USBFS_EP1MODE - 1], USB_MODE_NAK_IN    ; NAK the endpoint
071F: 70 EF    AND   F,0xEF             
                                        (1261) .done:
                                        (1262) 	M8C_SetBank0
0721: 8E 92    JMP   0x05B4             (1263)     jmp     USBFS_NoDataStageControlTransfer_Local_Std
                                        (1264) ELSE
                                        (1265) IF (USB_CB_SRC_h2d_std_ep_01 & USB_APP_SUPPLIED)
                                        (1266) export  USBFS_CB_h2d_std_ep_01
                                        (1267) USBFS_CB_h2d_std_ep_01:
                                        (1268)     ljmp    APP_USBFS_CB_h2d_std_ep_01
                                        (1269) ENDIF
                                        (1270) ENDIF
                                        (1271) ;-----------------------------------------------------------------------------
                                        (1272) ;  FUNCTION NAME: USBFS_CB_h2d_std_ep_03
                                        (1273) ;
                                        (1274) ;  DESCRIPTION:   Set Endpoint Feature
                                        (1275) ;
                                        (1276) ;****************************************************************
                                        (1277) ; STANDARD ENDPOINT OUT REQUEST: Set_Endpoint_Feature
                                        (1278) ;****************************************************************
                                        (1279) ;
                                        (1280) ; bmRequestType  : (OUT | STANDARD | ENDPOINT)    = 02h
                                        (1281) ; bRequest       : SET_FEATURE                    = 03h
                                        (1282) ; wValue         : FEATURE_SELECTOR               = --xxh
                                        (1283) ; wIndex         : ENDPOINT                       = 00xxh
                                        (1284) ; wLength        : RESERVED                       = 0000h
                                        (1285) ;
                                        (1286) ; The SET_ENDPOINT_FEATURE request enables a particular feature
                                        (1287) ; for a specific endpoint. The only feature supported for an
                                        (1288) ; endpoint is the EP_HALT feature.
                                        (1289) ;
                                        (1290) ;****************************************************************
                                        (1291) ;-----------------------------------------------------------------------------
                                        (1292) ;
                                        (1293) ;  ARGUMENTS:
                                        (1294) ;
                                        (1295) ;  RETURNS:
                                        (1296) ;
                                        (1297) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;
                                        (1301) ;-----------------------------------------------------------------------------
                                        (1302) IF (USB_CB_SRC_h2d_std_ep_03 & USB_UM_SUPPLIED)
                                        (1303) export  USBFS_CB_h2d_std_ep_03
                                        (1304) USBFS_CB_h2d_std_ep_03:
0723: 5D 5A    MOV   A,REG[0x5A]        (1305)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the feature selector
0725: 39 00    CMP   A,0x0              (1306)     cmp     A, USB_ENDPOINT_HALT       ; Halt is the only selector defined for endpoints
0727: BD 82    JNZ   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(1307)     jnz     USBFS_Not_Supported
                                        (1308) 
0729: 5D 5C    MOV   A,REG[0x5C]        (1309)     mov     A, reg[USBFS_EP0DATA+wIndexLo]    ; Get the Endpoint number
072B: 21 7F    AND   A,0x7F             (1310)     and     A, ~USB_DIR_IN             ; Strip off the direction bit
072D: 39 00    CMP   A,0x0              (1311)     cmp     A, 0                       ; Never halt the Control Endpoint
072F: A0 1B    JZ    0x074B             (1312)     jz      .done
                                        (1313) 
0731: 39 05    CMP   A,0x5              (1314)     cmp     A, USB_NUM_ENDPOINTS       ; Range check
0733: DD 76    JNC   USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(1315)     jnc     USBFS_Not_Supported
                                        (1316) 
0735: 5C       MOV   X,A                (1317)     mov     X, A                       ; Endpoint number is the index
                                        (1318) 
0736: 2F 04 01 OR    [X+4],0x1          (1319)     or      [X+USBFS_EndpointStatus], USB_ENDPOINT_STATUS_HALT    ; Halt the endpoint
0739: 56 21 02 MOV   [X+33],0x2         (1320)     mov     [X+USBFS_EndpointAPIStatus], NO_EVENT_ALLOWED
                                        (1321) 
073C: 49 5C 80 TST   REG[0x5C],0x80     (1322)     tst     reg[USBFS_EP0DATA+wIndexLo], USB_DIR_IN    ; IN or OUT endpoint?
073F: 71 10    OR    F,0x10             
                                        (1323)     M8C_SetBank1	                      ; For EP1_MODE register
0741: B0 06    JNZ   0x0748             (1324)     jnz     .in
                                        (1325) 
0743: 63 C3 89 MOV   REG[X+0xC3],0x89   (1326)     mov     reg[X + USBFS_EP1MODE - 1], USB_MODE_STALL_DATA_EP | USB_MODE_ACK_OUT    ; Stall the endpoint
0746: 80 04    JMP   0x074B             (1327)     jmp     .done
                                        (1328) .in:
0748: 63 C3 8D MOV   REG[X+0xC3],0x8D   (1329)     mov     reg[X + USBFS_EP1MODE - 1], USB_MODE_STALL_DATA_EP | USB_MODE_ACK_IN    ; Stall the endpoint
074B: 70 EF    AND   F,0xEF             
                                        (1330) .done:
                                        (1331) 	M8C_SetBank0
074D: 8E 66    JMP   0x05B4             (1332)     jmp     USBFS_NoDataStageControlTransfer_Local_Std
                                        (1333) ELSE
                                        (1334) IF (USB_CB_SRC_h2d_std_ep_03 & USB_APP_SUPPLIED)
                                        (1335) export  USBFS_CB_h2d_std_ep_03
                                        (1336) USBFS_CB_h2d_std_ep_03:
                                        (1337)     ljmp    APP_USBFS_CB_h2d_std_ep_03
                                        (1338) ENDIF
                                        (1339) ENDIF
                                        (1340) ;-----------------------------------------------------------------------------
                                        (1341) ;  FUNCTION NAME: ConfigureEP
                                        (1342) ;
                                        (1343) ;  DESCRIPTION:   Configure an endpoint
                                        (1344) ;
                                        (1345) ;  ARGUMENTS:    A contains the endpoint direction
                                        (1346) ;                X contains the endpoint number
                                        (1347) ;
                                        (1348) ;  RETURNS:
                                        (1349) ;
                                        (1350) ;  SIDE EFFECTS:  The A REGISTER IS VOLATILE.  X REGISTER IS MAINTAINED!
                                        (1351) ;
                                        (1352) ;  THEORY of OPERATION or PROCEDURE:
                                        (1353) ;
                                        (1354) ;-----------------------------------------------------------------------------
                                        (1355) ConfigureEP:
074F: 39 7F    CMP   A,0x7F             (1356)     cmp     A, USB_DIR_UNUSED          ; Is this endpoint unused?
0751: B0 02    JNZ   0x0754             (1357)     jnz     .enable                    ; Only enable it if it is used
0753: 7F       RET                      (1358)     ret                                ; Quick exit if this endpoint is unused
                                        (1359) 
                                        (1360) ; Jump here to enable an endpoint
                                        (1361) .enable:
0754: 08       PUSH  A                  (1362)     push    A		                        ; Save the endpoint direction
0755: 5B       MOV   A,X                (1363)     mov     A, X	                      ; We are using a jacc to dispatch to enable the interrupt
0756: 64       ASL   A                  (1364)     asl     A		                        ;
0757: E0 01    JACC  0x0759             (1365)     jacc    .EP_INT_ENABLE             ;
                                        (1366) 
                                        (1367) 
                                        (1368) .EP_INT_ENABLE:
0759: 80 09    JMP   0x0763             (1369)     jmp     .EP0IntEnable              ; Enable EP0
075B: 80 0C    JMP   0x0768             (1370)     jmp     .EP1IntEnable              ; Enable EP1
075D: 80 0F    JMP   0x076D             (1371)     jmp     .EP2IntEnable              ; Enable EP2
075F: 80 12    JMP   0x0772             (1372)     jmp     .EP3IntEnable              ; Enable EP3
0761: 80 15    JMP   0x0777             (1373)     jmp     .EP4IntEnable              ; Enable EP4
0763: 43 DF 04 OR    REG[0xDF],0x4      
                                        (1374) 
                                        (1375) ; Jump here to enable EP0 Interrupts
                                        (1376) .EP0IntEnable:
                                        (1377)     M8C_EnableIntMask USBFS_INT_REG, USBFS_INT_EP0_MASK
                                        (1378) ;    jmp   .exit2
0766: 80 15    JMP   0x077C             (1379)     jmp     .cont
0768: 43 DF 08 OR    REG[0xDF],0x8      
                                        (1380) .EP1IntEnable:
                                        (1381)     M8C_EnableIntMask USBFS_INT_REG, USBFS_INT_EP1_MASK
076B: 80 10    JMP   0x077C             (1382)     jmp     .cont
076D: 43 DF 10 OR    REG[0xDF],0x10     
                                        (1383) .EP2IntEnable:
                                        (1384)     M8C_EnableIntMask USBFS_INT_REG, USBFS_INT_EP2_MASK
0770: 80 0B    JMP   0x077C             (1385)     jmp     .cont
0772: 43 DF 20 OR    REG[0xDF],0x20     
                                        (1386) .EP3IntEnable:
                                        (1387)     M8C_EnableIntMask USBFS_INT_REG, USBFS_INT_EP3_MASK
0775: 80 06    JMP   0x077C             (1388)     jmp     .cont
0777: 43 DF 40 OR    REG[0xDF],0x40     
                                        (1389) .EP4IntEnable:
                                        (1390)     M8C_EnableIntMask USBFS_INT_REG, USBFS_INT_EP4_MASK
077A: 80 01    JMP   0x077C             (1391) 	jmp     .cont
                                        (1392) 
                                        (1393) ; Jump or flow here to continue configuring the endpoint
                                        (1394) ;.contEP0:
                                        (1395) ;    pop   A                           ; Get the endpoint direction back
                                        (1396) ;    and   A, USB_DIR_IN               ; Is it an IN endpoint?
                                        (1397) ;    jnz   .inEP0                      ; Jump on IN
                                        (1398) ; Flow here for an OUT Endpoint
                                        (1399) ;    mov   [USBFS_TempMode], USB_MODE_NAK_OUT   ; NAK the endpoint
                                        (1400) ;    jmp   .exit2
                                        (1401) ; Jump here for an IN Endpoint
                                        (1402) ;.inEP0:
                                        (1403) ;    mov   [USBFS_TempMode], USB_MODE_NAK_IN   ; NAK the endpoint
                                        (1404) ;	jmp   .exit2
                                        (1405) .cont:
077C: 5B       MOV   A,X                (1406)     mov     A, X	                      ; Get the endpoint number from X
                                        (1407) 
                                        (1408) ;mykt_ukr     index   USBFS_USB_EP_BIT_LOOKUP	   ; Find bit position for endpoint
077D: 10       PUSH  X                  (1409)     push X	
077E: 01 B7    ADD   A,0xB7             (1410)     add     A, <USBFS_USB_EP_BIT_LOOKUP           ; endpoint address LSB
0780: 57 02    MOV   X,0x2              (1411)     mov     X, >USBFS_USB_EP_BIT_LOOKUP           ; endpoint address MSB
0782: 4B       SWAP  A,X                (1412)     swap    A, X
0783: 09 00    ADC   A,0x0              (1413)     adc     A, 0
0785: 28       ROMX                     (1414)     romx
0786: 20       POP   X                  (1415)     pop X
                                        (1416) 	
0787: 31 FF    XOR   A,0xFF             (1417)     xor     A, FFh
0789: 24 1C    AND   [0x1C],A           (1418)     and     [USBFS_EPDataToggle], A ; Clear the data toggle for this endpoint
                                        (1419) 
078B: 27 04 FE AND   [X+4],0xFE         (1420)     and     [X+USBFS_EndpointStatus], ~USB_ENDPOINT_STATUS_HALT    ; Clear any endpoint halts
078E: 71 10    OR    F,0x10             
                                        (1421) 
                                        (1422) ; if endpoint 0 set EP0MODE
                                        (1423) ; then exit
                                        (1424) ;    mov     A, X	                     ; Get the endpoint number from X
                                        (1425) ;    cmp     A, EP0	                   ; Is this endpoint zero?
                                        (1426) ;    jnz     .enable                   ; Only enable it if it is used
                                        (1427) 
                                        (1428)     M8C_SetBank1
0790: 18       POP   A                  (1429)     pop     A                          ; Get the endpoint direction back
0791: 21 80    AND   A,0x80             (1430)     and     A, USB_DIR_IN              ; Is it an IN endpoint?
0793: B0 09    JNZ   0x079D             (1431)     jnz     .in                        ; Jump on IN
                                        (1432) ; Flow here for an OUT Endpoint
0795: 63 C3 09 MOV   REG[X+0xC3],0x9    (1433)     mov     reg[X+USBFS_EP1MODE-1], USB_MODE_ACK_OUT   ; ACK the endpoint
0798: 56 21 00 MOV   [X+33],0x0         (1434)     mov     [X+USBFS_EndpointAPIStatus], NO_EVENT_PENDING   ; For the API
079B: 80 07    JMP   0x07A3             (1435)     jmp     .exit1
                                        (1436) ; Jump here for an IN Endpoint
                                        (1437) .in:
079D: 63 C3 0C MOV   REG[X+0xC3],0xC    (1438)     mov     reg[X+USBFS_EP1MODE-1], USB_MODE_NAK_IN   ; NAK the endpoint
07A0: 56 21 01 MOV   [X+33],0x1         (1439)     mov     [X+USBFS_EndpointAPIStatus], EVENT_PENDING   ; For the API
07A3: 70 EF    AND   F,0xEF             
                                        (1440) ; Jump or flow here to set the API event and exit
                                        (1441) .exit1:
                                        (1442) 	M8C_SetBank0
                                        (1443) .exit2:
                                        (1444) ;    mov   [X+USBFS_EPDataToggle], 0    ; Clear all EP data toggles?  Is this right?
07A5: 7F       RET                      (1445)     ret
                                        (1446) 
                                        (1447) ; End of File USBFS_std.asm
FILE: lib\usbfs_drv.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: USBFS_drv.asm
                                        (0004) ;;  Version: 1.90, Updated on 2012/3/2 at 9:15:35
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: USB Device User Module control endpoint driver
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "USBFS_macros.inc"
                                        (0025) include "USBFS.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  USBFS_EP0_ISR
                                        (0031) export _USBFS_EP0_ISR
                                        (0032) export  USBFS_InitControlRead
                                        (0033) export _USBFS_InitControlRead
                                        (0034) export  USBFS_InitControlWrite
                                        (0035) export _USBFS_InitControlWrite
                                        (0036) export  USBFS_InitNoDataStageControlTransfer
                                        (0037) export _USBFS_InitNoDataStageControlTransfer
                                        (0038) export  USBFS_NoDataStageControlTransfer
                                        (0039) 
                                        (0040) ;-----------------------------------------------
                                        (0041) ;  Macro Definitions
                                        (0042) ;-----------------------------------------------
                                        (0043) 
                                        (0044) ;-----------------------------------------------
                                        (0045) ;  Constant Definitions
                                        (0046) ;-----------------------------------------------
                                        (0047) 
                                        (0048) ;-----------------------------------------------
                                        (0049) ; Variable Allocation
                                        (0050) ;-----------------------------------------------
                                        (0051) AREA InterruptRAM (RAM, REL, CON)
                                        (0052) ;----------------------------------------------------------------------------
                                        (0053) ; Current Device
                                        (0054) ;----------------------------------------------------------------------------
                                        (0055) export USBFS_bCurrentDevice, _USBFS_bCurrentDevice
                                        (0056)  USBFS_bCurrentDevice:
                                        (0057) _USBFS_bCurrentDevice:                  BLK   1    ;  Current Device
                                        (0058) ;----------------------------------------------------------------------------
                                        (0059) ; Current Configuration
                                        (0060) ;----------------------------------------------------------------------------
                                        (0061) export USBFS_Configuration, _USBFS_Configuration
                                        (0062)  USBFS_Configuration:
                                        (0063) _USBFS_Configuration:                   BLK   1    ;  Current Configuration
                                        (0064) ;----------------------------------------------------------------------------
                                        (0065) ; Current Device Status
                                        (0066) ;----------------------------------------------------------------------------
                                        (0067) export USBFS_DeviceStatus, _USBFS_DeviceStatus
                                        (0068)  USBFS_DeviceStatus:
                                        (0069) _USBFS_DeviceStatus:                    BLK   1    ;  Current Device Status
                                        (0070) ;----------------------------------------------------------------------------
                                        (0071) ; Interface Setting
                                        (0072) ;----------------------------------------------------------------------------
                                        (0073) ;  User Module Parameter determines the number of interfaces
                                        (0074) export USBFS_InterfaceSetting, _USBFS_InterfaceSetting
                                        (0075)  USBFS_InterfaceSetting:
                                        (0076) _USBFS_InterfaceSetting:                BLK   1h    ; Interface Setting
                                        (0077) ;----------------------------------------------------------------------------
                                        (0078) ; Endpoint Status--USB Status
                                        (0079) ;----------------------------------------------------------------------------
                                        (0080) export USBFS_EndpointStatus, _USBFS_EndpointStatus
                                        (0081)  USBFS_EndpointStatus:
                                        (0082) _USBFS_EndpointStatus:                  BLK   USB_NUM_ENDPOINTS    ; Endpoint Status
                                        (0083) ;----------------------------------------------------------------------------
                                        (0084) ; Last Packet Size
                                        (0085) ;----------------------------------------------------------------------------
                                        (0086) export USBFS_LastSize
                                        (0087)  USBFS_LastSize:                        BLK   1    ; Last Packet Size
                                        (0088) ;----------------------------------------------------------------------------
                                        (0089) ; Control Transfer State Machine
                                        (0090) ; State values for Control Write
                                        (0091) ; State values for Control Read
                                        (0092) ;----------------------------------------------------------------------------
                                        (0093) export USBFS_TransferType
                                        (0094)  USBFS_TransferType:                    BLK   1    ; Control Transfer State Machine
                                        (0095) ;----------------------------------------------------------------------------
                                        (0096) ; Control Transfer Intermediate Buffer--Shared among the requests
                                        (0097) ;----------------------------------------------------------------------------
                                        (0098) export USBFS_TransferBuffer
                                        (0099)  USBFS_TransferBuffer:                  BLK   8
                                        (0100) ;----------------------------------------------------------------------------
                                        (0101) ; Transfer Descriptor Data for Control Transfer
                                        (0102) ;  --The following data have the same format as the first 5 bytes of the TD_ENTRY
                                        (0103) ;----------------------------------------------------------------------------
                                        (0104) ; Control Transfer Data Source
                                        (0105) ;   USB_DS_ROM
                                        (0106) ;   USB_DS_RAM
                                        (0107) ;   USB_DS_RAM_AS_NEEDED
                                        (0108) ;----------------------------------------------------------------------------
                                        (0109) export USBFS_CurrentTD, _USBFS_CurrentTD
                                        (0110) _USBFS_CurrentTD:
                                        (0111)  USBFS_CurrentTD:
                                        (0112) export USBFS_DataSource, _USBFS_DataSource
                                        (0113) _USBFS_DataSource:
                                        (0114)  USBFS_DataSource:                      BLK   1
                                        (0115) ;----------------------------------------------------------------------------
                                        (0116) ; Control Transfer Data Size
                                        (0117) ;----------------------------------------------------------------------------
                                        (0118) export USBFS_TransferSize, _USBFS_TransferSize
                                        (0119) _USBFS_TransferSize:
                                        (0120)  USBFS_TransferSize:                    BLK   2
                                        (0121) ;----------------------------------------------------------------------------
                                        (0122) ; Control Transfer Data Pointer
                                        (0123) ;   Source for Control Read
                                        (0124) ;   Destination for Control Write
                                        (0125) ;----------------------------------------------------------------------------
                                        (0126) export USBFS_DataPtr, _USBFS_DataPtr
                                        (0127) _USBFS_DataPtr:
                                        (0128)  USBFS_DataPtr:                         BLK   2
                                        (0129) ;----------------------------------------------------------------------------
                                        (0130) ; Transfer Completion Notification
                                        (0131) ;----------------------------------------------------------------------------
                                        (0132) export USBFS_StatusBlockPtr, _USBFS_StatusBlockPtr
                                        (0133) _USBFS_StatusBlockPtr:
                                        (0134)  USBFS_StatusBlockPtr:                  BLK   2
                                        (0135) 
                                        (0136) ;----------------------------------------------------------------------------
                                        (0137) ; Control Transfer _TransferByteCount (Actually transfered
                                        (0138) ;----------------------------------------------------------------------------
                                        (0139)  USBFS_TransferByteCount:               BLK   2
                                        (0140) 
                                        (0141) ;----------------------------------------------------------------------------
                                        (0142) ; Control Endpoint Data toggle / krypton uses this ONLY for EP0  
                                        (0143) ; For 20x6x devices: See USBFS_EPXDataToggle defined in usb.asm
                                        (0144) export USBFS_EPDataToggle, _USBFS_EPDataToggle
                                        (0145)  _USBFS_EPDataToggle:
                                        (0146)  USBFS_EPDataToggle:
                                        (0147)  USBFS_EP0DataToggle:                   BLK   1
                                        (0148) ;----------------------------------------------------------------------------
                                        (0149) ; Control Endpoint Data Pending Flag
                                        (0150) export USBFS_fDataPending
                                        (0151)  USBFS_fDataPending:                    BLK   1
                                        (0152) ;----------------------------------------------------------------------------
                                        (0153) ; Control Endpoint Data Pending Flag
                                        (0154) ;export USBFS_PendingData
                                        (0155) ; USBFS_PendingData:                    BLK   1
                                        (0156) ;----------------------------------------------------------------------------
                                        (0157) ; Temporary Data registers
                                        (0158) export USBFS_t2, USBFS_t1, USBFS_t0
                                        (0159)  USBFS_t2:                              BLK   1    ; Temporary shared by the UM
                                        (0160)  USBFS_t1:                              BLK   1    ; Temporary shared by the UM
                                        (0161)  USBFS_t0:                              BLK   1    ; Temporary shared by the UM
                                        (0162) 
                                        (0163) ;export USBFS_IntState
                                        (0164) ; USBFS_IntState:                       BLK  1
                                        (0165) ;export USBFS_StackPointer
                                        (0166) ; USBFS_StackPointer:                   BLK  1
                                        (0167) ;export USBFS_TempMode
                                        (0168) ; USBFS_TempMode:                       BLK 1
                                        (0169) ;----------------------------------------------------------------------------
                                        (0170) ; Endpoint Transfer--API Status
                                        (0171) ;----------------------------------------------------------------------------
                                        (0172) export USBFS_EndpointAPIStatus, _USBFS_EndpointAPIStatus
                                        (0173)  USBFS_EndpointAPIStatus:
                                        (0174) _USBFS_EndpointAPIStatus:               BLK   USB_NUM_ENDPOINTS    ; Endpoint Status
                                        (0175) 
                                        (0176) IF 1
                                        (0177) ELSE
                                        (0178) ERROR_RUN_USB_WIZARD
                                        (0179) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0180) ; In order for the USB User Module to compile properly the USB Wizard must be run.
                                        (0181) ; To do this navigate back to the Device Editor Window, right click on the icon for the
                                        (0182) ; USB User Module and select the 'USB Setup Wizard...'.  Configure the device as needed
                                        (0183) ; and then click OK.  Re-generate source before compiling again.
                                        (0184) ; For HID devices it is important that all instances of HID Class Descriptors point to a valid
                                        (0185) ; HID report.
                                        (0186) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0187) ENDIF
                                        (0188) 
                                        (0189) AREA UserModules (ROM, REL)
                                        (0190) ;-----------------------------------------------------------------------------
                                        (0191) ;  FUNCTION NAME: USBFS_EP0_ISR
                                        (0192) 
                                        (0193) ;
                                        (0194) ;  DESCRIPTION:   The EPO ISR serves the control endpoint interrupts and
                                        (0195) ;                 dispaches all SETUP, IN, and OUT transfers to the proper
                                        (0196) ;                 dispatch routines for all supported USB requests.
                                        (0197) ;
                                        (0198) ;-----------------------------------------------------------------------------
                                        (0199) ;
                                        (0200) ;  ARGUMENTS:   n/a
                                        (0201) ;
                                        (0202) ;  RETURNS:     n/a
                                        (0203) ;
                                        (0204) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0205) ;
                                        (0206) ;  THEORY of OPERATION or PROCEDURE:
                                        (0207) ;
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209)  USBFS_EP0_ISR:
                                        (0210) _USBFS_EP0_ISR:
07A6: 08       PUSH  A                  (0211)     push    A
07A7: 10       PUSH  X                  (0212)     push    X
07A8: 5D D5    MOV   A,REG[0xD5]        
07AA: 08       PUSH  A                  
07AB: 5D D4    MOV   A,REG[0xD4]        
07AD: 08       PUSH  A                  
07AE: 62 D5 00 MOV   REG[0xD5],0x0      
07B1: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0213)     REG_PRESERVE MVW_PP
                                        (0214)     REG_PRESERVE MVR_PP
                                        (0215) 
                                        (0216)     RAM_SETPAGE_MVW 0
                                        (0217)     RAM_SETPAGE_MVR 0
                                        (0218) 
                                        (0219)     ; Dispatch to setup/in/out handlers
07B4: 5D 56    MOV   A,REG[0x56]        (0220)     mov     A, reg[USBFS_EP0MODE]       ; Get the mode reg
                                        (0221) 
07B6: 5C       MOV   X,A                (0222)     mov     X, A ; store for later
                                        (0223)     ; Check EP0_CR for the following cases:
                                        (0224)     ; bit 7 is set but ack is not set or mode is not 1 => invalid setup
                                        (0225)     ; bit 7 is not set, bit 5 or 6 is set, but bit 4 is not set => invalid in/out
07B7: 21 9F    AND   A,0x9F             (0226)     and     A, 9Fh
07B9: 39 91    CMP   A,0x91             (0227)     cmp     A, 91h
07BB: A0 43    JZ    0x07FF             (0228)     jz      USBFS_EP0_Setup
                                        (0229)     ; Check if setup bit is set--if so then invalid EP0_CR reg read so exit
07BD: 21 80    AND   A,0x80             (0230)     and     A, 80h
                                        (0231)     ; Getting here means there is an invalid setup; exit without modifying the mode
07BF: B0 36    JNZ   0x07F6             (0232)     jnz     USBFS_EP0_ISR_EXIT
                                        (0233)     ; Getting here means the setup bit is not set, now check in/out
07C1: 5B       MOV   A,X                (0234)     mov     A, X   ; restore EP0_CR reg as read
07C2: 21 70    AND   A,0x70             (0235)     and     A, 70h
07C4: 39 50    CMP   A,0x50             (0236)     cmp     A, 50h
07C6: A0 62    JZ    0x0829             (0237)     jz      USBFS_EP0_IN
07C8: 39 30    CMP   A,0x30             (0238)     cmp     A, 30h
07CA: A0 6C    JZ    0x0837             (0239)     jz      USBFS_EP0_OUT
                                        (0240)     ; Getting here means there is an invalid in/out; exit without modifying the mode
07CC: 80 29    JMP   0x07F6             (0241)     jmp     USBFS_EP0_ISR_EXIT  
                                        (0242) 
                                        (0243) ; ISR Exit Point to update the mode register
                                        (0244) ;   mode and count have been pushed onto the stack
                                        (0245) export USBFS_EP0_UPD_MODE_EXIT
                                        (0246) USBFS_EP0_UPD_MODE_EXIT:
07CE: 53 20    MOV   [0x20],A           (0247)     mov     [USBFS_t0], A                    ; store EP0_CNT reg value for later
07D0: 5D 56    MOV   A,REG[0x56]        (0248)     mov     A, reg[USBFS_EP0MODE]            ; unlock registers  
07D2: 21 80    AND   A,0x80             (0249)     and     A, 80h                                      ; Check if SETUP bit is set
07D4: B0 21    JNZ   0x07F6             (0250)     jnz     USBFS_EP0_ISR_EXIT                ;          then EXIT from the ISR	
07D6: 51 20    MOV   A,[0x20]           (0251)     mov     A, [USBFS_t0]                    ; restore EP0_CNT reg value
07D8: 60 57    MOV   REG[0x57],A        (0252)     mov     reg[USBFS_EP0CNT], A             ; Update the count register
07DA: 5D 57    MOV   A,REG[0x57]        (0253)     mov     A, reg[USBFS_EP0CNT]             ; writing check
07DC: 3A 20    CMP   A,[0x20]           (0254)     cmp     A, [USBFS_t0]                    ; if writing was not succesful,
07DE: B0 17    JNZ   0x07F6             (0255)     jnz     USBFS_EP0_ISR_EXIT               ;         then abort the ISR    
                                        (0256) 
07E0: 5A 20    MOV   [0x20],X           (0257)     mov     [USBFS_t0], X                     ; store EP0_MODE reg value for later
                                        (0258) .ReWriteMODE:
07E2: 5D 56    MOV   A,REG[0x56]        (0259)     mov     A, reg[USBFS_EP0MODE]             ; unblock registers    
07E4: 21 80    AND   A,0x80             (0260)     and     A, 80h                                      ; Check if SETUP bit is set
07E6: B0 0F    JNZ   0x07F6             (0261)     jnz     USBFS_EP0_ISR_EXIT                ;          then EXIT from the ISR
                                        (0262)     
07E8: 51 20    MOV   A,[0x20]           (0263)     mov     A, [USBFS_t0]                     ; restore the new MODE
07EA: 60 56    MOV   REG[0x56],A        (0264)     mov     reg[USBFS_EP0MODE], A             ; Update the mode regiter
                                        (0265)     
07EC: 5D 56    MOV   A,REG[0x56]        (0266)     mov     A, reg[USBFS_EP0MODE]             ; writing check
07EE: 21 0F    AND   A,0xF              (0267)     and     A,  0Fh                                     ; clear 7-4 bits
07F0: 3A 20    CMP   A,[0x20]           (0268)     cmp     A, [USBFS_t0]                     ; if writing was succesful,
07F2: A0 03    JZ    0x07F6             (0269)     jz      USBFS_EP0_ISR_EXIT                ;          then EXIT from the ISR
                                        (0270)                                                          ; if writing was not succesful,
07F4: 8F ED    JMP   0x07E2             (0271)     jmp      .ReWriteMODE                                 ;           then repeat write operation   
07F6: 18       POP   A                  
07F7: 60 D4    MOV   REG[0xD4],A        
07F9: 18       POP   A                  
07FA: 60 D5    MOV   REG[0xD5],A        
                                        (0272) 
                                        (0273) 
                                        (0274) 
                                        (0275) ; Common Exit Point
                                        (0276) USBFS_EP0_ISR_EXIT:
                                        (0277)     REG_RESTORE MVR_PP
                                        (0278)     REG_RESTORE MVW_PP
07FC: 20       POP   X                  (0279)     pop     X                           ;
                                        (0280) ;       mov  A, [USBFS_TempMode]
                                        (0281) ;       mov  reg[USBFS_EP0MODE], A
07FD: 18       POP   A                  (0282)     pop     A                           ; Restore Context
07FE: 7E       RETI                     (0283)     reti
                                        (0284) 
                                        (0285) 
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: USBFS_EP0_Setup
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:   Dispatch a USB SETUP
                                        (0290) ;
                                        (0291) ;-----------------------------------------------------------------------------
                                        (0292)  USBFS_EP0_Setup:
                                        (0293) _USBFS_EP0_Setup:
                                        (0294) ; Check the byte count and validity.  All SETUP are 8 bytes and 0 toggle
07FF: 5D 56    MOV   A,REG[0x56]        (0295)     mov     A, reg[USBFS_EP0MODE]    ; unlock registers
0801: 60 56    MOV   REG[0x56],A        (0296)     mov     reg[USBFS_EP0MODE], A ; clear setup bit 
0803: 5D 56    MOV   A,REG[0x56]        (0297)     mov     A, reg[USBFS_EP0MODE]    ; (re)read register
0805: 21 80    AND   A,0x80             (0298)     and     A, 80h                              ; Check if SETUP bit is set
0807: BF EE    JNZ   0x07F6             (0299)     jnz     USBFS_EP0_ISR_EXIT       ; if SETUP bit set -> exit without modifying the mode    
0809: 08       PUSH  A                  (0300)     push    A                          ; Save the mode register
080A: 50 02    MOV   A,0x2              (0301)     mov     A, USB_XFER_PREMATURE      ; Return a Premature Completion?
080C: 91 F3    CALL  0x0A01             (0302)     call    USBFS_UpdateStatusBlock
080E: 18       POP   A                  (0303)     pop     A                          ; Restore the mode register
080F: 5D 57    MOV   A,REG[0x57]        (0304)     mov     A, reg[USBFS_EP0CNT]             ; Get the count reg
0811: 39 4A    CMP   A,0x4A             (0305)     cmp     A, (USB_CNT_VALID | 0x0A)
0813: A0 03    JZ    0x0817             (0306)     jz      .dispatch
                                        (0307) 
0815: 82 5B    JMP   0x0A71             (0308)     jmp     USBFS_Not_Supported_Local_Drv
                                        (0309) 
                                        (0310) 
                                        (0311) ;-----------------------------------------------------------------------------
                                        (0312) ; Jump here to dispatch the request
                                        (0313) ; The SETUP request is encoded in [bmRequestType]. Among the 8 bits in [bmRequestType], only bits
                                        (0314) ; 7, 6, 5, 1, 0 determine what the request is. Bits [2:4] are default to zero. The below code
                                        (0315) ; re-organizes [bmRequestType] to the following format:
                                        (0316) ; ( Zero, Zero, Bit7, Bit6, Bit5, Bit1, Bit0, Zero ), and depending on the value of this
                                        (0317) ; "re-organization", the firmware will jump to an appropriate table to handle the request.
                                        (0318) ;-----------------------------------------------------------------------------
                                        (0319) .dispatch:
0817: 5D 58    MOV   A,REG[0x58]        (0320)     mov     A, reg[USBFS_EP0DATA+bmRequestType]   ; Get bmRequestType
0819: 21 E3    AND   A,0xE3             (0321)     and     A, E3h                           ; clear bits 4-3-2, these unused for our purposes
081B: 08       PUSH  A                  (0322)     push    A                                ; store value on the stack
081C: 67       ASR   A                  (0323)     asr     A                                ; move bits 7-6-5 into 4-3-2's place
081D: 67       ASR   A                  (0324)     asr     A                                ; "asr" instruction shift all bits one place to the right.
081E: 67       ASR   A                  (0325)     asr     A                                ; Bit7 remains the same.
081F: 53 1E    MOV   [0x1E],A           (0326)     mov     [USBFS_t2], A                    ; store shifted value
0821: 18       POP   A                  (0327)     pop     A                                ; get original value
0822: 2A 1E    OR    A,[0x1E]           (0328)     or      A, [USBFS_t2]                    ; or the two to get the 5-bit field
0824: 21 1F    AND   A,0x1F             (0329)     and     A, 1Fh                           ; clear bits 7-6-5 (asr wraps bit7)
                                        (0330)                                              ; Bit0 is loaded with a Zero. This results in multiplying
                                        (0331)                                              ; the accumulator by 2, and the reason to mutiply it by 2
                                        (0332)                                              ; is that each "jmp" instruction in the tables is two bytes long.
                                        (0333) 
0826: 7D 0A 68 LJMP  USBFS_bmRequestType_Dispatch(0334)     ljmp    USBFS_bmRequestType_Dispatch
                                        (0335) 
                                        (0336) 
                                        (0337) ;-----------------------------------------------------------------------------
                                        (0338) ;  FUNCTION NAME: USBFS_EP0_IN
                                        (0339) ;
                                        (0340) ;  DESCRIPTION: Handles an IN request.  Depending on the state of the
                                        (0341) ;               enumeration sequence it decides what to do next
                                        (0342) ;
                                        (0343) ;-----------------------------------------------------------------------------
                                        (0344)  USBFS_EP0_IN:
                                        (0345) _USBFS_EP0_IN:
0829: 5D 56    MOV   A,REG[0x56]        (0346)     mov     A, reg[USBFS_EP0MODE]    ; unlock registers
                                        (0347) ;    mov     reg[USBFS_EP0MODE], A ; clear setup bit 
                                        (0348) ;    mov     A, reg[USBFS_EP0MODE]    ; (re)read register
                                        (0349) ;    and     A, 80h                              ; Check if SETUP bit is set
                                        (0350) ;    jnz     USBFS_EP0_ISR_EXIT       ; if SETUP bit set -> exit without modifying the mode    
082B: 51 0A    MOV   A,[0xA]            (0351)     mov     A, [USBFS_TransferType]
                                        (0352) ;    call USBFS_ControlInDispatch
                                        (0353) ;    jmp  USBFS_EP0_ISR_EXIT                 ; And exit
                                        (0354) USBFS_ControlInDispatch:
082D: E0 01    JACC  0x082F             (0355)     jacc    USBFS_ControlInDispatchTable
                                        (0356) USBFS_ControlInDispatchTable:
082F: 82 41    JMP   0x0A71             (0357)     jmp     USBFS_Not_Supported_Local_Drv  ; USB_TRANS_STATE_IDLE
0831: 80 39    JMP   0x086B             (0358)     jmp     USBFS_ControlReadDataStage     ; USB_TRANS_STATE_CONTROL_READ
0833: 80 B9    JMP   0x08ED             (0359)     jmp     USBFS_ControlWriteStatusStage  ; USB_TRANS_STATE_CONTROL_WRITE
0835: 80 C4    JMP   0x08FA             (0360)     jmp     USBFS_NoDataControlStatusStage ; USB_TRANS_STATE_NO_DATA_CONTROL
                                        (0361) 
                                        (0362) 
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: USBFS_EP0_OUT
                                        (0365) ;
                                        (0366) ;  DESCRIPTION: HANDles an OUT request.  Depending on the state of the
                                        (0367) ;               enumeration sequence it decides what to do next
                                        (0368) ;
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370)  USBFS_EP0_OUT:
                                        (0371) _USBFS_EP0_OUT:
0837: 5D 56    MOV   A,REG[0x56]        (0372)     mov     A, reg[USBFS_EP0MODE]    ; unlock registers
                                        (0373) ;    mov     reg[USBFS_EP0MODE], A ; clear setup bit 
                                        (0374) ;    mov     A, reg[USBFS_EP0MODE]    ; (re)read register
                                        (0375) ;    and     A, 80h                              ; Check if SETUP bit is set
                                        (0376) ;    jnz     USBFS_EP0_ISR_EXIT       ; if SETUP bit set -> exit without modifying the mode    
0839: 51 0A    MOV   A,[0xA]            (0377)     mov     A, [USBFS_TransferType]
083B: E0 01    JACC  0x083D             (0378)     jacc    USBFS_ControlOutDispatchTable
                                        (0379) USBFS_ControlOutDispatchTable:
083D: 82 33    JMP   0x0A71             (0380)     jmp     USBFS_Not_Supported_Local_Drv  ; USB_TRANS_STATE_IDLE
083F: 80 2D    JMP   0x086D             (0381)     jmp     USBFS_ControlReadStatusStage   ; USB_TRANS_STATE_CONTROL_READ
0841: 80 5E    JMP   0x08A0             (0382)     jmp     USBFS_ControlWriteDataStage    ; USB_TRANS_STATE_CONTROL_WRITE
0843: 80 D0    JMP   0x0914             (0383)     jmp     USBFS_NoDataControlError       ; USB_TRANS_STATE_NO_DATA_CONTROL
                                        (0384) 
                                        (0385) 
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;  FUNCTION NAME: USBFS_InitControlRead
                                        (0388) ;
                                        (0389) ;  DESCRIPTION:   This routine initializes a control read.  It must be JUMPed to,
                                        (0390) ;                 not called.  It assumes a tranfer descriptor has been loaded
                                        (0391) ;                 into the driver USBFS_CurrentTD data structure.
                                        (0392) ;
                                        (0393) ;-----------------------------------------------------------------------------
                                        (0394)  USBFS_InitControlRead:
                                        (0395) _USBFS_InitControlRead:
0845: 53 09    MOV   [0x9],A            (0396)     mov     [USBFS_LastSize], A        ; Save the packet size?
0847: 91 CE    CALL  0x0A17             (0397)     call    USBFS_InitializeStatusBlock
0849: 55 0A 02 MOV   [0xA],0x2          (0398)     mov     [USBFS_TransferType], USB_TRANS_STATE_CONTROL_READ
                                        (0399) 
                                        (0400)     ; Check the transfer size against the request size
084C: 5D 5F    MOV   A,REG[0x5F]        (0401)     mov     A, reg[USBFS_EP0DATA+wLengthHi]   ; MSB of wLength
084E: 3A 14    CMP   A,[0x14]           (0402)     cmp     A, [USBFS_TransferSize]
0850: B0 07    JNZ   0x0858             (0403)     jnz     .L1
                                        (0404) 
0852: 5D 5E    MOV   A,REG[0x5E]        (0405)     mov     A, reg[USBFS_EP0DATA+wLengthLo]   ; LSB of wLength
0854: 3A 15    CMP   A,[0x15]           (0406)     cmp     A, [USBFS_TransferSize+1]
0856: A0 09    JZ    0x0860             (0407)     jz      .L9
                                        (0408) .L1:
0858: D0 07    JNC   0x0860             (0409)     jnc     .L9
                                        (0410) ;
085A: 53 15    MOV   [0x15],A           (0411)     mov    [USBFS_TransferSize+1], A   ;
085C: 5D 5F    MOV   A,REG[0x5F]        (0412)     mov    A, reg[USBFS_EP0DATA+wLengthHi]   ;
085E: 53 14    MOV   [0x14],A           (0413)     mov    [USBFS_TransferSize], A     ;
                                        (0414) .L9:
0860: 55 1A 00 MOV   [0x1A],0x0         (0415)     mov    [USBFS_TransferByteCount], 0   ;
0863: 55 1B 00 MOV   [0x1B],0x0         (0416)     mov    [USBFS_TransferByteCount+1], 0   ;
                                        (0417) 
0866: 2E 1C 01 OR    [0x1C],0x1         (0418)     or     [USBFS_EP0DataToggle], 1 ; setup EP0 data toggle
0869: 80 B4    JMP   0x091E             (0419)     jmp    USBFS_LoadEndpoint          ;
                                        (0420) ;-----------------------------------------------------------------------------
                                        (0421) ;  FUNCTION NAME: USBFS_ControlReadDataStage
                                        (0422) ;
                                        (0423) ;  DESCRIPTION:   This routine processes the data stage of a control read.  It
                                        (0424) ;                 must be JUMPed to, not called.  It assumes a tranfer descriptor
                                        (0425) ;                 has been loaded into the driver USBFS_CurrentTD
                                        (0426) ;                 data structure.
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429)  USBFS_ControlReadDataStage:
086B: 80 B2    JMP   0x091E             (0430)     jmp     USBFS_LoadEndpoint
                                        (0431) 
                                        (0432) ;-----------------------------------------------------------------------------
                                        (0433) ;  FUNCTION NAME: USBFS_ControlReadStatusStage
                                        (0434) ;
                                        (0435) ;  DESCRIPTION:   This routine processes the status stage of a control read.  It
                                        (0436) ;                 must be JUMPed to, not called.  It handles short or 0 packet
                                        (0437) ;                 It assumes a tranfer descriptor has been loaded into the
                                        (0438) ;                 driver USBFS_CurrentTD data structure.
                                        (0439) ;
                                        (0440) ;-----------------------------------------------------------------------------
                                        (0441)  USBFS_ControlReadStatusStage:
086D: 51 09    MOV   A,[0x9]            (0442)     mov    A, [USBFS_LastSize]         ; Get the number of bytes from the last transfer
086F: 04 1B    ADD   [0x1B],A           (0443)     add    [USBFS_TransferByteCount + 1], A   ; Update the transfer byte count
0871: 0E 1A 00 ADC   [0x1A],0x0         (0444)     adc    [USBFS_TransferByteCount], 0   ;
0874: 50 01    MOV   A,0x1              (0445)     mov    A, USB_XFER_STATUS_ACK      ; Return a Status ACK Completion
0876: 91 89    CALL  0x0A01             (0446)     call   USBFS_UpdateStatusBlock
0878: 55 0A 00 MOV   [0xA],0x0          (0447)     mov    [USBFS_TransferType], USB_TRANS_STATE_IDLE
087B: 50 00    MOV   A,0x0              (0448)     mov    A, 0                        ; Count Register
087D: 57 03    MOV   X,0x3              (0449)     mov    X, USB_MODE_STALL_IN_OUT
087F: 8F 4E    JMP   USBFS_EP0_UPD_MODE_EXIT(0450)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0451) ;-----------------------------------------------------------------------------
                                        (0452) ;  FUNCTION NAME: USBFS_NoDataStageControlTransfer
                                        (0453) ;                 USBFS_InitNoDataStageControlTransfer
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:   This routine processes the status stage of a no data control
                                        (0456) ;                 write.  It must be JUMPed to, not called.
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459)  USBFS_NoDataStageControlTransfer:
                                        (0460) _USBFS_InitNoDataStageControlTransfer:
                                        (0461)  USBFS_InitNoDataStageControlTransfer:
0881: 91 94    CALL  0x0A17             (0462)     call    USBFS_InitializeStatusBlock
                                        (0463) 
0883: 55 0A 06 MOV   [0xA],0x6          (0464)     mov    [USBFS_TransferType], USB_TRANS_STATE_NO_DATA_CONTROL
                                        (0465) 
0886: 50 00    MOV   A,0x0              (0466)     mov    A, 0                        ; Count Register
0888: 57 06    MOV   X,0x6              (0467)     mov    X, USB_MODE_STATUS_IN_ONLY
088A: 8F 43    JMP   USBFS_EP0_UPD_MODE_EXIT(0468)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0469) 
                                        (0470) 
                                        (0471) ;-----------------------------------------------------------------------------
                                        (0472) ;  FUNCTION NAME: USBFS_InitControlWrite
                                        (0473) ;
                                        (0474) ;  DESCRIPTION:   This routine initializes control write.  It must be JUMPed
                                        (0475) ;                 to, not called.  It assumes a tranfer descriptor has been loaded
                                        (0476) ;                 into the driver USBFS_CurrentTD data structure.
                                        (0477) ;
                                        (0478) ;-----------------------------------------------------------------------------
                                        (0479)  USBFS_InitControlWrite:
                                        (0480) _USBFS_InitControlWrite:
088C: 51 13    MOV   A,[0x13]           (0481)     mov     A, [USBFS_DataSource]      ; Need to make sure the destination is not ROM
088E: 39 00    CMP   A,0x0              (0482)     cmp     A, USB_DS_ROM
0890: A1 E0    JZ    0x0A71             (0483)     jz      USBFS_Not_Supported_Local_Drv
                                        (0484) 
0892: 91 83    CALL  0x0A17             (0485)     call    USBFS_InitializeStatusBlock
                                        (0486) 
0894: 55 0A 04 MOV   [0xA],0x4          (0487)     mov    [USBFS_TransferType], USB_TRANS_STATE_CONTROL_WRITE
                                        (0488) 
0897: 2E 1C 01 OR    [0x1C],0x1         (0489)     or     [USBFS_EP0DataToggle], 1 ; setup EP0 data toggle
                                        (0490) 
089A: 50 00    MOV   A,0x0              (0491)     mov    A, 0                        ; Count Register
089C: 57 0B    MOV   X,0xB              (0492)     mov    X, USB_MODE_ACK_OUT_STATUS_IN
089E: 8F 2F    JMP   USBFS_EP0_UPD_MODE_EXIT(0493)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0494) 
                                        (0495) 
                                        (0496) ;-----------------------------------------------------------------------------
                                        (0497) ;  FUNCTION NAME: USBFS_ControlWriteDataStage
                                        (0498) ;
                                        (0499) ;  DESCRIPTION:   This routine processes the data stage of a control
                                        (0500) ;                 write.  It must be JUMPed to, not called.  It assumes a
                                        (0501) ;                 tranfer descriptor has been loaded into the driver
                                        (0502) ;                 USBFS_CurrentTD data structure.
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505)  USBFS_ControlWriteDataStage:
08A0: 36 1C 01 XOR   [0x1C],0x1         (0506)     xor    [USBFS_EP0DataToggle], 1    ; Update data toggle
                                        (0507) 
08A3: 5D 57    MOV   A,REG[0x57]        (0508)     mov    A, reg[USBFS_EP0CNT]        ; Get the count
                                        (0509) 
08A5: 21 0F    AND   A,0xF              (0510)     and     A, 0x0F
08A7: 11 02    SUB   A,0x2              (0511)     sub     A, 2                       ; Count include the two byte checksum
                                        (0512) 
08A9: 53 1E    MOV   [0x1E],A           (0513)     mov     [USBFS_t2], A              ; Assume we have room to receive the whole packet
                                        (0514) 
08AB: 50 00    MOV   A,0x0              (0515)     mov     A, 0
08AD: 3A 14    CMP   A,[0x14]           (0516)     cmp     A, [USBFS_TransferSize]    ; If the MSB has anything just use the count
08AF: B0 07    JNZ   0x08B7             (0517)     jnz     .L1
                                        (0518) 
08B1: 51 1E    MOV   A,[0x1E]           (0519)     mov     A, [USBFS_t2]
08B3: 3A 15    CMP   A,[0x15]           (0520)     cmp     A, [USBFS_TransferSize+1]    ;
08B5: A0 06    JZ    0x08BC             (0521)     jz      .L6
                                        (0522) .L1:
08B7: C0 04    JC    0x08BC             (0523)     jc      .L6
08B9: 5F 1E 15 MOV   [0x1E],[0x15]      (0524)     mov     [USBFS_t2], [USBFS_TransferSize+1]
                                        (0525) 
                                        (0526) .L6:
08BC: 51 1E    MOV   A,[0x1E]           (0527)     mov     A, [USBFS_t2]
08BE: 14 15    SUB   [0x15],A           (0528)     sub     [USBFS_TransferSize+1], A     ; Update the bytes remaining
08C0: 1E 14 00 SBB   [0x14],0x0         (0529)     sbb     [USBFS_TransferSize], 0    ;
                                        (0530) 
08C3: 04 1B    ADD   [0x1B],A           (0531)     add     [USBFS_TransferByteCount + 1], A   ; Update the transfer byte count
08C5: 0E 1A 00 ADC   [0x1A],0x0         (0532)     adc     [USBFS_TransferByteCount], 0   ;
                                        (0533) 
08C8: 57 00    MOV   X,0x0              (0534)     mov     X, 0                       ; Start the index at 0
08CA: 5D D5    MOV   A,REG[0xD5]        
08CC: 08       PUSH  A                  
                                        (0535) 
                                        (0536) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0537)     REG_PRESERVE MVW_PP
08CD: 51 16    MOV   A,[0x16]           (0538)     mov     A, [USBFS_DataPtr]  ; set proper page for mvi command
08CF: 60 D5    MOV   REG[0xD5],A        (0539)     mov     reg[MVW_PP], A
                                        (0540) ENDIF
                                        (0541) 
                                        (0542) .RAM_COPY:
08D1: 5E 58    MOV   A,REG[X+0x58]      (0543)     mov     A, reg[X+USBFS_EP0DATA]    ; Get the data
08D3: 3F 17    MVI   [0x17],A           (0544)     mvi     [USBFS_DataPtr+1], A       ; Store the data, bump the destination
                                        (0545) 
08D5: 75       INC   X                  (0546)     inc     X                          ; Bump the destination offset
08D6: 5B       MOV   A,X                (0547)     mov     A, X                       ; Are we done?
08D7: 3A 1E    CMP   A,[0x1E]           (0548)     cmp     A, [USBFS_t2]
08D9: CF F7    JC    0x08D1             (0549)     jc      .RAM_COPY                  ; Not done
08DB: 18       POP   A                  
08DC: 60 D5    MOV   REG[0xD5],A        
                                        (0550) 
                                        (0551) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0552)     REG_RESTORE MVW_PP
                                        (0553) ENDIF
                                        (0554) 
08DE: 50 00    MOV   A,0x0              (0555)     mov    A, 0                        ; Count Register
08E0: 57 0B    MOV   X,0xB              (0556)     mov    X, USB_MODE_ACK_OUT_STATUS_IN
08E2: 8E EB    JMP   USBFS_EP0_UPD_MODE_EXIT(0557)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0558) 
                                        (0559) ; Jump here on data toggle error
                                        (0560) .error:
08E4: 55 0A 00 MOV   [0xA],0x0          (0561)     mov    [USBFS_TransferType], USB_TRANS_STATE_IDLE    ; This simply aborts the transfer
08E7: 50 00    MOV   A,0x0              (0562)     mov    A, 0                        ; Count Register
08E9: 57 03    MOV   X,0x3              (0563)     mov    X, USB_MODE_STALL_IN_OUT
08EB: 8E E2    JMP   USBFS_EP0_UPD_MODE_EXIT(0564)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0565) 
                                        (0566) 
                                        (0567) ;-----------------------------------------------------------------------------
                                        (0568) ;  FUNCTION NAME: USBFS_ControlWriteStatusStage
                                        (0569) ;
                                        (0570) ;  DESCRIPTION:   This routine processes the status stage of a control
                                        (0571) ;                 write.  It must be JUMPed to, not called.  It assumes a
                                        (0572) ;                 tranfer descriptor has been loaded into the driver
                                        (0573) ;                 USBFS_CurrentTD data structure.
                                        (0574) ;
                                        (0575) ;-----------------------------------------------------------------------------
                                        (0576)  USBFS_ControlWriteStatusStage:
08ED: 50 01    MOV   A,0x1              (0577)     mov    A, USB_XFER_STATUS_ACK      ; Return a Status ACK Completion
08EF: 91 10    CALL  0x0A01             (0578)     call   USBFS_UpdateStatusBlock
08F1: 55 0A 00 MOV   [0xA],0x0          (0579)     mov    [USBFS_TransferType], USB_TRANS_STATE_IDLE    ; The packet is done
08F4: 50 00    MOV   A,0x0              (0580)     mov    A, 0                        ; Count Register
08F6: 57 03    MOV   X,0x3              (0581)     mov    X, USB_MODE_STALL_IN_OUT
08F8: 8E D5    JMP   USBFS_EP0_UPD_MODE_EXIT(0582)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0583) 
                                        (0584) 
                                        (0585) ;-----------------------------------------------------------------------------
                                        (0586) ;  FUNCTION NAME: USBFS_NoDataControlStatusStage
                                        (0587) ;
                                        (0588) ;  DESCRIPTION:   This routine processes the status stage of a control
                                        (0589) ;                 write.  It must be JUMPed to, not called.  It assumes a
                                        (0590) ;                 tranfer descriptor has been loaded into the driver
                                        (0591) ;                 USBFS_CurrentTD data structure.
                                        (0592) ;
                                        (0593) ;                 USB Device Addressing happens here because we can't change
                                        (0594) ;                 the SIE Address before the Status IN is received.
                                        (0595) ;
                                        (0596) ;-----------------------------------------------------------------------------
                                        (0597)  USBFS_NoDataControlStatusStage:
08FA: 50 01    MOV   A,0x1              (0598)     mov     A, USB_XFER_STATUS_ACK     ; Return a Status ACK Completion
08FC: 91 03    CALL  0x0A01             (0599)     call    USBFS_UpdateStatusBlock
                                        (0600)     ; Dispatch to the proper handler
08FE: 3C 1D 01 CMP   [0x1D],0x1         (0601)     cmp     [USBFS_fDataPending], USB_ADDRESS_CHANGE_PENDING
0901: B0 09    JNZ   0x090B             (0602)     jnz     .L1
                                        (0603) 
                                        (0604)     ; USB ADDRESS CHANGE
0903: 51 0B    MOV   A,[0xB]            (0605)     mov     A, [USBFS_TransferBuffer]    ; Get the pending data
                                        (0606) 
0905: 29 80    OR    A,0x80             (0607)     or      A, USB_ADDR_ENABLE         ; Set the enable bit
0907: 60 4A    MOV   REG[0x4A],A        (0608)     mov     reg[USBFS_ADDR], A         ; Update the SIE address
0909: 80 01    JMP   0x090B             (0609)     jmp     .EXIT
                                        (0610) .L1:
                                        (0611) 
                                        (0612) .EXIT:
090B: 55 1D 00 MOV   [0x1D],0x0         (0613)     mov     [USBFS_fDataPending], 0    ; Clear data pending
                                        (0614) 
090E: 50 00    MOV   A,0x0              (0615)     mov    A, 0                        ; Count Register
0910: 57 06    MOV   X,0x6              (0616)     mov    X, USB_MODE_STATUS_IN_ONLY  ; Wait for the next SETUP
0912: 8E BB    JMP   USBFS_EP0_UPD_MODE_EXIT(0617)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0618) 
                                        (0619) 
                                        (0620) ;-----------------------------------------------------------------------------
                                        (0621) ;  FUNCTION NAME: USBFS_NoDataControlError
                                        (0622) ;
                                        (0623) ;  DESCRIPTION:   This routine handles the condition when we expected a
                                        (0624) ;                 status IN, but receive an OUT
                                        (0625) ;
                                        (0626) ;-----------------------------------------------------------------------------
                                        (0627)  USBFS_NoDataControlError:
0914: 50 03    MOV   A,0x3              (0628)     mov    A, USB_XFER_ERROR           ; Return Transaction Error
0916: 90 E9    CALL  0x0A01             (0629)     call   USBFS_UpdateStatusBlock
0918: 50 00    MOV   A,0x0              (0630)     mov    A, 0                        ; Count Register
091A: 57 03    MOV   X,0x3              (0631)     mov    X, USB_MODE_STALL_IN_OUT    ; Set the mode register
091C: 8E B1    JMP   USBFS_EP0_UPD_MODE_EXIT(0632)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0633) 
                                        (0634) 
                                        (0635) ;-----------------------------------------------------------------------------
                                        (0636) ;  FUNCTION NAME: USBFS_LoadEndpoint
                                        (0637) ;
                                        (0638) ;  DESCRIPTION: Moves data from either RAM or ROM - depending on the request
                                        (0639) ;               type and then places the appropriate number of bytes -
                                        (0640) ;               depending on the request size into the endpoint FIFO.
                                        (0641) ;               It finally sets up the endpoint to send data.
                                        (0642) ;
                                        (0643) USBFS_LoadEndpoint:
091E: 51 09    MOV   A,[0x9]            (0644)     mov     A, [USBFS_LastSize]        ; Get the number of bytes from the last transfer
0920: 04 1B    ADD   [0x1B],A           (0645)     add     [USBFS_TransferByteCount + 1], A   ; Update the transfer byte count
0922: 0E 1A 00 ADC   [0x1A],0x0         (0646)     adc     [USBFS_TransferByteCount], 0   ;
0925: 51 14    MOV   A,[0x14]           (0647)     mov     A,  [USBFS_TransferSize]   ; Check to see if we have any
0927: 2A 15    OR    A,[0x15]           (0648)     or      A,  [USBFS_TransferSize+1]   ;  more data to send
0929: B0 0E    JNZ   0x0938             (0649)     jnz     .cont                      ; Jump if we have to send more data
                                        (0650) 
                                        (0651) ; Flow here if there is no more data to send
092B: 3C 09 08 CMP   [0x9],0x8          (0652)     cmp     [USBFS_LastSize], 8        ; Was it a full packet?
092E: A0 52    JZ    0x0981             (0653)     JZ      .START_TRANSFER            ; Jump if it was full (need to send a zero length)
                                        (0654) 
                                        (0655) ; Flow here if we are entering the status stage
0930: 50 00    MOV   A,0x0              (0656)     mov     A, 0                       ; Count Register
0932: 53 09    MOV   [0x9],A            (0657)     mov     [USBFS_LastSize], A        ; Clear the byte count
0934: 57 02    MOV   X,0x2              (0658)     mov     X, USB_MODE_STATUS_OUT_ONLY   ; Only ACK the Status Out
0936: 8E 97    JMP   USBFS_EP0_UPD_MODE_EXIT(0659)     jmp     USBFS_EP0_UPD_MODE_EXIT
                                        (0660) 
                                        (0661) ; Jump here to determine how many bytes should we transfer
                                        (0662) .cont:
0938: 3C 14 00 CMP   [0x14],0x0         (0663)     cmp     [USBFS_TransferSize], 0    ; Check the MSB
093B: B0 0A    JNZ   0x0946             (0664)     jnz     .L1
                                        (0665) 
093D: 3C 15 08 CMP   [0x15],0x8         (0666)     cmp     [USBFS_TransferSize+1], 8    ; Check the LSB
0940: D0 05    JNC   0x0946             (0667)     jnc     .L1
                                        (0668) 
0942: 51 15    MOV   A,[0x15]           (0669)     mov     A, [USBFS_TransferSize+1]     ; Transfer all the remaing data
0944: 80 03    JMP   0x0948             (0670)     jmp     .L3
                                        (0671) 
                                        (0672) .L1:
0946: 50 08    MOV   A,0x8              (0673)     mov     A, 8                       ; Just transfer the next 8 bytes
                                        (0674) 
                                        (0675) .L3:
                                        (0676) 
0948: 14 15    SUB   [0x15],A           (0677)     sub     [USBFS_TransferSize+1], A     ; Update the bytes remaining
094A: 1E 14 00 SBB   [0x14],0x0         (0678)     sbb     [USBFS_TransferSize], 0
094D: 53 1E    MOV   [0x1E],A           (0679)     mov     [USBFS_t2], A              ; Save the count
094F: 57 00    MOV   X,0x0              (0680)     mov     X, 0
                                        (0681) 
0951: 3C 13 00 CMP   [0x13],0x0         (0682)     cmp     [USBFS_DataSource], USB_DS_ROM    ; RAM or ROM copy?
0954: B0 17    JNZ   0x096C             (0683)     jnz     .RAM_COPY
                                        (0684) 
                                        (0685) ; Copy data from a ROM source
                                        (0686) .ROM_COPY:
0956: 10       PUSH  X                  (0687)     push    X                          ; Save the destination offset
0957: 51 16    MOV   A,[0x16]           (0688)     mov     A, [USBFS_DataPtr]         ; Get the transfer source MSB
0959: 58 17    MOV   X,[0x17]           (0689)     mov     X, [USBFS_DataPtr+1]       ; Set the transfer source LSB
095B: 76 17    INC   [0x17]             (0690)     inc     [USBFS_DataPtr+1]          ; Increment the data pointer
095D: 0E 16 00 ADC   [0x16],0x0         (0691)     adc     [USBFS_DataPtr], 0         ;   MSB if necessary
                                        (0692) 
0960: 28       ROMX                     (0693)     romx                               ; Get the data byte
                                        (0694) 
0961: 20       POP   X                  (0695)     pop     X                          ; Get the destination offset
0962: 61 58    MOV   REG[X+0x58],A      (0696)     mov     reg[X + USBFS_EP0DATA], A  ; Load the data
0964: 75       INC   X                  (0697)     inc     X                          ; Bump the destination offset
0965: 5B       MOV   A,X                (0698)     mov     A, X                       ; Are we done?
0966: 3A 1E    CMP   A,[0x1E]           (0699)     cmp     A, [USBFS_t2]
0968: CF ED    JC    0x0956             (0700)     jc      .ROM_COPY                  ; Not done
096A: 80 16    JMP   0x0981             (0701)     jmp     .START_TRANSFER            ; Otherwise go start the transfer
096C: 5D D4    MOV   A,REG[0xD4]        
096E: 08       PUSH  A                  
                                        (0702) 
                                        (0703) ; Copy data from a RAM source
                                        (0704) .RAM_COPY:
                                        (0705) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0706)     REG_PRESERVE MVR_PP
096F: 51 16    MOV   A,[0x16]           (0707)     mov     A, [USBFS_DataPtr]  ; set proper page for mvi command
0971: 60 D4    MOV   REG[0xD4],A        (0708)     mov     reg[MVR_PP], A
                                        (0709) ENDIF
                                        (0710) .CP1:
0973: 3E 17    MVI   A,[0x17]           (0711)     mvi     A, [USBFS_DataPtr+1]       ; Get the data, bump the source
                                        (0712) 
0975: 61 58    MOV   REG[X+0x58],A      (0713)     mov     reg[X +USBFS_EP0DATA], A   ; Load the data
0977: 75       INC   X                  (0714)     inc     X                          ; Bump the destination offset
0978: 5B       MOV   A,X                (0715)     mov     A, X                       ; Are we done?
0979: 3A 1E    CMP   A,[0x1E]           (0716)     cmp     A, [USBFS_t2]
097B: CF F7    JC    0x0973             (0717)     jc      .CP1                       ; Not done
097D: 18       POP   A                  
097E: 60 D4    MOV   REG[0xD4],A        
                                        (0718) 
                                        (0719) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0720)     REG_RESTORE MVR_PP
0980: 5B       MOV   A,X                (0721)     mov     A, X                       ; Restore A
                                        (0722) ENDIF
                                        (0723) 
                                        (0724) ;; Set up the IN transfer count/mode/etc
                                        (0725) ;    A contains the byte count
                                        (0726) .START_TRANSFER:
0981: 53 09    MOV   [0x9],A            (0727)     mov     [USBFS_LastSize], A        ; Save the packet size
                                        (0728) 
0983: 50 01    MOV   A,0x1              (0729)     mov     A, 1
0985: 22 1C    AND   A,[0x1C]           (0730)     and     A, [USBFS_EP0DataToggle]
0987: A0 03    JZ    0x098B             (0731)     jz      .BYPASS_T1
0989: 50 80    MOV   A,0x80             (0732)     mov     A, USB_CNT_TOGGLE          ; Or T1 in the data toggle
                                        (0733) 
                                        (0734) .BYPASS_T1:
098B: 2A 09    OR    A,[0x9]            (0735)     or      A, [USBFS_LastSize]
098D: 36 1C 01 XOR   [0x1C],0x1         (0736)     xor     [USBFS_EP0DataToggle], 1      ; Update the data toggle for next time
                                        (0737) 
0990: 57 0F    MOV   X,0xF              (0738)     mov     X, USB_MODE_ACK_IN_STATUS_OUT    ; Set the mode register
0992: 8E 3B    JMP   USBFS_EP0_UPD_MODE_EXIT(0739)     jmp    USBFS_EP0_UPD_MODE_EXIT
                                        (0740) 
                                        (0741) 
                                        (0742) ;-----------------------------------------------------------------------------
                                        (0743) ;  FUNCTION NAME: USBFS_GetTableEntry
                                        (0744) ;
                                        (0745) ;  DESCRIPTION: This function figures out based on the various bytes in the
                                        (0746) ;               setup packet where to get the data from or put the data to.
                                        (0747) ;               Transfer Data structures are defined each of the supported
                                        (0748) ;               control transfers, this function finds the right one and
                                        (0749) ;               saves it in the CurrentTD structure in RAM.  It then
                                        (0750) ;               calls InitControlRead or InitControlWrite to being the
                                        (0751) ;               transaction.
                                        (0752) ;
                                        (0753) ;-----------------------------------------------------------------------------
                                        (0754) export USBFS_GetTableEntry
                                        (0755) USBFS_GetTableEntry:
                                        (0756) 
0994: 75       INC   X                  (0757)     inc     X                          ; Point to the first table entry
0995: 09 00    ADC   A,0x0              (0758)     adc     A, 0                       ;
0997: 08       PUSH  A                  
0998: 65 1E    ASL   [0x1E]             
099A: 65 1E    ASL   [0x1E]             
099C: 65 1E    ASL   [0x1E]             
099E: 18       POP   A                  
                                        (0759) 
                                        (0760)     TD_INDEX_TO_OFFSET USBFS_t2 ; Convert the index
                                        (0761) 
099F: 4B       SWAP  A,X                (0762)     swap    A, X
09A0: 02 1E    ADD   A,[0x1E]           (0763)     add     A, [USBFS_t2]
09A2: 4B       SWAP  A,X                (0764)     swap    A, X
09A3: 09 00    ADC   A,0x0              (0765)     adc     A, 0                       ; A:X now points to the descriptor table entry we want
                                        (0766) 
                                        (0767) ; Flow here to load the Transfer Descriptor (TD_ENTRY)
09A5: 55 1E 13 MOV   [0x1E],0x13        (0768)     mov     [USBFS_t2], USBFS_CurrentTD    ; Use Temp as mvi pointer
09A8: 90 26    CALL  USBFS_GETBYTE      (0769)     call     USBFS_GETBYTE             ; Get the descriptor data source
09AA: 90 1C    CALL  USBFS_GETWORD      (0770)     call     USBFS_GETWORD             ; Get the descriptor size
09AC: 90 1A    CALL  USBFS_GETWORD      (0771)     call     USBFS_GETWORD             ; Get the descriptor address
09AE: 90 18    CALL  USBFS_GETWORD      (0772)     call     USBFS_GETWORD             ; Get the Status Pointer
                                        (0773) ; Dispatch to InitControlRead or InitControlWrite based on d2h/h2d in the request
09B0: 5D 58    MOV   A,REG[0x58]        (0774)     mov     A, reg[USBFS_EP0DATA+bmRequestType] ; Get bmRequestType
09B2: 21 80    AND   A,0x80             (0775)     and     A, 0x80                         ; Control Read or Write
09B4: A0 03    JZ    0x09B8             (0776)     jz      .control_write
                                        (0777) 
09B6: 8E 8E    JMP   _USBFS_InitControlRead(0778)     jmp     USBFS_InitControlRead
                                        (0779) 
                                        (0780) .control_write:
09B8: 8E D3    JMP   _USBFS_InitControlWrite(0781)     jmp     USBFS_InitControlWrite
                                        (0782) 
                                        (0783) 
                                        (0784) ;-----------------------------------------------------------------------------
                                        (0785) ;  FUNCTION NAME: USBFS_LOOKUP
                                        (0786) ;
                                        (0787) ;  DESCRIPTION:    Returns the address of an entry in a lookup table (LT_ENTRY)
                                        (0788) ;
                                        (0789) ;-----------------------------------------------------------------------------
                                        (0790) ;
                                        (0791) ;  ARGUMENTS:    A:X Point to the lookup table
                                        (0792) ;                USBFS_t2 contain the table index
                                        (0793) ;
                                        (0794) ;  RETURNS:      Address of the LT_ENTRY in A:X
                                        (0795) ;
                                        (0796) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0797) ;
                                        (0798) ;  THEORY of OPERATION or PROCEDURE:
                                        (0799) ;
                                        (0800) ;-----------------------------------------------------------------------------
                                        (0801) export USBFS_LOOKUP
                                        (0802) USBFS_LOOKUP:
09BA: 75       INC   X                  (0803)     inc     X                          ; Point to the first table entry
09BB: 09 00    ADC   A,0x0              (0804)     adc     A, 0                       ;
09BD: 65 1E    ASL   [0x1E]             
09BF: 65 1E    ASL   [0x1E]             
                                        (0805) 
                                        (0806)     LT_INDEX_TO_OFFSET USBFS_t2        ; Convert the index
09C1: 4B       SWAP  A,X                (0807)     swap    A, X
09C2: 02 1E    ADD   A,[0x1E]           (0808)     add     A, [USBFS_t2]              ;
09C4: 4B       SWAP  A,X                (0809)     swap    A, X
09C5: 09 00    ADC   A,0x0              (0810)     adc     A, 0
09C7: 7F       RET                      (0811)     ret
                                        (0812) 
                                        (0813) 
                                        (0814) ;-----------------------------------------------------------------------------
                                        (0815) ;  FUNCTION NAME: USBFS_GETWORD/USBFS_GETBYTE
                                        (0816) ;
                                        (0817) ;  DESCRIPTION:    Get a word value from ROM
                                        (0818) ;
                                        (0819) ;-----------------------------------------------------------------------------
                                        (0820) ;
                                        (0821) ;  ARGUMENTS:    A:X is the ROM Address
                                        (0822) ;                USBFS_t2 is the destination address
                                        (0823) ;
                                        (0824) ;  RETURNS:      USBFS_t1
                                        (0825) ;
                                        (0826) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0827) ;                USES USBFS_t2
                                        (0828) ;                A:X points to the subsequent locaction ROM location
                                        (0829) ;  THEORY of OPERATION or PROCEDURE:
                                        (0830) ;
                                        (0831) ;-----------------------------------------------------------------------------
                                        (0832) export USBFS_GETWORD
                                        (0833) USBFS_GETWORD:
                                        (0834) 
09C8: 08       PUSH  A                  (0835)     push    A                          ; Don't loose the pointer MSB
09C9: 28       ROMX                     (0836)     romx                               ; Data source flag
09CA: 3F 1E    MVI   [0x1E],A           (0837)     mvi     [USBFS_t2], A              ; Save the data source
09CC: 18       POP   A                  (0838)     pop     A                          ; Get the MSB back
09CD: 75       INC   X                  (0839)     inc     X                          ; Point to the next  entry
09CE: 09 00    ADC   A,0x0              (0840)     adc     A, 0                       ;
                                        (0841) 
                                        (0842) export USBFS_GETBYTE
                                        (0843) USBFS_GETBYTE:
                                        (0844) 
09D0: 08       PUSH  A                  (0845)     push    A                          ; Don't loose the pointer MSB
09D1: 28       ROMX                     (0846)     romx                               ; Data source flag
09D2: 3F 1E    MVI   [0x1E],A           (0847)     mvi     [USBFS_t2], A              ; Save the data source
09D4: 18       POP   A                  (0848)     pop     A                          ; Get the MSB back
09D5: 75       INC   X                  (0849)     inc     X                          ; Point to the next  entry
09D6: 09 00    ADC   A,0x0              (0850)     adc     A, 0                       ;
09D8: 7F       RET                      (0851)     ret
                                        (0852) 
                                        (0853) 
                                        (0854) ;-----------------------------------------------------------------------------
                                        (0855) ;  FUNCTION NAME: USBFS_GET_DEVICE_TABLE_ENTRY
                                        (0856) ;
                                        (0857) ;  DESCRIPTION:    Get the address of the current DEVICE_TABLE entry
                                        (0858) ;                  Not intended for use by C fucntions
                                        (0859) ;
                                        (0860) ;-----------------------------------------------------------------------------
                                        (0861) ;
                                        (0862) ;  ARGUMENTS:
                                        (0863) ;
                                        (0864) ;  RETURNS:        A:X points the the current DEVICE_TABLE entry
                                        (0865) ;                  Carry flag is set if the current device index is out of range
                                        (0866) ;
                                        (0867) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0868) ;
                                        (0869) ;  THEORY of OPERATION or PROCEDURE:
                                        (0870) ;
                                        (0871) ;-----------------------------------------------------------------------------
                                        (0872) export USBFS_GET_DEVICE_TABLE_ENTRY
                                        (0873) USBFS_GET_DEVICE_TABLE_ENTRY:
09D9: 5F 1E 00 MOV   [0x1E],[0x0]       (0874)     mov     [USBFS_t2], [USBFS_bCurrentDevice]    ; Use the UM temp var--Selector
                                        (0875) 
09DC: 50 01    MOV   A,0x1              (0876)     mov     A, >USBFS_DEVICE_LOOKUP    ; Get the ROM Address MSB
09DE: 57 A0    MOV   X,0xA0             (0877)     mov     X, <USBFS_DEVICE_LOOKUP    ; Get the ROM Address LSB
09E0: 28       ROMX                     (0878)     romx                               ; First entry is the table size (only a byte)
09E1: 3A 1E    CMP   A,[0x1E]           (0879)     cmp     A, [USBFS_t2]              ; Range check
09E3: 50 01    MOV   A,0x1              (0880)     mov     A, >USBFS_DEVICE_LOOKUP    ; Get the ROM Address MSB
09E5: C0 03    JC    0x09E9             (0881)     jc      .exit
                                        (0882) ; Flow here if the index is valid
09E7: 9F D1    CALL  USBFS_LOOKUP       (0883)     call    USBFS_LOOKUP               ; Look up the configuration
                                        (0884) ; Jump or flow here on exit
                                        (0885) .exit:
09E9: 7F       RET                      (0886)     ret
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;  FUNCTION NAME: USBFS_GET_CONFIG_TABLE_ENTRY
                                        (0891) ;
                                        (0892) ;  DESCRIPTION:    Get the address of the current DEVICE_TABLE entry
                                        (0893) ;                  Not intended fOR use by C fucntions
                                        (0894) ;                  Does not do range checking on
                                        (0895) ;
                                        (0896) ;-----------------------------------------------------------------------------
                                        (0897) ;
                                        (0898) ;  ARGUMENTS:
                                        (0899) ;
                                        (0900) ;  RETURNS:        A:X points the the current CONFIG_TABLE entry
                                        (0901) ;                  Carry flag is set if the current device index is out of range
                                        (0902) ;
                                        (0903) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0904) ;
                                        (0905) ;  THEORY of OPERATION or PROCEDURE:
                                        (0906) ;
                                        (0907) ;-----------------------------------------------------------------------------
                                        (0908) export USBFS_GET_CONFIG_TABLE_ENTRY
                                        (0909) USBFS_GET_CONFIG_TABLE_ENTRY:
09EA: 9F ED    CALL  USBFS_GET_DEVICE_TABLE_ENTRY(0910)     call    USBFS_GET_DEVICE_TABLE_ENTRY    ; Get the selected device
09EC: 55 1E 1F MOV   [0x1E],0x1F        (0911)     mov     [USBFS_t2], USBFS_t1       ; Set the GETWORD destination
09EF: 9F D7    CALL  USBFS_GETWORD      (0912)     call    USBFS_GETWORD              ; Get the pointer to the CONFIG_LOOKUP table
                                        (0913)                                        ; ITempW has the address
09F1: 5D 5A    MOV   A,REG[0x5A]        (0914)     mov     A, reg[USBFS_EP0DATA+wValueLo]    ; Get the configuration number
09F3: 53 1E    MOV   [0x1E],A           (0915)     mov     [USBFS_t2], A              ; Save it
09F5: 51 1F    MOV   A,[0x1F]           (0916)     mov     A, [USBFS_t1]              ; Get the CONFIG_LOOKUP ROM Address MSB
09F7: 58 20    MOV   X,[0x20]           (0917)     mov     X, [USBFS_t1+1]            ; Get the CONFIG_LOOKUP ROM Address LSB
                                        (0918) 
                                        (0919) ; A:X Points to the CONFIG_LOOKUP, so get the current entry
09F9: 5F 1E 01 MOV   [0x1E],[0x1]       (0920)     mov     [USBFS_t2], [USBFS_Configuration]   ; Get the configuration number
09FC: 7A 1E    DEC   [0x1E]             (0921)     DEC     [USBFS_t2]                 ; We don't populate the 0th entry
09FE: 9F BA    CALL  USBFS_LOOKUP       (0922)     call    USBFS_LOOKUP               ; Look up the configuration
0A00: 7F       RET                      (0923)     ret
                                        (0924) 
                                        (0925) 
                                        (0926) ;-----------------------------------------------------------------------------
                                        (0927) ;  FUNCTION NAME: USBFS_UpdateStatusBlock
                                        (0928) ;
                                        (0929) ;  DESCRIPTION:    Update the Completion Status Block for a Request.  The
                                        (0930) ;                  block is updated with the completion code from the
                                        (0931) ;                  argument (A) and the _TransferByteCount.
                                        (0932) ;
                                        (0933) ;                  The StatusBlock Pointer (_StatusBlockPtr) is set to NULL (0)
                                        (0934) ;                  to make sure no other updates are made to the StatusBlock by
                                        (0935) ;                  the USB User Module.
                                        (0936) ;
                                        (0937) ;-----------------------------------------------------------------------------
                                        (0938) ;
                                        (0939) ;  ARGUMENTS:      A contains the Completion Status Code
                                        (0940) ;
                                        (0941) ;  RETURNS:        None
                                        (0942) ;
                                        (0943) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0944) ;
                                        (0945) ;  THEORY of OPERATION or PROCEDURE:
                                        (0946) ;
                                        (0947) ;-----------------------------------------------------------------------------
                                        (0948) USBFS_UpdateStatusBlock:
0A01: 58 19    MOV   X,[0x19]           (0949)     mov     X, [USBFS_StatusBlockPtr + 1]   ;
0A03: 4B       SWAP  A,X                (0950)     swap    A, X                       ; Don't loose the completion code
0A04: 39 00    CMP   A,0x0              (0951)     cmp     A, 0                       ; NULL?
0A06: A0 0F    JZ    0x0A16             (0952)     jz      .done                      ; No update on NULL
                                        (0953) ; Flow here to update the VSR Completion Status Block
0A08: 4B       SWAP  A,X                (0954)     swap    A, X                       ; Completion code A, Pointer in X
0A09: 54 00    MOV   [X+0],A            (0955)     mov     [X + 0], A                 ; Update the completion Code
0A0B: 51 1A    MOV   A,[0x1A]           (0956)     mov     A, [USBFS_TransferByteCount]   ; Actual Byte Count MSB
0A0D: 54 01    MOV   [X+1],A            (0957)     mov     [X + 1], A
0A0F: 51 1B    MOV   A,[0x1B]           (0958)     mov     A, [USBFS_TransferByteCount + 1]   ; Actual Byte Count LSB
0A11: 54 02    MOV   [X+2],A            (0959)     mov     [X + 2], A
0A13: 55 19 00 MOV   [0x19],0x0         (0960)     mov     [USBFS_StatusBlockPtr + 1], 0   ; Clear the Block Pointer
                                        (0961) .done:
0A16: 7F       RET                      (0962)     ret                                ; All done
                                        (0963) 
                                        (0964) 
                                        (0965) ;-----------------------------------------------------------------------------
                                        (0966) ;  FUNCTION NAME: USBFS_InitializeStatusBlock
                                        (0967) ;
                                        (0968) ;  DESCRIPTION:    Initialize the Completion Status Block for a Request.
                                        (0969) ;                  The completion code is set to USB_XFER_IDLE.
                                        (0970) ;
                                        (0971) ;-----------------------------------------------------------------------------
                                        (0972) ;
                                        (0973) ;  ARGUMENTS:      None
                                        (0974) ;
                                        (0975) ;  RETURNS:        None
                                        (0976) ;
                                        (0977) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0978) ;
                                        (0979) ;  THEORY of OPERATION or PROCEDURE:
                                        (0980) ;
                                        (0981) ;-----------------------------------------------------------------------------
                                        (0982) USBFS_InitializeStatusBlock:
0A17: 51 19    MOV   A,[0x19]           (0983)     mov     A, [USBFS_StatusBlockPtr + 1]   ;
0A19: 39 00    CMP   A,0x0              (0984)     cmp     A, 0                       ; NULL?
0A1B: A0 0B    JZ    0x0A27             (0985)     jz      .done                      ; No update on NULL
                                        (0986) ; Flow here to initialize the Completion Status Block
0A1D: 4B       SWAP  A,X                (0987)     swap    A, X                       ; Pointer in X
0A1E: 56 00 00 MOV   [X+0],0x0          (0988)     mov     [X + 0], USB_XFER_IDLE     ; Initialize the completion code (0)
0A21: 55 1A 00 MOV   [0x1A],0x0         (0989)     mov     [USBFS_TransferByteCount], 0   ; Clear the byte count
0A24: 55 1B 00 MOV   [0x1B],0x0         (0990)     mov     [USBFS_TransferByteCount + 1], 0   ;
                                        (0991) .done:
0A27: 7F       RET                      (0992)     ret                                ; All done
0A28: 8A D1    JMP   USBFS_DT_h2d_std_dev_Dispatch
0A2A: 8B 1A    JMP   USBFS_DT_h2d_std_ifc_Dispatch
0A2C: 8B 68    JMP   USBFS_DT_h2d_std_ep_Dispatch
0A2E: 80 42    JMP   0x0A71             
0A30: 80 40    JMP   0x0A71             
0A32: 81 D4    JMP   USBFS_DT_h2d_cls_ifc_Dispatch
0A34: 80 3C    JMP   0x0A71             
0A36: 80 3A    JMP   0x0A71             
0A38: 80 38    JMP   0x0A71             
0A3A: 80 36    JMP   0x0A71             
0A3C: 80 34    JMP   0x0A71             
0A3E: 80 32    JMP   0x0A71             
0A40: 80 30    JMP   0x0A71             
0A42: 80 2E    JMP   0x0A71             
0A44: 80 2C    JMP   0x0A71             
0A46: 80 2A    JMP   0x0A71             
0A48: 8A 92    JMP   USBFS_DT_d2h_std_dev_Dispatch
0A4A: 8A D0    JMP   USBFS_DT_d2h_std_ifc_Dispatch
0A4C: 8B 24    JMP   USBFS_DT_d2h_std_ep_Dispatch
0A4E: 80 22    JMP   0x0A71             
0A50: 80 20    JMP   0x0A71             
0A52: 81 CE    JMP   USBFS_DT_d2h_cls_ifc_Dispatch
0A54: 80 1C    JMP   0x0A71             
0A56: 80 1A    JMP   0x0A71             
0A58: 80 18    JMP   0x0A71             
0A5A: 80 16    JMP   0x0A71             
0A5C: 80 14    JMP   0x0A71             
0A5E: 80 12    JMP   0x0A71             
0A60: 80 10    JMP   0x0A71             
0A62: 80 0E    JMP   0x0A71             
0A64: 80 0C    JMP   0x0A71             
0A66: 80 0A    JMP   0x0A71             
0A68: 39 20    CMP   A,0x20             
0A6A: D0 04    JNC   0x0A6F             
0A6C: 64       ASL   A                  
0A6D: EF BA    JACC  USBFS_DT_bmRequestType
0A6F: 80 01    JMP   0x0A71             
                                        (0993) 
                                        (0994) 
                                        (0995) ;-----------------------------------------------------------------------------
                                        (0996) ;  FUNCTION NAME: ;  USB 1st Tier Dispactch Jump Table (based on bmRequestType)
                                        (0997) ;
                                        (0998) ;  DESCRIPTION:
                                        (0999) ;
                                        (1000) ;-----------------------------------------------------------------------------
                                        (1001) ;
                                        (1002) ;  ARGUMENTS:
                                        (1003) ;
                                        (1004) ;  RETURNS:
                                        (1005) ;
                                        (1006) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1007) ;
                                        (1008) ;  THEORY of OPERATION or PROCEDURE:
                                        (1009) ;
                                        (1010) ;-----------------------------------------------------------------------------
                                        (1011) MACRO BMREQUEST_DISPATCH
                                        (1012) IF (USB_CB_@0_@1_@2 & 1)
                                        (1013)     jmp     USBFS_DT_@0_@1_@2_Dispatch
                                        (1014) ELSE
                                        (1015)     jmp     USBFS_Not_Supported_Local_Drv
                                        (1016) ENDIF
                                        (1017) ENDM
                                        (1018) 
                                        (1019) USBFS_DT_bmRequestType::
                                        (1020)     BMREQUEST_DISPATCH    h2d, std, dev
                                        (1021)     BMREQUEST_DISPATCH    h2d, std, ifc
                                        (1022)     BMREQUEST_DISPATCH    h2d, std, ep
                                        (1023)     BMREQUEST_DISPATCH    h2d, std, oth
                                        (1024)     BMREQUEST_DISPATCH    h2d, cls, dev
                                        (1025)     BMREQUEST_DISPATCH    h2d, cls, ifc
                                        (1026)     BMREQUEST_DISPATCH    h2d, cls, ep
                                        (1027)     BMREQUEST_DISPATCH    h2d, cls, oth
                                        (1028)     BMREQUEST_DISPATCH    h2d, vnd, dev
                                        (1029)     BMREQUEST_DISPATCH    h2d, vnd, ifc
                                        (1030)     BMREQUEST_DISPATCH    h2d, vnd, ep
                                        (1031)     BMREQUEST_DISPATCH    h2d, vnd, oth
                                        (1032)     BMREQUEST_DISPATCH    h2d, rsv, dev
                                        (1033)     BMREQUEST_DISPATCH    h2d, rsv, ifc
                                        (1034)     BMREQUEST_DISPATCH    h2d, rsv, ep
                                        (1035)     BMREQUEST_DISPATCH    h2d, rsv, oth
                                        (1036)     BMREQUEST_DISPATCH    d2h, std, dev
                                        (1037)     BMREQUEST_DISPATCH    d2h, std, ifc
                                        (1038)     BMREQUEST_DISPATCH    d2h, std, ep
                                        (1039)     BMREQUEST_DISPATCH    d2h, std, oth
                                        (1040)     BMREQUEST_DISPATCH    d2h, cls, dev
                                        (1041)     BMREQUEST_DISPATCH    d2h, cls, ifc
                                        (1042)     BMREQUEST_DISPATCH    d2h, cls, ep
                                        (1043)     BMREQUEST_DISPATCH    d2h, cls, oth
                                        (1044)     BMREQUEST_DISPATCH    d2h, vnd, dev
                                        (1045)     BMREQUEST_DISPATCH    d2h, vnd, ifc
                                        (1046)     BMREQUEST_DISPATCH    d2h, vnd, ep
                                        (1047)     BMREQUEST_DISPATCH    d2h, vnd, oth
                                        (1048)     BMREQUEST_DISPATCH    d2h, rsv, dev
                                        (1049)     BMREQUEST_DISPATCH    d2h, rsv, ifc
                                        (1050)     BMREQUEST_DISPATCH    d2h, rsv, ep
                                        (1051)     BMREQUEST_DISPATCH    d2h, rsv, oth
                                        (1052) USBFS_DT_End:
                                        (1053) USBFS_DT_Size: equ (USBFS_DT_End-USBFS_DT_bmRequestType) / 2
                                        (1054) USBFS_bmRequestType_Dispatch::
                                        (1055)     DISPATCHER USBFS_DT_bmRequestType, USBFS_DT_Size, USBFS_Not_Supported_Local_Drv
                                        (1056) 
                                        (1057) USBFS_Not_Supported_Local_Drv:
0A71: 7D 04 AA LJMP  USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(1058)     ljmp     USBFS_Not_Supported
                                        (1059) 
                                        (1060) 
                                        (1061) ;-----------------------------------------------
                                        (1062) ; Add custom application code for routines
                                        (1063) ;-----------------------------------------------
                                        (1064) 
                                        (1065)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (1066)    ;---------------------------------------------------
                                        (1067)    ; Insert your custom code below this banner
                                        (1068)    ;---------------------------------------------------
                                        (1069) 
                                        (1070)    ;---------------------------------------------------
                                        (1071)    ; Insert your custom code above this banner
                                        (1072)    ;---------------------------------------------------
                                        (1073)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (1074) 
                                        (1075) ; End of File USBFS_drv.asm
FILE: lib\usbfs_cls_hid.asm             (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0A74: 70 BF    AND   F,0xBF             (0003) ;;  FILENAME: USBFS_cls_hid.asm
0A76: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0004) ;;   Version: 1.90, Updated on 2012/3/2 at 9:15:35
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: USB Human Interface Device (HID) Class request implemenatation
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API
                                        (0013) ;;        function returns. Even though these registers may be preserved now,
                                        (0014) ;;        there is no guarantee they will be preserved in future releases.
                                        (0015) ;;-----------------------------------------------------------------------------
                                        (0016) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0017) ;;*****************************************************************************
                                        (0018) ;;*****************************************************************************
                                        (0019) 
                                        (0020) include "m8c.inc"
                                        (0021) include "USBFS_macros.inc"
                                        (0022) include "USBFS.inc"
                                        (0023) include "memory.inc"
                                        (0024) 
                                        (0025) ;-----------------------------------------------
                                        (0026) ;  Global Symbols
                                        (0027) ;-----------------------------------------------
                                        (0028) EXPORT USBFS_UpdateHIDTimer
                                        (0029) EXPORT _USBFS_UpdateHIDTimer
                                        (0030) EXPORT USBFS_bGetProtocol
                                        (0031) EXPORT _USBFS_bGetProtocol
                                        (0032) ;export of the following items allows an application to initialize the data
                                        (0033) ; if necessary, possibly on reboot or other programatic events (usb reset).
                                        (0034) ; USBFS_Protocol is the variable controling boot/report mode for 
                                        (0035) ; HID devices.
                                        (0036) EXPORT  _USBFS_IdleReload    ; Idle Timer Reload Value
                                        (0037) EXPORT   USBFS_IdleReload    ; Idle Timer Reload Value
                                        (0038) EXPORT  _USBFS_Protocol	  ; Active Protocol
                                        (0039) EXPORT   USBFS_Protocol    ; Active Protocol
                                        (0040) 
                                        (0041) AREA InterruptRAM (RAM,REL,CON)
                                        (0042) ;-----------------------------------------------
                                        (0043) ;  Constant Definitions
                                        (0044) ;-----------------------------------------------
                                        (0045) ;-----------------------------------------------
                                        (0046) ; Variable Allocation
                                        (0047) ;-----------------------------------------------
                                        (0048) ;----------------------------------------------------------------------------
                                        (0049) ; Interface Setting
                                        (0050) ;----------------------------------------------------------------------------
                                        (0051)   USBFS_IdleReload:
                                        (0052)  _USBFS_IdleReload:                     BLK   1h    ; Idle Timer Reload Value
                                        (0053)  USBFS_IdleTimer:                       BLK   1h    ; Idle Timers
                                        (0054)   USBFS_Protocol:   
                                        (0055)  _USBFS_Protocol:                       BLK   1h    ; Active Protocol
                                        (0056) 
                                        (0057) AREA UserModules (ROM, REL)
                                        (0058) ;-----------------------------------------------------------------------------
                                        (0059) ;  FUNCTION NAME: USBFS_bGetProtocol
                                        (0060) ;
                                        (0061) ;  DESCRIPTION:   Returns the selected protocol value to the application
                                        (0062) ;
                                        (0063) ;-----------------------------------------------------------------------------
                                        (0064) ;
                                        (0065) ;  ARGUMENTS:    A: Interface number
                                        (0066) ;
                                        (0067) ;  RETURNS:      A: Protocol values
                                        (0068) ;
                                        (0069) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0070) ;
                                        (0071) ;  THEORY of OPERATION or PROCEDURE:
                                        (0072) ;
                                        (0073) ;-----------------------------------------------------------------------------
                                        (0074) ;.SECTION
                                        (0075)  USBFS_bGetProtocol:
                                        (0076) _USBFS_bGetProtocol:
                                        (0077)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0078) 	RAM_SETPAGE_IDX >USBFS_Protocol
0A79: 5C       MOV   X,A                (0079)     mov  X, A                          ; Argument is the index
0A7A: 52 40    MOV   A,[X+64]           (0080)     mov  A, [X + USBFS_Protocol] ; Return the protocol
0A7C: 70 3F    AND   F,0x3F             
0A7E: 71 C0    OR    F,0xC0             
                                        (0081) 	RAM_EPILOGUE RAM_USE_CLASS_3
0A80: 7F       RET                      (0082)     ret
0A81: 70 BF    AND   F,0xBF             
0A83: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0083) ;.ENDSECTION
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;  FUNCTION NAME: USBFS_UpdateHIDTimer
                                        (0086) ;
                                        (0087) ;  DESCRIPTION:    Updates the HID report timer and reloads it if it expires
                                        (0088) ;
                                        (0089) ;-----------------------------------------------------------------------------
                                        (0090) ;
                                        (0091) ;  ARGUMENTS:     A: Interface number
                                        (0092) ;
                                        (0093) ;  RETURNS:       A: USB_IDLE_TIMER_EXPIRED, if the timer is running and expired
                                        (0094) ;                    USB_IDLE_TIMER_RUNNING, if the timer is running
                                        (0095) ;                    USB_IDLE_TIMER_INDEFINITE, if the report should be made on change
                                        (0096) ;
                                        (0097) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0098) ;
                                        (0099) ;  THEORY of OPERATION or PROCEDURE:
                                        (0100) ;
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;.SECTION
                                        (0103)  USBFS_UpdateHIDTimer:
                                        (0104) _USBFS_UpdateHIDTimer:
                                        (0105)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0106) 	RAM_SETPAGE_IDX >USBFS_IdleReload
0A86: 5C       MOV   X,A                (0107)     mov  X, A                          ; Make the argument the index
                                        (0108) ; Flow here to check if the timer is "indefinite"
0A87: 3D 3E 00 CMP   [X+62],0x0         (0109)     cmp	 [X + USBFS_IdleReload], 0     ; Indefinite?
0A8A: A0 13    JZ    0x0A9E             (0110)     jz   .indefinite                   ; Jump if Indefinite?
                                        (0111) ; Flow here to check the timers
0A8C: 7B 3F    DEC   [X+63]             (0112)     DEC    [X + USBFS_IdleTimer]       ; Decrement the timer
0A8E: C0 08    JC    0x0A97             (0113)     jc   .expired
                                        (0114) ; Flow here if the timer has not expired
0A90: 50 02    MOV   A,0x2              (0115)     mov  A, USB_IDLE_TIMER_RUNNING     ; Return value (not expired)
0A92: 70 3F    AND   F,0x3F             
0A94: 71 C0    OR    F,0xC0             
                                        (0116) 	RAM_EPILOGUE RAM_USE_CLASS_3
0A96: 7F       RET                      (0117)     ret                                ; Quick exit
                                        (0118) ; Jump here if the timer expired
                                        (0119) .expired:
0A97: 52 3E    MOV   A,[X+62]           (0120)     mov  A, [X + USBFS_IdleReload]     ; Reload the timer
0A99: 54 3F    MOV   [X+63],A           (0121)     mov  [X + USBFS_IdleTimer], A      ; 
0A9B: 50 01    MOV   A,0x1              (0122)     mov  A, USB_IDLE_TIMER_EXPIRED     ; Return value (expired)
0A9D: 7F       RET                      (0123)     ret                                ; Quick exit
                                        (0124) ; Jump here to make return "on change/indefinite"
                                        (0125) .indefinite:
0A9E: 50 00    MOV   A,0x0              (0126)     mov  A, USB_IDLE_TIMER_INDEFINITE  ; Return value (change/indefinite)
0AA0: 70 3F    AND   F,0x3F             
0AA2: 71 C0    OR    F,0xC0             
                                        (0127) 	RAM_EPILOGUE RAM_USE_CLASS_3
0AA4: 7F       RET                      (0128)     ret                                ; Exit
                                        (0129) ;.ENDSECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: USBFS_CB_d2h_std_ifc_06
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:   Get Interface Descriptor
                                        (0134) ;
                                        (0135) ;****************************************************************
                                        (0136) ; STANDARD INTERFACE IN REQUEST: Get_Interface_Descriptor
                                        (0137) ;****************************************************************
                                        (0138) ;
                                        (0139) ; bmRequestType   : (IN | STANDARD | INTERFACE)    = 81h
                                        (0140) ; bRequest        : GET_DESCRIPTOR                 = 06h    
                                        (0141) ; wValue          : DESCRIPTOR TYPE | INDEX        = xxxxh  
                                        (0142) ; wIndex          : INTERFACE                      = --xxh
                                        (0143) ; wLength         : DESCRIPTOR_LENGTH              = --xxh  
                                        (0144) ; 
                                        (0145) ; The GET_INTERFACE_DESCRIPTOR request returns the specified 
                                        (0146) ; descriptor if the descriptor exists. 
                                        (0147) ;
                                        (0148) ; The upper byte of request_value contains the descriptor type and 
                                        (0149) ; the lower byte contains the descriptor index. request_index 
                                        (0150) ; contains either 0000h or the Language ID. request_length contains 
                                        (0151) ; the descriptor length. The actual descriptor information is 
                                        (0152) ; transferred in subsequent data packets. 
                                        (0153) ;
                                        (0154) ; USB defines only a DEVICE recipient but the HID spec added 
                                        (0155) ; support for the INTERFACE recipient.
                                        (0156) ;
                                        (0157) ; Get Descriptor from an HID interface returns either HID, 
                                        (0158) ; REPORT, or PHYSICAL descriptors.
                                        (0159) ;
                                        (0160) ;****************************************************************
                                        (0161) IF (USB_CB_SRC_d2h_std_ifc_06 & USB_UM_SUPPLIED)
                                        (0162) export  USBFS_CB_d2h_std_ifc_06
                                        (0163) USBFS_CB_d2h_std_ifc_06:
0AA5: 91 34    CALL  USBFS_GetInterfaceLookupTable(0164)     call  USBFS_GetInterfaceLookupTable  ; Point the the interface lookup table
0AA7: 08       PUSH  A                  (0165)     push  A                            ; Save the MSB
0AA8: 5D 5B    MOV   A,REG[0x5B]        (0166)     mov   A, REG[USBFS_EP0DATA+wValueHi] ; Get descriptor type
0AAA: 39 21    CMP   A,0x21             (0167)     cmp   A, DESCR_TYPE_HID_CLASS      ; HID Class descriptor?
0AAC: A0 0E    JZ    0x0ABB             (0168)     jz    .send_hid_class_descr
0AAE: 39 22    CMP   A,0x22             (0169)     cmp   A, DESCR_TYPE_HID_REPORT     ; HID Report descriptor?
0AB0: A0 04    JZ    0x0AB5             (0170)     jz    .send_hid_report_descr
                                        (0171) ; Jump or flow here if the request is not supported
                                        (0172) .not_supported:
0AB2: 18       POP   A                  (0173)     pop   A                            ; Restore the stack
0AB3: 81 7F    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0174)     jmp   USBFS_Not_Supported_Local_Hid
                                        (0175) ; Jump here to send the HID Report Descriptor
                                        (0176) .send_hid_report_descr:
0AB5: 18       POP   A                  (0177)     pop   A                            ; Restore the interface lookup table MSB
0AB6: 4B       SWAP  A,X                (0178)     swap  A, X                         ; Add the offset
0AB7: 01 02    ADD   A,0x2              (0179)     add   A, 2                         ; Point to the right table entry
0AB9: 80 05    JMP   0x0ABF             (0180)     jmp   .finish
                                        (0181) ; Jump here to send the HID Class Descriptor
                                        (0182) .send_hid_class_descr:
0ABB: 18       POP   A                  (0183)     pop   A                            ; Restore the interface lookup table MSB
0ABC: 4B       SWAP  A,X                (0184)     swap  A, X                         ; Add the offset
0ABD: 01 04    ADD   A,0x4              (0185)     add   A, 4                         ; Point to the right table entry
                                        (0186) ; Jump or flow here with A:X Pointing to the 
                                        (0187) .finish:
0ABF: 4B       SWAP  A,X                (0188)     swap  A, X                         ; Back where they belong
0AC0: 09 00    ADC   A,0x0              (0189)     adc   A, 0                         ; Don't forget the carry
0AC2: 55 1E 1F MOV   [0x1E],0x1F        (0190)     mov   [USBFS_t2],USBFS_t1          ; Set the GETWORD destination 
0AC5: 9F 01    CALL  USBFS_GETWORD      (0191)     call  USBFS_GETWORD                ; Get the pointer to the transfer descriptor table
                                        (0192)                                        ; ITempW has the address
                                        (0193) ; Get the interface number
0AC7: 5D 5C    MOV   A,REG[0x5C]        (0194)     mov   A, REG[USBFS_EP0DATA+wIndexLo] ; Get the interface number
0AC9: 53 1E    MOV   [0x1E],A           (0195)     mov   [USBFS_t2], A                ; Save it for the call to LOOKUP
0ACB: 51 1F    MOV   A,[0x1F]           (0196)     mov   A, [USBFS_t1]                ; Get the transfer descriptor ROM Address MSB
0ACD: 58 20    MOV   X,[0x20]           (0197)     mov   X, [USBFS_t1+1]              ; Get the transfer descriptor ROM Address LSB
                                        (0198) 
0ACF: 81 66    JMP   0x0C36             (0199)     jmp   USBFS_GetTableEntry_Local_Hid
                                        (0200) ELSE
                                        (0201) IF (USB_CB_SRC_d2h_std_ifc_06 & USB_APP_SUPPLIED)
                                        (0202) export  USBFS_CB_d2h_std_ifc_06
                                        (0203) USBFS_CB_d2h_std_ifc_06:
                                        (0204)     LJMP    APP_USBFS_CB_d2h_std_ifc_06
                                        (0205) ENDIF
                                        (0206) ENDIF
                                        (0207) ;-----------------------------------------------------------------------------
                                        (0208) ;  FUNCTION NAME: USBFS_CB_d2h_cls_ifc_01
                                        (0209) ;
                                        (0210) ;  DESCRIPTION:   Get Report
                                        (0211) ;
                                        (0212) ;****************************************************************
                                        (0213) ; HID CLASS INTERFACE IN REQUEST: Get_Report   
                                        (0214) ;****************************************************************
                                        (0215) ;
                                        (0216) ; bmRequestType  : (IN | CLASS | INTERFACE)       = A1h
                                        (0217) ; bRequest       : GET_REPORT                     = 01h    
                                        (0218) ; wValue         : REPORT TYPE | REPORT ID        = xxxxh  
                                        (0219) ; wIndex         : INTERFACE                      = --xxh
                                        (0220) ; wLength        : REPORT LENGTH                  = --xxh  
                                        (0221) ; 
                                        (0222) ; The GET_REPORT request allows the host to receive a report from 
                                        (0223) ; a specific interface via the control pipe. 
                                        (0224) ;
                                        (0225) ;****************************************************************
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;
                                        (0228) ;  ARGUMENTS:
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;
                                        (0232) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0233) ;
                                        (0234) ;  THEORY of OPERATION or PROCEDURE:
                                        (0235) ;
                                        (0236) ;-----------------------------------------------------------------------------
                                        (0237) IF (USB_CB_SRC_d2h_cls_ifc_01 & USB_UM_SUPPLIED)
                                        (0238) export  USBFS_CB_d2h_cls_ifc_01
                                        (0239) USBFS_CB_d2h_cls_ifc_01:
                                        (0240) 
0AD1: 90 90    CALL  USBFS_cls_hid_Find_Report(0241)     call    Find_Report
0AD3: 4B       SWAP  A,X                
0AD4: B0 06    JNZ   0x0ADB             
0AD6: 4B       SWAP  A,X                
0AD7: A1 5B    JZ    USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...
0AD9: 80 02    JMP   0x0ADC             
0ADB: 4B       SWAP  A,X                
                                        (0242)     NULL_PTR_CHECK USBFS_Not_Supported_Local_Hid
                                        (0243)     
0ADC: 81 59    JMP   0x0C36             (0244)     jmp     USBFS_GetTableEntry_Local_Hid
                                        (0245) ELSE
                                        (0246) IF (USB_CB_SRC_d2h_cls_ifc_01 & USB_APP_SUPPLIED)
                                        (0247) export  USBFS_CB_d2h_cls_ifc_01
                                        (0248) USBFS_CB_d2h_cls_ifc_01:
                                        (0249)     LJMP    APP_USBFS_CB_d2h_cls_ifc_01
                                        (0250) ENDIF
                                        (0251) ENDIF
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;  FUNCTION NAME: USBFS_CB_d2h_cls_ifc_02
                                        (0254) ;
                                        (0255) ;  DESCRIPTION:   Get Idle
                                        (0256) ;
                                        (0257) ;****************************************************************
                                        (0258) ; HID CLASS INTERFACE IN REQUEST: Get_Idle
                                        (0259) ;****************************************************************
                                        (0260) ;
                                        (0261) ; bmRequestType  : (OUT | CLASS | INTERFACE)      = A1h
                                        (0262) ; bRequest       : GET_IDLE                       = 02h    
                                        (0263) ; wValue         : REPORT ID                      = 00xxh  
                                        (0264) ; wIndex         : INTERFACE                      = --xxh
                                        (0265) ; wLength        : Report Size                    = 0001h  
                                        (0266) ; 
                                        (0267) ; The GET_IDLE request reads the current idle rate for a given 
                                        (0268) ; input report on a specific interface. 
                                        (0269) ;
                                        (0270) ;****************************************************************
                                        (0271) ;-----------------------------------------------------------------------------
                                        (0272) ;
                                        (0273) ;  ARGUMENTS:
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;
                                        (0277) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0278) ;
                                        (0279) ;  THEORY of OPERATION or PROCEDURE:
                                        (0280) ;
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) IF (USB_CB_SRC_d2h_cls_ifc_02 & USB_UM_SUPPLIED)
                                        (0283) .LITERAL
                                        (0284) GetSetIdleTable:
                                        (0285)     TD_START_TABLE  1h                 ; One entry for each interface
                                        (0286)     TD_ENTRY        USB_DS_RAM, 1, USBFS_IdleReload,   NULL_PTR  ; Reuse the transfer buffer
                                        (0287)     TD_ENTRY        USB_DS_RAM, 1, USBFS_IdleReload+1, NULL_PTR  ; Reuse the transfer buffer
                                        (0288) .ENDLITERAL
                                        (0289) export  USBFS_CB_d2h_cls_ifc_02
                                        (0290) USBFS_CB_d2h_cls_ifc_02:
0AEF: 5D 5A    MOV   A,REG[0x5A]        (0291)     mov   A, REG[USBFS_EP0DATA+wValueLo] ; Get the report number
0AF1: 39 00    CMP   A,0x0              (0292)     cmp   A, 0                         ; We don't support report by report idle
0AF3: B1 3F    JNZ   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0293)     jnz   USBFS_Not_Supported_Local_Hid
                                        (0294) 
0AF5: 5D 5C    MOV   A,REG[0x5C]        (0295)     mov   A, REG[USBFS_EP0DATA+wIndexLo] ; Get the interface number
0AF7: 39 01    CMP   A,0x1              (0296)     cmp   A, 1h                        ; We don't support report by report idle
0AF9: D1 39    JNC   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0297)     jnc   USBFS_Not_Supported_Local_Hid
                                        (0298) 
                                        (0299) 
0AFB: 53 1E    MOV   [0x1E],A           (0300)     mov   [USBFS_t2], A                ; Use the UM temp var--Selector
0AFD: 50 0A    MOV   A,0xA              (0301)     mov   A,>GetSetIdleTable           ; Get the ROM Address MSB
0AFF: 57 DE    MOV   X,0xDE             (0302)     mov   X,<GetSetIdleTable           ; Get the ROM Address LSB
                                        (0303)     
0B01: 81 34    JMP   0x0C36             (0304)     jmp   USBFS_GetTableEntry_Local_Hid
                                        (0305) ELSE
                                        (0306) IF (USB_CB_SRC_d2h_cls_ifc_02 & USB_APP_SUPPLIED)
                                        (0307) export  USBFS_CB_d2h_cls_ifc_02
                                        (0308) USBFS_CB_d2h_cls_ifc_02:
                                        (0309)     LJMP    APP_USBFS_CB_d2h_cls_ifc_02
                                        (0310) ENDIF
                                        (0311) ENDIF
                                        (0312) ;-----------------------------------------------------------------------------
                                        (0313) ;  FUNCTION NAME: USBFS_CB_d2h_cls_ifc_03
                                        (0314) ;
                                        (0315) ;  DESCRIPTION:   Get Protocol
                                        (0316) ;
                                        (0317) ;****************************************************************
                                        (0318) ; HID CLASS INTERFACE IN REQUEST: Get_Protocol
                                        (0319) ;****************************************************************
                                        (0320) ;
                                        (0321) ; bmRequestType  : (OUT | CLASS | INTERFACE)      = A1h
                                        (0322) ; bRequest       : GET_PROTOCOL                   = 03h    
                                        (0323) ; wValue         : RESERVED                       = 0000h  
                                        (0324) ; wIndex         : INTERFACE                      = --xxh
                                        (0325) ; wLength        : SIZEOF_INTERFACE_PROTOCOL      = 0001h  
                                        (0326) ; 
                                        (0327) ; The GET_PROTOCOL request reads which protocol is currently 
                                        (0328) ; active.
                                        (0329) ;
                                        (0330) ;****************************************************************
                                        (0331) ;-----------------------------------------------------------------------------
                                        (0332) ;
                                        (0333) ;  ARGUMENTS:
                                        (0334) ;
                                        (0335) ;  RETURNS:
                                        (0336) ;
                                        (0337) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0338) ;
                                        (0339) ;  THEORY of OPERATION or PROCEDURE:
                                        (0340) ;
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) IF (USB_CB_SRC_d2h_cls_ifc_03 & USB_UM_SUPPLIED)
                                        (0343) .LITERAL
                                        (0344) GetProtocolTable:
                                        (0345)     TD_START_TABLE  2                  ; One entry for BOOT/One entry for REPORT
                                        (0346)     TD_ENTRY        USB_DS_ROM, 1, ROM_ZERO,   NULL_PTR  ; Simply use a a hard coded zero or one
                                        (0347)     TD_ENTRY        USB_DS_ROM, 1, ROM_ONE,    NULL_PTR  ; 
                                        (0348) ROM_ZERO:   DB  0
                                        (0349) ROM_ONE:    DB  1
                                        (0350) .ENDLITERAL
                                        (0351) export  USBFS_CB_d2h_cls_ifc_03
                                        (0352) USBFS_CB_d2h_cls_ifc_03:
0B16: 5D 5C    MOV   A,REG[0x5C]        (0353)     mov   A, REG[USBFS_EP0DATA+wIndexLo]  ; Get the interface number
0B18: 39 01    CMP   A,0x1              (0354)     cmp   A, 1h                        ; Range check
0B1A: D1 18    JNC   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0355)     jnc   USBFS_Not_Supported_Local_Hid
                                        (0356) 
0B1C: 5C       MOV   X,A                (0357)     mov   X, A                         ; Get the protocol for the requested interface
0B1D: 52 40    MOV   A,[X+64]           (0358)     mov   A, [X + USBFS_Protocol]      ; 
                                        (0359) 
0B1F: 53 1E    MOV   [0x1E],A           (0360)     mov   [USBFS_t2], A                ; Use the UM temp var--Selector
                                        (0361) 
0B21: 50 0B    MOV   A,0xB              (0362)     mov   A,>GetProtocolTable          ; Get the ROM Address MSB
0B23: 57 03    MOV   X,0x3              (0363)     mov   X,<GetProtocolTable          ; Get the ROM Address LSB
                                        (0364)     
0B25: 81 10    JMP   0x0C36             (0365)     jmp   USBFS_GetTableEntry_Local_Hid
                                        (0366) ELSE
                                        (0367) IF (USB_CB_SRC_d2h_cls_ifc_03 & USB_APP_SUPPLIED)
                                        (0368) export  USBFS_CB_d2h_cls_ifc_03
                                        (0369) USBFS_CB_d2h_cls_ifc_03:
                                        (0370)     LJMP    APP_USBFS_CB_d2h_cls_ifc_03
                                        (0371) ENDIF
                                        (0372) ENDIF
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: USBFS_CB_h2d_cls_ifc_09
                                        (0375) ;
                                        (0376) ;  DESCRIPTION:   Set Report
                                        (0377) ;
                                        (0378) ;****************************************************************
                                        (0379) ; HID CLASS INTERFACE OUT REQUEST: Set_Report
                                        (0380) ;****************************************************************
                                        (0381) ;
                                        (0382) ; bmRequestType   : (OUT | CLASS | INTERFACE)      = 21h
                                        (0383) ; bRequest        : SET_REPORT                     = 09h    
                                        (0384) ; wValue          : REPORT TYPE | REPORT ID        = xxxxh  
                                        (0385) ; wIndex          : INTERFACE                      = --xxh
                                        (0386) ; wLength         : REPORT LENGTH                  = --xxh  
                                        (0387) ; 
                                        (0388) ; The SET_REPORT request allows the host to send a report to the 
                                        (0389) ; device, possibly setting the state of input, output or feature 
                                        (0390) ; controls. 
                                        (0391) ;
                                        (0392) ;****************************************************************
                                        (0393) ;-----------------------------------------------------------------------------
                                        (0394) ;
                                        (0395) ;  ARGUMENTS:
                                        (0396) ;
                                        (0397) ;  RETURNS:
                                        (0398) ;
                                        (0399) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0400) ;
                                        (0401) ;  THEORY of OPERATION or PROCEDURE:
                                        (0402) ;
                                        (0403) ;-----------------------------------------------------------------------------
                                        (0404) IF (USB_CB_SRC_h2d_cls_ifc_09 & USB_UM_SUPPLIED)
                                        (0405) export  USBFS_CB_h2d_cls_ifc_09
                                        (0406) USBFS_CB_h2d_cls_ifc_09:
0B27: 90 3A    CALL  USBFS_cls_hid_Find_Report(0407)     CALL    Find_Report
0B29: 4B       SWAP  A,X                
0B2A: B0 06    JNZ   0x0B31             
0B2C: 4B       SWAP  A,X                
0B2D: A1 05    JZ    USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...
0B2F: 80 02    JMP   0x0B32             
0B31: 4B       SWAP  A,X                
                                        (0408)     NULL_PTR_CHECK USBFS_Not_Supported_Local_Hid
                                        (0409)     
0B32: 81 03    JMP   0x0C36             (0410)     JMP     USBFS_GetTableEntry_Local_Hid
                                        (0411) ELSE
                                        (0412) IF (USB_CB_SRC_h2d_cls_ifc_09 & USB_APP_SUPPLIED)
                                        (0413) export  USBFS_CB_h2d_cls_ifc_09
                                        (0414) USBFS_CB_h2d_cls_ifc_09:
                                        (0415)     LJMP    APP_USBFS_CB_h2d_cls_ifc_09
                                        (0416) ENDIF
                                        (0417) ENDIF
                                        (0418) ;-----------------------------------------------------------------------------
                                        (0419) ;  FUNCTION NAME: USBFS_CB_h2d_cls_ifc_10
                                        (0420) ;
                                        (0421) ;  DESCRIPTION:   Set Idle
                                        (0422) ;
                                        (0423) ;****************************************************************
                                        (0424) ; HID CLASS INTERFACE OUT REQUEST: Set_Idle
                                        (0425) ;****************************************************************
                                        (0426) ;
                                        (0427) ; bmRequestType   : (OUT | CLASS | INTERFACE)      = 21h
                                        (0428) ; bRequest        : SET_IDLE                       = 0Ah    
                                        (0429) ; wValue          : DURATION | REPORT ID           = xxxxh  
                                        (0430) ; wIndex          : INTERFACE                      = --xxh
                                        (0431) ; wLength         : ZERO                           = 0000h  
                                        (0432) ; 
                                        (0433) ; The SET_IDLE request silences a particular input report (or all 
                                        (0434) ; input reports) on a specific interface until a new event occurs 
                                        (0435) ; or the specified amount of time passes. 
                                        (0436) ;
                                        (0437) ;****************************************************************
                                        (0438) ; Note: This function does not support multiple reports per interface.
                                        (0439) ;****************************************************************
                                        (0440) ;-----------------------------------------------------------------------------
                                        (0441) ;
                                        (0442) ;  ARGUMENTS:
                                        (0443) ;
                                        (0444) ;  RETURNS:
                                        (0445) ;
                                        (0446) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0447) ;
                                        (0448) ;  THEORY of OPERATION or PROCEDURE:
                                        (0449) ;
                                        (0450) ;-----------------------------------------------------------------------------
                                        (0451) IF (USB_CB_SRC_h2d_cls_ifc_10 & USB_UM_SUPPLIED)
                                        (0452) export  USBFS_CB_h2d_cls_ifc_10
                                        (0453) USBFS_CB_h2d_cls_ifc_10:
0B34: 5D 5A    MOV   A,REG[0x5A]        (0454)     mov   A, REG[USBFS_EP0DATA+wValueLo]  ; Get the report number
0B36: 39 00    CMP   A,0x0              (0455)     cmp   A, 0                         ; We don't support report by report idle
0B38: B0 FA    JNZ   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0456)     jnz   USBFS_Not_Supported_Local_Hid
                                        (0457) 
0B3A: 5D 5C    MOV   A,REG[0x5C]        (0458)     mov   A, REG[USBFS_EP0DATA+wIndexLo]  ; Get the interface number
0B3C: 39 01    CMP   A,0x1              (0459)     cmp   A, 1h                        ; Range Check
0B3E: D0 F4    JNC   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0460)     jnc   USBFS_Not_Supported_Local_Hid
                                        (0461) 
0B40: 5C       MOV   X,A                (0462)     mov   X, A                         ; Interface Number becomes an index
                                        (0463) 
0B41: 5D 5B    MOV   A,REG[0x5B]        (0464)     mov   A, REG[USBFS_EP0DATA+wValueHi]  ; Get the duration
                                        (0465) 
0B43: 54 3E    MOV   [X+62],A           (0466)     mov   [X+USBFS_IdleReload], A      ; Save the reload immediately
0B45: 39 00    CMP   A,0x0              (0467)     cmp   A, 0                         ; Is this request setting the duration to indefinite?
0B47: A0 06    JZ    0x0B4E             (0468)     jz    .reload                      ; If so, reload the timer 
                                        (0469) 
                                        (0470)     ; Otherwise, we need to determine if we reset the current expiry
                                        (0471)     ; (HID Spec says to send the next report if we are within 4 ms (1 count)
                                        (0472)     ; of sending the next report
0B49: 3D 3F 01 CMP   [X+63],0x1         (0473)     cmp   [X+USBFS_IdleTimer], 1       ; Within 4 ms?
0B4C: A0 03    JZ    0x0B50             (0474)     jz    .done                        ; Jump to let the timer expire "naturally" 
                                        (0475) 
                                        (0476) ; Jump or Flow here to reload the timer
                                        (0477) .reload:
0B4E: 54 3F    MOV   [X+63],A           (0478)     mov   [x+USBFS_IdleTimer], A       ; Reload the timer
                                        (0479)             
                                        (0480) .done:
0B50: 8D 30    JMP   _USBFS_InitNoDataStageControlTransfer|USBFS_NoDataStageControlTransfer(0481)     jmp   USBFS_NoDataStageControlTransfer
                                        (0482) ELSE
                                        (0483) IF (USB_CB_SRC_h2d_cls_ifc_10 & USB_APP_SUPPLIED)
                                        (0484) export  USBFS_CB_h2d_cls_ifc_10
                                        (0485) USBFS_CB_h2d_cls_ifc_10:
                                        (0486)     LJMP    APP_USBFS_CB_h2d_cls_ifc_10
                                        (0487) ENDIF
                                        (0488) ENDIF
                                        (0489) ;-----------------------------------------------------------------------------
                                        (0490) ;  FUNCTION NAME: USBFS_CB_h2d_cls_ifc_11
                                        (0491) ;
                                        (0492) ;  DESCRIPTION:   Set Idle
                                        (0493) ;
                                        (0494) ;****************************************************************
                                        (0495) ; HID CLASS INTERFACE OUT REQUEST: Set_Protocol
                                        (0496) ;****************************************************************
                                        (0497) ;
                                        (0498) ; bmRequestType  : (OUT | CLASS | INTERFACE)      = 21h
                                        (0499) ; bRequest       : SET_PROTOCOL                   = 0Bh    
                                        (0500) ; wValue         : DURATION | REPORT ID           = xxxxh  
                                        (0501) ; wIndex         : PROTOCOL                       = --xxh
                                        (0502) ; wLength        : ZERO                           = 0000h  
                                        (0503) ; 
                                        (0504) ; The SET_PROTOCOL request switches between the boot protocol and 
                                        (0505) ; the report protocol (or vice versa). 
                                        (0506) ;
                                        (0507) ;****************************************************************
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;
                                        (0510) ;  ARGUMENTS:
                                        (0511) ;
                                        (0512) ;  RETURNS:
                                        (0513) ;
                                        (0514) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0515) ;
                                        (0516) ;  THEORY of OPERATION or PROCEDURE:
                                        (0517) ;
                                        (0518) ;-----------------------------------------------------------------------------
                                        (0519) IF (USB_CB_SRC_h2d_cls_ifc_11 & USB_UM_SUPPLIED)
                                        (0520) export  USBFS_CB_h2d_cls_ifc_11
                                        (0521) USBFS_CB_h2d_cls_ifc_11:
0B52: 5D 5C    MOV   A,REG[0x5C]        (0522)     mov   A, REG[USBFS_EP0DATA+wIndexLo]  ; Get the interface number
0B54: 39 01    CMP   A,0x1              (0523)     cmp   A, 1h                        ; Range check
0B56: D0 DC    JNC   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0524)     jnc   USBFS_Not_Supported_Local_Hid
                                        (0525) 
0B58: 5C       MOV   X,A                (0526)     mov   X, A                         ; Save the interface number
                                        (0527) 
0B59: 5D 5A    MOV   A,REG[0x5A]        (0528)     mov   A, REG[USBFS_EP0DATA+wValueLo]  ; Get the protocol
0B5B: 39 02    CMP   A,0x2              (0529)     cmp   A, (1+1)                     ; Must be zero or one
0B5D: D0 D5    JNC   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0530)     jnc   USBFS_Not_Supported_Local_Hid
                                        (0531) 
0B5F: 54 40    MOV   [X+64],A           (0532)     mov   [X + USBFS_Protocol], A      ; Save the new protocol
                                        (0533) 
0B61: 8D 1F    JMP   _USBFS_InitNoDataStageControlTransfer|USBFS_NoDataStageControlTransfer(0534)     jmp   USBFS_NoDataStageControlTransfer
                                        (0535) ELSE
                                        (0536) IF (USB_CB_SRC_h2d_cls_ifc_11 & USB_APP_SUPPLIED)
                                        (0537) export  USBFS_CB_h2d_cls_ifc_11
                                        (0538) USBFS_CB_h2d_cls_ifc_11:
                                        (0539)     LJMP    APP_USBFS_CB_h2d_cls_ifc_11
                                        (0540) ENDIF
                                        (0541) ENDIF
                                        (0542) ;-----------------------------------------------------------------------------
                                        (0543) ;  FUNCTION NAME:   Find_Report
                                        (0544) ;
                                        (0545) ;  DESCRIPTION:     Scan the HID Report Tree and return a pointer to the 
                                        (0546) ;                   HID Report Transfer Descriptor (TD) or NULL
                                        (0547) ;                   This function is called in during the processing of
                                        (0548) ;                   GET_REPORT or SET_REPORT HID Class Requests.
                                        (0549) ;
                                        (0550) ;-----------------------------------------------------------------------------
                                        (0551) ;
                                        (0552) ;  ARGUMENTS:       
                                        (0553) ;
                                        (0554) ;  RETURNS:
                                        (0555) ;
                                        (0556) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0557) ;
                                        (0558) ;  THEORY of OPERATION or PROCEDURE:
                                        (0559) ;
                                        (0560) ;-----------------------------------------------------------------------------
                                        (0561) export USBFS_cls_hid_Find_Report
                                        (0562) USBFS_cls_hid_Find_Report:
                                        (0563) Find_Report:
0B63: 90 76    CALL  USBFS_GetInterfaceLookupTable(0564)     call  USBFS_GetInterfaceLookupTable  ; Point the the interface lookup table
                                        (0565)     ; The first entry of the table point to the report table.
0B65: 55 1E 1F MOV   [0x1E],0x1F        (0566)     mov   [USBFS_t2],USBFS_t1          ; Set the GETWORD destination 
0B68: 9E 5E    CALL  USBFS_GETWORD      (0567)     call  USBFS_GETWORD                ; Get the pointer to the transfer descriptor table
                                        (0568)                                        ; ITempW has the address
0B6A: 5D 5C    MOV   A,REG[0x5C]        (0569)     mov   A, REG[USBFS_EP0DATA+wIndexLo]  ; Get the interface number
0B6C: 53 1E    MOV   [0x1E],A           (0570)     mov   [USBFS_t2], A                ; Use the UM temp var--Selector
0B6E: 51 1F    MOV   A,[0x1F]           (0571)     mov   A, [USBFS_t1]                ; Get the Table Address MSB
0B70: 58 20    MOV   X,[0x20]           (0572)     mov   X, [USBFS_t1+1]              ; Get the Table Address LSB
                                        (0573) 
0B72: 65 1E    ASL   [0x1E]             (0574)     asl   [USBFS_t2] ; Convert the index to offset
                                        (0575) 
0B74: 4B       SWAP  A,X                (0576)     swap  A, X
0B75: 02 1E    ADD   A,[0x1E]           (0577)     add   A, [USBFS_t2]
0B77: 4B       SWAP  A,X                (0578)     swap  A, X
0B78: 09 00    ADC   A,0x0              (0579)     adc   A, 0                         ; A:X now points to the table entry we want
0B7A: 71 40    OR    F,0x40             
0B7C: 08       PUSH  A                  
0B7D: 08       PUSH  A                  
0B7E: 28       ROMX                     
0B7F: 10       PUSH  X                  
0B80: 4F       MOV   X,SP               
0B81: 54 FD    MOV   [X-3],A            
0B83: 20       POP   X                  
0B84: 18       POP   A                  
0B85: 75       INC   X                  
0B86: 09 00    ADC   A,0x0              
0B88: 28       ROMX                     
0B89: 5C       MOV   X,A                
0B8A: 18       POP   A                  
0B8B: 70 3F    AND   F,0x3F             
0B8D: 71 00    OR    F,0x0              
                                        (0580) 
                                        (0581) ; Get the pointer to the Report Type Table
                                        (0582)     GET_WORD
                                        (0583) 
                                        (0584) ; Dereference to the requested Report Type
0B8F: 08       PUSH  A                  (0585)     push  A                            ; Don't loose the pointer MSB
0B90: 5D 5B    MOV   A,REG[0x5B]        (0586)     mov   A, REG[USBFS_EP0DATA+wValueHi]  ; Get the Report Type
0B92: 78       DEC   A                  (0587)     dec   A                            ; Make it 0 based
0B93: 53 1E    MOV   [0x1E],A           (0588)     mov   [USBFS_t2], A                ; Use the UM temp var--Selector
0B95: 18       POP   A                  (0589)     pop   A                            ; Get the MSB back
0B96: 08       PUSH  A                  (0590)     push  A                            ; Don't loose the pointer MSB
0B97: 28       ROMX                     (0591)     romx                               ; Get the table size
0B98: 3A 1E    CMP   A,[0x1E]           (0592)     cmp   A, [USBFS_t2]                ; Range check
0B9A: C0 3B    JC    0x0BD6             (0593)     jc    .not_supported_pop_1
                                        (0594)         
0B9C: 18       POP   A                  (0595)     pop   A                            ; Get the MSB back
0B9D: 75       INC   X                  (0596)     inc   X                            ; Point to the next  entry
0B9E: 09 00    ADC   A,0x0              (0597)     adc   A, 0                         ;
0BA0: 65 1E    ASL   [0x1E]             
0BA2: 65 1E    ASL   [0x1E]             
                                        (0598) 
                                        (0599)     LT_INDEX_TO_OFFSET USBFS_t2        ; Convert the index to offset
                                        (0600) 
0BA4: 4B       SWAP  A,X                (0601)     swap  A, X
0BA5: 02 1E    ADD   A,[0x1E]           (0602)     add   A, [USBFS_t2]
0BA7: 4B       SWAP  A,X                (0603)     swap  A, X
0BA8: 09 00    ADC   A,0x0              (0604)     adc   A, 0                         ; A:X now points to the table entry we want
0BAA: 71 40    OR    F,0x40             
0BAC: 08       PUSH  A                  
0BAD: 08       PUSH  A                  
0BAE: 28       ROMX                     
0BAF: 10       PUSH  X                  
0BB0: 4F       MOV   X,SP               
0BB1: 54 FD    MOV   [X-3],A            
0BB3: 20       POP   X                  
0BB4: 18       POP   A                  
0BB5: 75       INC   X                  
0BB6: 09 00    ADC   A,0x0              
0BB8: 28       ROMX                     
0BB9: 5C       MOV   X,A                
0BBA: 18       POP   A                  
0BBB: 70 3F    AND   F,0x3F             
0BBD: 71 00    OR    F,0x0              
0BBF: 4B       SWAP  A,X                
0BC0: B0 06    JNZ   0x0BC7             
0BC2: 4B       SWAP  A,X                
0BC3: A0 13    JZ    0x0BD7             
0BC5: 80 02    JMP   0x0BC8             
0BC7: 4B       SWAP  A,X                
                                        (0605) ; Get the pointer to the requested Report Table
                                        (0606)     GET_WORD                            ; A:X points to the 
                                        (0607) 
                                        (0608)     NULL_PTR_CHECK .not_supported      ; Null Table entries indicated not supported
                                        (0609) ; Dereference to the requested TRANSFER DESCRIPTOR
0BC8: 08       PUSH  A                  (0610)     push  A                            ; Don't loose the pointer MSB
0BC9: 5D 5A    MOV   A,REG[0x5A]        (0611)     mov   A, REG[USBFS_EP0DATA+wValueLo]  ; Get the Report ID
0BCB: 53 1E    MOV   [0x1E],A           (0612)     mov   [USBFS_t2], A                ; Use the UM temp var--Selector
0BCD: 18       POP   A                  (0613)     pop   A                            ; Get the MSB back
0BCE: 08       PUSH  A                  (0614)     push  A                            ; Don't loose the pointer MSB
0BCF: 28       ROMX                     (0615)     romx                               ; Get the table size
0BD0: 3A 1E    CMP   A,[0x1E]           (0616)     cmp   A, [USBFS_t2]                ; Range check
0BD2: C0 03    JC    0x0BD6             (0617)     jc    .not_supported_pop_1
                                        (0618)         
0BD4: 18       POP   A                  (0619)     pop   A                            ; Get the MSB back
                                        (0620) 
0BD5: 7F       RET                      (0621)     ret                                ; Finished A:X point to the TD
                                        (0622) 
                                        (0623) .not_supported_pop_1:
0BD6: 18       POP   A                  (0624)     pop   A                            ; Restore the stack
                                        (0625) .not_supported:
0BD7: 50 00    MOV   A,0x0              (0626)     mov   A, 0                         ; Return a null pointer
0BD9: 5C       MOV   X,A                (0627)     mov   X, A                         ; 
0BDA: 7F       RET                      (0628)     ret
                                        (0629) 
                                        (0630) ;-----------------------------------------------------------------------------
                                        (0631) ;  FUNCTION NAME: USBFS_GetInterfaceLookupTable
                                        (0632) ;
                                        (0633) ;  DESCRIPTION:   Point to the interface lookup table
                                        (0634) ;
                                        (0635) ;-----------------------------------------------------------------------------
                                        (0636) ;
                                        (0637) ;  ARGUMENTS:
                                        (0638) ;
                                        (0639) ;  RETURNS:
                                        (0640) ;
                                        (0641) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0642) ;
                                        (0643) ;  THEORY of OPERATION or PROCEDURE:
                                        (0644) ;
                                        (0645) ;-----------------------------------------------------------------------------
                                        (0646) export  USBFS_GetInterfaceLookupTable
                                        (0647) USBFS_GetInterfaceLookupTable:
0BDB: 9E 0D    CALL  USBFS_GET_CONFIG_TABLE_ENTRY(0648)     call  USBFS_GET_CONFIG_TABLE_ENTRY ; Get the CONFIG_LOOKUP entry
0BDD: 4B       SWAP  A,X                (0649)     swap  A, X                         ; Second entry points to the HID_LOOKUP table
0BDE: 01 02    ADD   A,0x2              (0650)     add   A, 2                         ; So add two
0BE0: 4B       SWAP  A,X                (0651)     swap  A, X                         ; 
0BE1: 09 00    ADC   A,0x0              (0652)     adc   A, 0                         ; Don't forget the carry
0BE3: 55 1E 1F MOV   [0x1E],0x1F        (0653)     mov   [USBFS_t2],USBFS_t1          ; Set the GETWORD destination 
0BE6: 9D E0    CALL  USBFS_GETWORD      (0654)     call  USBFS_GETWORD                ; Get the pointer to the HID_LOOKUP table
                                        (0655)                                        ; ITempW has the address
0BE8: 51 1F    MOV   A,[0x1F]           (0656)     mov   A, [USBFS_t1]                ; Get the table address MSB
0BEA: 58 20    MOV   X,[0x20]           (0657)     mov   X, [USBFS_t1+1]              ; Get the table address LSB
0BEC: 7F       RET                      (0658)     ret
                                        (0659) 
                                        (0660) 
                                        (0661) 
                                        (0662) 
                                        (0663) ;-----------------------------------------------------------------------------
                                        (0664) ;-----------------------------------------------------------------------------
                                        (0665) ;  USB 2nd Tier Dispactch Jump Tables for HID Class Requests (based on bRequest)
                                        (0666) ;-----------------------------------------------------------------------------
                                        (0667) ;  FUNCTION NAME: ;  USB 2nd Tier Dispactch Jump Table
                                        (0668) ;
                                        (0669) ;  DESCRIPTION:   The following tables dispatch to the Standard request handler
                                        (0670) ;                 functions.  (Assumes bmRequestType(5:6) is 0, Standard)
                                        (0671) ;
                                        (0672) ;-----------------------------------------------------------------------------
                                        (0673) ;
                                        (0674) ;  ARGUMENTS:
                                        (0675) ;
                                        (0676) ;  RETURNS:
                                        (0677) ;
                                        (0678) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0679) ;
                                        (0680) ;  THEORY of OPERATION or PROCEDURE:
                                        (0681) ;
                                        (0682) ;-----------------------------------------------------------------------------
                                        (0683) ;-----------------------------------------------------------------------------
                                        (0684) USBFS_DT_h2d_cls_ifc:
                                        (0685) ;-----------------------------------------------------------------------------
                                        (0686) 
0BED: 80 45    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0687)     jmp     USBFS_CB_h2d_cls_ifc_00
0BEF: 80 43    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0688)     jmp     USBFS_CB_h2d_cls_ifc_01
0BF1: 80 41    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0689)     jmp     USBFS_CB_h2d_cls_ifc_02
0BF3: 80 3F    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0690)     jmp     USBFS_CB_h2d_cls_ifc_03
0BF5: 80 3D    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0691)     jmp     USBFS_CB_h2d_cls_ifc_04
0BF7: 80 3B    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0692)     jmp     USBFS_CB_h2d_cls_ifc_05
0BF9: 80 39    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0693)     jmp     USBFS_CB_h2d_cls_ifc_06
0BFB: 80 37    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0694)     jmp     USBFS_CB_h2d_cls_ifc_07
0BFD: 80 35    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0695)     jmp     USBFS_CB_h2d_cls_ifc_08
0BFF: 8F 27    JMP   USBFS_CB_h2d_cls_ifc_09(0696)     jmp     USBFS_CB_h2d_cls_ifc_09
0C01: 8F 32    JMP   USBFS_CB_h2d_cls_ifc_10(0697)     jmp     USBFS_CB_h2d_cls_ifc_10
0C03: 8F 4E    JMP   USBFS_CB_h2d_cls_ifc_11(0698)     jmp     USBFS_CB_h2d_cls_ifc_11
0C05: 80 2D    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0699)     jmp     USBFS_CB_h2d_cls_ifc_12
                                        (0700) 
                                        (0701) USBFS_DT_h2d_cls_ifc_End:
                                        (0702) USBFS_DT_h2d_cls_ifc_Size: equ (USBFS_DT_h2d_cls_ifc_End-USBFS_DT_h2d_cls_ifc) / 2
                                        (0703) USBFS_DT_h2d_cls_ifc_Dispatch::
0C07: 3C 01 00 CMP   [0x1],0x0          (0704)     CMP     [USBFS_Configuration], 0   ; Is the device configured?
0C0A: B0 03    JNZ   0x0C0E             (0705)     JNZ     .configured                ; Jump on configured
0C0C: 80 26    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0706)     JMP     USBFS_Not_Supported_Local_Hid  ; Stall the request if not configured
                                        (0707) ; Jump here if the device is configured
                                        (0708) .configured:
0C0E: 5D 59    MOV   A,REG[0x59]        (0709)     MOV     A, REG[USBFS_EP0DATA + bRequest]     ; Get the request number
0C10: 39 0D    CMP   A,0xD              
0C12: D0 04    JNC   0x0C17             
0C14: 64       ASL   A                  
0C15: EF D7    JACC  0x0BED             
0C17: 80 1B    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...
                                        (0710)     DISPATCHER USBFS_DT_h2d_cls_ifc, USBFS_DT_h2d_cls_ifc_Size, USBFS_Not_Supported_Local_Hid 
                                        (0711) 
                                        (0712) ;-----------------------------------------------------------------------------
                                        (0713) USBFS_DT_d2h_cls_ifc:
                                        (0714) ;-----------------------------------------------------------------------------
                                        (0715) 
0C19: 80 19    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0716)     jmp     USBFS_CB_d2h_cls_ifc_00
0C1B: 8E B5    JMP   USBFS_CB_d2h_cls_ifc_01(0717)     jmp     USBFS_CB_d2h_cls_ifc_01
0C1D: 8E D1    JMP   USBFS_CB_d2h_cls_ifc_02(0718)     jmp     USBFS_CB_d2h_cls_ifc_02
0C1F: 8E F6    JMP   USBFS_CB_d2h_cls_ifc_03(0719)     jmp     USBFS_CB_d2h_cls_ifc_03
                                        (0720) 
                                        (0721) USBFS_DT_d2h_cls_ifc_End:
                                        (0722) USBFS_DT_d2h_cls_ifc_Size: equ (USBFS_DT_d2h_cls_ifc_End-USBFS_DT_d2h_cls_ifc) / 2
                                        (0723) USBFS_DT_d2h_cls_ifc_Dispatch::
0C21: 3C 01 00 CMP   [0x1],0x0          (0724)     CMP     [USBFS_Configuration], 0   ; Is the device configured?
0C24: B0 03    JNZ   0x0C28             (0725)     JNZ     .configured                ; Jump on configured
0C26: 80 0C    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...(0726)     JMP     USBFS_Not_Supported_Local_Hid  ; Stall the request if not configured
                                        (0727) ; Jump here if the device is configured
                                        (0728) .configured:
0C28: 5D 59    MOV   A,REG[0x59]        (0729)     MOV     A, REG[USBFS_EP0DATA + bRequest]     ; Get the request number
0C2A: 39 04    CMP   A,0x4              
0C2C: D0 04    JNC   0x0C31             
0C2E: 64       ASL   A                  
0C2F: EF E9    JACC  0x0C19             
0C31: 80 01    JMP   USBFS_CB_h2d_cls_ifc_03|USBFS_CB_d2h_cls_ifc_00|USBFS_CB_h2d_cls_ifc_02|USBFS_CB_h2d_cls_ifc_12|USBFS_CB_h2d_cls_ifc_06|USBFS_CB_h2d_cls_ifc_07|USBFS_CB_h2d_cls_ifc_05|USBFS_CB_h2d_cls_ifc_01|USBFS_CB_h2d_cls_ifc_04|USBFS_CB_h2d_cls_ifc_00|...
                                        (0730)     DISPATCHER USBFS_DT_d2h_cls_ifc, USBFS_DT_d2h_cls_ifc_Size, USBFS_Not_Supported_Local_Hid 
                                        (0731) 
                                        (0732) IF (USB_CB_SRC_d2h_cls_ifc_00 & USB_NOT_SUPPORTED)
                                        (0733) export  USBFS_CB_d2h_cls_ifc_00
                                        (0734) USBFS_CB_d2h_cls_ifc_00:
                                        (0735) ENDIF
                                        (0736) IF (USB_CB_SRC_d2h_cls_ifc_01 & USB_NOT_SUPPORTED)
                                        (0737) export  USBFS_CB_d2h_cls_ifc_01
                                        (0738) USBFS_CB_d2h_cls_ifc_01:
                                        (0739) ENDIF
                                        (0740) IF (USB_CB_SRC_d2h_cls_ifc_02 & USB_NOT_SUPPORTED)
                                        (0741) export  USBFS_CB_d2h_cls_ifc_02
                                        (0742) USBFS_CB_d2h_cls_ifc_02:
                                        (0743) ENDIF
                                        (0744) IF (USB_CB_SRC_d2h_cls_ifc_03 & USB_NOT_SUPPORTED)
                                        (0745) export  USBFS_CB_d2h_cls_ifc_03
                                        (0746) USBFS_CB_d2h_cls_ifc_03:
                                        (0747) ENDIF
                                        (0748) IF (USB_CB_SRC_h2d_cls_ifc_00 & USB_NOT_SUPPORTED)
                                        (0749) export  USBFS_CB_h2d_cls_ifc_00
                                        (0750) USBFS_CB_h2d_cls_ifc_00:
                                        (0751) ENDIF
                                        (0752) IF (USB_CB_SRC_h2d_cls_ifc_01 & USB_NOT_SUPPORTED)
                                        (0753) export  USBFS_CB_h2d_cls_ifc_01
                                        (0754) USBFS_CB_h2d_cls_ifc_01:
                                        (0755) ENDIF
                                        (0756) IF (USB_CB_SRC_h2d_cls_ifc_02 & USB_NOT_SUPPORTED)
                                        (0757) export  USBFS_CB_h2d_cls_ifc_02
                                        (0758) USBFS_CB_h2d_cls_ifc_02:
                                        (0759) ENDIF
                                        (0760) IF (USB_CB_SRC_h2d_cls_ifc_03 & USB_NOT_SUPPORTED)
                                        (0761) export  USBFS_CB_h2d_cls_ifc_03
                                        (0762) USBFS_CB_h2d_cls_ifc_03:
                                        (0763) ENDIF
                                        (0764) IF (USB_CB_SRC_h2d_cls_ifc_04 & USB_NOT_SUPPORTED)
                                        (0765) export  USBFS_CB_h2d_cls_ifc_04
                                        (0766) USBFS_CB_h2d_cls_ifc_04:
                                        (0767) ENDIF
                                        (0768) IF (USB_CB_SRC_h2d_cls_ifc_05 & USB_NOT_SUPPORTED)
                                        (0769) export  USBFS_CB_h2d_cls_ifc_05
                                        (0770) USBFS_CB_h2d_cls_ifc_05:
                                        (0771) ENDIF
                                        (0772) IF (USB_CB_SRC_h2d_cls_ifc_06 & USB_NOT_SUPPORTED)
                                        (0773) export  USBFS_CB_h2d_cls_ifc_06
                                        (0774) USBFS_CB_h2d_cls_ifc_06:
                                        (0775) ENDIF
                                        (0776) IF (USB_CB_SRC_h2d_cls_ifc_07 & USB_NOT_SUPPORTED)
                                        (0777) export  USBFS_CB_h2d_cls_ifc_07
                                        (0778) USBFS_CB_h2d_cls_ifc_07:
                                        (0779) ENDIF
                                        (0780) IF (USB_CB_SRC_h2d_cls_ifc_08 & USB_NOT_SUPPORTED)
                                        (0781) export  USBFS_CB_h2d_cls_ifc_08
                                        (0782) USBFS_CB_h2d_cls_ifc_08:
                                        (0783) ENDIF
                                        (0784) IF (USB_CB_SRC_h2d_cls_ifc_09 & USB_NOT_SUPPORTED)
                                        (0785) export  USBFS_CB_h2d_cls_ifc_09
                                        (0786) USBFS_CB_h2d_cls_ifc_09:
                                        (0787) ENDIF
                                        (0788) IF (USB_CB_SRC_h2d_cls_ifc_10 & USB_NOT_SUPPORTED)
                                        (0789) export  USBFS_CB_h2d_cls_ifc_10
                                        (0790) USBFS_CB_h2d_cls_ifc_10:
                                        (0791) ENDIF
                                        (0792) IF (USB_CB_SRC_h2d_cls_ifc_11 & USB_NOT_SUPPORTED)
                                        (0793) export  USBFS_CB_h2d_cls_ifc_11
                                        (0794) USBFS_CB_h2d_cls_ifc_11:
                                        (0795) ENDIF
                                        (0796) IF (USB_CB_SRC_h2d_cls_ifc_12 & USB_NOT_SUPPORTED)
                                        (0797) export  USBFS_CB_h2d_cls_ifc_12
                                        (0798) USBFS_CB_h2d_cls_ifc_12:
                                        (0799) ENDIF
                                        (0800) 
                                        (0801) USBFS_Not_Supported_Local_Hid:
0C33: 7D 04 AA LJMP  USBFS_CB_h2d_std_dev_02|USBFS_CB_h2d_std_ifc_06|USBFS_CB_d2h_std_dev_02|USBFS_CB_h2d_std_ifc_05|USBFS_CB_d2h_std_ifc_05|USBFS_Not_Supported|USBFS_CB_d2h_std_ifc_07|USBFS_CB_h2d_std_ifc_04|USBFS_CB_d2h_std_dev_03|USBFS_CB_d2h_std_dev_01|...(0802)     LJMP     USBFS_Not_Supported
                                        (0803) 
                                        (0804) USBFS_GetTableEntry_Local_Hid:
0C36: 7D 09 94 LJMP  USBFS_GetTableEntry(0805)     LJMP     USBFS_GetTableEntry
                                        (0806) 
                                        (0807) ;-----------------------------------------------
                                        (0808) ; Add custom application code for routines 
                                        (0809) ; redefined by USB_APP_SUPPLIED in USB_HID.INC
                                        (0810) ;-----------------------------------------------
                                        (0811) 
                                        (0812)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0813)    ;---------------------------------------------------
                                        (0814)    ; Insert your custom code below this banner
                                        (0815)    ;---------------------------------------------------
                                        (0816) 
                                        (0817)    ;---------------------------------------------------
                                        (0818)    ; Insert your custom code above this banner
                                        (0819)    ;---------------------------------------------------
                                        (0820)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0821) 
                                        (0822) ; End of File USBFS_cls_hid.asm
FILE: lib\usbfs.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0C39: 70 BF    AND   F,0xBF             (0003) ;;*****************************************************************************
0C3B: 62 D0 00 MOV   REG[0xD0],0x0      
0C3E: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0004) ;;  FILENAME: USBFS.asm
                                        (0005) ;;   Version: 1.90, Updated on 2012/3/2 at 9:15:35
                                        (0006) ;;  Generated by PSoC Designer 5.2.2551
                                        (0007) ;;
                                        (0008) ;;  DESCRIPTION: USB Device User Module software implementation file
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) include "USBFS_macros.inc"
                                        (0026) include "USBFS.inc"
                                        (0027) IF 0x2 & 0x10000000
                                        (0028) PSOC_ERROR Please run the USB Setup Wizard.  Device Editor, Right Click the USB User Module
                                        (0029) ; This message will only appear if the USB Setup Wizard has not be run and the descriptors
                                        (0030) ; and associated data structures have been created.
                                        (0031) ; After running the USB Setup Wizard, you must also select the Config/Generate Application
                                        (0032) ; menu item from PSoC Designer in order to generate USB User Module data structures and
                                        (0033) ; descriptors.
                                        (0034) ENDIF
                                        (0035) ;-----------------------------------------------
                                        (0036) ;  Global Symbols
                                        (0037) ;-----------------------------------------------
                                        (0038) export  USBFS_Start
                                        (0039) export _USBFS_Start
                                        (0040) export  USBFS_Stop
                                        (0041) export _USBFS_Stop
                                        (0042) export  USBFS_bCheckActivity
                                        (0043) export _USBFS_bCheckActivity
                                        (0044) export  USBFS_bGetConfiguration
                                        (0045) export _USBFS_bGetConfiguration
                                        (0046) export  USBFS_bGetEPState
                                        (0047) export _USBFS_bGetEPState
                                        (0048) export  USBFS_wGetEPCount
                                        (0049) export _USBFS_wGetEPCount
                                        (0050) export  USBFS_LoadInEP
                                        (0051) export _USBFS_LoadInEP
                                        (0052) export  USBFS_LoadInISOCEP
                                        (0053) export _USBFS_LoadInISOCEP
                                        (0054) export  USBFS_EnableOutEP
                                        (0055) export _USBFS_EnableOutEP
                                        (0056) export  USBFS_EnableOutISOCEP
                                        (0057) export _USBFS_EnableOutISOCEP
                                        (0058) export  USBFS_DisableOutEP
                                        (0059) export _USBFS_DisableOutEP
                                        (0060) export  USBFS_bReadOutEP
                                        (0061) export _USBFS_bReadOutEP
                                        (0062) export  USBFS_Force
                                        (0063) export _USBFS_Force
                                        (0064) export  USBFS_bGetEPAckState
                                        (0065) export _USBFS_bGetEPAckState
                                        (0066) ;export USBFS_Suspend
                                        (0067) ;export _USBFS_Suspend
                                        (0068) ;export USBFS_Resume
                                        (0069) ;export _USBFS_Resume
                                        (0070) export  USBFS_bRWUEnabled
                                        (0071) export _USBFS_bRWUEnabled
                                        (0072) export  USBFS_SetPowerStatus
                                        (0073) export _USBFS_SetPowerStatus
                                        (0074) 
                                        (0075) AREA InterruptRAM (RAM, REL, CON)
                                        (0076) ;-----------------------------------------------
                                        (0077) ;  Constant Definitions
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) ;-----------------------------------------------
                                        (0081) ;  Variable Allocation
                                        (0082) ;-----------------------------------------------
                                        (0083) export USBFS_APITemp
                                        (0084)  USBFS_APITemp:                         BLK   2 ; Two bytes of temporary
                                        (0085)                                                 ; storage shared by the API
                                        (0086)                                                 ; functions
                                        (0087) export USBFS_APIEPNumber, _USBFS_APIEPNumber
                                        (0088) _USBFS_APIEPNumber:
                                        (0089)  USBFS_APIEPNumber:                    BLK   1 ; API storage for speed
                                        (0090) export USBFS_APICount, _USBFS_APICount
                                        (0091) _USBFS_APICount:
                                        (0092)  USBFS_APICount:                       BLK   1 ; API storage for speed
                                        (0093) 
                                        (0094) export USBFS_bActivity, _USBFS_bActivity
                                        (0095) _USBFS_bActivity:
                                        (0096)  USBFS_bActivity:                      BLK   1 ; Activity flag (Shared between the ISR and API)
                                        (0097) ;-----------------------------------------------
                                        (0098) ;  Constant Data Allocation
                                        (0099) ;-----------------------------------------------
                                        (0100) IF	(TOOLCHAIN & HITECH)
                                        (0101)   AREA lit (ROM,REL,CON)
                                        (0102) ELSE
                                        (0103)   AREA lit (ROM,REL,CON,LIT)
                                        (0104) ENDIF
                                        (0105) export USBFS_USB_EP_BIT_LOOKUP
                                        (0106) .LITERAL
                                        (0107) USBFS_USB_EP_BIT_LOOKUP:  ;
                                        (0108)     DB     01H                       ; EP0
                                        (0109)     DB     02H                       ; EP1
                                        (0110)     DB     04H                       ; EP2
                                        (0111)     DB     08H                       ; EP3
                                        (0112)     DB     010H                      ; EP4
                                        (0113) .ENDLITERAL
                                        (0114) 
                                        (0115) AREA UserModules (ROM, REL)
                                        (0116) 
                                        (0117) .SECTION
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: USBFS_Start
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:    Starts the USB User Module
                                        (0122) ;                    Sets the device selection
                                        (0123) ;                    Set the configuration to unconfigured
                                        (0124) ;                    Enables the SIE for Address 0
                                        (0125) ;                    Enables the USB pullup (D- for low speed, D+ for full speed)
                                        (0126) ;
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;
                                        (0129) ;  ARGUMENTS:    A is the desired device
                                        (0130) ;                X is the operation voltage
                                        (0131) ;
                                        (0132) ;  RETURNS:              Nothing
                                        (0133) ;
                                        (0134) ;  SIDE EFFECTS:
                                        (0135) ;    The A and X registers may be modified by this or future implementations
                                        (0136) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0137) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0138) ;    responsibility to perserve their values across calls to fastcall16
                                        (0139) ;    functions.
                                        (0140) ;
                                        (0141)  USBFS_Start:
                                        (0142) _USBFS_Start:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0144)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0145)     RAM_SETPAGE_CUR >USBFS_bCurrentDevice   ; Set the CUR_PP to the right page
                                        (0146)     RAM_SETPAGE_IDX >USBFS_bCurrentDevice   ; Set the IDX_PP to the right page
0C41: 10       PUSH  X                  (0147)     push    X
0C42: 53 00    MOV   [0x0],A            (0148)     mov     [USBFS_bCurrentDevice], A  ; The app selects the desired device
                                        (0149) 
0C44: 55 0A 00 MOV   [0xA],0x0          (0150)     mov     [USBFS_TransferType], USB_TRANS_STATE_IDLE   ; Transaction Idle State
0C47: 55 01 00 MOV   [0x1],0x0          (0151)     mov     [USBFS_Configuration], 0   ; Unconfigured
0C4A: 55 02 00 MOV   [0x2],0x0          (0152)     mov     [USBFS_DeviceStatus], 0    ; Clears device status
                                        (0153) 
0C4D: 55 1C 00 MOV   [0x1C],0x0         (0154)     mov     [USBFS_EPDataToggle], 0    ; Clear all EP data toggles
                                        (0155) 
0C50: 62 6C 00 MOV   REG[0x6C],0x0      (0156)     mov     reg[TMP_DR0], 0            ; EP1 start address in PMA space
0C53: 62 6D 40 MOV   REG[0x6D],0x40     (0157)     mov     reg[TMP_DR1], 64           ; EP2 start address in PMA space
0C56: 62 6E 80 MOV   REG[0x6E],0x80     (0158)     mov     reg[TMP_DR2], 128          ; EP3 start address in PMA space
0C59: 62 6F C0 MOV   REG[0x6F],0xC0     (0159)     mov     reg[TMP_DR3], 192          ; EP4 start address in PMA space
                                        (0160) 
                                        (0161) ;    mov     X, USB_MAX_EP_NUMBER      ; Set up loop to clear all of the endpoint data items
                                        (0162) ; Flow or jump here to clear the data for the next endpoint
                                        (0163) ;.loop:
                                        (0164) ;    mov     [X + USBFS_EPDataToggle], 0    ; Or in the toggle
                                        (0165) ;    dec     X                         ; Are we done?
                                        (0166) ;    jnz     .loop                     ; Jump to do another endpoint
                                        (0167) 
                                        (0168) IF (USBFS_CLASS & USB_CLASS_HID)
                                        (0169)     ; Initialize USBFS_Protocol variable to comply with HID 7.2.6 Set_Protocol Request: 
                                        (0170)     ; "When initialized, all devices default to report protocol." 
0C5C: 57 00    MOV   X,0x0              (0171)     mov     X, 1-1                     ;number of interfaces -1 
                                        (0172) .loop:
0C5E: 56 40 01 MOV   [X+64],0x1         (0173)     mov     [X + USBFS_Protocol], 1    ; Protocol = Report
0C61: 79       DEC   X                  (0174)     dec     X                                ;Are we done?
0C62: DF FB    JNC   0x0C5E             (0175)     jnc     .loop                            ;Jump to do another interface
                                        (0176) ENDIF
                                        (0177) 
                                        (0178) ; Flow here to enable the SIE
                                        (0179) 
0C64: 62 4A 80 MOV   REG[0x4A],0x80     (0180)     mov     reg[USBFS_ADDR], USB_ADDR_ENABLE   ; Enable Address 0
0C67: 62 4B 00 MOV   REG[0x4B],0x0      (0181)     mov     reg[USBFS_USBIO_CR0], USB_AUTO_DPDM
                                        (0182) 
                                        (0183) ; Set the Operating Voltage at which the chip will run
0C6A: 18       POP   A                  (0184)     pop     A
0C6B: 71 10    OR    F,0x10             
                                        (0185)     M8C_SetBank1
0C6D: 60 C1    MOV   REG[0xC1],A        (0186)     mov     reg[USBFS_USB_CR1], A
0C6F: 70 EF    AND   F,0xEF             
                                        (0187)     M8C_SetBank0
                                        (0188) ;   TODO
0C71: 62 56 03 MOV   REG[0x56],0x3      (0189)     mov     reg[USBFS_EP0MODE], USB_MODE_STALL_IN_OUT   ; ACK Setup/Stall IN/OUT
0C74: 43 DF 05 OR    REG[0xDF],0x5      
                                        (0190)     M8C_EnableIntMask USBFS_INT_REG, (USBFS_INT_RESET_MASK | USBFS_INT_EP0_MASK)
                                        (0191) 
                                        (0192) ;   Enable the pullup so we can start to rock and roll
0C77: 62 4C 04 MOV   REG[0x4C],0x4      (0193)     mov     reg[USBFS_USBIO_CR1], USB_PULLUP_ENABLE   ; Pullup D+
0C7A: 70 3F    AND   F,0x3F             
0C7C: 71 C0    OR    F,0xC0             
                                        (0194) 
                                        (0195)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0196)     RAM_EPILOGUE RAM_USE_CLASS_4
0C7E: 7F       RET                      (0197)     ret
0C7F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0198) .ENDSECTION
                                        (0199) 
                                        (0200) .SECTION
                                        (0201) ;-----------------------------------------------------------------------------
                                        (0202) ;  FUNCTION NAME: USBFS_Stop
                                        (0203) ;
                                        (0204) ;  DESCRIPTION:
                                        (0205) ;
                                        (0206) ;-----------------------------------------------------------------------------
                                        (0207) ;
                                        (0208) ;  ARGUMENTS: None
                                        (0209) ;
                                        (0210) ;  RETURNS:   Nothing
                                        (0211) ;
                                        (0212) ;  SIDE EFFECTS:
                                        (0213) ;    The A and X registers may be modified by this or future implementations
                                        (0214) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0215) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0216) ;    responsibility to perserve their values across calls to fastcall16
                                        (0217) ;    functions.
                                        (0218) ;
                                        (0219)  USBFS_Stop:
                                        (0220) _USBFS_Stop:
                                        (0221)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0222)     RAM_SETPAGE_CUR >USBFS_bCurrentDevice   ; Set the CUR_PP to the right page
                                        (0223) 
0C82: 55 00 00 MOV   [0x0],0x0          (0224)     mov     [USBFS_bCurrentDevice], 0  ; The app selects the desired device
                                        (0225) 
0C85: 55 0A 00 MOV   [0xA],0x0          (0226)     mov     [USBFS_TransferType], USB_TRANS_STATE_IDLE   ; Transaction Idle State
0C88: 55 01 00 MOV   [0x1],0x0          (0227)     mov     [USBFS_Configuration], 0   ; Unconfigured
0C8B: 55 02 00 MOV   [0x2],0x0          (0228)     mov     [USBFS_DeviceStatus], 0    ; Clears device status
0C8E: 62 4A 00 MOV   REG[0x4A],0x0      (0229)     mov     reg[USBFS_ADDR], 0         ; Clear the addfress and Address 0
                                        (0230) 
0C91: 41 4C FB AND   REG[0x4C],0xFB     (0231)     and     reg[USBFS_USBIO_CR1], ~USB_PULLUP_ENABLE   ; Release D-
0C94: 62 DF 00 MOV   REG[0xDF],0x0      (0232)     mov     reg[USBFS_INT_REG], 0x00 ; Enable the interrupt
                                        (0233) 
                                        (0234)     RAM_EPILOGUE RAM_USE_CLASS_4
0C97: 7F       RET                      (0235)     ret
0C98: 71 10    OR    F,0x10             
                                        (0236) .ENDSECTION
                                        (0237) 
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: USBFS_bCheckActivity
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;
                                        (0244) ;-----------------------------------------------------------------------------
                                        (0245) ;
                                        (0246) ;  ARGUMENTS: Nothing
                                        (0247) ;
                                        (0248) ;  RETURNS:   A is a flag that indicates bus activity
                                        (0249) ;
                                        (0250) ;  SIDE EFFECTS: ;    The A and X registers may be modified by this or future implementations
                                        (0251) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0252) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0253) ;    responsibility to perserve their values across calls to fastcall16
                                        (0254) ;    functions.
                                        (0255) ;
                                        (0256)  USBFS_bCheckActivity:
                                        (0257) _USBFS_bCheckActivity:
                                        (0258)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0259)     M8C_SetBank1
0C9A: 5D C1    MOV   A,REG[0xC1]        (0260)     mov    A, reg[USBFS_USB_CR1]       ; USB Activity bit indicates activity
0C9C: 21 04    AND   A,0x4              (0261)     and    A, USB_BUS_ACTIVITY         ; Activity?
0C9E: A0 05    JZ    0x0CA4             (0262)     jz     .no_activity                ; Jump on no activity?
                                        (0263) ; Flow here on bus activity
0CA0: 50 01    MOV   A,0x1              (0264)     mov    A, 1                        ; Return true
0CA2: 80 03    JMP   0x0CA6             (0265)     jmp    .done
                                        (0266) ; Jump here on no activity
                                        (0267) .no_activity:
0CA4: 50 00    MOV   A,0x0              (0268)     mov    A, 0                        ; Return false
                                        (0269) ; Jump or flow here to clear the activity bit, then return
                                        (0270) .done:
0CA6: 41 C1 FB AND   REG[0xC1],0xFB     (0271)     and    reg[USBFS_USB_CR1], ~USB_BUS_ACTIVITY    ; Clear the activity flag
0CA9: 70 EF    AND   F,0xEF             
                                        (0272)     M8C_SetBank0
                                        (0273)     RAM_EPILOGUE RAM_USE_CLASS_1
0CAB: 7F       RET                      (0274)     ret
0CAC: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: USBFS_bGetConfiguration
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:   Returns the current configuration number
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:    None
                                        (0286) ;
                                        (0287) ;  RETURNS:      A contains the current configuration number
                                        (0288) ;
                                        (0289) ;  SIDE EFFECTS:
                                        (0290) ;    The A and X registers may be modified by this or future implementations
                                        (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0293) ;    responsibility to perserve their values across calls to fastcall16
                                        (0294) ;    functions.
                                        (0295) ;
                                        (0296)  USBFS_bGetConfiguration:
                                        (0297) _USBFS_bGetConfiguration:
                                        (0298)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0299)     RAM_SETPAGE_CUR >USBFS_Configuration
0CAF: 51 01    MOV   A,[0x1]            (0300)     mov     A, [USBFS_Configuration]
                                        (0301)     RAM_EPILOGUE RAM_USE_CLASS_4
0CB1: 7F       RET                      (0302)     ret
0CB2: 70 BF    AND   F,0xBF             
0CB4: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0303) .ENDSECTION
                                        (0304) 
                                        (0305) .SECTION
                                        (0306) ;-----------------------------------------------------------------------------
                                        (0307) ;  FUNCTION NAME: USBFS_bGetEPState
                                        (0308) ;
                                        (0309) ;  DESCRIPTION:
                                        (0310) ;
                                        (0311) ;-----------------------------------------------------------------------------
                                        (0312) ;
                                        (0313) ;  ARGUMENTS:    A contains the endpoint number
                                        (0314) ;
                                        (0315) ;  RETURNS:      A contains the endpoint state
                                        (0316) ;
                                        (0317) ;  SIDE EFFECTS:
                                        (0318) ;    The A and X registers may be modified by this or future implementations
                                        (0319) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0320) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0321) ;    responsibility to perserve their values across calls to fastcall16
                                        (0322) ;    functions.
                                        (0323) ;
                                        (0324)  USBFS_bGetEPState:
                                        (0325) _USBFS_bGetEPState:
                                        (0326)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0327)     RAM_SETPAGE_IDX >USBFS_EndpointAPIStatus
0CB7: 39 05    CMP   A,0x5              (0328)     cmp     A, (USB_MAX_EP_NUMBER + 1)   ; Range check
0CB9: D0 06    JNC   0x0CC0             (0329)     jnc     .invalid_ep                ; Bail out
                                        (0330) ; Flow here to enable an endpoint
0CBB: 5C       MOV   X,A                (0331)     mov     X, A                       ; Endpoint number is the index
0CBC: 52 21    MOV   A,[X+33]           (0332)     mov     A, [X+USBFS_EndpointAPIStatus]; Get the state
0CBE: 80 03    JMP   0x0CC2             (0333)     jmp     .exit                      ; Go to the common exit
                                        (0334) ; Jump here for an invalid endpoint
                                        (0335) .invalid_ep:
0CC0: 50 00    MOV   A,0x0              (0336)     mov     A, 0                       ; Return 0 for an invalid ep
0CC2: 70 3F    AND   F,0x3F             
0CC4: 71 C0    OR    F,0xC0             
                                        (0337) ; Jump or flow here for a common exit
                                        (0338) .exit:
                                        (0339)     RAM_EPILOGUE RAM_USE_CLASS_3
0CC6: 7F       RET                      (0340)     ret                                ; All done
0CC7: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0341) .ENDSECTION
                                        (0342) 
                                        (0343) 
                                        (0344) 
                                        (0345) ;-----------------------------------------------------------------------------
                                        (0346) ;  FUNCTION NAME: USBFS_bRWUEnabled
                                        (0347) ;
                                        (0348) ;  DESCRIPTION:   Returns 1 if Remote Wake Up is enabled, otherwise 0
                                        (0349) ;
                                        (0350) ;-----------------------------------------------------------------------------
                                        (0351) ;
                                        (0352) ;  ARGUMENTS:   None
                                        (0353) ;
                                        (0354) ;  RETURNS:     A: 1--Remote Wake Up Enabled
                                        (0355) ;                  0--Remote Wake Up Disabled
                                        (0356) ;
                                        (0357) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A and X REGISTERS MAY BE MODIFIED!
                                        (0358) ;
                                        (0359) ;  THEORY of OPERATION or PROCEDURE:
                                        (0360) ;
                                        (0361) ;-----------------------------------------------------------------------------
                                        (0362) .SECTION
                                        (0363)  USBFS_bRWUEnabled:
                                        (0364) _USBFS_bRWUEnabled:
                                        (0365)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0366)     RAM_SETPAGE_CUR >USBFS_DeviceStatus
0CCA: 47 02 02 TST   [0x2],0x2          (0367)     tst     [USBFS_DeviceStatus], USB_DEVICE_STATUS_REMOTE_WAKEUP
0CCD: B0 05    JNZ   0x0CD3             (0368)     jnz     .enabled                   ; Jump if enabled
                                        (0369) ; Flow here if RWU is disabled
0CCF: 50 00    MOV   A,0x0              (0370)     mov     A, 0                       ; Return disabled
0CD1: 80 03    JMP   0x0CD5             (0371)     jmp     .exit                      ; Go to the common exit
                                        (0372) ; Jump when RWU is enabled
                                        (0373) .enabled:
0CD3: 50 01    MOV   A,0x1              (0374)     mov     A, 1                       ; Return enabled
                                        (0375) ; Jump or flow here for a common exit
                                        (0376) .exit:
                                        (0377)     RAM_EPILOGUE RAM_USE_CLASS_4
0CD5: 7F       RET                      (0378)     ret                                ; All done
                                        (0379) .ENDSECTION
                                        (0380) 
                                        (0381) ;-----------------------------------------------------------------------------
                                        (0382) ;  FUNCTION NAME: USBFS_bGetEPCount
                                        (0383) ;
                                        (0384) ;  DESCRIPTION:
                                        (0385) ;
                                        (0386) ;-----------------------------------------------------------------------------
                                        (0387) ;
                                        (0388) ;  ARGUMENTS:    A contains the Endpoint Number
                                        (0389) ;
                                        (0390) ;  RETURNS:              A and X contain a WORD that indicate the values stored in the
                                        (0391) ;                Count registers of the Endpoint
                                        (0392) ;
                                        (0393) ;  SIDE EFFECTS:
                                        (0394) ;    The A and X registers may be modified by this or future implementations
                                        (0395) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0396) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0397) ;    responsibility to perserve their values across calls to fastcall16
                                        (0398) ;    functions.
                                        (0399) ;
                                        (0400) .SECTION
                                        (0401)  USBFS_wGetEPCount:
                                        (0402) _USBFS_wGetEPCount:
                                        (0403)     RAM_PROLOGUE RAM_USE_CLASS_1
0CD6: 39 05    CMP   A,0x5              (0404)     cmp     A, (USB_MAX_EP_NUMBER + 1)   ; Range check
0CD8: D0 11    JNC   0x0CEA             (0405)     jnc     .invalid_ep                ; Bail out
                                        (0406) ; Flow here to get the endpoint count
0CDA: 64       ASL   A                  (0407)     asl     A                          ; Multiply the index by two to get to the value
0CDB: 5C       MOV   X,A                (0408)     mov     X, A                       ; Endpoint number is the index
0CDC: 5E 4D    MOV   A,REG[X+0x4D]      (0409)     mov     A, reg[X+USBFS_EP1CNT1 - 1]   ; Here is the count
0CDE: 11 02    SUB   A,0x2              (0410)     sub     A, 2
0CE0: 08       PUSH  A                  (0411)     push    A
0CE1: 79       DEC   X                  (0412)     dec     X
0CE2: 5E 4D    MOV   A,REG[X+0x4D]      (0413)     mov     A, reg[X+USBFS_EP1CNT1 - 1]   ; Here is the count
0CE4: 21 01    AND   A,0x1              (0414)     and     A, 0x01
0CE6: 5C       MOV   X,A                (0415)     mov     X, A
0CE7: 18       POP   A                  (0416)     pop     A
0CE8: 80 03    JMP   0x0CEC             (0417)     jmp     .exit                      ; Go to the common exit
                                        (0418) ; Jump here for an invalid endpoint
                                        (0419) .invalid_ep:
0CEA: 50 00    MOV   A,0x0              (0420)     mov     A, 0                       ; Return 0 for an invalid ep
                                        (0421) ; Jump or flow here for a common exit
                                        (0422) .exit:
                                        (0423)     RAM_EPILOGUE RAM_USE_CLASS_1
0CEC: 7F       RET                      (0424)     ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) .SECTION
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;  FUNCTION NAME: USBFS_LoadInEP and USBFS_LoadInISOCEP
                                        (0430) ;
                                        (0431) ;  DESCRIPTION:    This function loads the specified USB endpoint with
                                        (0432) ;                  the data specified.
                                        (0433) ;
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     [SP-8] Toggle
                                        (0438) ;     [SP-7] MSB of Count to send
                                        (0439) ;     [SP-6] LSB of Count to send
                                        (0440) ;     [SP-5] MSB of data array address
                                        (0441) ;     [SP-4] LSB of data array address
                                        (0442) ;     [SP-3] Endpoint Number
                                        (0443) ;
                                        (0444) ;  RETURNS:
                                        (0445) ;     none
                                        (0446) ;
                                        (0447) ;  SIDE EFFECTS:
                                        (0448) ;    The A and X registers may be modified by this or future implementations
                                        (0449) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0450) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0451) ;    responsibility to perserve their values across calls to fastcall16
                                        (0452) ;    functions.
                                        (0453) ;
                                        (0454) ;    Currently only the page pointer registers listed below are modified:
                                        (0455) ;          CUR_PP
                                        (0456) ;          IDX_PP
                                        (0457) ;
                                        (0458) EP_TYPE:        equ -1
                                        (0459) ; -2 and -3 is the return address to caller
                                        (0460) EP_NUM:     equ -4                       ; Endpoint Number
                                        (0461) DATA_LSB:   equ -5           ; LSB pointer of data
                                        (0462) DATA_MSB:   equ -6           ; MSB pointer of data
                                        (0463) CNTLEN_LSB: equ -7
                                        (0464) CNTLEN_MSB: equ -8           ; Length of data to send
                                        (0465) TOGGLE:     equ -9
                                        (0466) 
                                        (0467)  USBFS_LoadInISOCEP:
                                        (0468) _USBFS_LoadInISOCEP:
0CED: 50 07    MOV   A,0x7              (0469)     mov     A, USB_MODE_ISO_IN
0CEF: 08       PUSH  A                  (0470)     push    A
0CF0: 80 04    JMP   0x0CF5             (0471)     jmp             BodyLoadIN_USBFS
                                        (0472)  USBFS_LoadInEP:
                                        (0473) _USBFS_LoadInEP:
0CF2: 50 0D    MOV   A,0xD              (0474)     mov     A, USB_MODE_ACK_IN
0CF4: 08       PUSH  A                  (0475)     push    A
0CF5: 70 BF    AND   F,0xBF             
0CF7: 62 D0 00 MOV   REG[0xD0],0x0      
0CFA: 62 D3 03 MOV   REG[0xD3],0x3      
                                        (0476) BodyLoadIN_USBFS:
                                        (0477)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0478)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0479) 
                                        (0480)     RAM_SETPAGE_CUR >USBFS_bCurrentDevice   ; Set the CUR_PP to the right page
                                        (0481)     RAM_SETPAGE_IDX2STK
0CFD: 4F       MOV   X,SP               (0482)     mov     X, SP
0CFE: 52 FC    MOV   A,[X-4]            (0483)     mov     A, [X+EP_NUM]
0D00: 39 05    CMP   A,0x5              (0484)     cmp     A, USB_MAX_EP_NUMBER+1     ; Range check
0D02: D0 A9    JNC   0x0DAC             (0485)     jnc     .exit                      ; Bail out
                                        (0486) 
                                        (0487)     ;SET THE COUNT
0D04: 52 F8    MOV   A,[X-8]            (0488)     mov     A, [X+CNTLEN_MSB]          ; Get the MSB of the Count
0D06: 21 01    AND   A,0x1              (0489)     and     A, 0x01                    ; Mask off the count bit
0D08: 53 42    MOV   [0x42],A           (0490)     mov     [USBFS_APITemp+1], A       ; Save the count
0D0A: 52 F9    MOV   A,[X-7]            (0491)     mov     A, [X+CNTLEN_LSB]          ; Get the LSB of the Count
0D0C: 53 41    MOV   [0x41],A           (0492)     mov     [USBFS_APITemp], A         ; Save the count
                                        (0493) 
                                        (0494) 
                                        (0495)         ;  Perform normal data toggle or bypass?
0D0E: 10       PUSH  X                  (0496)     push    X
0D0F: 52 F7    MOV   A,[X-9]            (0497)     mov     A, [X+TOGGLE]
0D11: B0 0F    JNZ   0x0D21             (0498)     jnz     .normalToggle
                                        (0499) 		; the endpoint ISR automatically toggles the endpoint, so to support
                                        (0500) 		; the idea of not having the toggle change we must untoggle here.
0D13: 50 B7    MOV   A,0xB7             (0501)     mov     A, <USBFS_USB_EP_BIT_LOOKUP           ; calculate the address LSB
0D15: 03 FC    ADD   A,[X-4]            (0502)     add     A, [X+EP_NUM]           ; Get the Endpoint number
0D17: 57 02    MOV   X,0x2              (0503)     mov     X, >USBFS_USB_EP_BIT_LOOKUP           ; calculate the address MSB
0D19: 4B       SWAP  A,X                (0504)     swap    A, X
0D1A: 09 00    ADC   A,0x0              (0505) 	adc     A, 0
0D1C: 28       ROMX                     (0506) 	romx
0D1D: 20       POP   X                  (0507) 	pop     X	                            ; Restore X to obtain the endpt correctly in the next block
0D1E: 10       PUSH  X                  (0508) 	push    X
                                        (0509) 
                                        (0510) ;    INDEX   USBFS_USB_EP_BIT_LOOKUP ; Get the bit mask
0D1F: 34 1C    XOR   [0x1C],A           (0511)     xor     [USBFS_EPDataToggle], A ; Retoggle the toggle
                                        (0512) 
                                        (0513) .normalToggle:
0D21: 50 B7    MOV   A,0xB7             (0514)     mov     A, <USBFS_USB_EP_BIT_LOOKUP           ; calculate the address LSB
0D23: 03 FC    ADD   A,[X-4]            (0515)     add     A, [X+EP_NUM]           ; Get the Endpoint number
0D25: 57 02    MOV   X,0x2              (0516)     mov     X, >USBFS_USB_EP_BIT_LOOKUP           ; calculate the address MSB
0D27: 4B       SWAP  A,X                (0517)     swap    A, X
0D28: 09 00    ADC   A,0x0              (0518) 	adc     A, 0
0D2A: 28       ROMX                     (0519) 	romx	;   now A contains the toggle
                                        (0520) 
                                        (0521) ;    INDEX   USBFS_USB_EP_BIT_LOOKUP ; Get the bit mask
0D2B: 20       POP   X                  (0522)     pop     X	 ;do before the and so the zero flag won't be corrupted.
0D2C: 22 1C    AND   A,[0x1C]           (0523)     and     A, [USBFS_EPDataToggle]
0D2E: A0 06    JZ    0x0D35             (0524)     jz      .toggle0
                                        (0525) 
0D30: 26 42 7F AND   [0x42],0x7F        (0526)     and      [USBFS_APITemp+1], ~USB_CNT_TOGGLE ; Set the data toggle
0D33: 80 04    JMP   0x0D38             (0527)     jmp     .toggle_done
                                        (0528) .toggle0:
0D35: 2E 42 80 OR    [0x42],0x80        (0529)     or     [USBFS_APITemp+1], USB_CNT_TOGGLE
                                        (0530) 
                                        (0531) .toggle_done:
                                        (0532) 
0D38: 4F       MOV   X,SP               (0533)     mov     X, SP
0D39: 52 FC    MOV   A,[X-4]            (0534)     mov     A, [X+EP_NUM]               ; Get the Endpoint number
0D3B: 64       ASL   A                  (0535)     asl     A                           ; Double the ep number for proper cnt access
0D3C: 5C       MOV   X,A                (0536)     mov     X, A                        ; Make it into an index
0D3D: 51 41    MOV   A,[0x41]           (0537)     mov     A, [USBFS_APITemp]          ; Retrieve the saved MSB
0D3F: 61 4D    MOV   REG[X+0x4D],A      (0538)     mov     reg[X+USBFS_EP1CNT1 - 1], A     ; Write it into the register
0D41: 79       DEC   X                  (0539)     dec     X                           ; Decrement the index to access the LSB
0D42: 51 42    MOV   A,[0x42]           (0540)     mov     A, [USBFS_APITemp+1]        ; Retrieve the saved LSB
0D44: 61 4D    MOV   REG[X+0x4D],A      (0541)     mov     reg[X+USBFS_EP1CNT1 - 1], A     ; Write it into the register
                                        (0542) 
                                        (0543) ; It's Time to move the data
                                        (0544) 
                                        (0545) ; First we need to determine where within the PMA the EP Start Address is
0D46: 4F       MOV   X,SP               (0546)     mov     X, SP                       ; Get the Stack Pointer
0D47: 52 FC    MOV   A,[X-4]            (0547)     mov     A, [X+EP_NUM]               ; Get the Endpoint number
0D49: 5C       MOV   X,A                (0548)     mov     X, A                        ; Use the EP number as an index
0D4A: 5E 6B    MOV   A,REG[X+0x6B]      (0549)     mov     A, reg[X+TMP_DR0-1]         ; Get the address of ep from tmp register
0D4C: 71 10    OR    F,0x10             
                                        (0550) 
                                        (0551)    M8C_SetBank1
0D4E: 49 F7 01 TST   REG[0xF7],0x1      (0552)    tst   reg[CPU_F], 0x01
0D51: A0 09    JZ    0x0D5B             (0553)    jz    .DontTouchGIE1
0D53: 70 FE    AND   F,0xFE             
                                        (0554)    M8C_DisableGInt
0D55: 60 40    MOV   REG[0x40],A        (0555)    mov   reg[PMA0_WA], A                ; Set the Write pointer of our pma to ep space
0D57: 71 01    OR    F,0x1              
                                        (0556)    M8C_EnableGInt
0D59: 80 03    JMP   0x0D5D             (0557)    jmp   .Continue1
                                        (0558) .DontTouchGIE1:
0D5B: 60 40    MOV   REG[0x40],A        (0559)    mov   reg[PMA0_WA], A                ; Set the Write pointer of our pma to ep space
0D5D: 70 EF    AND   F,0xEF             
                                        (0560) .Continue1:
                                        (0561) 	M8C_SetBank0
                                        (0562) 
                                        (0563) ; Now we are ready to start moving data
0D5F: 4F       MOV   X,SP               (0564)     mov     X, SP
0D60: 27 F8 01 AND   [X-8],0x1          (0565)     and     [X+CNTLEN_MSB], 0x01        ; Mask off the MSB bit
0D63: B0 05    JNZ   0x0D69             (0566)     jnz     .start_send                 ; If it is high then we have 256 bytes
0D65: 52 F9    MOV   A,[X-7]            (0567)     mov     A, [X+CNTLEN_LSB]           ; Check the LSB register
0D67: A0 15    JZ    0x0D7D             (0568)     jz      .done                       ; If it is 0 then we have a 0 length packet
                                        (0569) .start_send:
0D69: 52 FB    MOV   A,[X-5]            (0570)     mov     A, [X+DATA_LSB]
0D6B: 08       PUSH  A                  (0571)     push    A
                                        (0572) IF SYSTEM_LARGE_MEMORY_MODEL
0D6C: 52 FA    MOV   A,[X-6]            (0573)     mov     A, [X+DATA_MSB]
0D6E: 60 D3    MOV   REG[0xD3],A        (0574)     mov     reg[IDX_PP], A
                                        (0575) ENDIF
0D70: 20       POP   X                  (0576)     pop     X
                                        (0577) 
                                        (0578) .loop:
0D71: 52 00    MOV   A,[X+0]            (0579)     mov     A, [X]
0D73: 60 40    MOV   REG[0x40],A        (0580)     mov     reg[PMA0_DR], A
0D75: 75       INC   X                  (0581)     inc     X
0D76: 7A 41    DEC   [0x41]             (0582)     dec     [USBFS_APITemp]
0D78: BF F8    JNZ   0x0D71             (0583)     jnz     .loop
0D7A: 62 D3 03 MOV   REG[0xD3],0x3      
                                        (0584) 
                                        (0585)     RAM_SETPAGE_IDX2STK
                                        (0586) .done:
0D7D: 4F       MOV   X,SP               (0587)     mov     X, SP
0D7E: 52 FC    MOV   A,[X-4]            (0588)     mov     A, [X+EP_NUM]
0D80: 5C       MOV   X,A                (0589)     mov     X, A
0D81: 71 10    OR    F,0x10             
                                        (0590) 
                                        (0591)    M8C_SetBank1
0D83: 5E 6B    MOV   A,REG[X+0x6B]      (0592)    mov   A, reg[X+TMP_DR0-1]           ; Get the value of the PMA start Address
0D85: 49 F7 01 TST   REG[0xF7],0x1      (0593)    tst   reg[CPU_F], 0x01
0D88: A0 09    JZ    0x0D92             (0594)    jz    .DontTouchGIE2
0D8A: 70 FE    AND   F,0xFE             
                                        (0595)    M8C_DisableGInt
0D8C: 61 50    MOV   REG[X+0x50],A      (0596)    mov   reg[X + PMA0_RA], A           ; Load it into EP PMA so pre-fetch occurs
0D8E: 71 01    OR    F,0x1              
                                        (0597)    M8C_EnableGInt
0D90: 80 03    JMP   0x0D94             (0598)    jmp   .Continue2
                                        (0599) .DontTouchGIE2:
0D92: 61 50    MOV   REG[X+0x50],A      (0600)    mov   reg[X + PMA0_RA], A           ; Load it into EP PMA so pre-fetch occurs
0D94: 70 EF    AND   F,0xEF             
                                        (0601) .Continue2:
                                        (0602) 	M8C_SetBank0
                                        (0603) 
0D96: 10       PUSH  X                  (0604)     push    X
0D97: 4F       MOV   X,SP               (0605)     mov     X, SP
0D98: 52 FE    MOV   A,[X-2]            (0606)     mov     A, [X+EP_TYPE-1]
0D9A: 20       POP   X                  (0607)     pop     X
0D9B: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0608) 
                                        (0609)     ; Check that we aren't halted
                                        (0610)     RAM_SETPAGE_IDX >USBFS_EndpointAPIStatus
0D9E: 3D 21 02 CMP   [X+33],0x2         (0611)     cmp     [X + USBFS_EndpointAPIStatus], NO_EVENT_ALLOWED    ; Get the state
0DA1: A0 0A    JZ    0x0DAC             (0612)     jz      .exit
                                        (0613) 
0DA3: 56 21 00 MOV   [X+33],0x0         (0614)     mov     [X + USBFS_EndpointAPIStatus], NO_EVENT_PENDING   ; Set the state
0DA6: 71 10    OR    F,0x10             
                                        (0615)     M8C_SetBank1
0DA8: 61 C3    MOV   REG[X+0xC3],A      (0616)     mov     reg[X + USBFS_EP1MODE-1], A ; Enable the endpoint
0DAA: 70 EF    AND   F,0xEF             
                                        (0617)     M8C_SetBank0
                                        (0618) 
                                        (0619) .exit:
0DAC: 18       POP   A                  (0620)     pop     A                          ; Clean up EP_TYPE
0DAD: 70 3F    AND   F,0x3F             
0DAF: 71 C0    OR    F,0xC0             
                                        (0621)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0622)     RAM_EPILOGUE RAM_USE_CLASS_4
0DB1: 7F       RET                      (0623)     ret
                                        (0624) .ENDSECTION
                                        (0625) 
                                        (0626) .SECTION
                                        (0627) ;-----------------------------------------------------------------------------
                                        (0628) ;  FUNCTION NAME: USBFS_EnableOutEP and
                                        (0629) ;                                 USBFS_EnableOutISOCEP
                                        (0630) ;
                                        (0631) ;  DESCRIPTION:    This function enables an OUT endpoint.  It should not be
                                        (0632) ;                  called for an IN endpoint.
                                        (0633) ;
                                        (0634) ;-----------------------------------------------------------------------------
                                        (0635) ;
                                        (0636) ;  ARGUMENTS:      A contains the endpoint number
                                        (0637) ;
                                        (0638) ;  RETURNS:        None
                                        (0639) ;
                                        (0640) ;  SIDE EFFECTS:
                                        (0641) ;    The A and X registers may be modified by this or future implementations
                                        (0642) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0643) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0644) ;    responsibility to perserve their values across calls to fastcall16
                                        (0645) ;    functions.
                                        (0646) ;
                                        (0647) USBFS_EnableOutISOCEP:
                                        (0648) _USBFS_EnableOutISOCEP:
0DB2: 57 05    MOV   X,0x5              (0649)     mov     X, USB_MODE_ISO_OUT
0DB4: 10       PUSH  X                  (0650)     push    X
0DB5: 80 04    JMP   0x0DBA             (0651)     jmp     BodyEnableOut_USBFS
                                        (0652)  USBFS_EnableOutEP:
                                        (0653) _USBFS_EnableOutEP:
0DB7: 57 09    MOV   X,0x9              (0654)     mov     X, USB_MODE_ACK_OUT
0DB9: 10       PUSH  X                  (0655)     push    X
0DBA: 70 BF    AND   F,0xBF             
0DBC: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0656) BodyEnableOut_USBFS:
                                        (0657)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0658)     RAM_SETPAGE_IDX >USBFS_EndpointAPIStatus
                                        (0659) 
0DBF: 39 00    CMP   A,0x0              (0660)     cmp     A, 0                       ; Can't enable EP0
0DC1: A0 25    JZ    0x0DE7             (0661)     jz      .exit                      ; Bail out
0DC3: 39 05    CMP   A,0x5              (0662)     cmp     A, (USB_MAX_EP_NUMBER + 1)   ; Range check
0DC5: D0 21    JNC   0x0DE7             (0663)     jnc     .exit                      ; Bail out
                                        (0664) ; Flow here to enable an endpoint
0DC7: 5C       MOV   X,A                (0665)     mov     X, A                       ; Endpoint number is the index
                                        (0666) 
                                        (0667)     ; Check that we aren't halted
0DC8: 3D 21 02 CMP   [X+33],0x2         (0668)     cmp     [X + USBFS_EndpointAPIStatus], NO_EVENT_ALLOWED    
0DCB: A0 1B    JZ    0x0DE7             (0669)     jz      .exit
                                        (0670) 
0DCD: 10       PUSH  X                  (0671)     push    X
0DCE: 56 21 00 MOV   [X+33],0x0         (0672)     mov     [X+USBFS_EndpointAPIStatus], NO_EVENT_PENDING   ; For the API
0DD1: 5B       MOV   A,X                (0673)     mov     A, X
0DD2: 64       ASL   A                  (0674)     asl     A
0DD3: 5C       MOV   X,A                (0675)     mov     X, A
0DD4: 63 4D 40 MOV   REG[X+0x4D],0x40   (0676)     mov     reg[X+EP1_CNT1-1], 64
0DD7: 71 10    OR    F,0x10             
                                        (0677)     M8C_SetBank1
0DD9: 20       POP   X                  (0678)     pop     X
0DDA: 5E 6B    MOV   A,REG[X+0x6B]      (0679)     mov     A, reg[X+TMP_DR0-1]
0DDC: 61 40    MOV   REG[X+0x40],A      (0680)     mov     reg[X+PMA0_WA], A
0DDE: 5E C3    MOV   A,REG[X+0xC3]      (0681)     mov     A, reg[X+USBFS_EP1MODE-1]  ; Unlock the mode register
0DE0: 18       POP   A                  (0682)     pop     A
                                        (0683) 
0DE1: 61 C3    MOV   REG[X+0xC3],A      (0684)     mov     reg[X+USBFS_EP1MODE-1], A  ; Enable the endpoint
0DE3: 70 EF    AND   F,0xEF             
                                        (0685)     M8C_SetBank0
0DE5: 80 02    JMP   0x0DE8             (0686)     jmp         .DoneEnableOut
                                        (0687) ; Jump or flow here for a common exit
                                        (0688) .exit:
0DE7: 18       POP   A                  (0689)     pop     A
0DE8: 70 3F    AND   F,0x3F             
0DEA: 71 C0    OR    F,0xC0             
                                        (0690) .DoneEnableOut:
                                        (0691)     RAM_EPILOGUE RAM_USE_CLASS_3
0DEC: 7F       RET                      (0692)     ret                                ; All done
                                        (0693) .ENDSECTION
                                        (0694) 
                                        (0695) ;-----------------------------------------------------------------------------
                                        (0696) ;  FUNCTION NAME: USBFS_DisableEP
                                        (0697) ;
                                        (0698) ;  DESCRIPTION:    This function disables an OUT endpoint.  It should not be
                                        (0699) ;                  called for an IN endpoint.
                                        (0700) ;
                                        (0701) ;-----------------------------------------------------------------------------
                                        (0702) ;
                                        (0703) ;  ARGUMENTS:     A the endpoint number
                                        (0704) ;
                                        (0705) ;  RETURNS:               none
                                        (0706) ;
                                        (0707) ;  SIDE EFFECTS:
                                        (0708) ;    The A and X registers may be modified by this or future implementations
                                        (0709) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0710) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0711) ;    responsibility to perserve their values across calls to fastcall16
                                        (0712) ;    functions.
                                        (0713) ;
                                        (0714) .SECTION
                                        (0715)  USBFS_DisableOutEP:
                                        (0716) _USBFS_DisableOutEP:
0DED: 39 00    CMP   A,0x0              (0717)     cmp     A, 0                       ; Can't disable EP0
0DEF: A0 0F    JZ    0x0DFF             (0718)     jz      .exit                      ; Bail out
0DF1: 39 05    CMP   A,0x5              (0719)     cmp     A, (USB_MAX_EP_NUMBER + 1)   ; Range check
0DF3: D0 0B    JNC   0x0DFF             (0720)     jnc     .exit                      ; Bail out
                                        (0721) ; Flow here to disable an endpoint
0DF5: 5C       MOV   X,A                (0722)     mov     X, A                       ; Endpoint number is the index
0DF6: 71 10    OR    F,0x10             
                                        (0723)     M8C_SetBank1
0DF8: 5E C3    MOV   A,REG[X+0xC3]      (0724)     mov     A, reg[X+USBFS_EP1MODE-1]  ; Unlock the mode register
0DFA: 63 C3 08 MOV   REG[X+0xC3],0x8    (0725)     mov     reg[X+USBFS_EP1MODE-1], USB_MODE_NAK_OUT   ; Disable the endpoint
0DFD: 70 EF    AND   F,0xEF             
                                        (0726)     M8C_SetBank0
                                        (0727) ; Jump or flow here for a common exit
                                        (0728) .exit:
0DFF: 7F       RET                      (0729)     ret                                ; All done
                                        (0730) .ENDSECTION
                                        (0731) 
                                        (0732) .SECTION
                                        (0733) ;-----------------------------------------------------------------------------
                                        (0734) ;  FUNCTION NAME: USBFS_Force
                                        (0735) ;
                                        (0736) ;  DESCRIPTION:    Force the J/K/SE0 State of D+/D-
                                        (0737) ;
                                        (0738) ;-----------------------------------------------------------------------------
                                        (0739) ;
                                        (0740) ;  ARGUMENTS:     A: USB_FORCE_J
                                        (0741) ;                    USB_FORCE_K
                                        (0742) ;                    USB_FORCE_SE0
                                        (0743) ;                    USB_FORCE_NONE
                                        (0744) ;
                                        (0745) ;  RETURNS:       Nothing
                                        (0746) ;
                                        (0747) ;  SIDE EFFECTS:
                                        (0748) ;    The A and X registers may be modified by this or future implementations
                                        (0749) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0750) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0751) ;    responsibility to perserve their values across calls to fastcall16
                                        (0752) ;    functions.
                                        (0753) ;
                                        (0754)  USBFS_Force:
                                        (0755) _USBFS_Force:
0E00: 60 4B    MOV   REG[0x4B],A        (0756)     mov    reg[USBFS_USBIO_CR0], A
0E02: 7F       RET                      (0757)     ret                                ; Exit
0E03: 70 BF    AND   F,0xBF             
0E05: 62 D0 00 MOV   REG[0xD0],0x0      
0E08: 62 D3 03 MOV   REG[0xD3],0x3      
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) .SECTION
                                        (0761) ;-----------------------------------------------------------------------------
                                        (0762) ;  FUNCTION NAME: USBFS_bReadOutEP
                                        (0763) ;
                                        (0764) ;  DESCRIPTION:    This function reads the data from the USB Out endpoint
                                        (0765) ;                  and loads it into the specified buffer.
                                        (0766) ;
                                        (0767) ;-----------------------------------------------------------------------------
                                        (0768) ;
                                        (0769) ;  ARGUMENTS:
                                        (0770) ;     [SP-7] MSB of Count to read
                                        (0771) ;     [SP-6] LSB of Count to read
                                        (0772) ;     [SP-5] MSB of data array address to put data in
                                        (0773) ;     [SP-4] LSB of data array address to put data in
                                        (0774) ;     [SP-3] Endpoint Number
                                        (0775) ;
                                        (0776) ;  RETURNS:
                                        (0777) ;     none
                                        (0778) ;
                                        (0779) ;  SIDE EFFECTS:
                                        (0780) ;    The A and X registers may be modified by this or future implementations
                                        (0781) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0782) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0783) ;    responsibility to perserve their values across calls to fastcall16
                                        (0784) ;    functions.
                                        (0785) ;
                                        (0786) ;    Currently only the page pointer registers listed below are modified:
                                        (0787) ;          CUR_PP
                                        (0788) ;          IDX_PP
                                        (0789) ;
                                        (0790) EP_NUMR:     equ -3                       ; Endpoint Number
                                        (0791) DATA_LSBR:   equ -4           ; MSB pointer of data
                                        (0792) DATA_MSBR:   equ -5           ; LSB pointer of data
                                        (0793) CNTLEN_LSBR: equ -6           ; Length of data to send
                                        (0794) CNTLEN_MSBR: equ -7
                                        (0795) 
                                        (0796)  USBFS_bReadOutEP:
                                        (0797) _USBFS_bReadOutEP:
                                        (0798)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0799)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0800)     RAM_SETPAGE_CUR >USBFS_bCurrentDevice   ; Set the CUR_PP to the right page
                                        (0801)     RAM_SETPAGE_IDX2STK
0E0B: 4F       MOV   X,SP               (0802)     mov     X, SP
0E0C: 52 FD    MOV   A,[X-3]            (0803)     mov     A, [X+EP_NUMR]
0E0E: 39 05    CMP   A,0x5              (0804)     cmp     A, USB_MAX_EP_NUMBER+1     ; Range check
0E10: D0 88    JNC   0x0E99             (0805)     jnc     .exit                      ; Bail out
                                        (0806) 
                                        (0807)     ;Get the count value passed
0E12: 52 F9    MOV   A,[X-7]            (0808)     mov     A, [X+CNTLEN_MSBR]         ; Get the MSB of the Count
0E14: 21 01    AND   A,0x1              (0809)     and     A, 0x01                    ; Mask off the count bit
0E16: 53 41    MOV   [0x41],A           (0810)     mov     [USBFS_APITemp], A         ; Save the count
0E18: 52 FA    MOV   A,[X-6]            (0811)     mov     A, [X+CNTLEN_LSBR]         ; Get the LSB of the Count
0E1A: 53 42    MOV   [0x42],A           (0812)     mov     [USBFS_APITemp+1], A       ; Save the count
                                        (0813) 
                                        (0814)     ;Determine which is smaller the requested data or the available data
0E1C: 52 FD    MOV   A,[X-3]            (0815)     mov     A, [X+EP_NUMR]              ; Get the Endpoint number
0E1E: 64       ASL   A                  (0816)     asl     A                           ; Double the ep number for proper cnt access
0E1F: 5C       MOV   X,A                (0817)     mov     X, A                        ; Make it into an index
0E20: 5E 4C    MOV   A,REG[X+0x4C]      (0818)     mov     A, reg[X+USBFS_EP1CNT1 - 2]     ; Get the Real count MSB
0E22: 21 01    AND   A,0x1              (0819)     and     A, 0x01                     ; Mask off the LSB
0E24: 3A 41    CMP   A,[0x41]           (0820)     cmp     A, [USBFS_APITemp]          ; Are they equal
0E26: A0 0B    JZ    0x0E32             (0821)     jz      .MSBEqual                   ; If they are check if they are 1
0E28: C0 1C    JC    0x0E45             (0822)     jc      .CountDetermined            ;If the requested count is smaller use it
0E2A: 53 41    MOV   [0x41],A           (0823)     mov     [USBFS_APITemp], A          ; Else use the actual
0E2C: 5E 4D    MOV   A,REG[X+0x4D]      (0824)     mov     A, reg[X+USBFS_EP1CNT1 - 1]     ; Get the Real count LSB
0E2E: 53 42    MOV   [0x42],A           (0825)     mov     [USBFS_APITemp + 1], A      ; Else use the actual
0E30: 80 14    JMP   0x0E45             (0826)     jmp     .CountDetermined
                                        (0827) .MSBEqual:
0E32: 51 41    MOV   A,[0x41]           (0828)     mov     A, [USBFS_APITemp]
0E34: A0 06    JZ    0x0E3B             (0829)     jz      .CheckLSB
0E36: 55 42 00 MOV   [0x42],0x0         (0830)     mov     [USBFS_APITemp + 1], 0
0E39: 80 0B    JMP   0x0E45             (0831)     jmp         .CountDetermined
                                        (0832) .CheckLSB:
0E3B: 5E 4D    MOV   A,REG[X+0x4D]      (0833)     mov     A, reg[X+USBFS_EP1CNT1 - 1]     ; Get the Real count LSB
0E3D: 3A 42    CMP   A,[0x42]           (0834)     cmp     A, [USBFS_APITemp+1]        ; Are they equal
0E3F: A0 05    JZ    0x0E45             (0835)     jz      .CountDetermined            ; If they are check if they are 1
0E41: D0 03    JNC   0x0E45             (0836)     jnc      .CountDetermined           ;If the requested count is smaller use it
0E43: 53 42    MOV   [0x42],A           (0837)     mov     [USBFS_APITemp+1], A        ; Else use the actual
                                        (0838) .CountDetermined:
                                        (0839) 
                                        (0840) ; First we need to determine where within the PMA the EP Start Address is
0E45: 4F       MOV   X,SP               (0841)     mov     X, SP                       ; Get the Stack Pointer
0E46: 52 FD    MOV   A,[X-3]            (0842)     mov     A, [X+EP_NUMR]              ; Get the Endpoint number
0E48: 5C       MOV   X,A                (0843)     mov     X, A                        ; Use the EP number as an index
0E49: 5E 6B    MOV   A,REG[X+0x6B]      (0844)     mov     A, reg[X+TMP_DR0-1]         ; Get the address of ep from tmp register
0E4B: 71 10    OR    F,0x10             
                                        (0845) 
                                        (0846)    M8C_SetBank1
0E4D: 49 F7 01 TST   REG[0xF7],0x1      (0847)    tst   reg[CPU_F], 0x01
0E50: A0 09    JZ    0x0E5A             (0848)    jz    .DontTouchGIE3
0E52: 70 FE    AND   F,0xFE             
                                        (0849)    M8C_DisableGInt
0E54: 60 50    MOV   REG[0x50],A        (0850)    mov   reg[PMA0_RA], A                ; Set the Read pointer of our pma to ep space
0E56: 71 01    OR    F,0x1              
                                        (0851)    M8C_EnableGInt
0E58: 80 03    JMP   0x0E5C             (0852)    jmp   .Continue3
                                        (0853) .DontTouchGIE3:
0E5A: 60 50    MOV   REG[0x50],A        (0854)    mov   reg[PMA0_RA], A                ; Set the Read pointer of our pma to ep space
0E5C: 70 EF    AND   F,0xEF             
                                        (0855) .Continue3:
                                        (0856) 	M8C_SetBank0
                                        (0857) 
                                        (0858) ; Now we are ready to start moving data
0E5E: 26 41 01 AND   [0x41],0x1         (0859)     and     [USBFS_APITemp], 0x01       ; Mask off the MSB bit
0E61: B0 05    JNZ   0x0E67             (0860)     jnz     .start_send                 ; If it is high then we have 256 bytes
0E63: 51 42    MOV   A,[0x42]           (0861)     mov     A, [USBFS_APITemp+1]        ; Check the LSB register
0E65: A0 33    JZ    0x0E99             (0862)     jz      .done                       ; If it is 0 then we have a 0 length packet
                                        (0863) 
                                        (0864) .start_send:
0E67: 4F       MOV   X,SP               (0865)     mov     X, SP
0E68: 52 FC    MOV   A,[X-4]            (0866)     mov     A, [X+DATA_LSBR]            ; Get the LSB of the pointer
0E6A: 08       PUSH  A                  (0867)     push    A                           ; save on stack
                                        (0868) IF SYSTEM_LARGE_MEMORY_MODEL
0E6B: 52 FB    MOV   A,[X-5]            (0869)     mov     A, [X+DATA_MSBR]            ; Get the MSB of the pointer
0E6D: 60 D3    MOV   REG[0xD3],A        (0870)     mov     reg[IDX_PP], A              ; Use as value for IDX_PP
                                        (0871) ENDIF
0E6F: 20       POP   X                  (0872)     pop     X                           ; Get the LSB again
0E70: 71 10    OR    F,0x10             
                                        (0873) 
                                        (0874)         ;;
                                        (0875)         ;; 24Mhz read PMA workaround (kvn)
                                        (0876)         ;;
                                        (0877)     M8C_SetBank1
0E72: 5D E0    MOV   A,REG[0xE0]        (0878)     mov     A, reg[OSC_CR0]
0E74: 08       PUSH  A                  (0879)     push    A
0E75: 21 F8    AND   A,0xF8             (0880)     and     A, 0xf8 ;clear the clock bits (briefly chg the cpu_clk to 3Mhz)
0E77: 29 02    OR    A,0x2              (0881)     or      A, 0x02 ;will set clk to 12Mhz
0E79: 60 E0    MOV   REG[0xE0],A        (0882)     mov     reg[OSC_CR0], A ;clk is now set at 12Mhz
0E7B: 70 EF    AND   F,0xEF             
                                        (0883)     M8C_SetBank0
                                        (0884) 
                                        (0885) .loop:
0E7D: 5D 40    MOV   A,REG[0x40]        (0886)     mov     A, reg[PMA0_DR]             ; Get the data from the PMA space
0E7F: 54 00    MOV   [X+0],A            (0887)     mov    [X], A                       ; save it in data array
0E81: 75       INC   X                  (0888)     inc     X                           ; increment the pointer
0E82: 7A 42    DEC   [0x42]             (0889)     dec     [USBFS_APITemp+1]           ; decrement the counter
0E84: BF F8    JNZ   0x0E7D             (0890)     jnz     .loop                       ; wait for count to zero out
                                        (0891) 
                                        (0892)         ;;
                                        (0893)         ;; 24Mhz read PMA workaround (back to previous clock speed (kvn)
                                        (0894)         ;;
0E86: 18       POP   A                  (0895)     pop     A ;recover previous reg[OSC_CR0] value
0E87: 71 10    OR    F,0x10             
                                        (0896)     M8C_SetBank1
0E89: 60 E0    MOV   REG[0xE0],A        (0897)     mov     reg[OSC_CR0], A ;clk is now set at previous value (probably 24Mhz)
0E8B: 70 EF    AND   F,0xEF             
0E8D: 62 D3 03 MOV   REG[0xD3],0x3      
                                        (0898)     M8C_SetBank0
                                        (0899)         ;;
                                        (0900)         ;; end 24Mhz read PMA workaround (kvn)
                                        (0901)         ;;
                                        (0902) 
                                        (0903)     RAM_SETPAGE_IDX2STK
0E90: 4F       MOV   X,SP               (0904)     mov     X, SP
0E91: 52 FD    MOV   A,[X-3]            (0905)     mov     A, [X+EP_NUMR]
0E93: 64       ASL   A                  (0906)     asl     A
0E94: 5C       MOV   X,A                (0907)     mov     X, A
0E95: 5E 4D    MOV   A,REG[X+0x4D]      (0908)     mov     A, reg[X+USBFS_EP1CNT1 - 1]     ; Get the Real count LSB
0E97: 11 02    SUB   A,0x2              (0909)     sub     A, 2
0E99: 70 3F    AND   F,0x3F             
0E9B: 71 C0    OR    F,0xC0             
                                        (0910) .done:
                                        (0911) .exit:
                                        (0912)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0913)     RAM_EPILOGUE RAM_USE_CLASS_4
0E9D: 7F       RET                      (0914)     ret
                                        (0915) .ENDSECTION
                                        (0916) 
                                        (0917) .SECTION
                                        (0918) ;-----------------------------------------------------------------------------
                                        (0919) ;  FUNCTION NAME: USBFS_bGetEPAckState
                                        (0920) ;
                                        (0921) ;  DESCRIPTION:   Returns whether the ACK bit of EP has been set for
                                        (0922) ;                 an endpoint
                                        (0923) ;
                                        (0924) ;-----------------------------------------------------------------------------
                                        (0925) ;
                                        (0926) ;  ARGUMENTS:     A is the Endpoint Number
                                        (0927) ;
                                        (0928) ;  RETURNS:       A is 0 if ACK bit is not set and non-zero if it is
                                        (0929) ;
                                        (0930) ;  SIDE EFFECTS:
                                        (0931) ;    The A and X registers may be modified by this or future implementations
                                        (0932) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0933) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0934) ;    responsibility to perserve their values across calls to fastcall16
                                        (0935) ;    functions.
                                        (0936) ;
                                        (0937)  USBFS_bGetEPAckState:
                                        (0938) _USBFS_bGetEPAckState:
0E9E: 5C       MOV   X,A                (0939)     mov    X, A
0E9F: 71 10    OR    F,0x10             
                                        (0940)     M8C_SetBank1
0EA1: 5E C3    MOV   A,REG[X+0xC3]      (0941)     mov    A, reg[X + USBFS_EP1MODE-1]
0EA3: 70 EF    AND   F,0xEF             
                                        (0942)     M8C_SetBank0
0EA5: 21 10    AND   A,0x10             (0943)     and    A, 0x10
0EA7: 7F       RET                      (0944)     ret                                ; Exit
0EA8: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0945) .ENDSECTION
                                        (0946) 
                                        (0947) .SECTION
                                        (0948) ;-----------------------------------------------------------------------------
                                        (0949) ;  FUNCTION NAME: USBFS_SetPowerStatus
                                        (0950) ;
                                        (0951) ;  DESCRIPTION:    Set The Current Power status.
                                        (0952) ;
                                        (0953) ;-----------------------------------------------------------------------------
                                        (0954) ;
                                        (0955) ;  ARGUMENTS:      A contains the power status
                                        (0956) ;
                                        (0957) ;  RETURNS:        None
                                        (0958) ;
                                        (0959) ;  SIDE EFFECTS:
                                        (0960) ;    The A and X registers may be modified by this or future implementations
                                        (0961) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0962) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0963) ;    responsibility to perserve their values across calls to fastcall16
                                        (0964) ;    functions.
                                        (0965) ;
                                        (0966)  USBFS_SetPowerStatus:
                                        (0967) _USBFS_SetPowerStatus:
                                        (0968)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0969)     RAM_SETPAGE_CUR >USBFS_DeviceStatus
0EAB: 39 00    CMP   A,0x0              (0970)     cmp     A, 0
0EAD: A0 06    JZ    0x0EB4             (0971)     jz      .bus_powered
0EAF: 2E 02 01 OR    [0x2],0x1          (0972)     or      [USBFS_DeviceStatus], USB_DEVICE_STATUS_SELF_POWERED
0EB2: 80 04    JMP   0x0EB7             (0973)     jmp     .done
                                        (0974) .bus_powered:
0EB4: 26 02 FE AND   [0x2],0xFE         (0975)     and     [USBFS_DeviceStatus], ~USB_DEVICE_STATUS_SELF_POWERED
                                        (0976) .done:
                                        (0977)     RAM_EPILOGUE RAM_USE_CLASS_4
0EB7: 7F       RET                      (0978)     ret                                ; All done
FILE: lib\timer16int.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16INT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2012/3/2 at 9:15:25
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer16.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer16_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer16_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer16_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
0EB8: 7D 0F B1 LJMP  _Pause             (0068)   		ljmp _Pause
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ; Insert your custom assembly code above this banner
                                        (0071)    ;---------------------------------------------------
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert a lcall to a C function below this banner
                                        (0075)    ; and un-comment the lines between these banners
                                        (0076)    ;---------------------------------------------------
                                        (0077)    
                                        (0078)    ;PRESERVE_CPU_CONTEXT
                                        (0079)    ;lcall _My_C_Function
                                        (0080)    ;RESTORE_CPU_CONTEXT
                                        (0081)    
                                        (0082)    ;---------------------------------------------------
                                        (0083)    ; Insert a lcall to a C function above this banner
                                        (0084)    ; and un-comment the lines between these banners
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0087) 
0EBB: 7E       RETI                     (0088)    reti
                                        (0089) 
                                        (0090) 
                                        (0091) ; end of file Timer16INT.asm
FILE: lib\timer16.asm                   (0001) ;;*****************************************************************************
0EBC: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16.asm
                                        (0004) ;;   Version: 2.6, Updated on 2012/3/2 at 9:15:25
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer16.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer16_EnableInt
                                        (0030) export _Timer16_EnableInt
                                        (0031) export  Timer16_DisableInt
                                        (0032) export _Timer16_DisableInt
                                        (0033) export  Timer16_Start
                                        (0034) export _Timer16_Start
                                        (0035) export  Timer16_Stop
                                        (0036) export _Timer16_Stop
                                        (0037) export  Timer16_WritePeriod
                                        (0038) export _Timer16_WritePeriod
                                        (0039) export  Timer16_WriteCompareValue
                                        (0040) export _Timer16_WriteCompareValue
                                        (0041) export  Timer16_wReadCompareValue
                                        (0042) export _Timer16_wReadCompareValue
                                        (0043) export  Timer16_wReadTimer
                                        (0044) export _Timer16_wReadTimer
                                        (0045) export  Timer16_wReadTimerSaveCV
                                        (0046) export _Timer16_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer16_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer16_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer16_ReadTimer         ; deprecated
                                        (0053) export _wTimer16_ReadTimer         ; deprecated
                                        (0054) export  wTimer16_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer16_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer16_ReadCounter       ; obsolete
                                        (0058) export _wTimer16_ReadCounter       ; obsolete
                                        (0059) export  wTimer16_CaptureCounter    ; obsolete
                                        (0060) export _wTimer16_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA Maus_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer16_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer16_EnableInt:
                                        (0098) _Timer16_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer16_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0EBF: 7F       RET                      (0102)    ret
0EC0: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer16_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer16_DisableInt:
                                        (0126) _Timer16_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer16_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0EC3: 7F       RET                      (0130)    ret
0EC4: 43 23 01 OR    REG[0x23],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer16_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer16_Start:
                                        (0154) _Timer16_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer16_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0EC7: 7F       RET                      (0158)    ret
0EC8: 41 23 FE AND   REG[0x23],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer16_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer16_Stop:
                                        (0182) _Timer16_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer16_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0ECB: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer16_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer16_WritePeriod:
                                        (0211) _Timer16_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0ECC: 60 21    MOV   REG[0x21],A        (0213)    mov   reg[Timer16_PERIOD_LSB_REG], A
0ECE: 5B       MOV   A,X                (0214)    mov   A, X
0ECF: 60 25    MOV   REG[0x25],A        (0215)    mov   reg[Timer16_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
0ED1: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer16_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer16_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer16_WriteCompareValue:
                                        (0243) _Timer16_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
0ED2: 60 22    MOV   REG[0x22],A        (0245)    mov   reg[Timer16_COMPARE_LSB_REG], A
0ED4: 5B       MOV   A,X                (0246)    mov   A, X
0ED5: 60 26    MOV   REG[0x26],A        (0247)    mov   reg[Timer16_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
0ED7: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer16_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer16_wReadCompareValue:
                                        (0272) _Timer16_wReadCompareValue:
                                        (0273)  wTimer16_ReadCompareValue:                      ; this name deprecated
                                        (0274) _wTimer16_ReadCompareValue:                      ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
0ED8: 5D 26    MOV   A,REG[0x26]        (0276)    mov   A, reg[Timer16_COMPARE_MSB_REG]
0EDA: 5C       MOV   X,A                (0277)    mov   X, A
0EDB: 5D 22    MOV   A,REG[0x22]        (0278)    mov   A, reg[Timer16_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
0EDD: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer16_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer16_wReadTimerSaveCV:
                                        (0321) _Timer16_wReadTimerSaveCV:
                                        (0322)  wTimer16_ReadTimerSaveCV:                       ; this name deprecated
                                        (0323) _wTimer16_ReadTimerSaveCV:                       ; this name deprecated
                                        (0324)  wTimer16_ReadCounter:                           ; this name deprecated
                                        (0325) _wTimer16_ReadCounter:                           ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
0EDE: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
0EDF: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
0EE1: 5D 23    MOV   A,REG[0x23]        (0334)    mov   A, reg[Timer16_CONTROL_LSB_REG]         ; save the Control register
0EE3: 08       PUSH  A                  (0335)    push  A
0EE4: 5D 22    MOV   A,REG[0x22]        (0336)    mov   A, reg[Timer16_COMPARE_LSB_REG]         ; save the Compare register
0EE6: 08       PUSH  A                  (0337)    push  A
0EE7: 5D 26    MOV   A,REG[0x26]        (0338)    mov   A, reg[Timer16_COMPARE_MSB_REG]
0EE9: 08       PUSH  A                  (0339)    push  A
0EEA: 5D 20    MOV   A,REG[0x20]        (0340)    mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
0EEC: 5D 26    MOV   A,REG[0x26]        (0342)    mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Now grab DR2 (DR0) and save
0EEE: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
0EF0: 5D 22    MOV   A,REG[0x22]        (0344)    mov   A, reg[Timer16_COMPARE_LSB_REG]
0EF2: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
0EF4: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
0EF6: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0EF9: A0 03    JZ    0x0EFD             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
0EFB: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
0EFD: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
0EFF: 70 FE    AND   F,0xFE             
0F01: 41 23 FE AND   REG[0x23],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer16_Stop_M                                ; Disable (stop) the timer
0F04: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
0F05: 60 26    MOV   REG[0x26],A        (0355)    mov   reg[Timer16_COMPARE_MSB_REG], A
0F07: 18       POP   A                  (0356)    pop   A
0F08: 60 22    MOV   REG[0x22],A        (0357)    mov   reg[Timer16_COMPARE_LSB_REG], A
0F0A: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
0F0B: 60 23    MOV   REG[0x23],A        (0359)    mov   reg[Timer16_CONTROL_LSB_REG], A
0F0D: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
0F0E: 20       POP   X                  (0361)    pop   X
0F0F: 70 3F    AND   F,0x3F             
0F11: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
0F13: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer16_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer16_wReadTimer:
                                        (0397) _Timer16_wReadTimer:
                                        (0398)  wTimer16_ReadTimer:                             ; this name deprecated
                                        (0399) _wTimer16_ReadTimer:                             ; this name deprecated
                                        (0400)  wTimer16_CaptureCounter:                        ; this name deprecated
                                        (0401) _wTimer16_CaptureCounter:                        ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
0F14: 5D 20    MOV   A,REG[0x20]        (0404)    mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
0F16: 5D 26    MOV   A,REG[0x26]        (0407)    mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Return DR2 (actually DR0)
0F18: 5C       MOV   X,A                (0408)    mov   X, A
0F19: 5D 22    MOV   A,REG[0x22]        (0409)    mov   A, reg[Timer16_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
0F1B: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer16.asm
FILE: I:\Hobby\PROGRA~1\PSOCPR~1\Maus\Maus\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        										// part specific constants and macros
(0006) #include "PSoCAPI.h"    										// PSoC API definitions for all User Modules
(0007) #pragma interrupt_handler Pause
(0008) 
(0009) BOOL Zeit = 0;
(0010) BYTE abMouseData[3] = {0,0,0};									// (X,Y,Z)
(0011) 
(0012) void main (void)
(0013) {
(0014)      	M8C_EnableGInt; 										// Enable Global Interrupts
__UserModules_end|_main|__text_start|_main:
    0F1C: 71 01    OR    F,0x1
(0015) 		Timer16_EnableInt();
    0F1E: 10       PUSH  X
    0F1F: 7C 0E BC LCALL _Timer16_EnableInt
(0016) 		Timer16_Start();
    0F22: 7C 0E C4 LCALL _Timer16_Start
(0017) 	    USBFS_Start(0, USB_5V_OPERATION); 						// Start USBFS Operation using device 0 at 5V 
    0F25: 57 03    MOV   X,0x3
    0F27: 50 00    MOV   A,0x0
    0F29: 7C 0C 39 LCALL _USBFS_Start
    0F2C: 20       POP   X
(0018) 	    while(!USBFS_bGetConfiguration()); 						// Wait for Device to enumerate
    0F2D: 10       PUSH  X
    0F2E: 7C 0C AC LCALL _USBFS_bGetConfiguration
    0F31: 20       POP   X
    0F32: 62 D0 00 MOV   REG[0xD0],0x0
    0F35: 39 00    CMP   A,0x0
    0F37: AF F5    JZ    0x0F2D
(0019)      	USBFS_LoadInEP(1, abMouseData, 3, USB_NO_TOGGLE); 		// Begin initial USB transfers
    0F39: 10       PUSH  X
    0F3A: 50 00    MOV   A,0x0
    0F3C: 08       PUSH  A
    0F3D: 08       PUSH  A
    0F3E: 50 03    MOV   A,0x3
    0F40: 08       PUSH  A
    0F41: 50 00    MOV   A,0x0
    0F43: 08       PUSH  A
    0F44: 50 47    MOV   A,0x47
    0F46: 08       PUSH  A
    0F47: 50 01    MOV   A,0x1
    0F49: 08       PUSH  A
    0F4A: 7C 0C F2 LCALL _USBFS_LoadInEP
    0F4D: 38 FA    ADD   SP,0xFA
    0F4F: 20       POP   X
    0F50: 80 5C    JMP   0x0FAD
(0020) 
(0021)      	while(1)
(0022) 	     {
(0023) 		    if(USBFS_bGetEPAckState(1) != 0) 					// Check and see if ACK has occured
    0F52: 10       PUSH  X
    0F53: 50 01    MOV   A,0x1
    0F55: 7C 0E 9E LCALL _USBFS_bGetEPAckState
    0F58: 20       POP   X
    0F59: 62 D0 00 MOV   REG[0xD0],0x0
    0F5C: 39 00    CMP   A,0x0
    0F5E: A0 4E    JZ    0x0FAD
(0024) 		    {
(0025) 				USBFS_LoadInEP(1, abMouseData, 3, USB_TOGGLE); 		// Load EP1 with mouse data
    0F60: 10       PUSH  X
    0F61: 50 01    MOV   A,0x1
    0F63: 08       PUSH  A
    0F64: 50 00    MOV   A,0x0
    0F66: 08       PUSH  A
    0F67: 50 03    MOV   A,0x3
    0F69: 08       PUSH  A
    0F6A: 50 00    MOV   A,0x0
    0F6C: 08       PUSH  A
    0F6D: 50 47    MOV   A,0x47
    0F6F: 08       PUSH  A
    0F70: 50 01    MOV   A,0x1
    0F72: 08       PUSH  A
    0F73: 7C 0C F2 LCALL _USBFS_LoadInEP
    0F76: 38 FA    ADD   SP,0xFA
    0F78: 20       POP   X
(0026) 			
(0027) 				if((PRT1DR) & (0x10))
    0F79: 5D 04    MOV   A,REG[0x4]
    0F7B: 62 D0 00 MOV   REG[0xD0],0x0
    0F7E: 53 4B    MOV   [__r0],A
    0F80: 47 4B 10 TST   [__r0],0x10
    0F83: A0 07    JZ    0x0F8B
(0028) 				{
(0029) 					abMouseData[2] = 0;
    0F85: 62 D0 00 MOV   REG[0xD0],0x0
    0F88: 55 49 00 MOV   [abMouseData+2],0x0
(0030) 				}
(0031) 			
(0032) 				if(Zeit)
    0F8B: 62 D0 00 MOV   REG[0xD0],0x0
    0F8E: 3C 4C 00 CMP   [Zeit],0x0
    0F91: A0 0F    JZ    0x0FA1
(0033) 				{
(0034) 					abMouseData[1] = 247;
    0F93: 62 D0 00 MOV   REG[0xD0],0x0
    0F96: 55 48 F7 MOV   [abMouseData+1],0xF7
(0035) 					abMouseData[2] = 247;
    0F99: 55 49 F7 MOV   [abMouseData+2],0xF7
(0036) 					// abMouseData[0] |= 0x02;							// Right Click
(0037) 					// abMouseData[0] |= 0x01;							// Left Click
(0038) 					PRT2DR |= 0x20;
    0F9C: 43 08 20 OR    REG[0x8],0x20
(0039) 				}
    0F9F: 80 0D    JMP   0x0FAD
(0040) 				else
(0041) 				{
(0042) 					abMouseData[1] = 8;
    0FA1: 62 D0 00 MOV   REG[0xD0],0x0
    0FA4: 55 48 08 MOV   [abMouseData+1],0x8
(0043) 					abMouseData[2] = 8;	
    0FA7: 55 49 08 MOV   [abMouseData+2],0x8
(0044) 					PRT2DR &= ~0x20;
    0FAA: 41 08 DF AND   REG[0x8],0xDF
(0045) 		        }
(0046) 			}
(0047) 	     }
    0FAD: 8F A4    JMP   0x0F52
    0FAF: 8F FF    JMP   0x0FAF
(0048) }
(0049) 
(0050) void Pause(void)
(0051) {
_Pause:
    0FB1: 71 C0    OR    F,0xC0
    0FB3: 08       PUSH  A
    0FB4: 5D D0    MOV   A,REG[0xD0]
    0FB6: 08       PUSH  A
(0052) 	Zeit ^= 0x01;
    0FB7: 62 D0 00 MOV   REG[0xD0],0x0
(0053) 
(0054) }FILE: lib\usbfsint.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: USBFSCommon.asm
                                        (0004) ;;  Version: 1.90, Updated on 2012/3/2 at 9:15:35
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: USB Device User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "USBFS.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ; include instance specific register definitions
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) ;-------------------------------------------------------------------
                                        (0034) ;  Declare the functions global for both assembler and C compiler.
                                        (0035) ;
                                        (0036) ;  Note that there are two names for each API. First name is
                                        (0037) ;  assembler reference. Name with underscore is name refence for
                                        (0038) ;  C compiler.  Calling function in C source code does not require
                                        (0039) ;  the underscore.
                                        (0040) ;-------------------------------------------------------------------
                                        (0041) 
                                        (0042) export    USBFS_EP1_ISR
                                        (0043) export   _USBFS_EP1_ISR
                                        (0044) export    USBFS_EP2_ISR
                                        (0045) export   _USBFS_EP2_ISR
                                        (0046) export    USBFS_EP3_ISR
                                        (0047) export   _USBFS_EP3_ISR
                                        (0048) export    USBFS_EP4_ISR
                                        (0049) export   _USBFS_EP4_ISR
                                        (0050) export    USBFS_RESET_ISR
                                        (0051) export   _USBFS_RESET_ISR
                                        (0052) export    USBFS_SOF_ISR
                                        (0053) export   _USBFS_SOF_ISR
                                        (0054) export    USBFS_WAKEUP_ISR
                                        (0055) export   _USBFS_WAKEUP_ISR
                                        (0056) 
                                        (0057) 
                                        (0058) AREA InterruptRAM (RAM, REL, CON)
                                        (0059) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0060) ;---------------------------------------------------
                                        (0061) ; Insert your custom declarations below this banner
                                        (0062) ;---------------------------------------------------
                                        (0063) 
                                        (0064) ;------------------------
                                        (0065) ; Includes
                                        (0066) ;------------------------
                                        (0067) 
                                        (0068) 
                                        (0069) ;------------------------
                                        (0070) ;  Constant Definitions
                                        (0071) ;------------------------
                                        (0072) 
                                        (0073) 
                                        (0074) ;------------------------
                                        (0075) ; Variable Allocation
                                        (0076) ;------------------------
                                        (0077) 
                                        (0078) 
                                        (0079) ;---------------------------------------------------
                                        (0080) ; Insert your custom declarations above this banner
                                        (0081) ;---------------------------------------------------
                                        (0082) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0083) 
                                        (0084) AREA text (ROM, REL)
                                        (0085) 
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;  FUNCTION NAME: USBFS_EP1_ISR
                                        (0088) ;
                                        (0089) ;  DESCRIPTION:    Handle the Endpoint 1 event by updating the data toggle
                                        (0090) ;                  and setting the endpoint state to EVENT_PENDING.  The SIE
                                        (0091) ;                  automatically set the mode to NAK both IN and out transfers
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) export  USBFS_EP1_ISR
                                        (0094) export _USBFS_EP1_ISR
                                        (0095)  USBFS_EP1_ISR:
                                        (0096) _USBFS_EP1_ISR:
                                        (0097)    ;@PSoC_UserCode_BODY_EP1@ (Do not change this line.)
                                        (0098)    ;---------------------------------------------------
                                        (0099)    ; Insert your custom code below this banner
                                        (0100)    ;---------------------------------------------------
                                        (0101)    ;   NOTE: interrupt service routines must preserve
                                        (0102)    ;   the values of the A and X CPU registers.
                                        (0103) STD_EP1:    EQU     1   ; Set this equate to 0 to remove the standard
                                        (0104)                         ; endpoint handling code
                                        (0105)    ;---------------------------------------------------
                                        (0106)    ; Insert your custom code above this banner
                                        (0107)    ;---------------------------------------------------
                                        (0108)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0109) 
                                        (0110) IF  STD_EP1
0FC5: 08       PUSH  A                  (0111)     push    A
0FC6: 36 1C 02 XOR   [0x1C],0x2         (0112)     xor     [USBFS_EPDataToggle], 2 ; Update EP1 data toggle
0FC9: 71 10    OR    F,0x10             
                                        (0113)     M8C_SetBank1	; _EP1MODE is in Bank 1
0FCB: 5D C4    MOV   A,REG[0xC4]        (0114)     mov     A, reg[USBFS_EP1MODE]      ; Get the mode
0FCD: 70 EF    AND   F,0xEF             
                                        (0115) 	M8C_SetBank0
0FCF: 55 22 01 MOV   [0x22],0x1         (0116)     mov     [USBFS_EndpointAPIStatus+1], EVENT_PENDING ; For the API
0FD2: 18       POP   A                  (0117)     pop     A
0FD3: 7E       RETI                     (0118)     reti
                                        (0119) ENDIF
                                        (0120) 
                                        (0121) ;-----------------------------------------------------------------------------
                                        (0122) ;  FUNCTION NAME: USBFS_EP2_ISR
                                        (0123) ;
                                        (0124) ;  DESCRIPTION:    Handle the Endpoint 2 event by updating the data toggle
                                        (0125) ;                  and setting the endpoint state to EVENT_PENDING.  The SIE
                                        (0126) ;                  automatically set the mode to NAK both IN and out transfers
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) export  USBFS_EP2_ISR
                                        (0129) export _USBFS_EP2_ISR
                                        (0130)  USBFS_EP2_ISR:
                                        (0131) _USBFS_EP2_ISR:
                                        (0132) 
                                        (0133)    ;@PSoC_UserCode_BODY_EP2@ (Do not change this line.)
                                        (0134)    ;---------------------------------------------------
                                        (0135)    ; Insert your custom code below this banner
                                        (0136)    ;---------------------------------------------------
                                        (0137)    ;   NOTE: interrupt service routines must preserve
                                        (0138)    ;   the values of the A and X CPU registers.
                                        (0139) STD_EP2:    EQU     1   ; Set this equate to 0 to remove the standard
                                        (0140)                         ; endpoint handling code
                                        (0141)    ;---------------------------------------------------
                                        (0142)    ; Insert your custom code above this banner
                                        (0143)    ;---------------------------------------------------
                                        (0144)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0145) 
                                        (0146) IF  STD_EP2
0FD4: 08       PUSH  A                  (0147)     push    A
0FD5: 36 1C 04 XOR   [0x1C],0x4         (0148)     xor     [USBFS_EPDataToggle], 4 ; Update EP2 data toggle
0FD8: 71 10    OR    F,0x10             
                                        (0149)     M8C_SetBank1
0FDA: 5D C5    MOV   A,REG[0xC5]        (0150)     mov     A, reg[USBFS_EP2MODE]      ; Get the mode
0FDC: 70 EF    AND   F,0xEF             
                                        (0151)     M8C_SetBank0
0FDE: 55 23 01 MOV   [0x23],0x1         (0152)     mov     [USBFS_EndpointAPIStatus + 2], EVENT_PENDING ; For the API
0FE1: 18       POP   A                  (0153)     pop     A
0FE2: 7E       RETI                     (0154)     reti
                                        (0155) ENDIF
                                        (0156) 
                                        (0157) 
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: USBFS_EP3_ISR
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:    Handle the Endpoint 3 event by updating the data toggle
                                        (0162) ;                  and setting the endpoint state to EVENT_PENDING.  The SIE
                                        (0163) ;                  automatically set the mode to NAK both IN and out transfers
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165)  USBFS_EP3_ISR:
                                        (0166) _USBFS_EP3_ISR:
                                        (0167) 
                                        (0168)    ;@PSoC_UserCode_BODY_EP3@ (Do not change this line.)
                                        (0169)    ;---------------------------------------------------
                                        (0170)    ; Insert your custom code below this banner
                                        (0171)    ;---------------------------------------------------
                                        (0172)    ;   NOTE: interrupt service routines must preserve
                                        (0173)    ;   the values of the A and X CPU registers.
                                        (0174) STD_EP3:    EQU     1   ; Set this equate to 0 to remove the standard
                                        (0175)                         ; endpoint handling code
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ; Insert your custom code above this banner
                                        (0178)    ;---------------------------------------------------
                                        (0179)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0180) 
                                        (0181) IF  STD_EP3
0FE3: 08       PUSH  A                  (0182)     push    A
0FE4: 36 1C 08 XOR   [0x1C],0x8         (0183)     xor     [USBFS_EPDataToggle], 8 ; Update EP3 data toggle
0FE7: 71 10    OR    F,0x10             
                                        (0184)     M8C_SetBank1
0FE9: 5D C6    MOV   A,REG[0xC6]        (0185)     mov     A, reg[USBFS_EP3MODE]      ; Get the mode
0FEB: 70 EF    AND   F,0xEF             
                                        (0186)     M8C_SetBank0
0FED: 55 24 01 MOV   [0x24],0x1         (0187)     mov     [USBFS_EndpointAPIStatus + 3], EVENT_PENDING ; For the API
0FF0: 18       POP   A                  (0188)     pop     A
0FF1: 7E       RETI                     (0189)     reti
                                        (0190) ENDIF
                                        (0191) 
                                        (0192) 
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;  FUNCTION NAME: USBFS_EP4_ISR
                                        (0195) ;
                                        (0196) ;  DESCRIPTION:    Handle the Endpoint 4 event by updating the data toggle
                                        (0197) ;                  and setting the endpoint state to EVENT_PENDING.  The SIE
                                        (0198) ;                  automatically set the mode to NAK both IN and out transfers
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200)  USBFS_EP4_ISR:
                                        (0201) _USBFS_EP4_ISR:
                                        (0202) 
                                        (0203)    ;@PSoC_UserCode_BODY_EP4@ (Do not change this line.)
                                        (0204)    ;---------------------------------------------------
                                        (0205)    ; Insert your custom code below this banner
                                        (0206)    ;---------------------------------------------------
                                        (0207)    ;   NOTE: interrupt service routines must preserve
                                        (0208)    ;   the values of the A and X CPU registers.
                                        (0209) STD_EP4:    EQU     1   ; Set this equate to 0 to remove the standard
                                        (0210)                         ; endpoint handling code
                                        (0211)    ;---------------------------------------------------
                                        (0212)    ; Insert your custom code above this banner
                                        (0213)    ;---------------------------------------------------
                                        (0214)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0215) 
                                        (0216) IF  STD_EP4
0FF2: 08       PUSH  A                  (0217)     push    A
0FF3: 36 1C 10 XOR   [0x1C],0x10        (0218)     xor     [USBFS_EPDataToggle], 16 ; Update EP4 data toggle
0FF6: 71 10    OR    F,0x10             
                                        (0219)     M8C_SetBank1
0FF8: 5D C7    MOV   A,REG[0xC7]        (0220)     mov     A, reg[USBFS_EP4MODE]      ; Get the mode
0FFA: 70 EF    AND   F,0xEF             
                                        (0221)     M8C_SetBank0
0FFC: 55 25 01 MOV   [0x25],0x1         (0222)     mov     [USBFS_EndpointAPIStatus + 4], EVENT_PENDING ; For the API
0FFF: 18       POP   A                  (0223)     pop     A
1000: 7E       RETI                     (0224)     reti
                                        (0225) ENDIF
                                        (0226) 
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: USBFS_RESET_ISR
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:    Handle the USB Bus Reset Interrupt
                                        (0232) ;-----------------------------------------------------------------------------
                                        (0233) export  USBFS_RESET_ISR
                                        (0234) export _USBFS_RESET_ISR
                                        (0235)  USBFS_RESET_ISR:
                                        (0236) _USBFS_RESET_ISR:
                                        (0237) ;   mov     [USBFS_Configuration], 0
                                        (0238) ;   mov     [USBFS_DeviceStatus], 0
                                        (0239) ;   mov     [USBFS_InterfaceSetting], 0
                                        (0240) ;   mov     [USBFS_EndpointStatus], 0
                                        (0241) ;   mov     [USBFS_TransferType], 0
                                        (0242) ;   mov     [USBFS_fDataPending], 0
                                        (0243) ;   mov     reg[USBFS_EP0MODE], USB_MODE_STALL_IN_OUT ; ACK Setup/Stall IN/OUT
                                        (0244) ;   mov     reg[USBFS_EP1MODE], 0
                                        (0245) ;   mov     reg[USBFS_EP2MODE], 0
                                        (0246) ;   mov     reg[USBFS_EP3MODE], 0
                                        (0247) ;   mov     reg[USBFS_EP4MODE], 0
                                        (0248) ;   mov     X, USB_MAX_EP_NUMBER       ; Set up loop to clear all of the endpoint data items
                                        (0249) ;.loop:
                                        (0250) ;   mov     [X + USBFS_EPDataToggle], 0  ; Or in the toggle
                                        (0251) ;   dec     X                          ; Are we done?
                                        (0252) ;   jnz     .loop                      ; Jump to do another endpoint
                                        (0253) 
                                        (0254) ;   mov     reg[USBFS_ADDR], USB_ADDR_ENABLE ; Enable Address 0
                                        (0255) 
                                        (0256)    ;@PSoC_UserCode_BODY_USB_RESET@ (Do not change this line.)
                                        (0257)    ;---------------------------------------------------
                                        (0258)    ; Insert your custom code below this banner
                                        (0259)    ;---------------------------------------------------
                                        (0260)    ;   NOTE: interrupt service routines must preserve
                                        (0261)    ;   the values of the A and X CPU registers.
                                        (0262) 
                                        (0263) STD_USB_RESET:    EQU     1 ; Set this equate to 0 to remove the standard
                                        (0264)                             ; USB reset handling code below
                                        (0265) 
                                        (0266)    ;---------------------------------------------------
                                        (0267)    ; Insert your custom code above this banner
                                        (0268)    ;---------------------------------------------------
                                        (0269)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0270) 
                                        (0271) IF  STD_USB_RESET
1001: 08       PUSH  A                  (0272) 	push 	A
1002: 10       PUSH  X                  (0273) 	push    X
1003: 5D D0    MOV   A,REG[0xD0]        
1005: 08       PUSH  A                  
1006: 5D D3    MOV   A,REG[0xD3]        
1008: 08       PUSH  A                  
1009: 5D D4    MOV   A,REG[0xD4]        
100B: 08       PUSH  A                  
100C: 5D D5    MOV   A,REG[0xD5]        
100E: 08       PUSH  A                  
100F: 71 10    OR    F,0x10             
                                        (0274)     ISR_PRESERVE_PAGE_POINTERS
                                        (0275) 	M8C_SetBank1
1011: 5D C1    MOV   A,REG[0xC1]        (0276) 	mov		A, reg[USBFS_USB_CR1]		          ; Get the RegEnable
1013: 70 EF    AND   F,0xEF             
                                        (0277) 	M8C_SetBank0
1015: 21 03    AND   A,0x3              (0278) 	and 	A, 0x03                          ; mask off the RegEnable and EnableLock bits
1017: 5C       MOV   X,A                (0279) 	mov		X, A                             ; save value in X
1018: 51 00    MOV   A,[0x0]            (0280)     mov     A, [USBFS_bCurrentDevice]     ; Select the current device
101A: 70 3F    AND   F,0x3F             
101C: 71 C0    OR    F,0xC0             
                                        (0281)     RAM_RESTORE_NATIVE_PAGING
101E: 7C 0C 39 LCALL _USBFS_Start       (0282) 	lcall   _USBFS_Start     ; Restart USB
1021: 18       POP   A                  
1022: 60 D5    MOV   REG[0xD5],A        
1024: 18       POP   A                  
1025: 60 D4    MOV   REG[0xD4],A        
1027: 18       POP   A                  
1028: 60 D3    MOV   REG[0xD3],A        
102A: 18       POP   A                  
102B: 60 D0    MOV   REG[0xD0],A        
                                        (0283)     ISR_RESTORE_PAGE_POINTERS
102D: 20       POP   X                  (0284)     pop X
102E: 18       POP   A                  (0285)     pop A
                                        (0286) 
                                        (0287) ENDIF
                                        (0288) 
102F: 7E       RETI                     (0289) 	reti
                                        (0290) 
                                        (0291) 
                                        (0292) 
                                        (0293)  USBFS_SOF_ISR:
                                        (0294) _USBFS_SOF_ISR:
                                        (0295) 
                                        (0296)    ;@PSoC_UserCode_BODY_6@ (Do not change this line.)
                                        (0297)    ;---------------------------------------------------
                                        (0298)    ; Insert your custom assembly code below this banner
                                        (0299)    ;---------------------------------------------------
                                        (0300)    ;   NOTE: interrupt service routines must preserve
                                        (0301)    ;   the values of the A and X CPU registers.
                                        (0302)    
                                        (0303)    ;---------------------------------------------------
                                        (0304)    ; Insert your custom assembly code above this banner
                                        (0305)    ;---------------------------------------------------
                                        (0306)    
                                        (0307)    ;---------------------------------------------------
                                        (0308)    ; Insert a lcall to a C function below this banner
                                        (0309)    ; and un-comment the lines between these banners
                                        (0310)    ;---------------------------------------------------
                                        (0311)    
                                        (0312)    ;PRESERVE_CPU_CONTEXT
                                        (0313)    ;lcall _My_C_Function
                                        (0314)    ;RESTORE_CPU_CONTEXT
                                        (0315)    
                                        (0316)    ;---------------------------------------------------
                                        (0317)    ; Insert a lcall to a C function above this banner
                                        (0318)    ; and un-comment the lines between these banners
                                        (0319)    ;---------------------------------------------------
                                        (0320)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0321) 
1030: 7E       RETI                     (0322)    reti
                                        (0323) 
                                        (0324)  USBFS_WAKEUP_ISR:
                                        (0325) _USBFS_WAKEUP_ISR:
                                        (0326) 
                                        (0327)    ;@PSoC_UserCode_BODY_7@ (Do not change this line.)
                                        (0328)    ;---------------------------------------------------
                                        (0329)    ; Insert your custom assembly code below this banner
                                        (0330)    ;---------------------------------------------------
                                        (0331)    ;   NOTE: interrupt service routines must preserve
                                        (0332)    ;   the values of the A and X CPU registers.
                                        (0333)    
                                        (0334)    ;---------------------------------------------------
                                        (0335)    ; Insert your custom assembly code above this banner
                                        (0336)    ;---------------------------------------------------
                                        (0337)    
                                        (0338)    ;---------------------------------------------------
                                        (0339)    ; Insert a lcall to a C function below this banner
                                        (0340)    ; and un-comment the lines between these banners
                                        (0341)    ;---------------------------------------------------
                                        (0342)    
                                        (0343)    ;PRESERVE_CPU_CONTEXT
                                        (0344)    ;lcall _My_C_Function
                                        (0345)    ;RESTORE_CPU_CONTEXT
                                        (0346)    
                                        (0347)    ;---------------------------------------------------
                                        (0348)    ; Insert a lcall to a C function above this banner
                                        (0349)    ; and un-comment the lines between these banners
                                        (0350)    ;---------------------------------------------------
                                        (0351)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0352) 
1031: 7E       RETI                     (0353)    reti
                                        (0354) 
                                        (0355) ; End of File USBFS.asm
