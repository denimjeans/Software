//*****************************************************************************
//*****************************************************************************
//  FILENAME: EzI2Cs.h
//   Version: 1.30, Updated on 2012/9/21 at 11:59:1
//  Generated by PSoC Designer 5.3.2710
//
//  DESCRIPTION: EzI2Cs User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef EzI2Cs_INCLUDE
#define EzI2Cs_INCLUDE

#include <m8c.h>

#define EzI2Cs_SLAVE_ADDR                0x20
#define EzI2Cs_DYNAMIC_ADDR              0
#define EzI2Cs_ROM_ENABLE                0
#define EzI2Cs_AUTO_ADDR_CHECK            0                          //CY8C28X45 may have this 0 or 1 while all other have 0
#define EzI2Cs_ADDR_REG_PRESENT           0                          //CY8C28X45 have 1 always while all other have 0

/* Create pragmas to support proper argument and return value passing */
#pragma fastcall16  EzI2Cs_Start
#pragma fastcall16  EzI2Cs_DisableInt
#pragma fastcall16  EzI2Cs_EnableInt
#pragma fastcall16  EzI2Cs_ResumeInt
#pragma fastcall16  EzI2Cs_Stop
#pragma fastcall16  EzI2Cs_DisableSlave
#pragma fastcall16  EzI2Cs_SetRamBuffer
#pragma fastcall16  EzI2Cs_GetAddr
#pragma fastcall16  EzI2Cs_GetActivity

#if (EzI2Cs_DYNAMIC_ADDR | EzI2Cs_AUTO_ADDR_CHECK)
#pragma fastcall16  EzI2Cs_SetAddr
#endif

#if ( EzI2Cs_ROM_ENABLE )
#pragma fastcall16  EzI2Cs_SetRomBuffer
#endif

//-------------------------------------------------
// Constants for EzI2Cs_bBusy_Flag
//-------------------------------------------------
//
//
#define EzI2Cs_I2C_FREE                0x00    // No transaction at the current moment
#define EzI2Cs_I2C_BUSY_RAM_READ       0x01    // RAM read transaction in progress
#define EzI2Cs_I2C_BUSY_RAM_WRITE      0x02    // RAM write transaction in progress
#define EzI2Cs_I2C_BUSY_ROM_READ       0x04    // ROM read transaction in progress
#define EzI2Cs_I2C_BUSY_ROM_WRITE      0x08    // ROM write transaction in progress

//-------------------------------------------------
// Constants for EzI2Cs API's.
//-------------------------------------------------
//
//
#define EzI2Cs_ACTIVITY_MASK   0xB0
#define EzI2Cs_ANY_ACTIVITY    0x80
#define EzI2Cs_READ_ACTIVITY   0x20
#define EzI2Cs_WRITE_ACTIVITY  0x10

//-------------------------------------------------
// Prototypes of the EzI2Cs API.
//-------------------------------------------------
extern void  EzI2Cs_Start(void);                                         // Proxy Class 1, if Static Address
                                                                                   // Proxy Class 4, if Dynamic Address
extern void  EzI2Cs_DisableInt(void);                                    // Proxy Class 1
extern void  EzI2Cs_EnableInt(void);                                     // Proxy Class 1
extern void  EzI2Cs_ResumeInt(void);                                     // Proxy Class 1
extern void  EzI2Cs_Stop(void);                                          // Proxy Class 1
extern void  EzI2Cs_DisableSlave(void);                                  // Proxy Class 1
extern void  EzI2Cs_SetRamBuffer(BYTE bSize, BYTE bRWBoundary, BYTE * pAddr); // Proxy Class 4 
extern BYTE  EzI2Cs_GetAddr(void);                                       // Proxy Class 4
extern BYTE  EzI2Cs_GetActivity(void);                                   // Proxy Class 4

#if (EzI2Cs_DYNAMIC_ADDR | EzI2Cs_AUTO_ADDR_CHECK)
extern void  EzI2Cs_SetAddr(BYTE bAddr);                                 // Proxy Class 4
#endif

#if ( EzI2Cs_ROM_ENABLE )
extern void  EzI2Cs_SetRomBuffer(BYTE bSize, const BYTE * pAddr);        // Proxy Class 4
#endif

//-------------------------------------------------
// Define global variables.                 
//-------------------------------------------------
#if ( EzI2Cs_DYNAMIC_ADDR )
#if ( EzI2Cs_AUTO_ADDR_CHECK^1 )
extern   BYTE   EzI2Cs_bAddr;                                            // Proxy Class 1
#endif
#endif

extern   BYTE   EzI2Cs_bBusy_Flag;

#endif
