FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.1.2306
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#897 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.21
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0129)     // call	void_handler
0010: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0133)     // call	void_handler
0014: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   18h                      ;VC3 Interrupt Vector
                                        (0137)     // call	void_handler
0018: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0141)     // call	void_handler
001C: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0145)     // call	void_handler
0020: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 03 A7 LJMP  _Timer16_ISR       (0149)     ljmp	_Timer16_ISR
0027: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0153)     // call	void_handler
0028: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0157)     // call	void_handler
002C: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0161)     // call	void_handler
0030: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0165)     // call	void_handler
0034: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0169)     // call	void_handler
0038: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0173)     // call	void_handler
003C: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0177)     // call	void_handler
0040: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0181)     // call	void_handler
0044: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0185)     // call	void_handler
0048: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0189)     // call	void_handler
004C: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0193)     // call	void_handler
0050: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0197)     // call	void_handler
0054: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0201)     // call	void_handler
0058: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0205)     // call	void_handler
005C: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0209)     // call	void_handler
0060: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0213)     // call	void_handler
0064: 7E       RETI                     (0214)     reti
0068: 71 10    OR    F,0x10             
                                        (0215) 
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  Start of Execution.
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0220) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0221) ;
                                        (0222) 
                                        (0223) IF	(TOOLCHAIN & HITECH)
                                        (0224)  	AREA PD_startup(CODE, REL, CON)
                                        (0225) ELSE
                                        (0226)     org 68h
                                        (0227) ENDIF
                                        (0228) __Start:
                                        (0229) 
                                        (0230)     ; initialize SMP values for voltage stabilization, if required,
                                        (0231)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0232)     ; least for now. 
                                        (0233)     ;
                                        (0234)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0235)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0236)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0237)     M8C_SetBank0
                                        (0238) 
                                        (0239)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0240)     mov   A, 20h
0074: 28       ROMX                     (0241)     romx
0075: 50 40    MOV   A,0x40             (0242)     mov   A, 40h
0077: 28       ROMX                     (0243)     romx
0078: 50 60    MOV   A,0x60             (0244)     mov   A, 60h
007A: 28       ROMX                     (0245)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0246)     ; %45%20%46%46% End workaround
                                        (0247) 
                                        (0248) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0249) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0250)     M8C_EnableWatchDog
                                        (0251) ENDIF
                                        (0252) 
                                        (0253) IF ( SELECT_32K )
                                        (0254)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0255) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0256)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0257) ENDIF
                                        (0258) 
                                        (0259)     ;---------------------------
                                        (0260)     ; Set up the Temporary stack
                                        (0261)     ;---------------------------
                                        (0262)     ; A temporary stack is set up for the SSC instructions.
                                        (0263)     ; The real stack start will be assigned later.
                                        (0264)     ;
                                        (0265) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0266)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0267)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0268) 
                                        (0269)     ;-----------------------------------------------
                                        (0270)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0271)     ;-----------------------------------------------
                                        (0272) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0273) 
                                        (0274) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0275)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0276)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0277)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0278)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0279)   IF ( AGND_BYPASS )
                                        (0280)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0281)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0282)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0283)     ; value using the proper trim values.
                                        (0284)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0285)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)   ENDIF
                                        (0287)  ENDIF
                                        (0288) ENDIF ; 5.0 V Operation
                                        (0289) 
                                        (0290) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0291)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0292)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0293)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0294)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0295)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0296)  ENDIF
                                        (0297) ENDIF ; 3.3 Volt Operation
                                        (0298) 
0087: 55 F8 00 MOV   [Port+235],0x0     (0299)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [Port+236],0x0     (0300)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0301) 
                                        (0302)     ;---------------------------------------
                                        (0303)     ; Initialize Crystal Oscillator and PLL
                                        (0304)     ;---------------------------------------
                                        (0305) 
                                        (0306) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0307)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0308)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0309)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0310)     ; the ECO to stabilize.
                                        (0311)     ;
                                        (0312)     M8C_SetBank1
                                        (0313)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0314)     M8C_SetBank0
                                        (0315)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0316)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0317)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0318) .WaitFor1s:
                                        (0319)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0320)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0321)                                           ;   since interrupts are not globally enabled
                                        (0322) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0323)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0324)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0325)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0326)     M8C_SetBank0
                                        (0327)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0328) 
                                        (0329) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0330) 
                                        (0331) IF ( PLL_MODE )
                                        (0332)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0333)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0334)     ;
                                        (0335)     M8C_SetBank1
                                        (0336)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0337)     M8C_SetBank0
                                        (0338)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0339)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0340) 
                                        (0341) .WaitFor16ms:
                                        (0342)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0343)     jz   .WaitFor16ms
                                        (0344)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0345)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0346)     M8C_SetBank0
                                        (0347) 
                                        (0348) IF      ( WAIT_FOR_32K )
                                        (0349) ELSE ; !( WAIT_FOR_32K )
                                        (0350)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0351)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0352) ENDIF ;(WAIT_FOR_32K)
                                        (0353) ENDIF ;(PLL_MODE)
                                        (0354) 
                                        (0355) 	;-------------------------------------------------------
                                        (0356)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0357)     ;-------------------------------------------------------
                                        (0358) 
                                        (0359)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0360) 
                                        (0361) IF (SYSCLK_SOURCE)
                                        (0362)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0363) ENDIF
                                        (0364)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0365) 
                                        (0366)     ;------------------------
                                        (0367)     ; Close CT leakage path.
                                        (0368)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0369)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0370)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0371)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0372)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0373) 
                                        (0374) 
                                        (0375) IF	(TOOLCHAIN & HITECH)
                                        (0376)     ;---------------------------------------------
                                        (0377)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0378)     ;---------------------------------------------
                                        (0379) 	global		__Lstackps
                                        (0380) 	mov     a,low __Lstackps
                                        (0381) 	swap    a,sp
                                        (0382) 
                                        (0383) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0384)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0385)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0386)     RAM_SETPAGE_CUR 0
                                        (0387)     RAM_SETPAGE_MVW 0
                                        (0388)     RAM_SETPAGE_MVR 0
                                        (0389)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0390)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0391)     ELSE
                                        (0392)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0393)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0394) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0395) ELSE
                                        (0396)     ;---------------------------------------------
                                        (0397)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0398)     ;---------------------------------------------
                                        (0399) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0400)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0401)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0402)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0403)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0404)     RAM_SETPAGE_CUR 0
                                        (0405)     RAM_SETPAGE_MVW 0
                                        (0406)     RAM_SETPAGE_MVR 0
                                        (0407) 
                                        (0408)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0409)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0410)   ELSE
                                        (0411)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0412)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0413) ELSE
                                        (0414)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0415)     swap  SP, A
                                        (0416) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0417) ENDIF ;	TOOLCHAIN
                                        (0418) 
                                        (0419)     ;-------------------------
                                        (0420)     ; Load Base Configuration
                                        (0421)     ;-------------------------
                                        (0422)     ; Load global parameter settings and load the user modules in the
                                        (0423)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0424)     ; to minimize start up time; (2) We may still need to play with the
                                        (0425)     ; Sleep Timer.
                                        (0426)     ;
00B7: 7C 03 33 LCALL 0x0333             (0427)     lcall LoadConfigInit
                                        (0428) 
                                        (0429)     ;-----------------------------------
                                        (0430)     ; Initialize C Run-Time Environment
                                        (0431)     ;-----------------------------------
                                        (0432) IF ( C_LANGUAGE_SUPPORT )
                                        (0433) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0434)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0435)     mov  [__r0],<__bss_start
                                        (0436) BssLoop:
                                        (0437)     cmp  [__r0],<__bss_end
                                        (0438)     jz   BssDone
                                        (0439)     mvi  [__r0],A
                                        (0440)     jmp  BssLoop
                                        (0441) BssDone:
                                        (0442)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0443)     mov  X,<__idata_start
                                        (0444)     mov  [__r0],<__data_start
                                        (0445) IDataLoop:
                                        (0446)     cmp  [__r0],<__data_end
                                        (0447)     jz   C_RTE_Done
                                        (0448)     push A
                                        (0449)     romx
                                        (0450)     mvi  [__r0],A
                                        (0451)     pop  A
                                        (0452)     inc  X
                                        (0453)     adc  A,0
                                        (0454)     jmp  IDataLoop
                                        (0455) 
                                        (0456) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0457) 
                                        (0458) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0459)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0460)                                        ; to use the Virtual Register page.
                                        (0461) 
                                        (0462)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0463)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0464)     ; text segment and may have been relocated by the Code Compressor.
                                        (0465)     ;
00BD: 50 02    MOV   A,0x2              (0466)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 2C    MOV   X,0x2C             (0467)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0468)     push  A
00C2: 28       ROMX                     (0469)     romx                               ; get the MSB of xidata's address
00C3: 53 0B    MOV   [__r0],A           (0470)     mov   [__r0], A
00C5: 18       POP   A                  (0471)     pop   A
00C6: 75       INC   X                  (0472)     inc   X
00C7: 09 00    ADC   A,0x0              (0473)     adc   A, 0
00C9: 28       ROMX                     (0474)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0475)     swap  A, X
00CB: 51 0B    MOV   A,[__r0]           (0476)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0477)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0478)     jmp   .AccessStruct
                                        (0479) 
                                        (0480)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0481)     ; values of C variables. Each structure contains 3 member elements.
                                        (0482)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0483)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0484)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0485)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0486)     ; value in the second member element, an unsigned byte:
                                        (0487)     ; (1) If the value of the second element is non-zero, it represents
                                        (0488)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0489)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0490)     ; the bytes are copied to the block of RAM.
                                        (0491)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0492)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0493)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0494) 
                                        (0495) .AccessNextStructLoop:
00CF: 75       INC   X                  (0496)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0497)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0498) .AccessStruct:                         ; Entry point for first block
                                        (0499)     ;
                                        (0500)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0501)     ;
                                        (0502)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0503)     push  A
00D6: 28       ROMX                     (0504)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0505)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0506)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0507)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0508)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0509)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0510)     adc   A, 0
00E0: 08       PUSH  A                  (0511)     push  A
00E1: 28       ROMX                     (0512)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 0B    MOV   [__r0],A           (0513)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0514)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0515)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0516)     adc   A, 0
00E8: 08       PUSH  A                  (0517)     push  A
00E9: 28       ROMX                     (0518)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0519)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 0A    MOV   [__r1],A           (0520)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0521)     pop   A                            ; restore pXIData to [A,X]
                                        (0522) 
                                        (0523) .CopyNextByteLoop:
                                        (0524)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0525)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0526)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0527)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0528)     ;
00EF: 75       INC   X                  (0529)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0530)     adc   A, 0
00F2: 08       PUSH  A                  (0531)     push  A
00F3: 28       ROMX                     (0532)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 0B    MVI   [__r0],A           (0533)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 0B FF TST   [__r0],0xFF        (0534)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0535)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0536)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0537)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0538)     mov   reg[ MVW_PP], A
                                        (0539) .CopyLoopTail:
0100: 18       POP   A                  (0540)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 0A    DEC   [__r1]             (0541)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0542)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0543)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0544) 
                                        (0545) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0546)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0548)     adc   A, 0
010B: 08       PUSH  A                  (0549)     push  A
010C: 28       ROMX                     (0550)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 0A    MOV   [__r1],A           (0551)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0552)     mov   A, 0                         ; Initialize source data
                                        (0553) 
                                        (0554) .ClearRAMBlockLoop:
                                        (0555)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0556)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0557)     ;
0111: 3F 0B    MVI   [__r0],A           (0558)     mvi   [__r0], A                    ; Clear a byte
0113: 47 0B FF TST   [__r0],0xFF        (0559)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0560)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0561)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0562)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0563)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0564)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0565) .ClearLoopTail:
011F: 7A 0A    DEC   [__r1]             (0566)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0567)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0568)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0569)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0570) 
                                        (0571) .C_RTE_WrapUp:
0126: 18       POP   A                  (0572)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0573) 
                                        (0574) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0575) 
                                        (0576) C_RTE_Done:
                                        (0577) 
                                        (0578) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0579) 
                                        (0580)     ;-------------------------------
                                        (0581)     ; Voltage Stabilization for SMP
                                        (0582)     ;-------------------------------
                                        (0583) 
                                        (0584) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0585) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0586)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0587)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0588)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0589)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0590)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0591)     M8C_SetBank1
                                        (0592)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0593)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0594)     M8C_SetBank0
                                        (0595)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0596)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0597) .WaitFor2ms:
                                        (0598)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0599)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0600) ENDIF ; SMP is operational
                                        (0601) ENDIF ; 5.0V Operation
                                        (0602) 
                                        (0603)     ;-------------------------------
                                        (0604)     ; Set Power-On Reset (POR) Level
                                        (0605)     ;-------------------------------
                                        (0606) 
                                        (0607)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0608)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0609)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0610)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0611)     ;  lead to corruption of PSoC flash.
                                        (0612) 
                                        (0613)     M8C_SetBank1
                                        (0614) 
                                        (0615) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0616)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0617)  ELSE                                       ;    No, fast mode
                                        (0618)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0619)                                             ;       no, set midpoint POR in user code, if desired
                                        (0620)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0621)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0622)   ENDIF ; 24MHz
                                        (0623)  ENDIF ; Slow Mode
                                        (0624) ENDIF ; 5.0V Operation
                                        (0625) 
                                        (0626)     M8C_SetBank0
                                        (0627) 
                                        (0628)     ;----------------------------
                                        (0629)     ; Wrap up and invoke "main"
                                        (0630)     ;----------------------------
                                        (0631) 
                                        (0632)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0633)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0634)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0635)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0636) 
                                        (0637)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0638)     ; And put decimator in full mode so it does not consume too much current.
                                        (0639)     ;
                                        (0640)     M8C_SetBank1
0133: 62 E0 03 MOV   REG[0xE0],0x3      (0641)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0642)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0646)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0647)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0648)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0649)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0650)                                    ; have been set during the boot process.
                                        (0651) IF	(TOOLCHAIN & HITECH)
                                        (0652) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0653) ELSE
                                        (0654) IF ENABLE_LJMP_TO_MAIN
                                        (0655)     ljmp  _main                    ; goto main (no return)
                                        (0656) ELSE
013E: 7C 09 B1 LCALL __UserModules_end|_main|__text_start|_main(0657)     lcall _main                    ; call main
                                        (0658) .Exit:
0141: 8F FF    JMP   0x0141             (0659)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0660) ENDIF
                                        (0661) ENDIF ; TOOLCHAIN
                                        (0662) 
                                        (0663)     ;---------------------------------
                                        (0664)     ; Library Access to Global Parms
                                        (0665)     ;---------------------------------
                                        (0666)     ;
                                        (0667)  bGetPowerSetting:
                                        (0668) _bGetPowerSetting:
                                        (0669)     ; Returns value of POWER_SETTING in the A register.
                                        (0670)     ; No inputs. No Side Effects.
                                        (0671)     ;
0143: 50 10    MOV   A,0x10             (0672)     mov   A, POWER_SETTING
0145: 7F       RET                      (0673)     ret
                                        (0674) 
                                        (0675) IF	(TOOLCHAIN & HITECH)
                                        (0676) ELSE
                                        (0677)     ;---------------------------------
                                        (0678)     ; Order Critical RAM & ROM AREAs
                                        (0679)     ;---------------------------------
                                        (0680)     ;  'TOP' is all that has been defined so far...
                                        (0681) 
                                        (0682)     ;  ROM AREAs for C CONST, static & global items
                                        (0683)     ;
                                        (0684)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
                                        (0685)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
                                        (0686) __idata_start:
                                        (0687) 
                                        (0688)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
                                        (0689) __func_lit_start:
                                        (0690) 
                                        (0691) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0692)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0693)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0694)     ; relocated by the code compressor, but the text area may shrink and
                                        (0695)     ; that moves xidata around.
                                        (0696)     ;
                                        (0697) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0698) ENDIF
                                        (0699) 
                                        (0700)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0701)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0702) 
                                        (0703)     ; CODE segment for general use
                                        (0704)     ;
                                        (0705)     AREA text (ROM, REL, CON)
                                        (0706) __text_start:
                                        (0707) 
                                        (0708)     ; RAM area usage
                                        (0709)     ;
                                        (0710)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0711) __data_start:
                                        (0712) 
                                        (0713)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0714)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0715)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0716) __bss_start:
                                        (0717) 
                                        (0718) ENDIF ; TOOLCHAIN
                                        (0719) 
                                        (0720) ; end of file boot.asm
    0146: 30       HALT  
    0147: 30       HALT  
    0148: 30       HALT  
    0149: 30       HALT  
    014A: 30       HALT  
    014B: 30       HALT  
    014C: 30       HALT  
    014D: 30       HALT  
    014E: 30       HALT  
    014F: 30       HALT  
    0150: 30       HALT  
    0151: 30       HALT  
    0152: 30       HALT  
    0153: 30       HALT  
    0154: 30       HALT  
    0155: 30       HALT  
    0156: 30       HALT  
    0157: 30       HALT  
    0158: 30       HALT  
    0159: 30       HALT  
    015A: 30       HALT  
    015B: 30       HALT  
    015C: 30       HALT  
    015D: 30       HALT  
    015E: 30       HALT  
    015F: 30       HALT  
    0160: 30       HALT  
    0161: 30       HALT  
    0162: 30       HALT  
    0163: 30       HALT  
    0164: 30       HALT  
    0165: 30       HALT  
    0166: 30       HALT  
    0167: 30       HALT  
    0168: 30       HALT  
    0169: 30       HALT  
    016A: 30       HALT  
    016B: 30       HALT  
    016C: 30       HALT  
    016D: 30       HALT  
    016E: 30       HALT  
    016F: 30       HALT  
    0170: 30       HALT  
    0171: 30       HALT  
    0172: 30       HALT  
    0173: 30       HALT  
    0174: 30       HALT  
    0175: 30       HALT  
    0176: 30       HALT  
    0177: 30       HALT  
    0178: 30       HALT  
    0179: 30       HALT  
    017A: 30       HALT  
    017B: 30       HALT  
    017C: 30       HALT  
    017D: 30       HALT  
    017E: 30       HALT  
    017F: 30       HALT  
    0180: 30       HALT  
    0181: 30       HALT  
    0182: 30       HALT  
    0183: 30       HALT  
    0184: 30       HALT  
    0185: 30       HALT  
    0186: 30       HALT  
    0187: 30       HALT  
    0188: 30       HALT  
    0189: 30       HALT  
    018A: 30       HALT  
    018B: 30       HALT  
    018C: 30       HALT  
    018D: 30       HALT  
    018E: 30       HALT  
    018F: 30       HALT  
    0190: 30       HALT  
    0191: 30       HALT  
    0192: 30       HALT  
    0193: 30       HALT  
    0194: 30       HALT  
    0195: 30       HALT  
    0196: 30       HALT  
    0197: 30       HALT  
    0198: 30       HALT  
    0199: 30       HALT  
    019A: 30       HALT  
    019B: 30       HALT  
    019C: 30       HALT  
    019D: 30       HALT  
    019E: 30       HALT  
    019F: 30       HALT  
    01A0: 23 00    AND   A,[X+0]
    01A2: 21 00    AND   A,0x0
    01A4: 22 00    AND   A,[0x0]
    01A6: 27 04 25 AND   [X+4],0x25
    01A9: 00       SWI   
    01AA: 26 00 60 AND   [0x0],0x60
    01AD: 2A 66    OR    A,[Port+89]
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.1.2306
022E: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_evalboard_Bank1
                                        (0006) export LoadConfigTBL_evalboard_Bank0
                                        (0007) export LoadConfigTBL_evalboard_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_evalboard_Bank0:
                                        (0010) ;  Instance name I2CM, User Module I2Cm
                                        (0011) ;  Instance name LCD, User Module LCD
                                        (0012) ;  Instance name Timer16, User Module Timer16
                                        (0013) ;       Instance name Timer16, Block Name TIMER16_LSB(DBB00)
                                        (0014) 	db		23h, 00h		;Timer16_CONTROL_LSB_REG(DBB00CR0)
                                        (0015) 	db		21h, 00h		;Timer16_PERIOD_LSB_REG(DBB00DR1)
                                        (0016) 	db		22h, 00h		;Timer16_COMPARE_LSB_REG(DBB00DR2)
                                        (0017) ;       Instance name Timer16, Block Name TIMER16_MSB(DBB01)
                                        (0018) 	db		27h, 04h		;Timer16_CONTROL_MSB_REG(DBB01CR0)
                                        (0019) 	db		25h, 00h		;Timer16_PERIOD_MSB_REG(DBB01DR1)
                                        (0020) 	db		26h, 00h		;Timer16_COMPARE_MSB_REG(DBB01DR2)
                                        (0021) ;  Global Register values Bank 0
                                        (0022) 	db		60h, 2ah		; AnalogColumnInputSelect register (AMX_IN)
                                        (0023) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0024) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0025) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0026) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0027) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0028) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0029) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0030) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0031) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0032) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0033) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0034) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0035) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0036) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0037) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0038) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0039) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0040) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0041) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0042) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0043) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0044) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0045) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0046) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0047) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0048) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0049) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0050) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0051) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0052) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0053) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0054) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0055) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0056) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0057) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0058) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0059) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0060) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0061) 	db		ffh
                                        (0062) LoadConfigTBL_evalboard_Bank1:
                                        (0063) ;  Instance name I2CM, User Module I2Cm
                                        (0064) ;  Instance name LCD, User Module LCD
                                        (0065) ;  Instance name Timer16, User Module Timer16
                                        (0066) ;       Instance name Timer16, Block Name TIMER16_LSB(DBB00)
                                        (0067) 	db		20h, 00h		;Timer16_FUNC_LSB_REG(DBB00FN)
                                        (0068) 	db		21h, 17h		;Timer16_INPUT_LSB_REG(DBB00IN)
                                        (0069) 	db		22h, 40h		;Timer16_OUTPUT_LSB_REG(DBB00OU)
                                        (0070) ;       Instance name Timer16, Block Name TIMER16_MSB(DBB01)
                                        (0071) 	db		24h, 20h		;Timer16_FUNC_MSB_REG(DBB01FN)
                                        (0072) 	db		25h, 37h		;Timer16_INPUT_MSB_REG(DBB01IN)
                                        (0073) 	db		26h, 40h		;Timer16_OUTPUT_MSB_REG(DBB01OU)
                                        (0074) ;  Global Register values Bank 1
                                        (0075) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0076) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0077) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0078) 	db		62h, 08h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0079) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0080) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0081) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0082) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0083) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0084) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0085) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0086) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0087) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0088) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0089) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0090) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0091) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0092) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0093) 	db		ffh
                                        (0094) AREA psoc_config(rom, rel)
                                        (0095) LoadConfigTBL_evalboard_Ordered:
                                        (0096) ;  Ordered Global Register values
                                        (0097) 	M8C_SetBank0
0230: 62 00 03 MOV   REG[0x0],0x3       (0098) 	mov	reg[00h], 03h		; Port_0_Data register (PRT0DR)
0233: 71 10    OR    F,0x10             
                                        (0099) 	M8C_SetBank1
0235: 62 00 03 MOV   REG[0x0],0x3       (0100) 	mov	reg[00h], 03h		; Port_0_DriveMode_0 register (PRT0DM0)
0238: 62 01 FF MOV   REG[0x1],0xFF      (0101) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
023B: 70 EF    AND   F,0xEF             
                                        (0102) 	M8C_SetBank0
023D: 62 03 FC MOV   REG[0x3],0xFC      (0103) 	mov	reg[03h], fch		; Port_0_DriveMode_2 register (PRT0DM2)
0240: 62 02 00 MOV   REG[0x2],0x0       (0104) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0243: 71 10    OR    F,0x10             
                                        (0105) 	M8C_SetBank1
0245: 62 02 00 MOV   REG[0x2],0x0       (0106) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0248: 62 03 00 MOV   REG[0x3],0x0       (0107) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
024B: 70 EF    AND   F,0xEF             
                                        (0108) 	M8C_SetBank0
024D: 62 01 00 MOV   REG[0x1],0x0       (0109) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0250: 62 04 00 MOV   REG[0x4],0x0       (0110) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0253: 71 10    OR    F,0x10             
                                        (0111) 	M8C_SetBank1
0255: 62 04 00 MOV   REG[0x4],0x0       (0112) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
0258: 62 05 FF MOV   REG[0x5],0xFF      (0113) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
025B: 70 EF    AND   F,0xEF             
                                        (0114) 	M8C_SetBank0
025D: 62 07 FF MOV   REG[0x7],0xFF      (0115) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0260: 62 06 00 MOV   REG[0x6],0x0       (0116) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0263: 71 10    OR    F,0x10             
                                        (0117) 	M8C_SetBank1
0265: 62 06 00 MOV   REG[0x6],0x0       (0118) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0268: 62 07 00 MOV   REG[0x7],0x0       (0119) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
026B: 70 EF    AND   F,0xEF             
                                        (0120) 	M8C_SetBank0
026D: 62 05 00 MOV   REG[0x5],0x0       (0121) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0270: 62 08 00 MOV   REG[0x8],0x0       (0122) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0273: 71 10    OR    F,0x10             
                                        (0123) 	M8C_SetBank1
0275: 62 08 7F MOV   REG[0x8],0x7F      (0124) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0278: 62 09 80 MOV   REG[0x9],0x80      (0125) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
027B: 70 EF    AND   F,0xEF             
                                        (0126) 	M8C_SetBank0
027D: 62 0B 80 MOV   REG[0xB],0x80      (0127) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0280: 62 0A 00 MOV   REG[0xA],0x0       (0128) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0283: 71 10    OR    F,0x10             
                                        (0129) 	M8C_SetBank1
0285: 62 0A 00 MOV   REG[0xA],0x0       (0130) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0288: 62 0B 00 MOV   REG[0xB],0x0       (0131) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
028B: 70 EF    AND   F,0xEF             
                                        (0132) 	M8C_SetBank0
028D: 62 09 00 MOV   REG[0x9],0x0       (0133) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0290: 62 0C 00 MOV   REG[0xC],0x0       (0134) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0293: 71 10    OR    F,0x10             
                                        (0135) 	M8C_SetBank1
0295: 62 0C 00 MOV   REG[0xC],0x0       (0136) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0298: 62 0D 00 MOV   REG[0xD],0x0       (0137) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
029B: 70 EF    AND   F,0xEF             
                                        (0138) 	M8C_SetBank0
029D: 62 0F 00 MOV   REG[0xF],0x0       (0139) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02A0: 62 0E 00 MOV   REG[0xE],0x0       (0140) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02A3: 71 10    OR    F,0x10             
                                        (0141) 	M8C_SetBank1
02A5: 62 0E 00 MOV   REG[0xE],0x0       (0142) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02A8: 62 0F 00 MOV   REG[0xF],0x0       (0143) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02AB: 70 EF    AND   F,0xEF             
                                        (0144) 	M8C_SetBank0
02AD: 62 0D 00 MOV   REG[0xD],0x0       (0145) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02B0: 62 10 00 MOV   REG[0x10],0x0      (0146) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02B3: 71 10    OR    F,0x10             
                                        (0147) 	M8C_SetBank1
02B5: 62 10 00 MOV   REG[0x10],0x0      (0148) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02B8: 62 11 00 MOV   REG[0x11],0x0      (0149) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02BB: 70 EF    AND   F,0xEF             
                                        (0150) 	M8C_SetBank0
02BD: 62 13 00 MOV   REG[0x13],0x0      (0151) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02C0: 62 12 00 MOV   REG[0x12],0x0      (0152) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02C3: 71 10    OR    F,0x10             
                                        (0153) 	M8C_SetBank1
02C5: 62 12 00 MOV   REG[0x12],0x0      (0154) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02C8: 62 13 00 MOV   REG[0x13],0x0      (0155) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02CB: 70 EF    AND   F,0xEF             
                                        (0156) 	M8C_SetBank0
02CD: 62 11 00 MOV   REG[0x11],0x0      (0157) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02D0: 62 14 00 MOV   REG[0x14],0x0      (0158) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02D3: 71 10    OR    F,0x10             
                                        (0159) 	M8C_SetBank1
02D5: 62 14 00 MOV   REG[0x14],0x0      (0160) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02D8: 62 15 00 MOV   REG[0x15],0x0      (0161) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02DB: 70 EF    AND   F,0xEF             
                                        (0162) 	M8C_SetBank0
02DD: 62 17 00 MOV   REG[0x17],0x0      (0163) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02E0: 62 16 00 MOV   REG[0x16],0x0      (0164) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02E3: 71 10    OR    F,0x10             
                                        (0165) 	M8C_SetBank1
02E5: 62 16 00 MOV   REG[0x16],0x0      (0166) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02E8: 62 17 00 MOV   REG[0x17],0x0      (0167) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02EB: 70 EF    AND   F,0xEF             
                                        (0168) 	M8C_SetBank0
02ED: 62 15 00 MOV   REG[0x15],0x0      (0169) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02F0: 62 18 00 MOV   REG[0x18],0x0      (0170) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
02F3: 71 10    OR    F,0x10             
                                        (0171) 	M8C_SetBank1
02F5: 62 18 00 MOV   REG[0x18],0x0      (0172) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
02F8: 62 19 00 MOV   REG[0x19],0x0      (0173) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
02FB: 70 EF    AND   F,0xEF             
                                        (0174) 	M8C_SetBank0
02FD: 62 1B 00 MOV   REG[0x1B],0x0      (0175) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0300: 62 1A 00 MOV   REG[0x1A],0x0      (0176) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0303: 71 10    OR    F,0x10             
                                        (0177) 	M8C_SetBank1
0305: 62 1A 00 MOV   REG[0x1A],0x0      (0178) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0308: 62 1B 00 MOV   REG[0x1B],0x0      (0179) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
030B: 70 EF    AND   F,0xEF             
                                        (0180) 	M8C_SetBank0
030D: 62 19 00 MOV   REG[0x19],0x0      (0181) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0310: 62 1C 00 MOV   REG[0x1C],0x0      (0182) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0313: 71 10    OR    F,0x10             
                                        (0183) 	M8C_SetBank1
0315: 62 1C 00 MOV   REG[0x1C],0x0      (0184) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0318: 62 1D 00 MOV   REG[0x1D],0x0      (0185) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
031B: 70 EF    AND   F,0xEF             
                                        (0186) 	M8C_SetBank0
031D: 62 1F 00 MOV   REG[0x1F],0x0      (0187) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0320: 62 1E 00 MOV   REG[0x1E],0x0      (0188) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0323: 71 10    OR    F,0x10             
                                        (0189) 	M8C_SetBank1
0325: 62 1E 00 MOV   REG[0x1E],0x0      (0190) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0328: 62 1F 00 MOV   REG[0x1F],0x0      (0191) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
032B: 70 EF    AND   F,0xEF             
                                        (0192) 	M8C_SetBank0
032D: 62 1D 00 MOV   REG[0x1D],0x0      (0193) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0330: 70 EF    AND   F,0xEF             
                                        (0194) 	M8C_SetBank0
0332: 7F       RET                      (0195) 	ret
                                        (0196) 
                                        (0197) 
                                        (0198) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.1.2306
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_evalboard
                                        (0026) export _LoadConfig_evalboard
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_0_DriveMode_0_SHADE
                                        (0030) export _Port_0_DriveMode_0_SHADE
                                        (0031) export Port_0_DriveMode_1_SHADE
                                        (0032) export _Port_0_DriveMode_1_SHADE
                                        (0033) export Port_2_Data_SHADE
                                        (0034) export _Port_2_Data_SHADE
                                        (0035) export Port_2_DriveMode_0_SHADE
                                        (0036) export _Port_2_DriveMode_0_SHADE
                                        (0037) export Port_2_DriveMode_1_SHADE
                                        (0038) export _Port_2_DriveMode_1_SHADE
                                        (0039) 
                                        (0040) 
                                        (0041) export NO_SHADOW
                                        (0042) export _NO_SHADOW
                                        (0043) 
                                        (0044) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0045) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0046) 
                                        (0047) AREA psoc_config(rom, rel)
                                        (0048) 
                                        (0049) ;---------------------------------------------------------------------------
                                        (0050) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0051) ;                  parameters handled by boot code, like CPU speed). This
                                        (0052) ;                  function can be called from user code, but typically it
                                        (0053) ;                  is only called from boot.
                                        (0054) ;
                                        (0055) ;       INPUTS: None.
                                        (0056) ;      RETURNS: Nothing.
                                        (0057) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0058) ;               In the large memory model currently only the page
                                        (0059) ;               pointer registers listed below are modified.  This does
                                        (0060) ;               not guarantee that in future implementations of this
                                        (0061) ;               function other page pointer registers will not be
                                        (0062) ;               modified.
                                        (0063) ;          
                                        (0064) ;               Page Pointer Registers Modified: 
                                        (0065) ;               CUR_PP
                                        (0066) ;
                                        (0067) _LoadConfigInit:
                                        (0068)  LoadConfigInit:
                                        (0069)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0070)     
0333: 55 00 03 MOV   [0x0],0x3          (0071) 	mov		[Port_0_Data_SHADE], 3h
0336: 55 02 03 MOV   [0x2],0x3          (0072) 	mov		[Port_0_DriveMode_0_SHADE], 3h
0339: 55 03 FF MOV   [0x3],0xFF         (0073) 	mov		[Port_0_DriveMode_1_SHADE], ffh
033C: 55 01 00 MOV   [0x1],0x0          (0074) 	mov		[Port_2_Data_SHADE], 0h
033F: 55 04 7F MOV   [0x4],0x7F         (0075) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0342: 55 05 80 MOV   [0x5],0x80         (0076) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0077) 
0345: 7C 03 4C LCALL 0x034C             (0078) 	lcall	LoadConfig_evalboard
0348: 7C 02 2E LCALL 0x022E             (0079) 	lcall	LoadConfigTBL_evalboard_Ordered
                                        (0080) 
                                        (0081) 
                                        (0082)     RAM_EPILOGUE RAM_USE_CLASS_4
034B: 7F       RET                      (0083)     ret
                                        (0084) 
                                        (0085) ;---------------------------------------------------------------------------
                                        (0086) ; Load Configuration evalboard
                                        (0087) ;
                                        (0088) ;    Load configuration registers for evalboard.
                                        (0089) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0090) ;
                                        (0091) ;       INPUTS: None.
                                        (0092) ;      RETURNS: Nothing.
                                        (0093) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0094) ;               modified as may the Page Pointer registers!
                                        (0095) ;               In the large memory model currently only the page
                                        (0096) ;               pointer registers listed below are modified.  This does
                                        (0097) ;               not guarantee that in future implementations of this
                                        (0098) ;               function other page pointer registers will not be
                                        (0099) ;               modified.
                                        (0100) ;          
                                        (0101) ;               Page Pointer Registers Modified: 
                                        (0102) ;               CUR_PP
                                        (0103) ;
                                        (0104) _LoadConfig_evalboard:
                                        (0105)  LoadConfig_evalboard:
                                        (0106)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0107) 
034C: 10       PUSH  X                  (0108) 	push	x
034D: 70 EF    AND   F,0xEF             
                                        (0109)     M8C_SetBank0                    ; Force bank 0
034F: 50 00    MOV   A,0x0              (0110)     mov     a, 0                    ; Specify bank 0
0351: 67       ASR   A                  (0111)     asr     a                       ; Store in carry flag
                                        (0112)                                     ; Load bank 0 table:
0352: 50 01    MOV   A,0x1              (0113)     mov     A, >LoadConfigTBL_evalboard_Bank0
0354: 57 A0    MOV   X,0xA0             (0114)     mov     X, <LoadConfigTBL_evalboard_Bank0
0356: 7C 03 67 LCALL 0x0367             (0115)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0116) 
0359: 50 01    MOV   A,0x1              (0117)     mov     a, 1                    ; Specify bank 1
035B: 67       ASR   A                  (0118)     asr     a                       ; Store in carry flag
                                        (0119)                                     ; Load bank 1 table:
035C: 50 01    MOV   A,0x1              (0120)     mov     A, >LoadConfigTBL_evalboard_Bank1
035E: 57 FB    MOV   X,0xFB             (0121)     mov     X, <LoadConfigTBL_evalboard_Bank1
0360: 7C 03 67 LCALL 0x0367             (0122)     lcall   LoadConfig              ; Load the bank 1 values
0363: 70 EF    AND   F,0xEF             
                                        (0123) 
                                        (0124)     M8C_SetBank0                    ; Force return to bank 0
0365: 20       POP   X                  (0125) 	pop		x
                                        (0126) 
                                        (0127)     RAM_EPILOGUE RAM_USE_CLASS_4
0366: 7F       RET                      (0128)     ret
                                        (0129) 
                                        (0130) 
                                        (0131) 
                                        (0132) 
                                        (0133) ;---------------------------------------------------------------------------
                                        (0134) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0135) ;              pairs. Terminate on address=0xFF.
                                        (0136) ;
                                        (0137) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0138) ;           Flag Register Carry bit encodes the Register Bank
                                        (0139) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0140) ;
                                        (0141) ;  RETURNS: nothing.
                                        (0142) ;
                                        (0143) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0144) ;                X-3 Temporary store for register address
                                        (0145) ;                X-2 LSB of config table address
                                        (0146) ;                X-1 MSB of config table address
                                        (0147) ;
                                        (0148) LoadConfig:
                                        (0149)     RAM_PROLOGUE RAM_USE_CLASS_2
0367: 38 02    ADD   SP,0x2             (0150)     add     SP, 2                   ; Set up local vars
0369: 10       PUSH  X                  (0151)     push    X                       ; Save config table address on stack
036A: 08       PUSH  A                  (0152)     push    A
036B: 4F       MOV   X,SP               (0153)     mov     X, SP
036C: 56 FC 00 MOV   [X-4],0x0          (0154)     mov     [X-4], 0                ; Set default Destination to Bank 0
036F: D0 04    JNC   0x0374             (0155)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0371: 56 FC 01 MOV   [X-4],0x1          (0156)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0157) .BankSelectSaved:
0374: 18       POP   A                  (0158)     pop     A
0375: 20       POP   X                  (0159)     pop     X
0376: 70 EF    AND   F,0xEF             
0378: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0160) 
                                        (0161) LoadConfigLp:
                                        (0162)     M8C_SetBank0                    ; Switch to bank 0
                                        (0163)     M8C_ClearWDT                    ; Clear the watchdog for long inits
037B: 10       PUSH  X                  (0164)     push    X                       ; Preserve the config table address
037C: 08       PUSH  A                  (0165)     push    A
037D: 28       ROMX                     (0166)     romx                            ; Load register address from table
037E: 39 FF    CMP   A,0xFF             (0167)     cmp     A, END_CONFIG_TABLE     ; End of table?
0380: A0 1F    JZ    0x03A0             (0168)     jz      EndLoadConfig           ;   Yes, go wrap it up
0382: 4F       MOV   X,SP               (0169)     mov     X, SP                   ;
0383: 48 FC 01 TST   [X-4],0x1          (0170)     tst     [X-4], 1                ; Loading IO Bank 1?
0386: A0 03    JZ    0x038A             (0171)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0388: 71 10    OR    F,0x10             
                                        (0172)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0173) .IOBankNowSet:
038A: 54 FD    MOV   [X-3],A            (0174)     mov     [X-3], A                ; Stash the register address
038C: 18       POP   A                  (0175)     pop     A                       ; Retrieve the table address
038D: 20       POP   X                  (0176)     pop     X
038E: 75       INC   X                  (0177)     inc     X                       ; Advance to the data byte
038F: 09 00    ADC   A,0x0              (0178)     adc     A, 0
0391: 10       PUSH  X                  (0179)     push    X                       ; Save the config table address again
0392: 08       PUSH  A                  (0180)     push    A
0393: 28       ROMX                     (0181)     romx                            ; load config data from the table
0394: 4F       MOV   X,SP               (0182)     mov     X, SP                   ; retrieve the register address
0395: 59 FD    MOV   X,[X-3]            (0183)     mov     X, [X-3]
0397: 61 00    MOV   REG[X+0x0],A       (0184)     mov     reg[X], A               ; Configure the register
0399: 18       POP   A                  (0185)     pop     A                       ; retrieve the table address
039A: 20       POP   X                  (0186)     pop     X
039B: 75       INC   X                  (0187)     inc     X                       ; advance to next table entry
039C: 09 00    ADC   A,0x0              (0188)     adc     A, 0
039E: 8F D7    JMP   0x0376             (0189)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0190) EndLoadConfig:
03A0: 38 FC    ADD   SP,0xFC            (0191)     add     SP, -4
03A2: 70 3F    AND   F,0x3F             
03A4: 71 C0    OR    F,0xC0             
                                        (0192)     RAM_EPILOGUE RAM_USE_CLASS_2
03A6: 7F       RET                      (0193)     ret
                                        (0194) 
                                        (0195) AREA InterruptRAM(ram, rel)
                                        (0196) 
                                        (0197) NO_SHADOW:
                                        (0198) _NO_SHADOW:
                                        (0199) ; write only register shadows
                                        (0200) _Port_0_Data_SHADE:
                                        (0201) Port_0_Data_SHADE:	BLK	1
                                        (0202) _Port_2_Data_SHADE:
                                        (0203) Port_2_Data_SHADE:	BLK	1
                                        (0204) _Port_0_DriveMode_0_SHADE:
                                        (0205) Port_0_DriveMode_0_SHADE:	BLK	1
                                        (0206) _Port_0_DriveMode_1_SHADE:
                                        (0207) Port_0_DriveMode_1_SHADE:	BLK	1
                                        (0208) _Port_2_DriveMode_0_SHADE:
                                        (0209) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0210) _Port_2_DriveMode_1_SHADE:
                                        (0211) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0212) 
FILE: lib\timer16int.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16INT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2011/6/28 at 6:10:8
                                        (0005) ;;  Generated by PSoC Designer 5.1.2306
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer16.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer16_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer16_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer16_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
03A7: 7D 0A 32 LJMP  _Timer             (0068) 		ljmp _Timer   
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ; Insert your custom assembly code above this banner
                                        (0071)    ;---------------------------------------------------
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert a lcall to a C function below this banner
                                        (0075)    ; and un-comment the lines between these banners
                                        (0076)    ;---------------------------------------------------
                                        (0077)    
                                        (0078)    ;PRESERVE_CPU_CONTEXT
                                        (0079)    ;lcall _My_C_Function
                                        (0080)    ;RESTORE_CPU_CONTEXT
                                        (0081)    
                                        (0082)    ;---------------------------------------------------
                                        (0083)    ; Insert a lcall to a C function above this banner
                                        (0084)    ; and un-comment the lines between these banners
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0087) 
03AA: 7E       RETI                     (0088)    reti
                                        (0089) 
                                        (0090) 
                                        (0091) ; end of file Timer16INT.asm
FILE: lib\timer16.asm                   (0001) ;;*****************************************************************************
03AB: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16.asm
                                        (0004) ;;   Version: 2.6, Updated on 2011/6/28 at 6:10:8
                                        (0005) ;;  Generated by PSoC Designer 5.1.2306
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer16.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer16_EnableInt
                                        (0030) export _Timer16_EnableInt
                                        (0031) export  Timer16_DisableInt
                                        (0032) export _Timer16_DisableInt
                                        (0033) export  Timer16_Start
                                        (0034) export _Timer16_Start
                                        (0035) export  Timer16_Stop
                                        (0036) export _Timer16_Stop
                                        (0037) export  Timer16_WritePeriod
                                        (0038) export _Timer16_WritePeriod
                                        (0039) export  Timer16_WriteCompareValue
                                        (0040) export _Timer16_WriteCompareValue
                                        (0041) export  Timer16_wReadCompareValue
                                        (0042) export _Timer16_wReadCompareValue
                                        (0043) export  Timer16_wReadTimer
                                        (0044) export _Timer16_wReadTimer
                                        (0045) export  Timer16_wReadTimerSaveCV
                                        (0046) export _Timer16_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer16_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer16_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer16_ReadTimer         ; deprecated
                                        (0053) export _wTimer16_ReadTimer         ; deprecated
                                        (0054) export  wTimer16_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer16_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer16_ReadCounter       ; obsolete
                                        (0058) export _wTimer16_ReadCounter       ; obsolete
                                        (0059) export  wTimer16_CaptureCounter    ; obsolete
                                        (0060) export _wTimer16_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA evalboard_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer16_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer16_EnableInt:
                                        (0098) _Timer16_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer16_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
03AE: 7F       RET                      (0102)    ret
03AF: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer16_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer16_DisableInt:
                                        (0126) _Timer16_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer16_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
03B2: 7F       RET                      (0130)    ret
03B3: 43 23 01 OR    REG[0x23],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer16_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer16_Start:
                                        (0154) _Timer16_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer16_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
03B6: 7F       RET                      (0158)    ret
03B7: 41 23 FE AND   REG[0x23],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer16_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer16_Stop:
                                        (0182) _Timer16_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer16_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
03BA: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer16_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer16_WritePeriod:
                                        (0211) _Timer16_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
03BB: 60 21    MOV   REG[0x21],A        (0213)    mov   reg[Timer16_PERIOD_LSB_REG], A
03BD: 5B       MOV   A,X                (0214)    mov   A, X
03BE: 60 25    MOV   REG[0x25],A        (0215)    mov   reg[Timer16_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
03C0: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer16_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer16_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer16_WriteCompareValue:
                                        (0243) _Timer16_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
03C1: 60 22    MOV   REG[0x22],A        (0245)    mov   reg[Timer16_COMPARE_LSB_REG], A
03C3: 5B       MOV   A,X                (0246)    mov   A, X
03C4: 60 26    MOV   REG[0x26],A        (0247)    mov   reg[Timer16_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
03C6: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer16_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer16_wReadCompareValue:
                                        (0272) _Timer16_wReadCompareValue:
                                        (0273)  wTimer16_ReadCompareValue:                      ; this name deprecated
                                        (0274) _wTimer16_ReadCompareValue:                      ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
03C7: 5D 26    MOV   A,REG[0x26]        (0276)    mov   A, reg[Timer16_COMPARE_MSB_REG]
03C9: 5C       MOV   X,A                (0277)    mov   X, A
03CA: 5D 22    MOV   A,REG[0x22]        (0278)    mov   A, reg[Timer16_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
03CC: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer16_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer16_wReadTimerSaveCV:
                                        (0321) _Timer16_wReadTimerSaveCV:
                                        (0322)  wTimer16_ReadTimerSaveCV:                       ; this name deprecated
                                        (0323) _wTimer16_ReadTimerSaveCV:                       ; this name deprecated
                                        (0324)  wTimer16_ReadCounter:                           ; this name deprecated
                                        (0325) _wTimer16_ReadCounter:                           ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
03CD: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
03CE: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
03D0: 5D 23    MOV   A,REG[0x23]        (0334)    mov   A, reg[Timer16_CONTROL_LSB_REG]         ; save the Control register
03D2: 08       PUSH  A                  (0335)    push  A
03D3: 5D 22    MOV   A,REG[0x22]        (0336)    mov   A, reg[Timer16_COMPARE_LSB_REG]         ; save the Compare register
03D5: 08       PUSH  A                  (0337)    push  A
03D6: 5D 26    MOV   A,REG[0x26]        (0338)    mov   A, reg[Timer16_COMPARE_MSB_REG]
03D8: 08       PUSH  A                  (0339)    push  A
03D9: 5D 20    MOV   A,REG[0x20]        (0340)    mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
03DB: 5D 26    MOV   A,REG[0x26]        (0342)    mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Now grab DR2 (DR0) and save
03DD: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
03DF: 5D 22    MOV   A,REG[0x22]        (0344)    mov   A, reg[Timer16_COMPARE_LSB_REG]
03E1: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
03E3: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
03E5: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
03E8: A0 03    JZ    0x03EC             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
03EA: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
03EC: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
03EE: 70 FE    AND   F,0xFE             
03F0: 41 23 FE AND   REG[0x23],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer16_Stop_M                                ; Disable (stop) the timer
03F3: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
03F4: 60 26    MOV   REG[0x26],A        (0355)    mov   reg[Timer16_COMPARE_MSB_REG], A
03F6: 18       POP   A                  (0356)    pop   A
03F7: 60 22    MOV   REG[0x22],A        (0357)    mov   reg[Timer16_COMPARE_LSB_REG], A
03F9: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
03FA: 60 23    MOV   REG[0x23],A        (0359)    mov   reg[Timer16_CONTROL_LSB_REG], A
03FC: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
03FD: 20       POP   X                  (0361)    pop   X
03FE: 70 3F    AND   F,0x3F             
0400: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
0402: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer16_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer16_wReadTimer:
                                        (0397) _Timer16_wReadTimer:
                                        (0398)  wTimer16_ReadTimer:                             ; this name deprecated
                                        (0399) _wTimer16_ReadTimer:                             ; this name deprecated
                                        (0400)  wTimer16_CaptureCounter:                        ; this name deprecated
                                        (0401) _wTimer16_CaptureCounter:                        ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
0403: 5D 20    MOV   A,REG[0x20]        (0404)    mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
0405: 5D 26    MOV   A,REG[0x26]        (0407)    mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Return DR2 (actually DR0)
0407: 5C       MOV   X,A                (0408)    mov   X, A
0408: 5D 22    MOV   A,REG[0x22]        (0409)    mov   A, reg[Timer16_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
040A: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer16.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2011/6/28 at 6:9:34
                                        (0005) ;;  Generated by PSoC Designer 5.1.2306
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
040B: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
040C: 10       PUSH  X                  (0209)     push  X
040D: 28       ROMX                     (0210)     romx                               ; Get character from ROM
040E: B0 04    JNZ   0x0413             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0410: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0411: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0412: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0413: 90 44    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
0415: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0416: 18       POP   A                  (0220)     pop   A
0417: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0418: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
041A: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
041B: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
042D: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
042E: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
042F: 67       ASR   A                  (0262)     asr   A
0430: 67       ASR   A                  (0263)     asr   A
0431: 67       ASR   A                  (0264)     asr   A
0432: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0434: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0436: 90 21    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
0438: 18       POP   A                  (0268)     pop   A                            ; Restore value
0439: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
043B: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
043D: 90 1A    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
043F: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0440: 4B       SWAP  A,X                (0305)     swap  A,X
0441: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0443: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0444: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0446: 7F       RET                      (0310)     ret
0447: 70 BF    AND   F,0xBF             
0449: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
044B: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
044D: A0 06    JZ    0x0454             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
044F: 90 08    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
0451: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0452: 8F F8    JMP   0x044B             (0351)     jmp   .Loop_PrString               ; Go get next character
0454: 70 3F    AND   F,0x3F             
0456: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0458: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0459: 90 65    CALL  0x04C0             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
045B: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
045C: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
045D: 67       ASR   A                  (0390)     asr   A
045E: 67       ASR   A                  (0391)     asr   A
045F: 67       ASR   A                  (0392)     asr   A
0460: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0462: 90 3B    CALL  0x049F             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0464: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0465: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0467: 40       NOP                      (0397)     nop
0468: 40       NOP                      (0398)     nop
0469: 40       NOP                      (0399)     nop
046A: 90 33    CALL  0x049F             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
046C: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
046D: 90 51    CALL  0x04C0             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
046F: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0470: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0471: 67       ASR   A                  (0436)     asr   A
0472: 67       ASR   A                  (0437)     asr   A
0473: 67       ASR   A                  (0438)     asr   A
0474: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0476: 90 09    CALL  0x0481             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0478: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0479: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
047B: 40       NOP                      (0443)     nop
047C: 40       NOP                      (0444)     nop
047D: 40       NOP                      (0445)     nop
047E: 90 01    CALL  0x0481             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0480: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0481: 08       PUSH  A                  (0477)     push  A
0482: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0485: 26 01 80 AND   [0x1],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0488: 51 01    MOV   A,[0x1]            (0480)     mov   A,[Port_2_Data_SHADE]
048A: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
048C: 18       POP   A                  (0483)     pop   A
048D: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
048F: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0491: 2A 01    OR    A,[0x1]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0493: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0495: 53 01    MOV   [0x1],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0497: 40       NOP                      (0489)     nop
0498: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
049A: 53 01    MOV   [0x1],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
049C: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
049E: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
049F: 08       PUSH  A                  (0523)     push  A
04A0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
04A3: 26 01 80 AND   [0x1],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
04A6: 2E 01 20 OR    [0x1],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
04A9: 51 01    MOV   A,[0x1]            (0527)     mov   A,[Port_2_Data_SHADE]
04AB: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
04AD: 18       POP   A                  (0530)     pop   A
04AE: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
04B0: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
04B2: 2A 01    OR    A,[0x1]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
04B4: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
04B6: 53 01    MOV   [0x1],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
04B8: 40       NOP                      (0536)     NOP
04B9: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
04BB: 53 01    MOV   [0x1],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
04BD: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
04BF: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
04C0: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
04C1: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
04C4: 26 01 80 AND   [0x1],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
04C7: 51 01    MOV   A,[0x1]            (0574)     mov   A,[Port_2_Data_SHADE]
04C9: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
04CB: 26 04 F0 AND   [0x4],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
04CE: 51 04    MOV   A,[0x4]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
04D0: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
04D2: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
04D4: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
04D6: 2E 01 40 OR    [0x1],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
04D9: 51 01    MOV   A,[0x1]            (0584)     mov   A,[Port_2_Data_SHADE]
04DB: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
04DD: 40       NOP                      (0586)     NOP
                                        (0587) 
04DE: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
04DF: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
04E1: 2E 01 50 OR    [0x1],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
04E4: 51 01    MOV   A,[0x1]            (0593)     mov   A,[Port_2_Data_SHADE]
04E6: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
04E8: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
04E9: 40       NOP                      (0597)     nop
04EA: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
04EC: 08       PUSH  A                  (0610)     push  A
04ED: 26 01 C0 AND   [0x1],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
04F0: 51 01    MOV   A,[0x1]            (0612)     mov   A,[Port_2_Data_SHADE]
04F2: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
04F4: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
04F5: 40       NOP                      (0616)     nop                                    ; fastest PSoC
04F6: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
04F7: 2E 01 50 OR    [0x1],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
04FA: 51 01    MOV   A,[0x1]            (0620)     mov   A,[Port_2_Data_SHADE]
04FC: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
04FE: 40       NOP                      (0623)     nop
04FF: 40       NOP                      (0624)     nop
                                        (0625) 
0500: 26 01 C0 AND   [0x1],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0503: 51 01    MOV   A,[0x1]            (0627)     mov   A,[Port_2_Data_SHADE]
0505: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0507: 18       POP   A                  (0630)     pop   A
0508: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
050A: A0 04    JZ    0x050F             (0633)     jz    .UNLOCK
050C: 79       DEC   X                  (0634)     dec   X
050D: BF D3    JNZ   0x04E1             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
050F: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0510: 2E 04 7F OR    [0x4],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0513: 51 04    MOV   A,[0x4]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0515: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0517: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0519: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
051B: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
051C: 7F       RET                      (0646)     ret
051D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0520: 26 04 80 AND   [0x4],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0523: 2E 04 7F OR    [0x4],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0526: 26 05 80 AND   [0x5],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
0529: 51 04    MOV   A,[0x4]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
052B: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
052D: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
052F: 51 05    MOV   A,[0x5]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0531: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0533: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0535: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0537: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
0539: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
053B: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
053D: 50 03    MOV   A,0x3              (0701)     mov   A,03h
053F: 9F 40    CALL  0x0481             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0541: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0543: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0545: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0547: 9F 38    CALL  0x0481             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0549: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
054B: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
054D: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
054F: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0551: 9F 2E    CALL  0x0481             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0553: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0555: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0557: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0559: 9F 26    CALL  0x0481             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
055B: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
055D: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
055F: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0561: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
0563: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0565: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0567: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0569: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
056B: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
056D: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
056F: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0571: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0573: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0575: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0577: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0579: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
057B: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
057D: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
057F: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0581: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0583: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0585: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0587: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0589: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
058B: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0590: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0592: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0593: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0595: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0596: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0598: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0599: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
059B: 70 3F    AND   F,0x3F             
059D: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
059F: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
05A0: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
05A2: 78       DEC   A                  (0828)     dec   A
05A3: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
05A5: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
05AE: 08       PUSH  A                  (0871)     push  A
05AF: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
05B1: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
05B3: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
05B5: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
05B7: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
05B9: D0 06    JNC   0x05C0             (0877)     jnc   .Delay50u_End
05BB: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
05BD: 78       DEC   A                  (0880)     dec   A                              ; [4]
05BE: BF FE    JNZ   0x05BD             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
05C0: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
05C1: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
05C2: 4F       MOV   X,SP               (1015)     mov   X, SP
05C3: 10       PUSH  X                  (1016)     push  X
05C4: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
05C6: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
05C8: 70 3F    AND   F,0x3F             
05CA: 71 C0    OR    F,0xC0             
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
05CC: 9F C2    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
05CE: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
05CF: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
05D2: B0 05    JNZ   0x05D8             (1026)     jnz   .LCD_CHECK1
05D4: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
05D6: 80 11    JMP   0x05E8             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
05D8: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
05DB: D0 07    JNC   0x05E3             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
05DD: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
05DF: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
05E1: 80 06    JMP   0x05E8             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
05E3: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
05E5: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
05E8: 9E 6F    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
05EA: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
05EC: BF E2    JNZ   0x05CF             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
05EE: 70 3F    AND   F,0x3F             
05F0: 71 C0    OR    F,0xC0             
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
05F2: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
05F3: 4F       MOV   X,SP               (1168)     mov   X, SP
05F4: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
05F6: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
05F8: 08       PUSH  A                  (1172)     push  A
05F9: FF 91    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
05FB: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
05FD: 9E 6E    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
05FF: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
0602: B0 05    JNZ   0x0608             (1177)     jnz   .VBG_NZ_SEG
0604: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
0606: 80 13    JMP   0x061A             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
0608: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
060B: D0 09    JNC   0x0615             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
060D: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
060F: 78       DEC   A                  (1185)     dec   A
0610: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
0613: 80 06    JMP   0x061A             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0615: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
0618: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
061A: 9E 3D    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(1194)     call  LCD_WriteData                ; Write value
061C: 18       POP   A                  (1195)     pop   A
061D: 78       DEC   A                  (1196)     dec   A
061E: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0620: BF D7    JNZ   0x05F8             (1198)     jnz   .VBG_LOOP
0622: 70 3F    AND   F,0x3F             
0624: 71 C0    OR    F,0xC0             
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
0626: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
0627: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
0628: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
0629: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
062A: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
062C: 9E 3F    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
062E: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0631: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0634: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
0636: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
0638: D0 05    JNC   0x063E             (1251)     jnc   .VBG_SOLID
063A: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
063C: 80 03    JMP   0x0640             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
063E: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0640: 9E 17    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(1257)     call  LCD_WriteData                ; character data
0642: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0644: BF EF    JNZ   0x0634             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
0646: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
0648: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
064B: BF E5    JNZ   0x0631             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
064D: 18       POP   A                  (1264)     pop  A
064E: 18       POP   A                  (1265)     pop  A
064F: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0651: 9E 1A    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
0653: 70 3F    AND   F,0x3F             
0655: 71 C0    OR    F,0xC0             
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
0657: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
0666: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
0667: 38 03    ADD   SP,0x3             (1320)     add   SP,3
0669: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
066B: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
066D: 9D FE    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
066F: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0672: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0675: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
0677: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
067A: B0 05    JNZ   0x0680             (1332)     jnz   .BG_OTHER
067C: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
067E: 80 03    JMP   0x0682             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0680: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0682: 9D D5    CALL  _LCD_WriteData|_LCD_Write_Data|LCD_WriteData|LCD_Write_Data(1338)     call  LCD_WriteData
0684: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0686: BF EE    JNZ   0x0675             (1340)     jnz   .BG_Loop2
0688: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
068A: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
068D: BF E4    JNZ   0x0672             (1343)     jnz   .BG_Loop1
                                        (1344) 
068F: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0691: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0693: 9D D8    CALL  _LCD_Control       (1347)     call  LCD_Control
0695: 70 3F    AND   F,0x3F             
0697: 71 C0    OR    F,0xC0             
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0699: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\i2cm.asm                      (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
069A: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: I2CM.asm
                                        (0004) ;;   Version: 1.4, Updated on 2011/6/28 at 6:9:30
                                        (0005) ;;  Generated by PSoC Designer 5.1.2306
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cm User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CM.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) export   I2CM_Start
                                        (0031) export  _I2CM_Start
                                        (0032) export   I2CM_Stop
                                        (0033) export  _I2CM_Stop
                                        (0034) export   I2CM_fSendRepeatStart
                                        (0035) export  _I2CM_fSendRepeatStart
                                        (0036) export   I2CM_fSendStart
                                        (0037) export  _I2CM_fSendStart
                                        (0038) export   I2CM_SendStop
                                        (0039) export  _I2CM_SendStop
                                        (0040) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0041) export  _I2CM_fReadBytes
                                        (0042) export  _I2CM_bWriteBytes
                                        (0043) export  _I2CM_bWriteCBytes
                                        (0044) 
                                        (0045) export   I2CM_fWrite
                                        (0046) export  _I2CM_fWrite
                                        (0047) 
                                        (0048) export   I2CM_bRead
                                        (0049) export  _I2CM_bRead
                                        (0050) 
                                        (0051) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0052) 
                                        (0053) export   I2CM_fReadBytes
                                        (0054) export   I2CM_bWriteBytes
                                        (0055) export   I2CM_bWriteCBytes
                                        (0056) 
                                        (0057) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0058) 
                                        (0059) ;-------------------------------------------------------------------
                                        (0060) ;  Declare the varables for both the assembler and C compiler.
                                        (0061) ;
                                        (0062) ;-------------------------------------------------------------------
                                        (0063) export  I2CM_bStatus
                                        (0064) export _I2CM_bStatus
                                        (0065) export  I2CM_bData
                                        (0066) export _I2CM_bData
                                        (0067) export  I2CM_bAddr
                                        (0068) export _I2CM_bAddr
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) area evalboard_RAM(RAM, REL, CON)
                                        (0074) 
                                        (0075) _I2CM_bStatus:
                                        (0076)  I2CM_bStatus:                         blk   1  ; Status during transfers
                                        (0077) _I2CM_bData:
                                        (0078)  I2CM_bData:                           blk   1  ; Data transfered
                                        (0079) _I2CM_bXferCnt:
                                        (0080)  I2CM_bXferCnt:                                  ; Reused variable for counting transfered
                                        (0081) _I2CM_bAddr:                                     ; Bytes
                                        (0082)  I2CM_bAddr:                           blk   1  ; Slave Address
                                        (0083) _I2CM_bit_count:
                                        (0084)  I2CM_bit_count:                       blk   1  ; Bit counter
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) ;-----------------------------------------------
                                        (0088) ;  EQUATES
                                        (0089) ;-----------------------------------------------
                                        (0090) I2CM_SLAVE_ACKed:                      equ 0x01 ; This bit set if Slave ACKed Master
                                        (0091) I2CM_SEND_ACK:                         equ 0x10 ; If this flag set, Master should send ACK
                                        (0092) 
                                        (0093) .SECTION
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ;  FUNCTION NAME: I2CM_Start
                                        (0096) ;
                                        (0097) ;  DESCRIPTION:
                                        (0098) ;
                                        (0099) ;-----------------------------------------------------------------------------
                                        (0100) ;
                                        (0101) ;  ARGUMENTS: none
                                        (0102) ;
                                        (0103) ;  RETURNS: none
                                        (0104) ;
                                        (0105) ;  SIDE EFFECTS:
                                        (0106) ;    The A and X registers may be modified by this or future implementations
                                        (0107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0110) ;    functions.
                                        (0111) ;          
                                        (0112) ;    Currently only the page pointer registers listed below are modified: 
                                        (0113) ;          CUR_PP
                                        (0114) ;
                                        (0115) ;    Resets all pins on the I2C master port to the pulldown drive
                                        (0116) ;
                                        (0117) ;  THEORY of OPERATION or PROCEDURE:
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120)  I2CM_Start:
                                        (0121) _I2CM_Start:
                                        (0122)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0123)     RAM_SETPAGE_CUR >Port_0_DriveMode_1_SHADE
                                        (0124)     ; Set pins to drive mode high Z
069D: 2E 03 03 OR    [0x3],0x3          (0125)     or   [Port_0_DriveMode_1_SHADE],I2CM_SDA_pin|I2CM_SCL_pin
06A0: 26 02 FC AND   [0x2],0xFC         (0126)     and  [Port_0_DriveMode_0_SHADE],~(I2CM_SDA_pin|I2CM_SCL_pin)
06A3: 71 10    OR    F,0x10             
                                        (0127) 
                                        (0128)     M8C_SetBank1                                     ; Setup port for normal operation
06A5: 51 03    MOV   A,[0x3]            (0129)     mov  A,[Port_0_DriveMode_1_SHADE]
06A7: 60 01    MOV   REG[0x1],A         (0130)     mov  reg[I2CM_I2CPRTDM1],A
06A9: 51 02    MOV   A,[0x2]            (0131)     mov  A,[Port_0_DriveMode_0_SHADE]
06AB: 60 00    MOV   REG[0x0],A         (0132)     mov  reg[I2CM_I2CPRTDM0],A
06AD: 70 EF    AND   F,0xEF             
                                        (0133)     M8C_SetBank0
                                        (0134)                                                      ; Set both pins, low so that only the port
                                        (0135)                                                      ; mode has to be changed from a 0 to a 1
06AF: 26 00 FC AND   [0x0],0xFC         (0136)     and  [Port_0_Data_SHADE],~(I2CM_SDA_pin|I2CM_SCL_pin)
06B2: 51 00    MOV   A,[0x0]            (0137)     mov  A,[Port_0_Data_SHADE]
06B4: 60 00    MOV   REG[0x0],A         (0138)     mov  reg[I2CM_I2CPRTDR],A
                                        (0139)     RAM_EPILOGUE RAM_USE_CLASS_4
06B6: 7F       RET                      (0140)     ret
                                        (0141) .ENDSECTION
                                        (0142) 
                                        (0143) .SECTION
                                        (0144) ;-----------------------------------------------------------------------------
                                        (0145) ;  FUNCTION NAME: I2CM_Stop
                                        (0146) ;
                                        (0147) ;  DESCRIPTION:
                                        (0148) ;    This function performs no operation and is used for future
                                        (0149) ;    module compatibility.
                                        (0150) ;
                                        (0151) ;-----------------------------------------------------------------------------
                                        (0152) ;
                                        (0153) ;  ARGUMENTS: none
                                        (0154) ;
                                        (0155) ;  RETURNS: none
                                        (0156) ;
                                        (0157) ;  SIDE EFFECTS:
                                        (0158) ;    The A and X registers may be modified by this or future implementations
                                        (0159) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0160) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0161) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0162) ;    functions.
                                        (0163) ;          
                                        (0164)  I2CM_Stop:
                                        (0165) _I2CM_Stop:
                                        (0166)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0167)     RAM_EPILOGUE RAM_USE_CLASS_1
06B7: 7F       RET                      (0168)     ret
06B8: 70 BF    AND   F,0xBF             
06BA: 62 D3 07 MOV   REG[0xD3],0x7      
06BD: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0169) .ENDSECTION
                                        (0170) 
                                        (0171) .SECTION
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;  FUNCTION NAME: I2CM_fReadBytes
                                        (0174) ;
                                        (0175) ;  DESCRIPTION:
                                        (0176) ;
                                        (0177) ;-----------------------------------------------------------------------------
                                        (0178) ;
                                        (0179) ;  ARGUMENTS:
                                        (0180) ;  [SP-3]=> Address of slave
                                        (0181) ;  [SP-4]=> LSB of Array address to put data in.
                                        (0182) ;  [SP-5]=> MSB of Array address to put data in.
                                        (0183) ;  [SP-6]=> Count of bytes to read.
                                        (0184) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0185) ;           to determine if:
                                        (0186) ;             0x01 => Use RepeatStart instead of Start
                                        (0187) ;             0x02 => Don't send Stop
                                        (0188) ;
                                        (0189) ;  RETURNS:
                                        (0190) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0191) ;
                                        (0192) ;  SIDE EFFECTS:
                                        (0193) ;    The A and X registers may be modified by this or future implementations
                                        (0194) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0195) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0196) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0197) ;    functions.
                                        (0198) ;          
                                        (0199) ;    Currently only the page pointer registers listed below are modified: 
                                        (0200) ;          CUR_PP
                                        (0201) ;		   IDX_PP
                                        (0202) ;
                                        (0203) SlaveAdr:     equ  -3
                                        (0204) RxArrayLSB:   equ  -4
                                        (0205) RxArrayMSB:   equ  -5
                                        (0206) RxByteCount:  equ  -6
                                        (0207) RxMode:       equ  -7
                                        (0208) 
                                        (0209) _I2CM_fReadBytes:
                                        (0210)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0211)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0212)     RAM_SETPAGE_IDX2STK
                                        (0213)     RAM_SETPAGE_CUR >I2CM_bStatus
06C0: 4F       MOV   X,SP               (0214)     mov   X, SP
                                        (0215)     
06C1: 52 FD    MOV   A,[X-3]            (0216)     mov   A, [X+SlaveAdr]
06C3: 64       ASL   A                  (0217)     asl   A                                                ; Shift address to the left to make
                                        (0218)                                                            ; a complete byte with the R/W bit.
06C4: 29 01    OR    A,0x1              (0219)     or    A,0x01                                           ; OR the address with the Read bit.
06C6: 55 06 00 MOV   [0x6],0x0          (0220)     mov   [I2CM_bStatus],0x00                              ; Clear all flags
06C9: 48 F9 01 TST   [X-7],0x1          (0221)     tst   [x+RxMode],I2CM_RepStart
06CC: B0 05    JNZ   0x06D2             (0222)     jnz   DoRestartRx
06CE: 91 3B    CALL  0x080B             (0223)     call  I2C_DoStart                                      ; Send a start and address.
06D0: 80 03    JMP   0x06D4             (0224)     jmp   CheckRxAck
                                        (0225) DoRestartRx:
06D2: 91 01    CALL  0x07D5             (0226)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
06D4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0227) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0228)     RAM_SETPAGE_CUR >I2CM_bStatus
06D7: 47 06 01 TST   [0x6],0x1          (0229)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
06DA: A0 2A    JZ    0x0705             (0230)     jz    End_RD_Loop
                                        (0231)                                                            ; Send ACK until last byte
06DC: 2E 06 10 OR    [0x6],0x10         (0232)     or    [I2CM_bStatus],I2CM_SEND_ACK                     ; Send ACK until last byte
                                        (0233) RD_Loop:                                                   ; Loop through bytes
06DF: 10       PUSH  X                  (0234)     push  x                                                ; Save X for later
06E0: 7B FA    DEC   [X-6]              (0235)     dec   [x+RxByteCount]                                  ; Decrement data counter
06E2: B0 04    JNZ   0x06E7             (0236)     jnz   I2C_READ
06E4: 26 06 EF AND   [0x6],0xEF         (0237)     and   [I2CM_bStatus],~I2CM_SEND_ACK                    ; If last Byte, don't ACK
                                        (0238) I2C_READ:
06E7: 91 F7    CALL  0x08E0             (0239)     call  I2CM_read                                        ; Read a byte
06E9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0240)     RAM_SETPAGE_CUR >I2CM_bStatus
06EC: 20       POP   X                  (0241)     pop   x                                                ; Restore x
06ED: 10       PUSH  X                  (0242)     push  x
06EE: 52 FC    MOV   A,[X-4]            (0243)     mov   a,[x+RxArrayLSB]                                 ; Get pointer to data and put it in X
06F0: 08       PUSH  A                  (0244)     push  a                                                ; push the index pointer onto the stack (will be popped to x) 
                                        (0245) IF SYSTEM_LARGE_MEMORY_MODEL
06F1: 52 FB    MOV   A,[X-5]            (0246)     mov   A,[x+RxArrayMSB]
06F3: 60 D3    MOV   REG[0xD3],A        
                                        (0247)     RAM_SETPAGE_IDX A
                                        (0248) ENDIF
06F5: 20       POP   X                  (0249)     pop   x                                                ; restores the index pointer pushed a few lines above
06F6: 51 07    MOV   A,[0x7]            (0250)     mov   a,[I2CM_bData]                                   ; Save data in data array
06F8: 54 00    MOV   [X+0],A            (0251)     mov   [x],a                                            ; Put read data in array
06FA: 20       POP   X                  (0252)     pop   x                                                ; Restore the original pointer (for the subrtn params)
06FB: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0253)     RAM_SETPAGE_IDX2STK					   ; Set Index Page to Stack Page
06FE: 77 FC    INC   [X-4]              (0254)     inc   [x+RxArrayLSB]                                   ; Advance data pointer
0700: 48 FA FF TST   [X-6],0xFF         (0255)     tst   [x+RxByteCount],FFh                              ; Decrement data counter
0703: BF DB    JNZ   0x06DF             (0256)     jnz   RD_Loop                                          ; Not finished, do another byte.
                                        (0257) End_RD_Loop:                                               ; Endloop
0705: 48 F9 02 TST   [X-7],0x2          (0258)     tst   [x+RxMode],I2CM_NoStop
0708: B0 03    JNZ   0x070C             (0259)     jnz   SkipRxStop
070A: 92 6F    CALL  _I2CM_SendStop     (0260)     call  I2CM_SendStop
070C: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0261) SkipRxStop:
                                        (0262)     RAM_SETPAGE_CUR >I2CM_bStatus
070F: 50 00    MOV   A,0x0              (0263)     mov   a,I2CM_XFER_ERROR                                ; Clear return value until we test if slave ACKed
0711: 47 06 01 TST   [0x6],0x1          (0264)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed                  ; Test to see if Slave ACKed
0714: A0 03    JZ    0x0718             (0265)     jz    End_ReadBytes
0716: 50 01    MOV   A,0x1              (0266)     mov   a,I2CM_XFER_COMPLETE                             ; Return ACKed True
0718: 70 3F    AND   F,0x3F             
071A: 71 C0    OR    F,0xC0             
                                        (0267) End_ReadBytes:
                                        (0268)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0269)     RAM_EPILOGUE RAM_USE_CLASS_4
071C: 7F       RET                      (0270)     ret
071D: 70 BF    AND   F,0xBF             
071F: 62 D3 07 MOV   REG[0xD3],0x7      
0722: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0271) .ENDSECTION
                                        (0272) 
                                        (0273) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME: I2CM_fReadBytes
                                        (0277) ;
                                        (0278) ;  DESCRIPTION:
                                        (0279) ;
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS:
                                        (0283) ;      A => Address of slave
                                        (0284) ;      X => Pointer to other arguments.
                                        (0285) ;    [x] => LSB of Array address to put data in.
                                        (0286) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (0287) ;  [X-2] => Count of bytes to read.
                                        (0288) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (0289) ;           to determine if:
                                        (0290) ;             0x01 => Use RepeatStart instead of Start
                                        (0291) ;             0x02 => Don't send Stop
                                        (0292) ;
                                        (0293) ;  RETURNS:
                                        (0294) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0295) ;
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;    The A and X registers may be modified by this or future implementations
                                        (0298) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0299) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0300) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0301) ;    functions.
                                        (0302) ;          
                                        (0303) RxArray_X:      equ   0
                                        (0304) RxByteCount_X:  equ  -2
                                        (0305) RxMode_X:       equ  -3
                                        (0306) 
                                        (0307)  I2CM_fReadBytes:		                 
                                        (0308)     asl   A                                            ; Shift address to the left to make
                                        (0309)                                                        ; a complete byte with the R/W bit.
                                        (0310)     or    A,0x01                                       ; OR the address with the Read bit.
                                        (0311)     mov   [I2CM_bStatus],0x00                              ; Clear all flags
                                        (0312)     tst   [x+RxMode_X],I2CM_RepStart
                                        (0313)     jnz   DoRestartRxSmm
                                        (0314)     call  I2C_DoStart                                      ; Send a start and address.
                                        (0315)     jmp   CheckRxAckSmm
                                        (0316) DoRestartRxSmm:
                                        (0317)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                                        (0318) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
                                        (0319)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
                                        (0320)     jz    End_RD_LoopSmm
                                        (0321)                                                            ; Send ACK until last byte
                                        (0322)     or    [I2CM_bStatus],I2CM_SEND_ACK                     ; Send ACK until last byte
                                        (0323) RD_LoopSmm:                                                   ; Loop through bytes
                                        (0324)     push  x                                                ; Save X for later
                                        (0325)     dec   [x+RxByteCount_X]                                ; Decrement data counter
                                        (0326)     jnz   I2C_READSmm
                                        (0327)     and   [I2CM_bStatus],~I2CM_SEND_ACK                    ; If last Byte, don't ACK
                                        (0328) I2C_READSmm:
                                        (0329)     call  I2CM_read                                        ; Read a byte
                                        (0330)     pop   x                                                ; Restore x
                                        (0331)     push  x                                                ; Store x
                                        (0332)     mov   x,[x+RxArray_X]                                  ; Get pointer to data and put it in X
                                        (0333)     mov   a,[I2CM_bData]                                   ; Save data in data array
                                        (0334)     mov   [x+RxArray_X],a                                  ; Put read data in array
                                        (0335)     pop   x                                                ; Restore the original pointer
                                        (0336)     inc   [x+RxArray_X]                                    ; Advance data pointer
                                        (0337)     tst   [x+RxByteCount_X],FFh                            ; Decrement data counter
                                        (0338)     jnz   RD_LoopSmm                                       ; Not finished, do another byte.
                                        (0339) End_RD_LoopSmm:                                            ; Endloop
                                        (0340)     tst   [x+RxMode_X],I2CM_NoStop
                                        (0341)     jnz   SkipRxStopSmm
                                        (0342)     call  I2CM_SendStop
                                        (0343) SkipRxStopSmm:
                                        (0344)     mov   a,I2CM_XFER_ERROR                                ; Clear return value until we test if slave ACKed
                                        (0345)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed                  ; Test to see if Slave ACKed
                                        (0346)     jz    End_ReadBytesSmm
                                        (0347)     mov   a,I2CM_XFER_COMPLETE                             ; Return ACKed True
                                        (0348) End_ReadBytesSmm:
                                        (0349)     ret
                                        (0350) .ENDSECTION
                                        (0351) ENDIF
                                        (0352) 
                                        (0353) .SECTION
                                        (0354) ;-----------------------------------------------------------------------------
                                        (0355) ;  FUNCTION NAME: I2CM_bWriteBytes
                                        (0356) ;
                                        (0357) ;  DESCRIPTION:
                                        (0358) ;    Write multiple data bits to slave device.
                                        (0359) ;
                                        (0360) ;-----------------------------------------------------------------------------
                                        (0361) ;
                                        (0362) ;  ARGUMENTS:
                                        (0363) ; [SP-3] => Address of slave
                                        (0364) ; [SP-4] => LSB of Array address to put data in.
                                        (0365) ; [SP-5] => MSB of Array address to put data in.
                                        (0366) ; [SP-6] => Count of bytes to write.
                                        (0367) ; [SP-7] => Mode flags that allow the programmer to set flags
                                        (0368) ;           to determine if:
                                        (0369) ;              0x01 => Use RePeatStart instead of Start
                                        (0370) ;              0x02 => Don't send Stop
                                        (0371) ;
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0375) ;
                                        (0376) ;  SIDE EFFECTS:
                                        (0377) ;    The A and X registers may be modified by this or future implementations
                                        (0378) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0379) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0380) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0381) ;    functions.
                                        (0382) ;          
                                        (0383) ;    Currently only the page pointer registers listed below are modified: 
                                        (0384) ;          CUR_PP
                                        (0385) ;		   IDX_PP
                                        (0386) ;
                                        (0387) TxSlaveAdr:   equ  -3
                                        (0388) TxArrayLSB:   equ  -4
                                        (0389) TxArrayMSB:   equ  -5
                                        (0390) TxByteCount:  equ  -6
                                        (0391) TxMode:       equ  -7
                                        (0392) 
                                        (0393) _I2CM_bWriteBytes:
                                        (0394)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0395)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0396)     RAM_SETPAGE_IDX2STK
                                        (0397)     RAM_SETPAGE_CUR >I2CM_bStatus
0725: 4F       MOV   X,SP               (0398)     mov   X, SP
                                        (0399)     
0726: 52 FD    MOV   A,[X-3]            (0400)     mov   A,[x+TxSlaveAdr]
0728: 64       ASL   A                  (0401)     asl   A                                           ; Shift address to the left to make
                                        (0402)                                                       ; a complete byte with the R/W bit.
                                        (0403)                                                       ; The ASL takes care of clearing bit 0.
0729: 55 06 00 MOV   [0x6],0x0          (0404)     mov   [I2CM_bStatus],0x00                         ; Clear all flags
                                        (0405) 
                                        (0406) 
072C: 48 F9 01 TST   [X-7],0x1          (0407)     tst   [x+TxMode],I2CM_RepStart
072F: B0 05    JNZ   0x0735             (0408)     jnz   DoRestartTx
0731: 90 D8    CALL  0x080B             (0409)     call  I2C_DoStart                                 ; Send a start and address.
0733: 80 03    JMP   0x0737             (0410)     jmp   DoTxAck
                                        (0411) DoRestartTx:
0735: 90 9E    CALL  0x07D5             (0412)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
0737: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0413) DoTxAck:
                                        (0414)     RAM_SETPAGE_CUR >I2CM_bStatus
073A: 55 08 00 MOV   [0x8],0x0          (0415)     mov   [I2CM_bXferCnt],0x00                        ; Zero out byte count first
073D: 47 06 01 TST   [0x6],0x1          (0416)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed             ; Test to see if Slave ACKed
0740: A0 27    JZ    0x0768             (0417)     jz    End_WR_Loop
0742: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0418) WR_Loop:                                              ; Loop through bytes
                                        (0419)     RAM_SETPAGE_IDX2STK
0745: 10       PUSH  X                  (0420)     push  x                                           ; Save X for later
0746: 52 FC    MOV   A,[X-4]            (0421)     mov   a,[x+TxArrayLSB]                            ; Get pointer to data and put it in X
0748: 08       PUSH  A                  (0422) 	push  a                                           ; save the address on the stack (will pop it back into X)
                                        (0423) IF SYSTEM_LARGE_MEMORY_MODEL
0749: 52 FB    MOV   A,[X-5]            (0424)     mov   a,[x+TxArrayMSB]
074B: 60 D3    MOV   REG[0xD3],A        
                                        (0425)     RAM_SETPAGE_IDX a                                 ; Set Index Page to pointer MSB
                                        (0426) ENDIF
074D: 20       POP   X                  (0427)     pop   x                                           ; this recovers the address previously stoed on teh stack
074E: 52 00    MOV   A,[X+0]            (0428)     mov   a,[x]                                       ; Get data pointer to by X
0750: 53 07    MOV   [0x7],A            (0429)     mov   [I2CM_bData],a                              ; Save data in temp location
0752: 90 ED    CALL  0x0841             (0430)     call  I2CM_write                                  ; Write the data
0754: 62 D0 00 MOV   REG[0xD0],0x0      
0757: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0431) 	RAM_SETPAGE_CUR >I2CM_bStatus
                                        (0432)     RAM_SETPAGE_IDX2STK                               ; Set Index Page back to Stack Page   
075A: 20       POP   X                  (0433)     pop   x
075B: 47 06 01 TST   [0x6],0x1          (0434)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
075E: A0 0E    JZ    0x076D             (0435)     jz    DoWBstop                                    ; Stop transfer if NAKed
0760: 76 08    INC   [0x8]              (0436)     inc   [I2CM_bXferCnt]                             ; Increment transfer byte count
0762: 77 FC    INC   [X-4]              (0437)     inc   [x+TxArrayLSB]                              ; Advance pointer
0764: 7B FA    DEC   [X-6]              (0438)     dec   [x+TxByteCount]                             ; Decrement byte counter
0766: BF DB    JNZ   0x0742             (0439)     jnz   WR_Loop                                     ; Not finished, do another byte.
                                        (0440) End_WR_Loop:                                          ; Endloop
0768: 48 F9 02 TST   [X-7],0x2          (0441)     tst   [x+TxMode],I2CM_NoStop
076B: B0 03    JNZ   0x076F             (0442)     jnz   SkipTxStop
                                        (0443) DoWBstop:
076D: 92 0C    CALL  _I2CM_SendStop     (0444)     call  I2CM_SendStop
076F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0445) SkipTxStop:
                                        (0446) 	RAM_SETPAGE_CUR >I2CM_bStatus
0772: 51 08    MOV   A,[0x8]            (0447)     mov   a,[I2CM_bXferCnt]                           ; Return bytes transfered
0774: 70 3F    AND   F,0x3F             
0776: 71 C0    OR    F,0xC0             
                                        (0448) End_WriteBytes:
                                        (0449)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0450)     RAM_EPILOGUE RAM_USE_CLASS_4
0778: 7F       RET                      (0451)     ret
0779: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0452) .ENDSECTION
                                        (0453) 
                                        (0454) 
                                        (0455) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0456) .SECTION
                                        (0457) ;-----------------------------------------------------------------------------
                                        (0458) ;  FUNCTION NAME: I2CM_bWriteBytes
                                        (0459) ;
                                        (0460) ;  DESCRIPTION:
                                        (0461) ;    Write multiple data bits to slave device.
                                        (0462) ;
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;
                                        (0465) ;  ARGUMENTS:
                                        (0466) ;     A => Address of slave
                                        (0467) ;     X => Pointer to other arguments.
                                        (0468) ;   [x] => LSB of Array address to put data in.
                                        (0469) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (0470) ; [X-2] => Count of bytes to write.
                                        (0471) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (0472) ;          to determine if:
                                        (0473) ;              0x01 => Use RePeatStart instead of Start
                                        (0474) ;              0x02 => Don't send Stop
                                        (0475) ;
                                        (0476) ;
                                        (0477) ;  RETURNS:
                                        (0478) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0479) ;
                                        (0480) ;  SIDE EFFECTS:
                                        (0481) ;    The A and X registers may be modified by this or future implementations
                                        (0482) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0483) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0484) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0485) ;    functions.
                                        (0486) ;          
                                        (0487) TxArray_X:      equ   0
                                        (0488) TxByteCount_X:  equ  -2
                                        (0489) TxMode_X:       equ  -3
                                        (0490) 
                                        (0491)  I2CM_bWriteBytes:						       
                                        (0492)     asl   A                                           ; Shift address to the left to make
                                        (0493)                                                       ; a complete byte with the R/W bit.
                                        (0494)                                                       ; The ASL takes care of clearing bit 0.
                                        (0495)     mov   [I2CM_bStatus],0x00                         ; Clear all flags
                                        (0496) 
                                        (0497) 
                                        (0498)     tst   [x+TxMode_X],I2CM_RepStart
                                        (0499)     jnz   DoRestartTxSmm
                                        (0500)     call  I2C_DoStart                                 ; Send a start and address.
                                        (0501)     jmp   DoTxAckSmm
                                        (0502) DoRestartTxSmm:
                                        (0503)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0504) DoTxAckSmm:
                                        (0505)     mov   [I2CM_bXferCnt],0x00                        ; Zero out byte count first
                                        (0506)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed             ; Test to see if Slave ACKed
                                        (0507)     jz    End_WR_LoopSmm
                                        (0508) WR_LoopSmm:                                              ; Loop through bytes
                                        (0509)     push  x                                           ; Save X for later
                                        (0510)     mov   x,[x+TxArray_X]                               ; Get pointer to data and put it in X
                                        (0511)     mov   a,[x]                                       ; Get data pointer to by X
                                        (0512)     mov   [I2CM_bData],a                              ; Save data in temp location
                                        (0513)     call  I2CM_write                                  ; Write the data
                                        (0514)     pop   x
                                        (0515)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
                                        (0516)     jz    DoWBstopSmm                                    ; Stop transfer if NAKed
                                        (0517)     inc   [I2CM_bXferCnt]                             ; Increment transfer byte count
                                        (0518)     inc   [x+TxArray_X]                                 ; Advance pointer
                                        (0519)     dec   [x+TxByteCount_X]                             ; Decrement byte counter
                                        (0520)     jnz   WR_LoopSmm                                     ; Not finished, do another byte.
                                        (0521) End_WR_LoopSmm:                                          ; Endloop
                                        (0522)     tst   [x+TxMode_X],I2CM_NoStop
                                        (0523)     jnz   SkipTxStopSmm
                                        (0524) DoWBstopSmm:
                                        (0525)     call  I2CM_SendStop
                                        (0526) SkipTxStopSmm:
                                        (0527)     mov   a,[I2CM_bXferCnt]                           ; Return bytes transfered
                                        (0528) End_WriteBytesSmm:
                                        (0529)     ret
                                        (0530) .ENDSECTION
                                        (0531) ENDIF
                                        (0532) 
                                        (0533) .SECTION
                                        (0534) ;-----------------------------------------------------------------------------
                                        (0535) ;  FUNCTION NAME: I2CM_bWriteCBytes
                                        (0536) ;
                                        (0537) ;  DESCRIPTION:
                                        (0538) ;    Write multiple data bits to slave device from ROM
                                        (0539) ;
                                        (0540) ;-----------------------------------------------------------------------------
                                        (0541) ;
                                        (0542) ;  ARGUMENTS:
                                        (0543) ;   [SP-3] => Address of slave
                                        (0544) ;   [SP-4] => LSB of ROM Array address to put data in.
                                        (0545) ;   [SP-5] => MSB of ROM Array address to put data in (ignorned)
                                        (0546) ;   [SP-6] => Count of bytes to write.
                                        (0547) ;   [SP-7] => Mode flags that allow the programmer to set flags
                                        (0548) ;            to determine if:
                                        (0549) ;               0x01 => Use RepeatStart instead of Start
                                        (0550) ;               0x02 => Don't send Stop
                                        (0551) ;
                                        (0552) ;  RETURNS:
                                        (0553) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0554) ;
                                        (0555) ;  SIDE EFFECTS:
                                        (0556) ;    The A and X registers may be modified by this or future implementations
                                        (0557) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0558) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0559) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0560) ;    functions.
                                        (0561) ;          
                                        (0562) ;    Currently only the page pointer registers listed below are modified: 
                                        (0563) ;          CUR_PP
                                        (0564) ;
                                        (0565) TxCSlaveAdr:   equ  -3
                                        (0566) TxCArrayLSB:   equ  -4
                                        (0567) TxCArrayMSB:   equ  -5
                                        (0568) TxCByteCount:  equ  -6
                                        (0569) TxCMode:       equ  -7
                                        (0570) 
                                        (0571) _I2CM_bWriteCBytes:
                                        (0572)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0573)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0574)     RAM_SETPAGE_CUR >I2CM_bStatus
077C: 4F       MOV   X,SP               (0575)     mov   X, SP
                                        (0576) 
077D: 52 FD    MOV   A,[X-3]            (0577)     mov   A,[x+TxCSlaveAdr]
077F: 64       ASL   A                  (0578)     asl   A                                           ; Shift address to the left to make
                                        (0579)                                                       ; a complete byte with the R/W bit.
                                        (0580)                                                       ; The ASL takes care of clearing bit 0.
0780: 55 06 00 MOV   [0x6],0x0          (0581)     mov   [I2CM_bStatus],0x00                         ; Clear all flags
                                        (0582) 
                                        (0583) 
0783: 48 F9 01 TST   [X-7],0x1          (0584)     tst   [x+TxCMode],I2CM_RepStart                   ; Check if a Start or RepeatStart
0786: B0 05    JNZ   0x078C             (0585)     jnz   DoCRestartTx                                ; should executed.
0788: 90 81    CALL  0x080B             (0586)     call  I2C_DoStart                                 ; Send a start and address.
078A: 80 03    JMP   0x078E             (0587)     jmp   DoCTxAck
                                        (0588) DoCRestartTx:
078C: 90 47    CALL  0x07D5             (0589)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
078E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0590) 
                                        (0591) DoCTxAck:                                             ; Test to see if Slave is ACKed
                                        (0592) 	RAM_SETPAGE_CUR >I2CM_bStatus
0791: 55 08 00 MOV   [0x8],0x0          (0593)     mov   [I2CM_bXferCnt],0x00            ; Zero out byte count first
0794: 47 06 01 TST   [0x6],0x1          (0594)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
0797: A0 20    JZ    0x07B8             (0595)     jz    End_WRC_Loop
                                        (0596) WRC_Loop:                                             ; Loop through bytes
0799: 10       PUSH  X                  (0597)     push  x                                           ; Save X for later
                                        (0598) 
079A: 52 FB    MOV   A,[X-5]            (0599)     mov   a,[x+TxCArrayMSB]                           ; Get data pointer to by X
079C: 59 FC    MOV   X,[X-4]            (0600)     mov   x,[x+TxCArrayLSB]                           ; Get pointer to data and put it in X
079E: 28       ROMX                     (0601)     romx                                              ; Put ROM Data in a
079F: 53 07    MOV   [0x7],A            (0602)     mov   [I2CM_bData],a                              ; Save data in temp location
07A1: 90 9E    CALL  0x0841             (0603)     call  I2CM_write                                  ; Write the data
07A3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0604)     RAM_SETPAGE_CUR >I2CM_bStatus
07A6: 20       POP   X                  (0605)     pop   x
07A7: 47 06 01 TST   [0x6],0x1          (0606)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
07AA: A0 12    JZ    0x07BD             (0607)     jz    DoWCBstop                                    ; Stop transfer if NAKed
07AC: 76 08    INC   [0x8]              (0608)     inc   [I2CM_bXferCnt]                             ; Increment transfer byte count
07AE: 77 FC    INC   [X-4]              (0609)     inc   [x+TxCArrayLSB]                             ; Advance LSB of pointer
07B0: D0 03    JNC   0x07B4             (0610)     jnc   DecBCnt
07B2: 77 FB    INC   [X-5]              (0611)     inc   [x+TxCArrayMSB]                             ; Advance MSB of pointer
                                        (0612) 
                                        (0613) DecBCnt:
07B4: 7B FA    DEC   [X-6]              (0614)     dec   [x+TxCByteCount]                            ; Decrement byte counter
07B6: BF E2    JNZ   0x0799             (0615)     jnz   WRC_Loop                                    ; Not finished, do another byte.
                                        (0616) End_WRC_Loop:                                         ; Endloop
07B8: 48 F9 02 TST   [X-7],0x2          (0617)     tst   [x+TxCMode],I2CM_NoStop
07BB: B0 03    JNZ   0x07BF             (0618)     jnz   SkipTxCStop
                                        (0619) DoWCBstop:
07BD: 91 BC    CALL  _I2CM_SendStop     (0620)     call  I2CM_SendStop
07BF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0621) SkipTxCStop:
                                        (0622)     RAM_SETPAGE_CUR >I2CM_bStatus
07C2: 51 08    MOV   A,[0x8]            (0623)     mov   a,[I2CM_bXferCnt]                           ; Return bytes transfered
07C4: 70 3F    AND   F,0x3F             
07C6: 71 C0    OR    F,0xC0             
                                        (0624) End_WriteCBytes:
                                        (0625)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0626)     RAM_EPILOGUE RAM_USE_CLASS_4
07C8: 7F       RET                      (0627)     ret
                                        (0628) .ENDSECTION
                                        (0629) 
                                        (0630) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0631) .SECTION
                                        (0632) ;-----------------------------------------------------------------------------
                                        (0633) ;  FUNCTION NAME: I2CM_bWriteCBytes
                                        (0634) ;
                                        (0635) ;  DESCRIPTION:
                                        (0636) ;    Write multiple data bits to slave device from ROM
                                        (0637) ;
                                        (0638) ;-----------------------------------------------------------------------------
                                        (0639) ;
                                        (0640) ;  ARGUMENTS:
                                        (0641) ;      A => Address of slave
                                        (0642) ;      X => Pointer to other arguments.
                                        (0643) ;     [x] => LSB of ROM Array address to put data in.
                                        (0644) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (0645) ;   [X-2] => Count of bytes to write.
                                        (0646) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (0647) ;            to determine if:
                                        (0648) ;               0x01 => Use RepeatStart instead of Start
                                        (0649) ;               0x02 => Don't send Stop
                                        (0650) ;
                                        (0651) ;  RETURNS:
                                        (0652) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0653) ;
                                        (0654) ;  SIDE EFFECTS:
                                        (0655) ;    The A and X registers may be modified by this or future implementations
                                        (0656) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0657) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0658) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0659) ;    functions.
                                        (0660) ;          
                                        (0661) TxCArrayLSB_x:   equ   0
                                        (0662) TxCArrayMSB_x:   equ  -1
                                        (0663) TxCByteCount_x:  equ  -2
                                        (0664) TxCMode_x:       equ  -3
                                        (0665) 
                                        (0666)  I2CM_bWriteCBytes:					        
                                        (0667)     asl   A                                           ; Shift address to the left to make
                                        (0668)                                                       ; a complete byte with the R/W bit.
                                        (0669)                                                       ; The ASL takes care of clearing bit 0.
                                        (0670)     mov   [I2CM_bStatus],0x00                         ; Clear all flags
                                        (0671) 
                                        (0672) 
                                        (0673)     tst   [x+TxCMode_x],I2CM_RepStart                 ; Check if a Start or RepeatStart
                                        (0674)     jnz   DoCRestartTxSmm                                ; should executed.
                                        (0675)     call  I2C_DoStart                                 ; Send a start and address.
                                        (0676)     jmp   DoCTxAckSmm
                                        (0677) DoCRestartTxSmm:
                                        (0678)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0679) 
                                        (0680) DoCTxAckSmm:                                             ; Test to see if Slave is ACKed
                                        (0681)     mov   [I2CM_bXferCnt],0x00            ; Zero out byte count first
                                        (0682)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
                                        (0683)     jz    End_WRC_LoopSmm
                                        (0684) WRC_LoopSmm:                                             ; Loop through bytes
                                        (0685)     push  x                                           ; Save X for later
                                        (0686) 
                                        (0687)     mov   a,[x+TxCArrayMSB_x]                           ; Get data pointer to by X
                                        (0688)     mov   x,[x+TxCArrayLSB_x]                           ; Get pointer to data and put it in X
                                        (0689)     romx                                              ; Put ROM Data in a
                                        (0690)     mov   [I2CM_bData],a                              ; Save data in temp location
                                        (0691)     call  I2CM_write                                  ; Write the data
                                        (0692)     pop   x
                                        (0693)     tst   [I2CM_bStatus],I2CM_SLAVE_ACKed
                                        (0694)     jz    DoWCBstopSmm                                ; Stop transfer if NAKed
                                        (0695)     inc   [I2CM_bXferCnt]                             ; Increment transfer byte count
                                        (0696)     inc   [x+TxCArrayLSB_x]                             ; Advance LSB of pointer
                                        (0697)     jnc   DecBCntSmm
                                        (0698)     inc   [x+TxCArrayMSB_x]                             ; Advance MSB of pointer
                                        (0699) 
                                        (0700) DecBCntSmm:
                                        (0701)     dec   [x+TxCByteCount_x]                            ; Decrement byte counter
                                        (0702)     jnz   WRC_LoopSmm                                    ; Not finished, do another byte.
                                        (0703) End_WRC_LoopSmm:                                         ; Endloop
                                        (0704)     tst   [x+TxCMode_x],I2CM_NoStop
                                        (0705)     jnz   SkipTxCStopSmm
                                        (0706) DoWCBstopSmm:
                                        (0707)     call  I2CM_SendStop
                                        (0708) SkipTxCStopSmm:
                                        (0709)     mov   a,[I2CM_bXferCnt]                           ; Return bytes transfered
                                        (0710) End_WriteCBytesSmm:
                                        (0711)     ret
                                        (0712) .ENDSECTION
                                        (0713) ENDIF
                                        (0714) 
                                        (0715) .SECTION
                                        (0716) ;-----------------------------------------------------------------------------
                                        (0717) ;  FUNCTION NAME: I2CM_fSendRepeatStart
                                        (0718) ;
                                        (0719) ;  DESCRIPTION:
                                        (0720) ;    Send repeated start condition and send slave address.
                                        (0721) ;
                                        (0722) ;-----------------------------------------------------------------------------
                                        (0723) ;
                                        (0724) ;  ARGUMENTS:
                                        (0725) ;    I2CM_bAddr - Contains the slave address and transfer direction.
                                        (0726) ;
                                        (0727) ;  RETURNS:
                                        (0728) ;    I2CM_bSTatus - Cleared if a slave responds to a request. Set otherwise
                                        (0729) ;
                                        (0730) ;  SIDE EFFECTS:
                                        (0731) ;    The A and X registers may be modified by this or future implementations
                                        (0732) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0733) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0734) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0735) ;    functions.
                                        (0736) ;          
                                        (0737) ;    Currently only the page pointer registers listed below are modified: 
                                        (0738) ;          CUR_PP
                                        (0739) ;
                                        (0740) ;  THEORY of OPERATION or PROCEDURE:
                                        (0741) ;    Prepare to send start by setting SCl and SDA high.
                                        (0742) ;    must be followed directly by I2CM_start.
                                        (0743) ;
                                        (0744)  I2CM_fSendRepeatStart:
                                        (0745) _I2CM_fSendRepeatStart:
                                        (0746)     RAM_PROLOGUE RAM_USE_CLASS_4
07C9: 64       ASL   A                  (0747)     asl   a                                                ; Shift address to the left
07CA: 79       DEC   X                  (0748)     dec   x                                                ; If zero, C flag will be set
07CB: D0 04    JNC   0x07D0             (0749)     jnc   .setRead                                ; Do a write if zero
07CD: 90 06    CALL  0x07D5             (0750)     call  I2C_DoRepeatStart
                                        (0751)     RAM_EPILOGUE RAM_USE_CLASS_4
07CF: 7F       RET                      (0752)     ret
                                        (0753) .setRead:
07D0: 29 01    OR    A,0x1              (0754)     or    a,0x01                                           ; Set Read flag
07D2: 90 01    CALL  0x07D5             (0755)     call  I2C_DoRepeatStart
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
07D4: 7F       RET                      (0757)     ret  
07D5: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0758) 
                                        (0759) I2C_DoRepeatStart:
                                        (0760)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0761)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
07D8: 08       PUSH  A                  (0762)     push  a
07D9: 71 10    OR    F,0x10             
                                        (0763)     M8C_SetBank1
07DB: 2E 02 02 OR    [0x2],0x2          (0764)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin          ; Assert SCL low
07DE: 26 02 FE AND   [0x2],0xFE         (0765)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SDA_pin         ; Release SDA high
07E1: 51 02    MOV   A,[0x2]            (0766)     mov   A,[Port_0_DriveMode_0_SHADE]
07E3: 60 00    MOV   REG[0x0],A         (0767)     mov   reg[I2CM_I2CPRTDM0],A
                                        (0768) 
                                        (0769)                                                            ; Delay 3/4 period
07E5: 50 0C    MOV   A,0xC              (0770)     mov   A,I2CM_delay3qtr
07E7: 91 C4    CALL  0x09AD             (0771)     call  I2CM_delay
                                        (0772)                                                            ; Release SCL high
07E9: 26 02 FD AND   [0x2],0xFD         (0773)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SCL_pin
07EC: 51 02    MOV   A,[0x2]            (0774)     mov   A,[Port_0_DriveMode_0_SHADE]
07EE: 60 00    MOV   REG[0x0],A         (0775)     mov   reg[I2CM_I2CPRTDM0],A
07F0: 70 EF    AND   F,0xEF             
                                        (0776) 
                                        (0777)     M8C_SetBank0
                                        (0778) clockstretch1:                                             ; Wait for SCL high in case of wait
                                        (0779)                                                            ; states adde by slave
07F2: 49 00 02 TST   REG[0x0],0x2       (0780)     tst   reg[I2CM_I2CPRTDR],I2CM_SCL_pin
07F5: AF FC    JZ    0x07F2             (0781)     jz    clockstretch1
                                        (0782) 
07F7: 50 0C    MOV   A,0xC              (0783)     mov   A,I2CM_delay3qtr                                 ; Delay 1/2 period
07F9: 91 B2    CALL  0x09AD             (0784)     call  I2CM_delay
07FB: 18       POP   A                  (0785)     pop   a
07FC: 90 0D    CALL  0x080B             (0786)     call  I2C_DoStart                                      ; Jump through to I2C_DoStart
                                        (0787)     RAM_EPILOGUE RAM_USE_CLASS_4
07FE: 7F       RET                      (0788)     ret
                                        (0789) .ENDSECTION
                                        (0790) 
                                        (0791) .SECTION
                                        (0792) ;-----------------------------------------------------------------------------
                                        (0793) ;  FUNCTION NAME: I2CM_fSendStart
                                        (0794) ;
                                        (0795) ;  DESCRIPTION:
                                        (0796) ;    Generates start condition and sends slave address.
                                        (0797) ;
                                        (0798) ;-----------------------------------------------------------------------------
                                        (0799) ;
                                        (0800) ;  ARGUMENTS:
                                        (0801) ;    A => Contains the slave address.
                                        (0802) ;
                                        (0803) ;  RETURNS:
                                        (0804) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;          
                                        (0813) ;    Currently only the page pointer registers listed below are modified: 
                                        (0814) ;          CUR_PP
                                        (0815) ;
                                        (0816) ;  THEORY of OPERATION or PROCEDURE:
                                        (0817) ;   Send start by setting SDA low while SCL is high. Set
                                        (0818) ;   SCL low in preparation to send address. Must be followed
                                        (0819) ;   by I2CM_write.
                                        (0820) ;
                                        (0821)  I2CM_fSendStart:
                                        (0822) _I2CM_fSendStart:
                                        (0823)     RAM_PROLOGUE RAM_USE_CLASS_4
07FF: 64       ASL   A                  (0824)     asl   a                                                     ; Shift address to the left
0800: 79       DEC   X                  (0825)     dec   x                                                     ; If zero, C flag will be set
0801: D0 04    JNC   0x0806             (0826)     jnc   .SetRead
0803: 90 06    CALL  0x080B             (0827)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0828)     RAM_EPILOGUE RAM_USE_CLASS_4
0805: 7F       RET                      (0829)     ret
                                        (0830) .SetRead:
0806: 29 01    OR    A,0x1              (0831)     or    a,0x01                                                ; Set Read flag
0808: 90 01    CALL  0x080B             (0832)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0833)     RAM_EPILOGUE RAM_USE_CLASS_4
080A: 7F       RET                      (0834)     ret
080B: 62 D0 00 MOV   REG[0xD0],0x0      
080E: 71 10    OR    F,0x10             
                                        (0835) 
                                        (0836) I2C_DoStart:
                                        (0837)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0838)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0839)     M8C_SetBank1
0810: 08       PUSH  A                  (0840)     push  A                                                     ; Save the slave address
0811: 2E 02 01 OR    [0x2],0x1          (0841)     or    [Port_0_DriveMode_0_SHADE],I2CM_SDA_pin               ; Assert SDA low
0814: 51 02    MOV   A,[0x2]            (0842)     mov   A,[Port_0_DriveMode_0_SHADE]
0816: 60 00    MOV   REG[0x0],A         (0843)     mov   reg[I2CM_I2CPRTDM0],A
                                        (0844) 
0818: 50 05    MOV   A,0x5              (0845)     mov   A,I2CM_delayhalf                                      ; Delay 1/2 period
081A: 91 91    CALL  0x09AD             (0846)     call  I2CM_delay
081C: 18       POP   A                  (0847)     pop   A                                                     ; Restore slave address to A
081D: 70 EF    AND   F,0xEF             
081F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0848)     M8C_SetBank0
                                        (0849)     RAM_SETPAGE_CUR >I2CM_bData
0822: 53 07    MOV   [0x7],A            (0850)     mov   [I2CM_bData],A
0824: 62 D0 00 MOV   REG[0xD0],0x0      
0827: 71 10    OR    F,0x10             
                                        (0851) 
                                        (0852)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0853)     M8C_SetBank1
0829: 2E 02 02 OR    [0x2],0x2          (0854)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin               ; Set SCL low
082C: 51 02    MOV   A,[0x2]            (0855)     mov   A,[Port_0_DriveMode_0_SHADE]
082E: 60 00    MOV   REG[0x0],A         (0856)     mov   reg[I2CM_I2CPRTDM0],A
0830: 70 EF    AND   F,0xEF             
                                        (0857)     M8C_SetBank0
                                        (0858) 
0832: 50 02    MOV   A,0x2              (0859)     mov   A,I2CM_delayqtr                                       ; Delay 1/4 period
0834: 91 77    CALL  0x09AD             (0860)     call  I2CM_delay
0836: 90 09    CALL  0x0841             (0861)     call   I2CM_write                                           ; Write the byte.
                                        (0862)     RAM_EPILOGUE RAM_USE_CLASS_4
0838: 7F       RET                      (0863)     ret
0839: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0864) .ENDSECTION
                                        (0865) 
                                        (0866) .SECTION
                                        (0867) ;-----------------------------------------------------------------------------
                                        (0868) ;  FUNCTION NAME: I2CM_fWrite
                                        (0869) ;
                                        (0870) ;  DESCRIPTION:
                                        (0871) ;    Writes a byte to the I2C master bus.
                                        (0872) ;
                                        (0873) ;-----------------------------------------------------------------------------
                                        (0874) ;
                                        (0875) ;  ARGUMENTS:
                                        (0876) ;    A contains Data to be written to I2C slave.
                                        (0877) ;
                                        (0878) ;  RETURNS:
                                        (0879) ;    1 If ACKed, else 0
                                        (0880) ;
                                        (0881) ;  SIDE EFFECTS:
                                        (0882) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0883) ;
                                        (0884) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0885) ;
                                        (0886) ;  FUNCTION NAME: I2CM_write
                                        (0887) ;
                                        (0888) ;  DESCRIPTION:
                                        (0889) ;    Writes a byte to the I2C master bus. Also used for sending the address.
                                        (0890) ;
                                        (0891) ;  ARGUMENTS:
                                        (0892) ;    Reg A contains slave address.
                                        (0893) ;    I2CM_bData - Contains data to be transmitted.
                                        (0894) ;
                                        (0895) ;  RETURNS:
                                        (0896) ;    I2CM_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0897) ;
                                        (0898) ;  SIDE EFFECTS:
                                        (0899) ;    The A and X registers may be modified by this or future implementations
                                        (0900) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0901) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0902) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0903) ;    functions.
                                        (0904) ;          
                                        (0905) ;    Currently only the page pointer registers listed below are modified: 
                                        (0906) ;          CUR_PP
                                        (0907) ;
                                        (0908) ;    Send data byte to slave. Must be followed by I2CM_get_ack.
                                        (0909) ;
                                        (0910) I2CM_fWrite:
                                        (0911) _I2CM_fWrite:
                                        (0912)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0913)     RAM_SETPAGE_CUR >I2CM_bData
083C: 53 07    MOV   [0x7],A            (0914)     mov   [I2CM_bData],A                                   ; Put data in bData
083E: 90 01    CALL  0x0841             (0915)     call  I2CM_write
                                        (0916)     RAM_EPILOGUE RAM_USE_CLASS_4
0840: 7F       RET                      (0917)     ret
0841: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0918) 
                                        (0919) I2CM_write:
                                        (0920) _I2CM_write:
                                        (0921)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0922)     RAM_SETPAGE_CUR >I2CM_bit_count
                                        (0923)     
0844: 55 09 08 MOV   [0x9],0x8          (0924)     mov   [I2CM_bit_count],8                                ; Set up count to xmit 8 bits
                                        (0925) writenextbit:
0847: 7A 09    DEC   [0x9]              (0926)     dec   [I2CM_bit_count]
0849: 62 D0 00 MOV   REG[0xD0],0x0      
084C: 71 10    OR    F,0x10             
                                        (0927) 
                                        (0928)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0929)                                                            ; Assert SCL low
                                        (0930)     M8C_SetBank1
084E: 2E 02 02 OR    [0x2],0x2          (0931)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin
0851: 51 02    MOV   A,[0x2]            (0932)     mov   A,[Port_0_DriveMode_0_SHADE]
0853: 60 00    MOV   REG[0x0],A         (0933)     mov   reg[I2CM_I2CPRTDM0],A
0855: 70 EF    AND   F,0xEF             
0857: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0934)     M8C_SetBank0
                                        (0935) 
                                        (0936)     RAM_SETPAGE_CUR >I2CM_bit_count
085A: 6B 07    RLC   [0x7]              (0937)     rlc   [I2CM_bData]
085C: 62 D0 00 MOV   REG[0xD0],0x0      
085F: 71 10    OR    F,0x10             
                                        (0938)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0939)     M8C_SetBank1
0861: C0 0A    JC    0x086C             (0940)     jc    write_bit                                        ; Assert SDA low for data 0    
0863: 2E 02 01 OR    [0x2],0x1          (0941)     or    [Port_0_DriveMode_0_SHADE],I2CM_SDA_pin
0866: 51 02    MOV   A,[0x2]            (0942)     mov   A,[Port_0_DriveMode_0_SHADE]
0868: 60 00    MOV   REG[0x0],A         (0943)     mov   reg[I2CM_I2CPRTDM0],A
                                        (0944) 
086A: 80 08    JMP   0x0873             (0945)     jmp   writestartclock
                                        (0946) write_bit:                                                 ; Release SDA high for data 1
086C: 26 02 FE AND   [0x2],0xFE         (0947)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SDA_pin      
086F: 51 02    MOV   A,[0x2]            (0948)     mov   A,[Port_0_DriveMode_0_SHADE]
0871: 60 00    MOV   REG[0x0],A         (0949)     mov   reg[I2CM_I2CPRTDM0],A
                                        (0950) 
                                        (0951) writestartclock:
0873: 50 05    MOV   A,0x5              (0952)     mov   A,I2CM_delayhalf                                 ; Delay 1/2 period
0875: 91 36    CALL  0x09AD             (0953)     call  I2CM_delay
                                        (0954)                                                            ; Release SCL High
0877: 26 02 FD AND   [0x2],0xFD         (0955)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SCL_pin
087A: 51 02    MOV   A,[0x2]            (0956)     mov   A,[Port_0_DriveMode_0_SHADE]
087C: 60 00    MOV   REG[0x0],A         (0957)     mov   reg[I2CM_I2CPRTDM0],A
087E: 70 EF    AND   F,0xEF             
                                        (0958) 
                                        (0959)     M8C_SetBank0
                                        (0960) clockstretch2:                                             ; Wait for SCL high in case of wait states
                                        (0961)                                                            ; are added by slave.
0880: 49 00 02 TST   REG[0x0],0x2       (0962)     tst   reg[I2CM_I2CPRTDR],I2CM_SCL_pin
0883: AF FC    JZ    0x0880             (0963)     jz    clockstretch2
                                        (0964)                                                            ; Delay for 1/2 period
0885: 50 05    MOV   A,0x5              (0965)     mov   A,I2CM_delayhalf
0887: 91 24    CALL  0x09AD             (0966)     call  I2CM_delay
0889: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0967) 
                                        (0968)     RAM_SETPAGE_CUR >I2CM_bit_count
088C: 3C 09 00 CMP   [0x9],0x0          (0969)     cmp   [I2CM_bit_count],0
088F: BF B7    JNZ   0x0847             (0970)     jnz   writenextbit
0891: 90 01    CALL  0x0894             (0971)     call  I2CM_get_ack                
                                        (0972) 
                                        (0973)     RAM_EPILOGUE RAM_USE_CLASS_4
0893: 7F       RET                      (0974)     ret
0894: 62 D0 00 MOV   REG[0xD0],0x0      
0897: 71 10    OR    F,0x10             
                                        (0975) .ENDSECTION
                                        (0976) 
                                        (0977) .SECTION
                                        (0978) ;-----------------------------------------------------------------------------
                                        (0979) ;  FUNCTION NAME: I2CM_get_ack
                                        (0980) ;
                                        (0981) ;  DESCRIPTION:
                                        (0982) ;    Get slave acknowledge response. Used only by I2CM_write.
                                        (0983) ;
                                        (0984) ;-----------------------------------------------------------------------------
                                        (0985) ;
                                        (0986) ;  ARGUMENTS:
                                        (0987) ;    I2CM_bData - Contains data to be transmitted.
                                        (0988) ;
                                        (0989) ;  RETURNS:
                                        (0990) ;    Sets flag in I2CM_bStatus if ACKed by Slave.
                                        (0991) ;
                                        (0992) ;  SIDE EFFECTS:
                                        (0993) ;    The A and X registers may be modified by this or future implementations
                                        (0994) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0995) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0996) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0997) ;    functions.
                                        (0998) ;          
                                        (0999) ;    Currently only the page pointer registers listed below are modified: 
                                        (1000) ;          CUR_PP
                                        (1001) ;
                                        (1002) I2CM_get_ack:
                                        (1003) _I2CM_get_ack:
                                        (1004)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1005)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1006)     M8C_SetBank1
0899: 2E 02 02 OR    [0x2],0x2          (1007)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin
089C: 51 02    MOV   A,[0x2]            (1008)     mov   A,[Port_0_DriveMode_0_SHADE]
089E: 60 00    MOV   REG[0x0],A         (1009)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1010)                                                            ; Release SDA high so slave may ACK
08A0: 26 02 FE AND   [0x2],0xFE         (1011)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SDA_pin
08A3: 51 02    MOV   A,[0x2]            (1012)     mov   A,[Port_0_DriveMode_0_SHADE]
08A5: 60 00    MOV   REG[0x0],A         (1013)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1014)                                                            ; Delay 3/4 period
08A7: 50 0C    MOV   A,0xC              (1015)     mov   A,I2CM_delay3qtr
08A9: 91 02    CALL  0x09AD             (1016)     call  I2CM_delay
                                        (1017)                                                            ; Release SCL high
08AB: 26 02 FD AND   [0x2],0xFD         (1018)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SCL_pin
08AE: 51 02    MOV   A,[0x2]            (1019)     mov   A,[Port_0_DriveMode_0_SHADE]
08B0: 60 00    MOV   REG[0x0],A         (1020)     mov   reg[I2CM_I2CPRTDM0],A
08B2: 70 EF    AND   F,0xEF             
                                        (1021) 
                                        (1022)     M8C_SetBank0
                                        (1023) clockstretch3:                                             ; Wait for SCL to go high in case wait states
                                        (1024)                                                            ; are added my slave.
08B4: 49 00 02 TST   REG[0x0],0x2       (1025)     tst   reg[I2CM_I2CPRTDR],I2CM_SCL_pin
08B7: AF FC    JZ    0x08B4             (1026)     jz    clockstretch3
08B9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1027)     
                                        (1028)     RAM_SETPAGE_CUR >I2CM_bStatus    
                                        (1029)                                                        ; Clear ACK bit
08BC: 26 06 FE AND   [0x6],0xFE         (1030)     and   [I2CM_bStatus],~I2CM_SLAVE_ACKed
08BF: 49 00 01 TST   REG[0x0],0x1       (1031)     tst   reg[I2CM_I2CPRTDR],I2CM_SDA_pin
08C2: B0 04    JNZ   0x08C7             (1032)     jnz    getack2                                         ; If ACKed, set flag
08C4: 2E 06 01 OR    [0x6],0x1          (1033)     or    [I2CM_bStatus],I2CM_SLAVE_ACKed
                                        (1034) 
                                        (1035) getack2:
08C7: 50 05    MOV   A,0x5              (1036)     mov   A,I2CM_delayhalf                                 ; Delay 1/2 period
08C9: 90 E2    CALL  0x09AD             (1037)     call  I2CM_delay
                                        (1038) 
08CB: 51 06    MOV   A,[0x6]            (1039)     mov   A,[I2CM_bStatus]                                 ; Get result and put it in A
08CD: 21 01    AND   A,0x1              (1040)     and   A,I2CM_SLAVE_ACKed                               ; Mask off just the ACK flag.
                                        (1041)     RAM_EPILOGUE RAM_USE_CLASS_4
08CF: 7F       RET                      (1042)     ret
08D0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1043) .ENDSECTION
                                        (1044) 
                                        (1045) .SECTION
                                        (1046) ;-----------------------------------------------------------------------------
                                        (1047) ;  FUNCTION NAME: I2CM_bRead
                                        (1048) ;
                                        (1049) ;  DESCRIPTION:
                                        (1050) ;    Reads 1 data byte from the I2C master bus.
                                        (1051) ;
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;
                                        (1054) ;  ARGUMENTS:
                                        (1055) ;    Reg A Contains the Slave Address.
                                        (1056) ;    I2CM_bStatus - Set for no ack to be followed by stop.
                                        (1057) ;    Clear for ack to indicate more data to follow.
                                        (1058) ;
                                        (1059) ;  RETURNS:
                                        (1060) ;    I2CM_bData - Contains received data.
                                        (1061) ;
                                        (1062) ;  SIDE EFFECTS:
                                        (1063) ;    The A and X registers may be modified by this or future implementations
                                        (1064) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1065) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1066) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1067) ;    functions.
                                        (1068) ;          
                                        (1069) ;    Currently only the page pointer registers listed below are modified: 
                                        (1070) ;          CUR_PP
                                        (1071) ;
                                        (1072) ;    Must be followed by I2CM_put_ack.
                                        (1073) ;
                                        (1074) I2CM_bRead:
                                        (1075) _I2CM_bRead:
                                        (1076)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1077)     RAM_SETPAGE_CUR >I2CM_bStatus
08D3: 55 06 00 MOV   [0x6],0x0          (1078)     mov   [I2CM_bStatus],0x00                              ; Clear ACK flag
08D6: 21 FF    AND   A,0xFF             (1079)     and   A,0xFF                                           ; Is Ack flag set"
08D8: A0 07    JZ    0x08E0             (1080)     jz    I2CM_read                                        ; Don't ACK
08DA: 2E 06 10 OR    [0x6],0x10         (1081)     or    [I2CM_bStatus],I2CM_SEND_ACK                     ; Set ACK flag
08DD: 90 01    CALL  0x08E0             (1082)     call  I2CM_read
                                        (1083)     RAM_EPILOGUE RAM_USE_CLASS_4
08DF: 7F       RET                      (1084)     ret
08E0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1085) 
                                        (1086) I2CM_read:
                                        (1087) _I2CM_read:
                                        (1088)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1089)     RAM_SETPAGE_CUR >I2CM_bStatus    
08E3: 55 09 08 MOV   [0x9],0x8          (1090)     mov   [I2CM_bit_count],8                               ; Count and prepare bits to read
                                        (1091) readnextbit:
08E6: 7A 09    DEC   [0x9]              (1092)     dec   [I2CM_bit_count]
08E8: 6B 07    RLC   [0x7]              (1093)     rlc   [I2CM_bData]
08EA: 62 D0 00 MOV   REG[0xD0],0x0      
08ED: 71 10    OR    F,0x10             
                                        (1094)     
                                        (1095)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1096)     M8C_SetBank1                                           ; Asser SCL low
08EF: 2E 02 02 OR    [0x2],0x2          (1097)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin
08F2: 51 02    MOV   A,[0x2]            (1098)     mov   A,[Port_0_DriveMode_0_SHADE]
08F4: 60 00    MOV   REG[0x0],A         (1099)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1100)                                                            ; Delay 1/2 period
08F6: 50 05    MOV   A,0x5              (1101)     mov   A,I2CM_delayhalf
08F8: 90 B3    CALL  0x09AD             (1102)     call  I2CM_delay
                                        (1103)                                                            ; Release SCL high
08FA: 26 02 FD AND   [0x2],0xFD         (1104)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SCL_pin
08FD: 51 02    MOV   A,[0x2]            (1105)     mov   A,[Port_0_DriveMode_0_SHADE]
08FF: 60 00    MOV   REG[0x0],A         (1106)     mov   reg[I2CM_I2CPRTDM0],A
0901: 70 EF    AND   F,0xEF             
0903: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1107) 
                                        (1108)     M8C_SetBank0
                                        (1109)     RAM_SETPAGE_CUR >I2CM_bStatus    
                                        (1110) clockstretch4:                                             ; Wait for SCL to go high in case slave
                                        (1111)                                                            ; addes wait states.
                                        (1112) 
0906: 49 00 02 TST   REG[0x0],0x2       (1113)     tst   reg[I2CM_I2CPRTDR],I2CM_SCL_pin
0909: AF FC    JZ    0x0906             (1114)     jz    clockstretch4
                                        (1115)                                                            ; Delay 1/4 period
090B: 50 02    MOV   A,0x2              (1116)     mov   A,I2CM_delayqtr
090D: 90 9E    CALL  0x09AD             (1117)     call  I2CM_delay
                                        (1118) 
090F: 26 07 FE AND   [0x7],0xFE         (1119)     and   [I2CM_bData],~01h                                ; Record bit received
0912: 49 00 01 TST   REG[0x0],0x1       (1120)     tst   reg[I2CM_I2CPRTDR],I2CM_SDA_pin
0915: A0 04    JZ    0x091A             (1121)     jz    readnobit
0917: 2E 07 01 OR    [0x7],0x1          (1122)     or    [I2CM_bData],01h
                                        (1123) readnobit:
091A: 3C 09 00 CMP   [0x9],0x0          (1124)     cmp   [I2CM_bit_count],0
091D: BF C8    JNZ   0x08E6             (1125)     jnz   readnextbit                                      ; Check for byte complete
                                        (1126) 
091F: 90 01    CALL  0x0922             (1127)     call   I2CM_put_ack                
                                        (1128)     RAM_EPILOGUE RAM_USE_CLASS_4
0921: 7F       RET                      (1129)     ret
0922: 62 D0 00 MOV   REG[0xD0],0x0      
0925: 71 10    OR    F,0x10             
                                        (1130) .ENDSECTION
                                        (1131)                                                          
                                        (1132) .SECTION
                                        (1133) ;-----------------------------------------------------------------------------
                                        (1134) ;  FUNCTION NAME: I2CM_put_ack
                                        (1135) ;
                                        (1136) ;  DESCRIPTION:
                                        (1137) ;    Send acknowledge to slave. Used only by I2CM_read
                                        (1138) ;
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;    I2CM_bStatus - Set for no ack to be followed by stop. Clear for ack
                                        (1143) ;    to indicate more data to follow.
                                        (1144) ;
                                        (1145) ;  RETURNS:
                                        (1146) ;    I2CM_bData - Contains received data.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;    Send ack if more data will follow.
                                        (1159) ;
                                        (1160) I2CM_put_ack:
                                        (1161) _I2CM_put_ack:
                                        (1162)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1163)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1164)     M8C_SetBank1                                           ; Assert SCL low
0927: 2E 02 02 OR    [0x2],0x2          (1165)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin
092A: 51 02    MOV   A,[0x2]            (1166)     mov   A,[Port_0_DriveMode_0_SHADE]
092C: 60 00    MOV   REG[0x0],A         (1167)     mov   reg[I2CM_I2CPRTDM0],A
092E: 70 EF    AND   F,0xEF             
0930: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1168)     M8C_SetBank0
                                        (1169) 
                                        (1170)     RAM_SETPAGE_CUR >I2CM_bStatus    
                                        (1171)                                                        ; Check if ack is to be transmitted
0933: 47 06 10 TST   [0x6],0x10         (1172)     tst   [I2CM_bStatus],I2CM_SEND_ACK
0936: 62 D0 00 MOV   REG[0xD0],0x0      
0939: 71 10    OR    F,0x10             
                                        (1173) 
                                        (1174)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1175)     M8C_SetBank1
                                        (1176) 
093B: A0 0A    JZ    0x0946             (1177)     jz    noputack
                                        (1178)                                                            ; Assert SDA low
093D: 2E 02 01 OR    [0x2],0x1          (1179)     or    [Port_0_DriveMode_0_SHADE],I2CM_SDA_pin
0940: 51 02    MOV   A,[0x2]            (1180)     mov   A,[Port_0_DriveMode_0_SHADE]
0942: 60 00    MOV   REG[0x0],A         (1181)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1182) 
0944: 80 08    JMP   0x094D             (1183)     jmp   putack1
                                        (1184) noputack:                                                  ; Release SDA high
0946: 26 02 FE AND   [0x2],0xFE         (1185)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SDA_pin
0949: 51 02    MOV   A,[0x2]            (1186)     mov   A,[Port_0_DriveMode_0_SHADE]
094B: 60 00    MOV   REG[0x0],A         (1187)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1188) 
                                        (1189) putack1:
094D: 50 02    MOV   A,0x2              (1190)     mov   A,I2CM_delayqtr                                  ; Delay 1/4 period
094F: 90 5C    CALL  0x09AD             (1191)     call  I2CM_delay
                                        (1192)                                                            ; Release SCL high
0951: 26 02 FD AND   [0x2],0xFD         (1193)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SCL_pin
0954: 51 02    MOV   A,[0x2]            (1194)     mov   A,[Port_0_DriveMode_0_SHADE]
0956: 60 00    MOV   REG[0x0],A         (1195)     mov   reg[I2CM_I2CPRTDM0],A
0958: 70 EF    AND   F,0xEF             
                                        (1196) 
                                        (1197)     M8C_SetBank0
                                        (1198) clockstretch5:                                             ; Wait for SCL high in case slave
                                        (1199)                                                            ; adds wait states.
095A: 49 00 02 TST   REG[0x0],0x2       (1200)     tst   reg[I2CM_I2CPRTDR],I2CM_SCL_pin
095D: AF FC    JZ    0x095A             (1201)     jz    clockstretch5
                                        (1202)                                                            ; delay for the high half of the clock.
095F: 50 05    MOV   A,0x5              (1203)     mov   A,I2CM_delayhalf                                 ; Delay 1/2 period
0961: 90 4A    CALL  0x09AD             (1204)     call  I2CM_delay
0963: 71 10    OR    F,0x10             
                                        (1205) 
                                        (1206)     M8C_SetBank1                                           ; Assert SCL low
0965: 2E 02 02 OR    [0x2],0x2          (1207)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin
0968: 51 02    MOV   A,[0x2]            (1208)     mov   A,[Port_0_DriveMode_0_SHADE]
096A: 60 00    MOV   REG[0x0],A         (1209)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1210)                                                            ; If there is another read pending
                                        (1211)                                                            ; must release SDA for slave
096C: 26 02 FE AND   [0x2],0xFE         (1212)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SDA_pin         ; Release SDA high
096F: 51 02    MOV   A,[0x2]            (1213)     mov   A,[Port_0_DriveMode_0_SHADE]
0971: 60 00    MOV   REG[0x0],A         (1214)     mov   reg[I2CM_I2CPRTDM0],A
0973: 70 EF    AND   F,0xEF             
0975: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1215)     M8C_SetBank0
                                        (1216) 
                                        (1217)     RAM_SETPAGE_CUR >I2CM_bStatus    
0978: 51 07    MOV   A,[0x7]            (1218)     mov   A, [I2CM_bData]
                                        (1219)     RAM_EPILOGUE RAM_USE_CLASS_4
097A: 7F       RET                      (1220)     ret
097B: 62 D0 00 MOV   REG[0xD0],0x0      
097E: 71 10    OR    F,0x10             
                                        (1221) .ENDSECTION
                                        (1222) 
                                        (1223) .SECTION
                                        (1224) ;-----------------------------------------------------------------------------
                                        (1225) ;  FUNCTION NAME: I2CM_SendStop
                                        (1226) ;
                                        (1227) ;  DESCRIPTION:
                                        (1228) ;    Assert stop condition.
                                        (1229) ;
                                        (1230) ;-----------------------------------------------------------------------------
                                        (1231) ;
                                        (1232) ;  ARGUMENTS: none
                                        (1233) ;
                                        (1234) ;  RETURNS: none
                                        (1235) ;
                                        (1236) ;  SIDE EFFECTS:
                                        (1237) ;    The A and X registers may be modified by this or future implementations
                                        (1238) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1239) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1240) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1241) ;    functions.
                                        (1242) ;          
                                        (1243) ;    Currently only the page pointer registers listed below are modified: 
                                        (1244) ;          CUR_PP
                                        (1245) ;
                                        (1246) ;  THEORY of OPERATION or PROCEDURE:
                                        (1247) ;     Send stop by releasing SDA high while SCL high.ASA21CR1
                                        (1248) ;
                                        (1249)  I2CM_SendStop:
                                        (1250) _I2CM_SendStop:
                                        (1251)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1252)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1253)     M8C_SetBank1                                           ; Assert ACK and SDA low
0980: 2E 02 03 OR    [0x2],0x3          (1254)     or    [Port_0_DriveMode_0_SHADE],I2CM_SCL_pin|I2CM_SDA_pin
0983: 51 02    MOV   A,[0x2]            (1255)     mov   A,[Port_0_DriveMode_0_SHADE]
0985: 60 00    MOV   REG[0x0],A         (1256)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1257) 
0987: 50 0C    MOV   A,0xC              (1258)     mov   A,I2CM_delay3qtr                                 ; Delay 3/4 period
0989: 90 22    CALL  0x09AD             (1259)     call  I2CM_delay
                                        (1260)                                                            ; Release SCL high
098B: 26 02 FD AND   [0x2],0xFD         (1261)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SCL_pin
098E: 51 02    MOV   A,[0x2]            (1262)     mov   A,[Port_0_DriveMode_0_SHADE]
0990: 60 00    MOV   REG[0x0],A         (1263)     mov   reg[I2CM_I2CPRTDM0],A
0992: 70 EF    AND   F,0xEF             
                                        (1264) 
                                        (1265)     M8C_SetBank0
                                        (1266) clockstretch6:                                             ; Wait for SCL to go high in case slave
                                        (1267)                                                            ; has added wait states.
0994: 49 00 02 TST   REG[0x0],0x2       (1268)     tst   reg[I2CM_I2CPRTDR],I2CM_SCL_pin
0997: AF FC    JZ    0x0994             (1269)     jz    clockstretch6
0999: 71 10    OR    F,0x10             
                                        (1270)     M8C_SetBank1
                                        (1271) 
099B: 50 0C    MOV   A,0xC              (1272)     mov   A,I2CM_delay3qtr                                 ; Delay 3/4 period
099D: 90 0E    CALL  0x09AD             (1273)     call  I2CM_delay
                                        (1274) 
                                        (1275)                                                            ; Release SDA high
099F: 26 02 FE AND   [0x2],0xFE         (1276)     and   [Port_0_DriveMode_0_SHADE],~I2CM_SDA_pin
09A2: 51 02    MOV   A,[0x2]            (1277)     mov   A,[Port_0_DriveMode_0_SHADE]
09A4: 60 00    MOV   REG[0x0],A         (1278)     mov   reg[I2CM_I2CPRTDM0],A
                                        (1279) 
09A6: 50 05    MOV   A,0x5              (1280)     mov   A,I2CM_delayhalf                                 ; Delay 1/2 period
09A8: 90 03    CALL  0x09AD             (1281)     call  I2CM_delay
09AA: 70 EF    AND   F,0xEF             
                                        (1282)     M8C_SetBank0
                                        (1283)     
                                        (1284)     RAM_EPILOGUE RAM_USE_CLASS_4
09AC: 7F       RET                      (1285)     ret
                                        (1286) .ENDSECTION
                                        (1287) 
                                        (1288) .SECTION
                                        (1289) ;-----------------------------------------------------------------------------
                                        (1290) ;  FUNCTION NAME: I2CM_delay
                                        (1291) ;
                                        (1292) ;  DESCRIPTION:
                                        (1293) ;    Create delays for I2CM routines.
                                        (1294) ;
                                        (1295) ;-----------------------------------------------------------------------------
                                        (1296) ;
                                        (1297) ;  ARGUMENTS: none
                                        (1298) ;
                                        (1299) ;  RETURNS: none
                                        (1300) ;
                                        (1301) ;  SIDE EFFECTS:
                                        (1302) ;    The A and X registers may be modified by this or future implementations
                                        (1303) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1304) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1305) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1306) ;    functions.
                                        (1307) ;          
                                        (1308) I2CM_delay:                                      ; 11 cycles for call. 32 total.
                                        (1309) I2CMdelay1:                                      ; Delay 1/4 period at 100 kHz
09AD: 78       DEC   A                  (1310)      dec  A                                      ; 4 cycles
09AE: BF FE    JNZ   0x09AD             (1311)      jnz  I2CMdelay1                             ; 5 cycles for jump, 4 no jump.     
09B0: 7F       RET                      (1312)      ret                                         ; 8 cycles
                                        (1313)   
                                        (1314) .ENDSECTION
                                        (1315) 
                                        (1316) 
                                        (1317) 
                                        (1318) ; End of File I2CM.asm
                                        (1319) 
                                        (1320) 
FILE: G:\PSOCPR~1\EVALBO~1\EVALBO~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #pragma interrupt_handler Timer;
(0008) 
(0009) volatile char Wert = 100;
(0010) char Port = 1;
(0011) 
(0012) void main(void)
(0013) {
(0014) 	M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);											// Interrupts an den I/O-Ports aktivieren
__UserModules_end|_main|__text_start|_main:
    09B1: 43 E0 20 OR    REG[0xE0],0x20
(0015)     M8C_EnableGInt;  
    09B4: 71 01    OR    F,0x1
(0016) 	LCD_Start();
    09B6: 10       PUSH  X
    09B7: 7C 05 1D LCALL _LCD_Init|LCD_Start|_LCD_Start
    09BA: 20       POP   X
(0017) 	LCD_InitBG(LCD_SOLID_BG);
    09BB: 10       PUSH  X
    09BC: 50 00    MOV   A,0x0
    09BE: 7C 06 66 LCALL _LCD_InitBG
(0018)     Timer16_Start();																
    09C1: 7C 03 B3 LCALL _Timer16_Start
(0019) 	Timer16_EnableInt(); 
    09C4: 7C 03 AB LCALL _Timer16_EnableInt
(0020) 	I2CM_Start();   
    09C7: 7C 06 9A LCALL _I2CM_Start
    09CA: 20       POP   X
(0021) 	
(0022) 	I2CM_fSendStart(0x20, I2CM_WRITE);
    09CB: 10       PUSH  X
    09CC: 57 00    MOV   X,0x0
    09CE: 50 20    MOV   A,0x20
    09D0: 7C 07 FF LCALL _I2CM_fSendStart
    09D3: 62 D0 00 MOV   REG[0xD0],0x0
    09D6: 20       POP   X
(0023) 	I2CM_fWrite(0x00);
    09D7: 10       PUSH  X
    09D8: 50 00    MOV   A,0x0
    09DA: 7C 08 39 LCALL _I2CM_fWrite
    09DD: 62 D0 00 MOV   REG[0xD0],0x0
    09E0: 20       POP   X
(0024) 	I2CM_fSendRepeatStart(0x20,I2CM_WRITE);  
    09E1: 10       PUSH  X
    09E2: 57 00    MOV   X,0x0
    09E4: 50 20    MOV   A,0x20
    09E6: 7C 07 C9 LCALL _I2CM_fSendRepeatStart
    09E9: 20       POP   X
(0025) 	I2CM_fWrite(Port);
    09EA: 10       PUSH  X
    09EB: 62 D0 00 MOV   REG[0xD0],0x0
    09EE: 51 0D    MOV   A,[Port]
    09F0: 7C 08 39 LCALL _I2CM_fWrite
    09F3: 62 D0 00 MOV   REG[0xD0],0x0
    09F6: 20       POP   X
(0026) 	I2CM_SendStop();
    09F7: 10       PUSH  X
    09F8: 7C 09 7B LCALL _I2CM_SendStop
    09FB: 20       POP   X
    09FC: 80 31    JMP   0x0A2E
(0027) 
(0028) 	while(1)
(0029) 	{     
(0030) 	LCD_Position(0,0);
    09FE: 10       PUSH  X
    09FF: 50 00    MOV   A,0x0
    0A01: 5C       MOV   X,A
    0A02: 7C 05 90 LCALL _LCD_Position
    0A05: 20       POP   X
(0031) 	LCD_PrHexInt(Wert);
    0A06: 62 D0 00 MOV   REG[0xD0],0x0
    0A09: 51 0C    MOV   A,[Wert]
    0A0B: 62 D0 00 MOV   REG[0xD0],0x0
    0A0E: 53 0A    MOV   [__r1],A
    0A10: 10       PUSH  X
    0A11: 50 00    MOV   A,0x0
    0A13: 08       PUSH  A
    0A14: 51 0A    MOV   A,[__r1]
    0A16: 20       POP   X
    0A17: 7C 04 40 LCALL _LCD_PrHexInt
    0A1A: 20       POP   X
(0032) 	LCD_DrawBG(1,0,16,0);
    0A1B: 10       PUSH  X
    0A1C: 50 00    MOV   A,0x0
    0A1E: 08       PUSH  A
    0A1F: 50 10    MOV   A,0x10
    0A21: 08       PUSH  A
    0A22: 50 00    MOV   A,0x0
    0A24: 08       PUSH  A
    0A25: 50 01    MOV   A,0x1
    0A27: 08       PUSH  A
    0A28: 7C 05 C2 LCALL _LCD_DrawBG
    0A2B: 38 FC    ADD   SP,0xFC
    0A2D: 20       POP   X
(0033) 	
(0034) 	}
    0A2E: 8F CF    JMP   0x09FE
    0A30: 8F FF    JMP   0x0A30
(0035) }
(0036) 
(0037) void Timer(void) 
(0038) {
_Timer:
    0A32: 71 C0    OR    F,0xC0
    0A34: 08       PUSH  A
    0A35: 5D D0    MOV   A,REG[0xD0]
    0A37: 08       PUSH  A
(0039)     Wert++;
    0A38: 62 D0 00 MOV   REG[0xD0],0x0
    0A3B: 76 0C    INC   [Wert]
    0A3D: 18       POP   A
    0A3E: 60 D0    MOV   REG[0xD0],A
    0A40: 18       POP   A
    0A41: 7E       RETI  
