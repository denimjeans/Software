//*****************************************************************************
//*****************************************************************************
//  FILENAME: DAC8.h
//   Version: 2.2, Updated on 2011/6/28 at 6:9:3
//  Generated by PSoC Designer 5.1.2306
//
//  DESCRIPTION:  DAC8 User Module C language interface file.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef DAC8_INCLUDE
#define DAC8_INCLUDE

#include <m8c.h>

//-------------------------------------------------
// Defines for DAC8 API's.
//-------------------------------------------------
// Power Setting Defines
#define DAC8_OFF                 0
#define DAC8_LOWPOWER            1
#define DAC8_MEDPOWER            2
#define DAC8_HIGHPOWER           3
#define DAC8_FULLPOWER           3

// Define constants for declaring function prototypes based on DataFormat parameter
#define DAC8_OffsetBinary            0x04
#define DAC8_TwosComplement          0x02
#define DAC8_SignAndMagnitude        0x01
#define DAC8_RawRegister             0x00
#define DAC8_DATAFORMAT          0x7
#define DAC8_OFFSETBINARY        DAC8_DATAFORMAT & DAC8_OffsetBinary
#define DAC8_TWOSCOMPLEMENT      DAC8_DATAFORMAT & DAC8_TwosComplement
#define DAC8_SIGNANDMAGNITUDE    DAC8_DATAFORMAT & DAC8_SignAndMagnitude

// Declare function fastcall16 pragmas
#pragma fastcall16 DAC8_Start
#pragma fastcall16 DAC8_SetPower
#pragma fastcall16 DAC8_Stop

//-------------------------------------------------
// Prototypes of the DAC8 API.
//-------------------------------------------------
extern void  DAC8_Start(BYTE bPowerSetting);
extern void  DAC8_SetPower(BYTE bPowerSetting);
extern void  DAC8_Stop(void);

// Declare overloaded functions based on DataForamt parameter selected
#if DAC8_OFFSETBINARY
   #pragma fastcall16 DAC8_WriteBlind
   #pragma fastcall16 DAC8_WriteStall
   extern void  DAC8_WriteBlind(BYTE bOutputValue);
   extern void  DAC8_WriteStall(BYTE bOutputValue);
#else
   #if DAC8_TWOSCOMPLEMENT
      #pragma fastcall16 DAC8_WriteBlind
      #pragma fastcall16 DAC8_WriteStall
      extern void  DAC8_WriteBlind(CHAR cOutputValue);
      extern void  DAC8_WriteStall(CHAR cOutputValue);
   #else    //DAC8_SIGNANDMAGNITUDE
      #pragma fastcall16 DAC8_WriteBlind2B
      #pragma fastcall16 DAC8_WriteStall2B
      extern void  DAC8_WriteBlind2B(BYTE bLSB, BYTE bMSB);
      extern void  DAC8_WriteStall2B(BYTE bLSB, BYTE bMSB);
   #endif
#endif

//-------------------------------------------------
// Hardware Register Definitions
//-------------------------------------------------

#pragma ioport  DAC8_LSB_CR0:   0x090                      // LSB Analog control register 0
BYTE            DAC8_LSB_CR0;
#pragma ioport  DAC8_LSB_CR1:   0x091                      // LSB Analog control register 1
BYTE            DAC8_LSB_CR1;
#pragma ioport  DAC8_LSB_CR2:   0x092                      // LSB Analog control register 2
BYTE            DAC8_LSB_CR2;
#pragma ioport  DAC8_LSB_CR3:   0x093                      // LSB Analog control register 3
BYTE            DAC8_LSB_CR3;

#pragma ioport  DAC8_MSB_CR0:   0x080                      // MSB Analog control register 0
BYTE            DAC8_MSB_CR0;
#pragma ioport  DAC8_MSB_CR1:   0x081                      // MSB Analog control register 1
BYTE            DAC8_MSB_CR1;
#pragma ioport  DAC8_MSB_CR2:   0x082                      // MSB Analog control register 2
BYTE            DAC8_MSB_CR2;
#pragma ioport  DAC8_MSB_CR3:   0x083                      // MSB Analog control register 3
BYTE            DAC8_MSB_CR3;

#endif
// end of file DAC8.h
