FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.2.2401
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#895 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.21
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C27xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0129)     // call	void_handler
0010: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0133)     // call	void_handler
0014: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   18h                      ;VC3 Interrupt Vector
                                        (0137)     // call	void_handler
0018: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0141)     // call	void_handler
001C: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 06 7A LJMP  _ADCINC_ADConversion_ISR(0145)     ljmp	_ADCINC_ADConversion_ISR
0023: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0149)     // call	void_handler
0024: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 03 75 LJMP  _SPIM_ISR          (0153)     ljmp	_SPIM_ISR
002B: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0157)     // call	void_handler
002C: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 03 15 LJMP  _Timer16_ISR       (0161)     ljmp	_Timer16_ISR
0033: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0165)     // call	void_handler
0034: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0169)     // call	void_handler
0038: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0173)     // call	void_handler
003C: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0177)     // call	void_handler
0060: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0181)     // call	void_handler
0064: 7E       RETI                     (0182)     reti
0068: 71 10    OR    F,0x10             
                                        (0183) 
                                        (0184) ;-----------------------------------------------------------------------------
                                        (0185) ;  Start of Execution.
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0188) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0189) ;
                                        (0190) 
                                        (0191) IF	(TOOLCHAIN & HITECH)
                                        (0192)  	AREA PD_startup(CODE, REL, CON)
                                        (0193) ELSE
                                        (0194)     org 68h
                                        (0195) ENDIF
                                        (0196) __Start:
                                        (0197) 
                                        (0198)     ; initialize SMP values for voltage stabilization, if required,
                                        (0199)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0200)     ; least for now. 
                                        (0201)     ;
                                        (0202)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0203)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0204)     M8C_SetBank0
                                        (0205) 
                                        (0206) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0207) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0208)     M8C_EnableWatchDog
                                        (0209) ENDIF
                                        (0210) 
                                        (0211) IF ( SELECT_32K )
                                        (0212)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0213) ELSE
0072: 41 FE FB AND   REG[0xFE],0xFB     (0214)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0215) ENDIF
                                        (0216) 
                                        (0217) IF	(TOOLCHAIN & HITECH) 
                                        (0218)     ;---------------------------
                                        (0219)     ; Set up the Temporary stack
                                        (0220)     ;---------------------------
                                        (0221)     ; A temporary stack is set up for the SSC instructions.
                                        (0222)     ; The real stack start will be assigned later.
                                        (0223)     ;
                                        (0224) 	global		__Lstackps
                                        (0225) 	mov     a,low __Lstackps
                                        (0226) 	swap    a,sp
                                        (0227) ELSE
                                        (0228)     ;------------------
                                        (0229)     ; Set up the stack
                                        (0230)     ;------------------
0075: 50 1C    MOV   A,0x1C             (0231)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0232)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0233) ENDIF
                                        (0234) 
                                        (0235)     ;-----------------------------------------------
                                        (0236)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0237)     ;-----------------------------------------------
                                        (0238) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0239) IF ( SUPPLY_VOLTAGE )         ; 1 means 5.0V
                                        (0240)  IF ( AGND_BYPASS )
                                        (0241)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0242)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0243)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0244)     ; value using the proper trim values.
                                        (0245)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0246)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0247)  ENDIF
                                        (0248) ELSE    ; 3.3 V Operation, not 5.0V
                                        (0249)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0250) ENDIF ;(SUPPLY_VOLTAGE)
                                        (0251) 
007B: 55 F8 00 MOV   [0xF8],0x0         (0252)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [0xF9],0x0         (0253)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0254) 
                                        (0255)     ;---------------------------------------
                                        (0256)     ; Initialize Crystal Oscillator and PLL
                                        (0257)     ;---------------------------------------
                                        (0258) 
                                        (0259) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0260)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0261)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0262)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0263)     ; the ECO to stabilize.
                                        (0264)     ;
                                        (0265)     M8C_SetBank1
                                        (0266)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0267)     M8C_SetBank0
                                        (0268)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0269)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0270)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0271) .WaitFor1s:
                                        (0272)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0273)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0274)                                           ;   since interrupts are not globally enabled
                                        (0275) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0276)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0277)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0278)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0279)     M8C_SetBank0
                                        (0280)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0281) 
                                        (0282) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0283) 
                                        (0284) IF ( PLL_MODE )
                                        (0285)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0286)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0287)     ;
                                        (0288)     M8C_SetBank1
                                        (0289)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0290)     M8C_SetBank0
                                        (0291)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0292)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0293) 
                                        (0294) .WaitFor16ms:
                                        (0295)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0296)     jz   .WaitFor16ms
                                        (0297)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0298)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0299)     M8C_SetBank0
                                        (0300) 
                                        (0301) IF      ( WAIT_FOR_32K )
                                        (0302) ELSE ; !( WAIT_FOR_32K )
                                        (0303)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0304)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0305) ENDIF ;(WAIT_FOR_32K)
                                        (0306) ENDIF ;(PLL_MODE)
                                        (0307) 
                                        (0308) 	;-------------------------------------------------------
                                        (0309)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0310)     ;-------------------------------------------------------
                                        (0311) 
                                        (0312)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0313) 
                                        (0314) IF (SYSCLK_SOURCE)
                                        (0315)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0316) ENDIF
                                        (0317)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0318) 
                                        (0319)     ;------------------------
                                        (0320)     ; Close CT leakage path.
                                        (0321)     ;------------------------
008B: 62 71 05 MOV   REG[0x71],0x5      (0322)     mov   reg[ACB00CR0], 05h
008E: 62 75 05 MOV   REG[0x75],0x5      (0323)     mov   reg[ACB01CR0], 05h
0091: 62 79 05 MOV   REG[0x79],0x5      (0324)     mov   reg[ACB02CR0], 05h
0094: 62 7D 05 MOV   REG[0x7D],0x5      (0325)     mov   reg[ACB03CR0], 05h
                                        (0326) 
                                        (0327)     ;-------------------------
                                        (0328)     ; Load Base Configuration
                                        (0329)     ;-------------------------
                                        (0330)     ; Load global parameter settings and load the user modules in the
                                        (0331)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0332)     ; to minimize start up time; (2) We may still need to play with the
                                        (0333)     ; Sleep Timer.
                                        (0334)     ;
0097: 7C 02 AE LCALL 0x02AE             (0335)     lcall LoadConfigInit
                                        (0336) 
                                        (0337)     ;-----------------------------------
                                        (0338)     ; Initialize C Run-Time Environment
                                        (0339)     ;-----------------------------------
                                        (0340) IF ( C_LANGUAGE_SUPPORT )
009A: 50 00    MOV   A,0x0              (0341)     mov  A,0                           ; clear the 'bss' segment to zero
009C: 55 10 1C MOV   [__r0],0x1C        (0342)     mov  [__r0],<__bss_start
                                        (0343) BssLoop:
009F: 3C 10 1C CMP   [__r0],0x1C        (0344)     cmp  [__r0],<__bss_end
00A2: A0 05    JZ    0x00A8             (0345)     jz   BssDone
00A4: 3F 10    MVI   [__r0],A           (0346)     mvi  [__r0],A
00A6: 8F F8    JMP   0x009F             (0347)     jmp  BssLoop
                                        (0348) BssDone:
00A8: 50 01    MOV   A,0x1              (0349)     mov  A,>__idata_start              ; copy idata to data segment
00AA: 57 E7    MOV   X,0xE7             (0350)     mov  X,<__idata_start
00AC: 55 10 00 MOV   [__r0],0x0         (0351)     mov  [__r0],<__data_start
                                        (0352) IDataLoop:
00AF: 3C 10 02 CMP   [__r0],0x2         (0353)     cmp  [__r0],<__data_end
00B2: A0 0B    JZ    0x00BE             (0354)     jz   C_RTE_Done
00B4: 08       PUSH  A                  (0355)     push A
00B5: 28       ROMX                     (0356)     romx
00B6: 3F 10    MVI   [__r0],A           (0357)     mvi  [__r0],A
00B8: 18       POP   A                  (0358)     pop  A
00B9: 75       INC   X                  (0359)     inc  X
00BA: 09 00    ADC   A,0x0              (0360)     adc  A,0
00BC: 8F F2    JMP   0x00AF             (0361)     jmp  IDataLoop
00BE: 71 10    OR    F,0x10             
                                        (0362) 
                                        (0363) C_RTE_Done:
                                        (0364) 
                                        (0365) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0366) 
                                        (0367)     ;-------------------------------
                                        (0368)     ; Voltage Stabilization for SMP
                                        (0369)     ;-------------------------------
                                        (0370) 
                                        (0371) IF ( SUPPLY_VOLTAGE )                  ; 1 Means 5 Volts
                                        (0372) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0373)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0374)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0375)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0376)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0377)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0378)     M8C_SetBank1
                                        (0379)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0380)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0381)     M8C_SetBank0
                                        (0382)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0383)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0384) .WaitFor2ms:
                                        (0385)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0386)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0387) ENDIF ; ( SWITCH_MODE_PUMP ^ 1 )
                                        (0388) ENDIF ; ( SUPPLY_VOLTAGE )
                                        (0389) 
                                        (0390)     ;-------------------------------
                                        (0391)     ; Set Power-On Reset (POR) Level
                                        (0392)     ;-------------------------------
                                        (0393) 
                                        (0394)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0395)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0396)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0397)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0398)     ;  lead to corruption of PSoC flash.
                                        (0399) 
                                        (0400)     M8C_SetBank1
                                        (0401) 
                                        (0402) IF ( SUPPLY_VOLTAGE )                       ; 1 Means 5 Volts
                                        (0403)  IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )  ;    Also 24MHz?
                                        (0404)                                             ;       no, set 4.5V POR in user code, if desired
                                        (0405)  ELSE ; 24HMz                               ;
00C0: 43 E3 20 OR    REG[0xE3],0x20     (0406)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
00C3: 70 EF    AND   F,0xEF             
                                        (0407)  ENDIF ; OSC_CRO_CPU_24MHz
                                        (0408) ENDIF ; 5V
                                        (0409) 
                                        (0410)     M8C_SetBank0
                                        (0411) 
                                        (0412)     ;----------------------------
                                        (0413)     ; Wrap up and invoke "main"
                                        (0414)     ;----------------------------
                                        (0415) 
                                        (0416)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0417)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0418)     ;
00C5: 62 E0 00 MOV   REG[0xE0],0x0      (0419)     mov  reg[INT_MSK0],0
00C8: 71 10    OR    F,0x10             
                                        (0420) 
                                        (0421)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0422)     ;
                                        (0423)     M8C_SetBank1
00CA: 62 E0 03 MOV   REG[0xE0],0x3      (0424)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00CD: 70 EF    AND   F,0xEF             
                                        (0425)     M8C_SetBank0
                                        (0426) 
                                        (0427)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0428)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0429)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0430)     ;
00CF: 62 E2 00 MOV   REG[0xE2],0x0      (0431)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0432)                                    ; have been set during the boot process.
                                        (0433) IF	(TOOLCHAIN & HITECH)
                                        (0434) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0435) ELSE
                                        (0436) IF ENABLE_LJMP_TO_MAIN
                                        (0437)     ljmp  _main                    ; goto main (no return)
                                        (0438) ELSE
00D2: 7C 07 5D LCALL __UserModules_end|__text_start|_main|_main(0439)     lcall _main                    ; call main
                                        (0440) .Exit:
00D5: 8F FF    JMP   0x00D5             (0441)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0442) ENDIF
                                        (0443) ENDIF ; TOOLCHAIN
                                        (0444) 
                                        (0445)     ;---------------------------------
                                        (0446)     ; Library Access to Global Parms
                                        (0447)     ;---------------------------------
                                        (0448)     ;
                                        (0449)  bGetPowerSetting:
                                        (0450) _bGetPowerSetting:
                                        (0451)     ; Synthesize the "power setting" value used by chips with SlowIMO mode.
                                        (0452)     ; Returns value of POWER_SETTING in the A register.
                                        (0453)     ; No inputs. No Side Effects.
                                        (0454)     ;
                                        (0455) IF ( SUPPLY_VOLTAGE )            ; 1 means 5.0V
00D7: 50 10    MOV   A,0x10             (0456)     mov   A, POWER_SET_5V0_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0457) ELSE        
                                        (0458)     mov   A, POWER_SET_3V3_24MHZ   ; Supply & Internal Main Oscillator speed
                                        (0459) ENDIF
00D9: 7F       RET                      (0460)     ret
                                        (0461) 
                                        (0462) IF	(TOOLCHAIN & HITECH)
                                        (0463) ELSE
                                        (0464)     ;---------------------------------
                                        (0465)     ; Order Critical RAM & ROM AREAs
                                        (0466)     ;---------------------------------
                                        (0467)     ;  'TOP' is all that has been defined so far...
                                        (0468) 
                                        (0469)     ;  ROM AREAs for C CONST, static & global items
                                        (0470)     ;
                                        (0471)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
                                        (0472)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
                                        (0473) __idata_start:
                                        (0474) 
                                        (0475)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
                                        (0476) __func_lit_start:
                                        (0477) 
                                        (0478)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0479)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0480) 
                                        (0481)     ; CODE segment for general use
                                        (0482)     ;
                                        (0483)     AREA text (ROM, REL, CON)
                                        (0484) __text_start:
                                        (0485) 
                                        (0486)     ; RAM area usage
                                        (0487)     ;
                                        (0488)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0489) __data_start:
                                        (0490) 
                                        (0491)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0492)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0493)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0494) __bss_start:
                                        (0495) 
                                        (0496) ENDIF ; TOOLCHAIN
                                        (0497) 
                                        (0498) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.2.2401
01E9: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_spi_Bank1
                                        (0006) export LoadConfigTBL_spi_Bank0
                                        (0007) export LoadConfigTBL_spi_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_spi_Bank0:
                                        (0010) ;  Instance name ADCINC, User Module ADCINC
                                        (0011) ;       Instance name ADCINC, Block Name ADC(ASC10)
                                        (0012) 	db		80h, 90h		;ADCINC_AtoDcr0(ASC10CR0)
                                        (0013) 	db		81h, 00h		;ADCINC_AtoDcr1(ASC10CR1)
                                        (0014) 	db		82h, 60h		;ADCINC_AtoDcr2(ASC10CR2)
                                        (0015) 	db		83h, f0h		;ADCINC_AtoDcr3(ASC10CR3)
                                        (0016) ;       Instance name ADCINC, Block Name PWM(DBB00)
                                        (0017) 	db		23h, 00h		;ADCINC_PWMcr0(DBB00CR0)
                                        (0018) 	db		21h, 00h		;ADCINC_PWMdr1(DBB00DR1)
                                        (0019) 	db		22h, 01h		;ADCINC_PWMdr2(DBB00DR2)
                                        (0020) ;  Instance name LCD, User Module LCD
                                        (0021) ;  Instance name PGA, User Module PGA
                                        (0022) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0023) 	db		71h, fdh		;PGA_GAIN_CR0(ACB00CR0)
                                        (0024) 	db		72h, 21h		;PGA_GAIN_CR1(ACB00CR1)
                                        (0025) 	db		73h, 20h		;PGA_GAIN_CR2(ACB00CR2)
                                        (0026) 	db		70h, 00h		;PGA_GAIN_CR3(ACB00CR3)
                                        (0027) ;  Instance name SPIM, User Module SPIM
                                        (0028) ;       Instance name SPIM, Block Name SPIM(DCB02)
                                        (0029) 	db		2bh, 00h		;SPIM_CONTROL_REG  (DCB02CR0)
                                        (0030) 	db		29h, 00h		;SPIM_TX_BUFFER_REG(DCB02DR1)
                                        (0031) 	db		2ah, 00h		;SPIM_RX_BUFFER_REG(DCB02DR2)
                                        (0032) ;  Instance name Timer16, User Module Timer16
                                        (0033) ;       Instance name Timer16, Block Name TIMER16_LSB(DCB03)
                                        (0034) 	db		2fh, 00h		;Timer16_CONTROL_LSB_REG(DCB03CR0)
                                        (0035) 	db		2dh, 00h		;Timer16_PERIOD_LSB_REG(DCB03DR1)
                                        (0036) 	db		2eh, 00h		;Timer16_COMPARE_LSB_REG(DCB03DR2)
                                        (0037) ;       Instance name Timer16, Block Name TIMER16_MSB(DBB10)
                                        (0038) 	db		33h, 04h		;Timer16_CONTROL_MSB_REG(DBB10CR0)
                                        (0039) 	db		31h, 80h		;Timer16_PERIOD_MSB_REG(DBB10DR1)
                                        (0040) 	db		32h, 00h		;Timer16_COMPARE_MSB_REG(DBB10DR2)
                                        (0041) ;  Global Register values Bank 0
                                        (0042) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0043) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0044) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0045) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0046) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0047) 	db		e7h, 02h		; DecimatorControl_1 register (DEC_CR1)
                                        (0048) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0049) 	db		b0h, 02h		; Row_0_InputMux register (RDI0RI)
                                        (0050) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0051) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0052) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0053) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0054) 	db		b5h, 80h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0055) 	db		b6h, 40h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0056) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0057) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0058) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0059) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0060) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0061) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0062) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0063) 	db		ffh
                                        (0064) LoadConfigTBL_spi_Bank1:
                                        (0065) ;  Instance name ADCINC, User Module ADCINC
                                        (0066) ;       Instance name ADCINC, Block Name ADC(ASC10)
                                        (0067) ;       Instance name ADCINC, Block Name PWM(DBB00)
                                        (0068) 	db		20h, 31h		;ADCINC_PWMfn(DBB00FN)
                                        (0069) 	db		21h, 15h		;ADCINC_PWMsl(DBB00IN)
                                        (0070) 	db		22h, 40h		;ADCINC_PWMos(DBB00OU)
                                        (0071) ;  Instance name LCD, User Module LCD
                                        (0072) ;  Instance name PGA, User Module PGA
                                        (0073) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0074) ;  Instance name SPIM, User Module SPIM
                                        (0075) ;       Instance name SPIM, Block Name SPIM(DCB02)
                                        (0076) 	db		28h, 06h		;SPIM_FUNCTION_REG (DCB02FN)
                                        (0077) 	db		29h, c6h		;SPIM_INPUT_REG    (DCB02IN)
                                        (0078) 	db		2ah, 7dh		;SPIM_OUTPUT_REG   (DCB02OU)
                                        (0079) ;  Instance name Timer16, User Module Timer16
                                        (0080) ;       Instance name Timer16, Block Name TIMER16_LSB(DCB03)
                                        (0081) 	db		2ch, 00h		;Timer16_FUNC_LSB_REG(DCB03FN)
                                        (0082) 	db		2dh, 17h		;Timer16_INPUT_LSB_REG(DCB03IN)
                                        (0083) 	db		2eh, 40h		;Timer16_OUTPUT_LSB_REG(DCB03OU)
                                        (0084) ;       Instance name Timer16, Block Name TIMER16_MSB(DBB10)
                                        (0085) 	db		30h, 20h		;Timer16_FUNC_MSB_REG(DBB10FN)
                                        (0086) 	db		31h, 37h		;Timer16_INPUT_MSB_REG(DBB10IN)
                                        (0087) 	db		32h, 40h		;Timer16_OUTPUT_MSB_REG(DBB10OU)
                                        (0088) ;  Global Register values Bank 1
                                        (0089) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0090) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0091) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0092) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0093) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0094) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0095) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0096) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0097) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0098) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0099) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0100) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0101) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0102) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0103) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0104) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0105) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0106) 	db		ffh
                                        (0107) AREA psoc_config(rom, rel)
                                        (0108) LoadConfigTBL_spi_Ordered:
                                        (0109) ;  Ordered Global Register values
                                        (0110) 	M8C_SetBank0
01EB: 62 00 00 MOV   REG[0x0],0x0       (0111) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
01EE: 71 10    OR    F,0x10             
                                        (0112) 	M8C_SetBank1
01F0: 62 00 00 MOV   REG[0x0],0x0       (0113) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
01F3: 62 01 FF MOV   REG[0x1],0xFF      (0114) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
01F6: 70 EF    AND   F,0xEF             
                                        (0115) 	M8C_SetBank0
01F8: 62 03 FF MOV   REG[0x3],0xFF      (0116) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
01FB: 62 02 00 MOV   REG[0x2],0x0       (0117) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
01FE: 71 10    OR    F,0x10             
                                        (0118) 	M8C_SetBank1
0200: 62 02 00 MOV   REG[0x2],0x0       (0119) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0203: 62 03 00 MOV   REG[0x3],0x0       (0120) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0206: 70 EF    AND   F,0xEF             
                                        (0121) 	M8C_SetBank0
0208: 62 01 00 MOV   REG[0x1],0x0       (0122) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
020B: 62 04 00 MOV   REG[0x4],0x0       (0123) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
020E: 71 10    OR    F,0x10             
                                        (0124) 	M8C_SetBank1
0210: 62 04 00 MOV   REG[0x4],0x0       (0125) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
0213: 62 05 FF MOV   REG[0x5],0xFF      (0126) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0216: 70 EF    AND   F,0xEF             
                                        (0127) 	M8C_SetBank0
0218: 62 07 FF MOV   REG[0x7],0xFF      (0128) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
021B: 62 06 00 MOV   REG[0x6],0x0       (0129) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
021E: 71 10    OR    F,0x10             
                                        (0130) 	M8C_SetBank1
0220: 62 06 00 MOV   REG[0x6],0x0       (0131) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0223: 62 07 00 MOV   REG[0x7],0x0       (0132) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0226: 70 EF    AND   F,0xEF             
                                        (0133) 	M8C_SetBank0
0228: 62 05 00 MOV   REG[0x5],0x0       (0134) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
022B: 62 08 00 MOV   REG[0x8],0x0       (0135) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
022E: 71 10    OR    F,0x10             
                                        (0136) 	M8C_SetBank1
0230: 62 08 03 MOV   REG[0x8],0x3       (0137) 	mov	reg[08h], 03h		; Port_2_DriveMode_0 register (PRT2DM0)
0233: 62 09 FC MOV   REG[0x9],0xFC      (0138) 	mov	reg[09h], fch		; Port_2_DriveMode_1 register (PRT2DM1)
0236: 70 EF    AND   F,0xEF             
                                        (0139) 	M8C_SetBank0
0238: 62 0B FC MOV   REG[0xB],0xFC      (0140) 	mov	reg[0bh], fch		; Port_2_DriveMode_2 register (PRT2DM2)
023B: 62 0A 00 MOV   REG[0xA],0x0       (0141) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
023E: 71 10    OR    F,0x10             
                                        (0142) 	M8C_SetBank1
0240: 62 0A 00 MOV   REG[0xA],0x0       (0143) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0243: 62 0B 00 MOV   REG[0xB],0x0       (0144) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0246: 70 EF    AND   F,0xEF             
                                        (0145) 	M8C_SetBank0
0248: 62 09 00 MOV   REG[0x9],0x0       (0146) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
024B: 62 0C 00 MOV   REG[0xC],0x0       (0147) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
024E: 71 10    OR    F,0x10             
                                        (0148) 	M8C_SetBank1
0250: 62 0C 28 MOV   REG[0xC],0x28      (0149) 	mov	reg[0ch], 28h		; Port_3_DriveMode_0 register (PRT3DM0)
0253: 62 0D 57 MOV   REG[0xD],0x57      (0150) 	mov	reg[0dh], 57h		; Port_3_DriveMode_1 register (PRT3DM1)
0256: 70 EF    AND   F,0xEF             
                                        (0151) 	M8C_SetBank0
0258: 62 0F 56 MOV   REG[0xF],0x56      (0152) 	mov	reg[0fh], 56h		; Port_3_DriveMode_2 register (PRT3DM2)
025B: 62 0E 29 MOV   REG[0xE],0x29      (0153) 	mov	reg[0eh], 29h		; Port_3_GlobalSelect register (PRT3GS)
025E: 71 10    OR    F,0x10             
                                        (0154) 	M8C_SetBank1
0260: 62 0E 00 MOV   REG[0xE],0x0       (0155) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0263: 62 0F 00 MOV   REG[0xF],0x0       (0156) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0266: 70 EF    AND   F,0xEF             
                                        (0157) 	M8C_SetBank0
0268: 62 0D 00 MOV   REG[0xD],0x0       (0158) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
026B: 62 10 00 MOV   REG[0x10],0x0      (0159) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
026E: 71 10    OR    F,0x10             
                                        (0160) 	M8C_SetBank1
0270: 62 10 7F MOV   REG[0x10],0x7F     (0161) 	mov	reg[10h], 7fh		; Port_4_DriveMode_0 register (PRT4DM0)
0273: 62 11 80 MOV   REG[0x11],0x80     (0162) 	mov	reg[11h], 80h		; Port_4_DriveMode_1 register (PRT4DM1)
0276: 70 EF    AND   F,0xEF             
                                        (0163) 	M8C_SetBank0
0278: 62 13 80 MOV   REG[0x13],0x80     (0164) 	mov	reg[13h], 80h		; Port_4_DriveMode_2 register (PRT4DM2)
027B: 62 12 00 MOV   REG[0x12],0x0      (0165) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
027E: 71 10    OR    F,0x10             
                                        (0166) 	M8C_SetBank1
0280: 62 12 00 MOV   REG[0x12],0x0      (0167) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0283: 62 13 00 MOV   REG[0x13],0x0      (0168) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0286: 70 EF    AND   F,0xEF             
                                        (0169) 	M8C_SetBank0
0288: 62 11 00 MOV   REG[0x11],0x0      (0170) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
028B: 62 14 00 MOV   REG[0x14],0x0      (0171) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
028E: 71 10    OR    F,0x10             
                                        (0172) 	M8C_SetBank1
0290: 62 14 00 MOV   REG[0x14],0x0      (0173) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0293: 62 15 0F MOV   REG[0x15],0xF      (0174) 	mov	reg[15h], 0fh		; Port_5_DriveMode_1 register (PRT5DM1)
0296: 70 EF    AND   F,0xEF             
                                        (0175) 	M8C_SetBank0
0298: 62 17 0F MOV   REG[0x17],0xF      (0176) 	mov	reg[17h], 0fh		; Port_5_DriveMode_2 register (PRT5DM2)
029B: 62 16 00 MOV   REG[0x16],0x0      (0177) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
029E: 71 10    OR    F,0x10             
                                        (0178) 	M8C_SetBank1
02A0: 62 16 00 MOV   REG[0x16],0x0      (0179) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02A3: 62 17 00 MOV   REG[0x17],0x0      (0180) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02A6: 70 EF    AND   F,0xEF             
                                        (0181) 	M8C_SetBank0
02A8: 62 15 00 MOV   REG[0x15],0x0      (0182) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02AB: 70 EF    AND   F,0xEF             
                                        (0183) 	M8C_SetBank0
02AD: 7F       RET                      (0184) 	ret
                                        (0185) 
                                        (0186) 
                                        (0187) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.2.2401
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_spi
                                        (0026) export _LoadConfig_spi
                                        (0027) export Port_4_Data_SHADE
                                        (0028) export _Port_4_Data_SHADE
                                        (0029) export Port_4_DriveMode_0_SHADE
                                        (0030) export _Port_4_DriveMode_0_SHADE
                                        (0031) export Port_4_DriveMode_1_SHADE
                                        (0032) export _Port_4_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
02AE: 55 11 00 MOV   [0x11],0x0         (0065) 	mov		[Port_4_Data_SHADE], 0h
02B1: 55 12 7F MOV   [0x12],0x7F        (0066) 	mov		[Port_4_DriveMode_0_SHADE], 7fh
02B4: 55 13 80 MOV   [0x13],0x80        (0067) 	mov		[Port_4_DriveMode_1_SHADE], 80h
                                        (0068) 
02B7: 7C 02 BE LCALL 0x02BE             (0069) 	lcall	LoadConfig_spi
02BA: 7C 01 E9 LCALL 0x01E9             (0070) 	lcall	LoadConfigTBL_spi_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
02BD: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration spi
                                        (0078) ;
                                        (0079) ;    Load configuration registers for spi.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_spi:
                                        (0096)  LoadConfig_spi:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
02BE: 10       PUSH  X                  (0099) 	push	x
02BF: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
02C1: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
02C3: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
02C4: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_spi_Bank0
02C6: 57 59    MOV   X,0x59             (0105)     mov     X, <LoadConfigTBL_spi_Bank0
02C8: 7C 02 D9 LCALL 0x02D9             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
02CB: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
02CD: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
02CE: 50 01    MOV   A,0x1              (0111)     mov     A, >LoadConfigTBL_spi_Bank1
02D0: 57 AC    MOV   X,0xAC             (0112)     mov     X, <LoadConfigTBL_spi_Bank1
02D2: 7C 02 D9 LCALL 0x02D9             (0113)     lcall   LoadConfig              ; Load the bank 1 values
02D5: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
02D7: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
02D8: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
02D9: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
02DB: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
02DC: 08       PUSH  A                  (0143)     push    A
02DD: 4F       MOV   X,SP               (0144)     mov     X, SP
02DE: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
02E1: D0 04    JNC   0x02E6             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
02E3: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
02E6: 18       POP   A                  (0149)     pop     A
02E7: 20       POP   X                  (0150)     pop     X
02E8: 70 EF    AND   F,0xEF             
02EA: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
02ED: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
02EE: 08       PUSH  A                  (0156)     push    A
02EF: 28       ROMX                     (0157)     romx                            ; Load register address from table
02F0: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
02F2: A0 1F    JZ    0x0312             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
02F4: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
02F5: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
02F8: A0 03    JZ    0x02FC             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
02FA: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
02FC: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
02FE: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
02FF: 20       POP   X                  (0167)     pop     X
0300: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
0301: 09 00    ADC   A,0x0              (0169)     adc     A, 0
0303: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
0304: 08       PUSH  A                  (0171)     push    A
0305: 28       ROMX                     (0172)     romx                            ; load config data from the table
0306: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
0307: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
0309: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
030B: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
030C: 20       POP   X                  (0177)     pop     X
030D: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
030E: 09 00    ADC   A,0x0              (0179)     adc     A, 0
0310: 8F D7    JMP   0x02E8             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
0312: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
0314: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_4_Data_SHADE:
                                        (0192) Port_4_Data_SHADE:	BLK	1
                                        (0193) _Port_4_DriveMode_0_SHADE:
                                        (0194) Port_4_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_4_DriveMode_1_SHADE:
                                        (0196) Port_4_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\timer16int.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16INT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2011/12/1 at 17:23:24
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer16.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer16_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer16_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer16_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
0315: 7D 07 E4 LJMP  _Timer16           (0068) 	ljmp _Timer16
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ; Insert your custom assembly code above this banner
                                        (0071)    ;---------------------------------------------------
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert a lcall to a C function below this banner
                                        (0075)    ; and un-comment the lines between these banners
                                        (0076)    ;---------------------------------------------------
                                        (0077) 
                                        (0078)    ;---------------------------------------------------
                                        (0079)    ; Insert a lcall to a C function above this banner
                                        (0080)    ; and un-comment the lines between these banners
                                        (0081)    ;---------------------------------------------------
                                        (0082)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0083) 
0318: 7E       RETI                     (0084)    reti
                                        (0085) 
                                        (0086) 
                                        (0087) ; end of file Timer16INT.asm
FILE: lib\timer16.asm                   (0001) ;;*****************************************************************************
0319: 43 E1 10 OR    REG[0xE1],0x10     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16.asm
                                        (0004) ;;   Version: 2.6, Updated on 2011/12/1 at 17:23:24
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer16.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer16_EnableInt
                                        (0030) export _Timer16_EnableInt
                                        (0031) export  Timer16_DisableInt
                                        (0032) export _Timer16_DisableInt
                                        (0033) export  Timer16_Start
                                        (0034) export _Timer16_Start
                                        (0035) export  Timer16_Stop
                                        (0036) export _Timer16_Stop
                                        (0037) export  Timer16_WritePeriod
                                        (0038) export _Timer16_WritePeriod
                                        (0039) export  Timer16_WriteCompareValue
                                        (0040) export _Timer16_WriteCompareValue
                                        (0041) export  Timer16_wReadCompareValue
                                        (0042) export _Timer16_wReadCompareValue
                                        (0043) export  Timer16_wReadTimer
                                        (0044) export _Timer16_wReadTimer
                                        (0045) export  Timer16_wReadTimerSaveCV
                                        (0046) export _Timer16_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer16_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer16_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer16_ReadTimer         ; deprecated
                                        (0053) export _wTimer16_ReadTimer         ; deprecated
                                        (0054) export  wTimer16_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer16_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer16_ReadCounter       ; obsolete
                                        (0058) export _wTimer16_ReadCounter       ; obsolete
                                        (0059) export  wTimer16_CaptureCounter    ; obsolete
                                        (0060) export _wTimer16_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA spi_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer16_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer16_EnableInt:
                                        (0098) _Timer16_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer16_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
031C: 7F       RET                      (0102)    ret
031D: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer16_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer16_DisableInt:
                                        (0126) _Timer16_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer16_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0320: 7F       RET                      (0130)    ret
0321: 43 2F 01 OR    REG[0x2F],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer16_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer16_Start:
                                        (0154) _Timer16_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer16_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0324: 7F       RET                      (0158)    ret
0325: 41 2F FE AND   REG[0x2F],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer16_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer16_Stop:
                                        (0182) _Timer16_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer16_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0328: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer16_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer16_WritePeriod:
                                        (0211) _Timer16_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0329: 60 2D    MOV   REG[0x2D],A        (0213)    mov   reg[Timer16_PERIOD_LSB_REG], A
032B: 5B       MOV   A,X                (0214)    mov   A, X
032C: 60 31    MOV   REG[0x31],A        (0215)    mov   reg[Timer16_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
032E: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer16_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer16_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer16_WriteCompareValue:
                                        (0243) _Timer16_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
032F: 60 2E    MOV   REG[0x2E],A        (0245)    mov   reg[Timer16_COMPARE_LSB_REG], A
0331: 5B       MOV   A,X                (0246)    mov   A, X
0332: 60 32    MOV   REG[0x32],A        (0247)    mov   reg[Timer16_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
0334: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer16_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer16_wReadCompareValue:
                                        (0272) _Timer16_wReadCompareValue:
                                        (0273)  wTimer16_ReadCompareValue:                      ; this name deprecated
                                        (0274) _wTimer16_ReadCompareValue:                      ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
0335: 5D 32    MOV   A,REG[0x32]        (0276)    mov   A, reg[Timer16_COMPARE_MSB_REG]
0337: 5C       MOV   X,A                (0277)    mov   X, A
0338: 5D 2E    MOV   A,REG[0x2E]        (0278)    mov   A, reg[Timer16_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
033A: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer16_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer16_wReadTimerSaveCV:
                                        (0321) _Timer16_wReadTimerSaveCV:
                                        (0322)  wTimer16_ReadTimerSaveCV:                       ; this name deprecated
                                        (0323) _wTimer16_ReadTimerSaveCV:                       ; this name deprecated
                                        (0324)  wTimer16_ReadCounter:                           ; this name deprecated
                                        (0325) _wTimer16_ReadCounter:                           ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
033B: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
033C: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
033E: 5D 2F    MOV   A,REG[0x2F]        (0334)    mov   A, reg[Timer16_CONTROL_LSB_REG]         ; save the Control register
0340: 08       PUSH  A                  (0335)    push  A
0341: 5D 2E    MOV   A,REG[0x2E]        (0336)    mov   A, reg[Timer16_COMPARE_LSB_REG]         ; save the Compare register
0343: 08       PUSH  A                  (0337)    push  A
0344: 5D 32    MOV   A,REG[0x32]        (0338)    mov   A, reg[Timer16_COMPARE_MSB_REG]
0346: 08       PUSH  A                  (0339)    push  A
0347: 5D 2C    MOV   A,REG[0x2C]        (0340)    mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
0349: 5D 32    MOV   A,REG[0x32]        (0342)    mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Now grab DR2 (DR0) and save
034B: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
034D: 5D 2E    MOV   A,REG[0x2E]        (0344)    mov   A, reg[Timer16_COMPARE_LSB_REG]
034F: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
0351: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
0353: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0356: A0 03    JZ    0x035A             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
0358: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
035A: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
035C: 70 FE    AND   F,0xFE             
035E: 41 2F FE AND   REG[0x2F],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer16_Stop_M                                ; Disable (stop) the timer
0361: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
0362: 60 32    MOV   REG[0x32],A        (0355)    mov   reg[Timer16_COMPARE_MSB_REG], A
0364: 18       POP   A                  (0356)    pop   A
0365: 60 2E    MOV   REG[0x2E],A        (0357)    mov   reg[Timer16_COMPARE_LSB_REG], A
0367: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
0368: 60 2F    MOV   REG[0x2F],A        (0359)    mov   reg[Timer16_CONTROL_LSB_REG], A
036A: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
036B: 20       POP   X                  (0361)    pop   X
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
036C: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer16_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer16_wReadTimer:
                                        (0397) _Timer16_wReadTimer:
                                        (0398)  wTimer16_ReadTimer:                             ; this name deprecated
                                        (0399) _wTimer16_ReadTimer:                             ; this name deprecated
                                        (0400)  wTimer16_CaptureCounter:                        ; this name deprecated
                                        (0401) _wTimer16_CaptureCounter:                        ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
036D: 5D 2C    MOV   A,REG[0x2C]        (0404)    mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
036F: 5D 32    MOV   A,REG[0x32]        (0407)    mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Return DR2 (actually DR0)
0371: 5C       MOV   X,A                (0408)    mov   X, A
0372: 5D 2E    MOV   A,REG[0x2E]        (0409)    mov   A, reg[Timer16_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
0374: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer16.asm
FILE: lib\spimint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIMINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2011/12/1 at 17:23:20
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:
                                        (0008) ;;    Interrupt handler routine for SPIM user module instance: SPIM.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "SPIM.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) export  _SPIM_ISR
                                        (0023) 
                                        (0024) 
                                        (0025) AREA InterruptRAM (RAM,REL,CON)
                                        (0026) 
                                        (0027) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0028) ;---------------------------------------------------
                                        (0029) ; Insert your custom declarations below this banner
                                        (0030) ;---------------------------------------------------
                                        (0031) 
                                        (0032) ;------------------------
                                        (0033) ; Includes
                                        (0034) ;------------------------
                                        (0035) 
                                        (0036) 	
                                        (0037) ;------------------------
                                        (0038) ;  Constant Definitions
                                        (0039) ;------------------------
                                        (0040) 
                                        (0041) 
                                        (0042) ;------------------------
                                        (0043) ; Variable Allocation
                                        (0044) ;------------------------
                                        (0045) 
                                        (0046) 
                                        (0047) ;---------------------------------------------------
                                        (0048) ; Insert your custom declarations above this banner
                                        (0049) ;---------------------------------------------------
                                        (0050) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0051) 
                                        (0052) 
                                        (0053) AREA UserModules (ROM, REL)
                                        (0054) 
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;  FUNCTION NAME: _SPIM_ISR
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0059) ;
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;
                                        (0062) 
                                        (0063) _SPIM_ISR:
                                        (0064) 
                                        (0065)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0066)    ;---------------------------------------------------
                                        (0067)    ; Insert your custom assembly code below this banner
                                        (0068)    ;---------------------------------------------------
                                        (0069)    ;   NOTE: interrupt service routines must preserve
                                        (0070)    ;   the values of the A and X CPU registers.
                                        (0071)    
                                        (0072)    ;---------------------------------------------------
                                        (0073)    ; Insert your custom assembly code above this banner
                                        (0074)    ;---------------------------------------------------
                                        (0075)    
                                        (0076)    ;---------------------------------------------------
                                        (0077)    ; Insert a lcall to a C function below this banner
                                        (0078)    ; and un-comment the lines between these banners
                                        (0079)    ;---------------------------------------------------
                                        (0080)    
                                        (0081)    ;PRESERVE_CPU_CONTEXT
                                        (0082)    ;lcall _My_C_Function
                                        (0083)    ;RESTORE_CPU_CONTEXT
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
0375: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file SPIMINT.asm
FILE: lib\spim.asm                      (0001) ;;*****************************************************************************
0376: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIM.asm
                                        (0004) ;;   Version: 2.6, Updated on 2011/12/1 at 17:23:20
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SPIM User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SPIM.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export   SPIM_EnableInt
                                        (0030) export  _SPIM_EnableInt
                                        (0031) export   SPIM_DisableInt
                                        (0032) export  _SPIM_DisableInt
                                        (0033) export   SPIM_Start
                                        (0034) export  _SPIM_Start
                                        (0035) export   SPIM_Stop
                                        (0036) export  _SPIM_Stop
                                        (0037) export   SPIM_SendTxData
                                        (0038) export  _SPIM_SendTxData
                                        (0039) export   SPIM_bReadRxData
                                        (0040) export  _SPIM_bReadRxData
                                        (0041) export   SPIM_bReadStatus
                                        (0042) export  _SPIM_bReadStatus
                                        (0043) 
                                        (0044) // These globals will be removed in a future release
                                        (0045) // Do not use
                                        (0046) export   bSPIM_ReadRxData
                                        (0047) export  _bSPIM_ReadRxData
                                        (0048) export   bSPIM_ReadStatus
                                        (0049) export  _bSPIM_ReadStatus
                                        (0050) 
                                        (0051) ;-----------------------------------------------
                                        (0052) ;  Constant Definitions
                                        (0053) ;-----------------------------------------------
                                        (0054) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0055) 
                                        (0056) 
                                        (0057) area UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: SPIM_EnableInt
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Enables the SPIM interrupt by setting the interrupt enable mask
                                        (0065) ;     bit associated with this User Module.
                                        (0066) ;
                                        (0067) ;     NOTE:  Remember to enable the global interrupt by calling the
                                        (0068) ;           M8C global macro: M8C_EnableGInt
                                        (0069) ;
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:  none
                                        (0073) ;
                                        (0074) ;  RETURNS:  none
                                        (0075) ;
                                        (0076) ;  SIDE EFFECTS: 
                                        (0077) ;    The A and X registers may be modified by this or future implementations
                                        (0078) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0079) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0080) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0081) ;    functions.
                                        (0082) ;
                                        (0083) ;  THEORY of OPERATION or PROCEDURE:
                                        (0084) ;     Sets the specific user module interrupt enable mask bit.
                                        (0085) ;
                                        (0086)  SPIM_EnableInt:
                                        (0087) _SPIM_EnableInt:
                                        (0088)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0089)    M8C_EnableIntMask SPIM_INT_REG, SPIM_bINT_MASK
                                        (0090)    RAM_EPILOGUE RAM_USE_CLASS_1
0379: 7F       RET                      (0091)    ret
037A: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0092) 
                                        (0093) .ENDSECTION
                                        (0094) 
                                        (0095) .SECTION
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;  FUNCTION NAME: SPIM_DisableInt
                                        (0098) ;
                                        (0099) ;  DESCRIPTION:
                                        (0100) ;     Disables this SPIM's interrupt by clearing the interrupt enable mask bit
                                        (0101) ;     associated with this User Module.
                                        (0102) ;
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;
                                        (0105) ;  ARGUMENTS:  none
                                        (0106) ;
                                        (0107) ;  RETURNS:  none
                                        (0108) ;
                                        (0109) ;  SIDE EFFECTS: 
                                        (0110) ;    The A and X registers may be modified by this or future implementations
                                        (0111) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0112) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0113) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0114) ;    functions.
                                        (0115) ;
                                        (0116) ;  THEORY of OPERATION or PROCEDURE:
                                        (0117) ;     Clears the specific user module interrupt enable mask bit.
                                        (0118) ;
                                        (0119)  SPIM_DisableInt:
                                        (0120) _SPIM_DisableInt:
                                        (0121)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0122)    M8C_DisableIntMask SPIM_INT_REG, SPIM_bINT_MASK
                                        (0123)    RAM_EPILOGUE RAM_USE_CLASS_1
037D: 7F       RET                      (0124)    ret
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: SPIM_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit, SPI mode, and LSB/MSB first configuration of the SPIM
                                        (0134) ;     user module.
                                        (0135) ;
                                        (0136) ;     Transmission will begin transmitting when a byte is written into the TX buffer
                                        (0137) ;     using the SPIM_SendTxData function.
                                        (0138) ;
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140) ;
                                        (0141) ;  ARGUMENTS:
                                        (0142) ;     BYTE bConfiguration - Consists of SPI Mode and LSB/MSB first bit.
                                        (0143) ;           Use defined masks - masks can be OR'd together.
                                        (0144) ;     PASSED in Accumulator.
                                        (0145) ;
                                        (0146) ;  RETURNS:  none
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS: 
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155) ;  THEORY of OPERATION or PROCEDURE:
                                        (0156) ;     1) Set all Slave Select outputs high
                                        (0157) ;     2) Set the specified SPI configuration bits in the Control register.
                                        (0158) ;
                                        (0159)  SPIM_Start:
                                        (0160) _SPIM_Start:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    ; setup the SPIM configuration setting
037E: 29 01    OR    A,0x1              (0163)    or    A, bfCONTROL_REG_START_BIT
0380: 60 2B    MOV   REG[0x2B],A        (0164)    mov   REG[SPIM_CONTROL_REG], A
                                        (0165)    RAM_EPILOGUE RAM_USE_CLASS_1
0382: 7F       RET                      (0166)    ret
                                        (0167) 
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) .SECTION
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;  FUNCTION NAME: SPIM_Stop
                                        (0173) ;
                                        (0174) ;  DESCRIPTION:
                                        (0175) ;     Disables SPIM operation.
                                        (0176) ;
                                        (0177) ;-----------------------------------------------------------------------------
                                        (0178) ;
                                        (0179) ;  ARGUMENTS:  none
                                        (0180) ;
                                        (0181) ;  RETURNS:  none
                                        (0182) ;
                                        (0183) ;  SIDE EFFECTS: 
                                        (0184) ;    The A and X registers may be modified by this or future implementations
                                        (0185) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0186) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0187) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0188) ;    functions.
                                        (0189) ;
                                        (0190) ;  THEORY of OPERATION or PROCEDURE:
                                        (0191) ;     Clear the start bit in the Control register.
                                        (0192) ;
                                        (0193)  SPIM_Stop:
                                        (0194) _SPIM_Stop:
                                        (0195)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0196)    ; clear the SPIM stop bits
0383: 41 2B FE AND   REG[0x2B],0xFE     (0197)    and   REG[SPIM_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0198)    RAM_EPILOGUE RAM_USE_CLASS_1
0386: 7F       RET                      (0199)    ret
                                        (0200) 
                                        (0201) .ENDSECTION
                                        (0202) 
                                        (0203) .SECTION
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: SPIM_SendTxData
                                        (0206) ;
                                        (0207) ;  DESCRIPTION:
                                        (0208) ;     Initiates an SPI data transfer.
                                        (0209) ;
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:
                                        (0213) ;     BYTE  bTxData - data to transmit.
                                        (0214) ;        Passed in Accumulator.
                                        (0215) ;
                                        (0216) ;  RETURNS:  none
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS: 
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;
                                        (0225) ;  THEORY of OPERATION or PROCEDURE:
                                        (0226) ;     Writes data to the TX buffer register.
                                        (0227) ;
                                        (0228)  SPIM_SendTxData:
                                        (0229) _SPIM_SendTxData:
                                        (0230)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231)    ; Transmit the data!
0387: 60 29    MOV   REG[0x29],A        (0232)    mov REG[SPIM_TX_BUFFER_REG], A
                                        (0233)    RAM_EPILOGUE RAM_USE_CLASS_1
0389: 7F       RET                      (0234)    ret
                                        (0235) 
                                        (0236) .ENDSECTION
                                        (0237) 
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: SPIM_bReadRxData
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0244) ;     sure data is valid.
                                        (0245) ;
                                        (0246) ;-----------------------------------------------------------------------------
                                        (0247) ;
                                        (0248) ;  ARGUMENTS:  none
                                        (0249) ;
                                        (0250) ;  RETURNS:
                                        (0251) ;     bRxData - returned in A.
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS: 
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260) ;  THEORY of OPERATION or PROCEDURE:
                                        (0261) ;
                                        (0262)  SPIM_bReadRxData:
                                        (0263) _SPIM_bReadRxData:
                                        (0264)  bSPIM_ReadRxData:
                                        (0265) _bSPIM_ReadRxData:
                                        (0266)    RAM_PROLOGUE RAM_USE_CLASS_1
038A: 5D 2A    MOV   A,REG[0x2A]        (0267)    mov A, REG[SPIM_RX_BUFFER_REG]
                                        (0268)    RAM_EPILOGUE RAM_USE_CLASS_1   
038C: 7F       RET                      (0269)    ret
                                        (0270) 
                                        (0271) 
                                        (0272) .ENDSECTION
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME: SPIM_ReadStatus
                                        (0277) ;
                                        (0278) ;  DESCRIPTION:
                                        (0279) ;     Reads the SPIM Status bits in the Control/Status register.
                                        (0280) ;
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;
                                        (0283) ;  ARGUMENTS:  none
                                        (0284) ;
                                        (0285) ;  RETURNS:
                                        (0286) ;     BYTE  bStatus - transmit status data.  Use the defined bit masks.
                                        (0287) ;        Returned in Accumulator.
                                        (0288) ;
                                        (0289) ;  SIDE EFFECTS: 
                                        (0290) ;    The A and X registers may be modified by this or future implementations
                                        (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0294) ;    functions.
                                        (0295) ;
                                        (0296) ;  THEORY of OPERATION or PROCEDURE:
                                        (0297) ;     Read the status and control register.
                                        (0298) ;
                                        (0299)  SPIM_bReadStatus:
                                        (0300) _SPIM_bReadStatus:
                                        (0301)  bSPIM_ReadStatus:
                                        (0302) _bSPIM_ReadStatus:
                                        (0303)    RAM_PROLOGUE RAM_USE_CLASS_1
038D: 5D 2B    MOV   A,REG[0x2B]        (0304)    mov A,  REG[SPIM_CONTROL_REG]
                                        (0305)    RAM_EPILOGUE RAM_USE_CLASS_1   
038F: 7F       RET                      (0306)    ret
                                        (0307) 
                                        (0308) .ENDSECTION
                                        (0309) 
                                        (0310) ; End of File SPIM.asm
FILE: lib\pga.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2011/12/1 at 17:23:1
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_Start
                                        (0060) export _PGA_Start
                                        (0061) export  PGA_SetPower
                                        (0062) export _PGA_SetPower
                                        (0063) 
                                        (0064) export  PGA_SetGain
                                        (0065) export _PGA_SetGain
                                        (0066) 
                                        (0067) export  PGA_Stop
                                        (0068) export _PGA_Stop
                                        (0069) 
                                        (0070) IF (PGA_AGNDBUFAPI)
                                        (0071) export  PGA_EnableAGNDBuffer
                                        (0072) export _PGA_EnableAGNDBuffer
                                        (0073) export  PGA_DisableAGNDBuffer
                                        (0074) export _PGA_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_Start
                                        (0092) ;  FUNCTION NAME: PGA_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_Start:
                                        (0111) _PGA_Start:
                                        (0112)  PGA_SetPower:
                                        (0113) _PGA_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0390: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0392: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0393: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0394: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_GAIN_CR2]                               ; read power value
0396: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0398: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
039A: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_GAIN_CR2], A                          ; move complete value back to register
039C: 18       POP   A                  (0124)    pop  A
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
039D: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_SetGain:
                                        (0154) _PGA_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
039E: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
03A0: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
03A1: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
03A2: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_GAIN_CR0]                               ; read mux settings
03A4: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
03A6: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
03A9: B0 0A    JNZ   0x03B4             (0164)    jnz  .SETHIGHGAIN
03AB: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_GAIN_CR3],~EXGAIN                          ; Clear High Gain bit.
03AE: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
03B0: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
03B2: 18       POP   A                  (0168)    pop  A
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
03B3: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
03B4: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
03B7: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
03B9: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
03BB: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_GAIN_CR3], EXGAIN                          ; Set High Gain bit.
03BE: 18       POP   A                  (0177)    pop  A
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
03BF: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_Stop:
                                        (0203) _PGA_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
03C0: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
03C3: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_EnableAGNDBuffer:
                                        (0233) _PGA_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_DisableAGNDBuffer:
                                        (0261) _PGA_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2011/12/1 at 17:22:53
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT4DR
                                        (0135) LCD_PortMode0:      equ    PRT4DM0
                                        (0136) LCD_PortMode1:      equ    PRT4DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    90h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D0h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
03C4: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
03C5: 10       PUSH  X                  (0209)     push  X
03C6: 28       ROMX                     (0210)     romx                               ; Get character from ROM
03C7: B0 04    JNZ   0x03CC             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
03C9: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
03CA: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
03CB: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
03CC: 90 3C    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
03CE: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
03CF: 18       POP   A                  (0220)     pop   A
03D0: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
03D1: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
03D3: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
03D4: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
03E6: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
03E7: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
03E8: 67       ASR   A                  (0262)     asr   A
03E9: 67       ASR   A                  (0263)     asr   A
03EA: 67       ASR   A                  (0264)     asr   A
03EB: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
03ED: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
03EF: 90 19    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
03F1: 18       POP   A                  (0268)     pop   A                            ; Restore value
03F2: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
03F4: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
03F6: 90 12    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
03F8: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
03F9: 4B       SWAP  A,X                (0305)     swap  A,X
03FA: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
03FC: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
03FD: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
03FF: 7F       RET                      (0310)     ret
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0400: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0402: A0 06    JZ    0x0409             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0404: 90 04    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
0406: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0407: 8F F8    JMP   _LCD_PrString      (0351)     jmp   .Loop_PrString               ; Go get next character
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0409: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
040A: 90 5F    CALL  0x046B             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
040C: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
040D: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
040E: 67       ASR   A                  (0390)     asr   A
040F: 67       ASR   A                  (0391)     asr   A
0410: 67       ASR   A                  (0392)     asr   A
0411: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0413: 90 38    CALL  0x044D             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0415: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0416: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0418: 40       NOP                      (0397)     nop
0419: 40       NOP                      (0398)     nop
041A: 40       NOP                      (0399)     nop
041B: 90 30    CALL  0x044D             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
041D: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
041E: 90 4B    CALL  0x046B             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0420: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0421: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0422: 67       ASR   A                  (0436)     asr   A
0423: 67       ASR   A                  (0437)     asr   A
0424: 67       ASR   A                  (0438)     asr   A
0425: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0427: 90 09    CALL  0x0432             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0429: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
042A: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
042C: 40       NOP                      (0443)     nop
042D: 40       NOP                      (0444)     nop
042E: 40       NOP                      (0445)     nop
042F: 90 01    CALL  0x0432             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0431: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0432: 08       PUSH  A                  (0477)     push  A
                                        (0478)     RAM_SETPAGE_CUR >Port_4_Data_SHADE           ; Set CUR_PP to LCD variable address
0433: 26 11 80 AND   [0x11],0x80        (0479)     and   [Port_4_Data_SHADE],~LCD_PORT_MASK
0436: 51 11    MOV   A,[0x11]           (0480)     mov   A,[Port_4_Data_SHADE]
0438: 60 10    MOV   REG[0x10],A        (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
043A: 18       POP   A                  (0483)     pop   A
043B: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
043D: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
043F: 2A 11    OR    A,[0x11]           (0486)     or    A,[Port_4_Data_SHADE]                  ; OR in bit 7 just
0441: 60 10    MOV   REG[0x10],A        (0487)     mov   reg[LCD_Port], A                       ; Write data
0443: 53 11    MOV   [0x11],A           (0488)     mov   [Port_4_Data_SHADE],A                  ; Keep shadow register in sync
0445: 40       NOP                      (0489)     nop
0446: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0448: 53 11    MOV   [0x11],A           (0491)     mov   [Port_4_Data_SHADE],A                  ; Keep shadow register in sync
044A: 60 10    MOV   REG[0x10],A        (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
044C: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
044D: 08       PUSH  A                  (0523)     push  A
                                        (0524)     RAM_SETPAGE_CUR >Port_4_Data_SHADE          ; Set CUR_PP to LCD variable address
044E: 26 11 80 AND   [0x11],0x80        (0525)     and   [Port_4_Data_SHADE],~LCD_PORT_MASK
0451: 2E 11 20 OR    [0x11],0x20        (0526)     or    [Port_4_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0454: 51 11    MOV   A,[0x11]           (0527)     mov   A,[Port_4_Data_SHADE]
0456: 60 10    MOV   REG[0x10],A        (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0458: 18       POP   A                  (0530)     pop   A
0459: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
045B: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
045D: 2A 11    OR    A,[0x11]           (0533)     or    A,[Port_4_Data_SHADE]                       ; Keep shadow in sync
045F: 60 10    MOV   REG[0x10],A        (0534)     mov   reg[LCD_Port], A                            ; Write data
0461: 53 11    MOV   [0x11],A           (0535)     mov   [Port_4_Data_SHADE],A                       ; Keep shadow in sync
0463: 40       NOP                      (0536)     NOP
0464: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0466: 53 11    MOV   [0x11],A           (0538)     mov   [Port_4_Data_SHADE],A                       ; keep shadow in sync
0468: 60 10    MOV   REG[0x10],A        (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
046A: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
046B: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
                                        (0572)     RAM_SETPAGE_CUR >Port_4_Data_SHADE                ; Set CUR_PP to LCD variable address
046C: 26 11 80 AND   [0x11],0x80        (0573)     and   [Port_4_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
046F: 51 11    MOV   A,[0x11]           (0574)     mov   A,[Port_4_Data_SHADE]
0471: 60 10    MOV   REG[0x10],A        (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0473: 26 12 F0 AND   [0x12],0xF0        (0577)     and   [Port_4_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0476: 51 12    MOV   A,[0x12]           (0578)     mov   A,[Port_4_DriveMode_0_SHADE]
0478: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
047A: 60 10    MOV   REG[0x10],A        (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
047C: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
047E: 2E 11 40 OR    [0x11],0x40        (0583)     or    [Port_4_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0481: 51 11    MOV   A,[0x11]           (0584)     mov   A,[Port_4_Data_SHADE]
0483: 60 10    MOV   REG[0x10],A        (0585)     mov   reg[LCD_Port],A
0485: 40       NOP                      (0586)     NOP
                                        (0587) 
0486: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0487: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0489: 2E 11 50 OR    [0x11],0x50        (0592)     or    [Port_4_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
048C: 51 11    MOV   A,[0x11]           (0593)     mov   A,[Port_4_Data_SHADE]
048E: 60 10    MOV   REG[0x10],A        (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0490: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0491: 40       NOP                      (0597)     nop
0492: 5D 10    MOV   A,REG[0x10]        (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0494: 08       PUSH  A                  (0610)     push  A
0495: 26 11 C0 AND   [0x11],0xC0        (0611)     and   [Port_4_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0498: 51 11    MOV   A,[0x11]           (0612)     mov   A,[Port_4_Data_SHADE]
049A: 60 10    MOV   REG[0x10],A        (0613)     mov   reg[LCD_Port],A
                                        (0614) 
049C: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
049D: 40       NOP                      (0616)     nop                                    ; fastest PSoC
049E: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
049F: 2E 11 50 OR    [0x11],0x50        (0619)     or    [Port_4_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
04A2: 51 11    MOV   A,[0x11]           (0620)     mov   A,[Port_4_Data_SHADE]
04A4: 60 10    MOV   REG[0x10],A        (0621)     mov   reg[LCD_Port],A
                                        (0622) 
04A6: 40       NOP                      (0623)     nop
04A7: 40       NOP                      (0624)     nop
                                        (0625) 
04A8: 26 11 C0 AND   [0x11],0xC0        (0626)     and   [Port_4_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
04AB: 51 11    MOV   A,[0x11]           (0627)     mov   A,[Port_4_Data_SHADE]
04AD: 60 10    MOV   REG[0x10],A        (0628)     mov   reg[LCD_Port],A
                                        (0629) 
04AF: 18       POP   A                  (0630)     pop   A
04B0: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
04B2: A0 04    JZ    0x04B7             (0633)     jz    .UNLOCK
04B4: 79       DEC   X                  (0634)     dec   X
04B5: BF D3    JNZ   0x0489             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
04B7: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
04B8: 2E 12 7F OR    [0x12],0x7F        (0639)     or    [Port_4_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
04BB: 51 12    MOV   A,[0x12]           (0640)     mov   A,[Port_4_DriveMode_0_SHADE]
04BD: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
04BF: 60 10    MOV   REG[0x10],A        (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
04C1: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
04C3: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
04C4: 7F       RET                      (0646)     ret
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_4_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
04C5: 26 12 80 AND   [0x12],0x80        (0685)     and   [Port_4_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
04C8: 2E 12 7F OR    [0x12],0x7F        (0686)     or    [Port_4_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
04CB: 26 13 80 AND   [0x13],0x80        (0687)     and   [Port_4_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
04CE: 51 12    MOV   A,[0x12]           (0689)     mov   A,[Port_4_DriveMode_0_SHADE]
04D0: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
04D2: 60 10    MOV   REG[0x10],A        (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
04D4: 51 13    MOV   A,[0x13]           (0692)     mov   A,[Port_4_DriveMode_1_SHADE]
04D6: 60 11    MOV   REG[0x11],A        (0693)     mov   reg[LCD_PortMode1],A
04D8: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
04DA: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
04DC: 90 63    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
04DE: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
04E0: 90 5F    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
04E2: 50 03    MOV   A,0x3              (0701)     mov   A,03h
04E4: 9F 4C    CALL  0x0432             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
04E6: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
04E8: 90 57    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
04EA: 50 03    MOV   A,0x3              (0707)     mov   A,03h
04EC: 9F 44    CALL  0x0432             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
04EE: 90 5F    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
04F0: 90 5D    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
04F2: 90 5B    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
04F4: 50 03    MOV   A,0x3              (0714)     mov   A,03h
04F6: 9F 3A    CALL  0x0432             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
04F8: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
04FA: 90 45    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
04FC: 50 02    MOV   A,0x2              (0720)     mov   A,02h
04FE: 9F 32    CALL  0x0432             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0500: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0502: 90 3D    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0504: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0506: 9F 16    CALL  _LCD_Control       (0727)     call  LCD_Control
0508: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
050A: 90 35    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
050C: 50 01    MOV   A,0x1              (0731)     mov   A,01h
050E: 9F 0E    CALL  _LCD_Control       (0732)     call  LCD_Control
0510: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0512: 90 2D    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0514: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0516: 9F 06    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0518: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
051A: 9F 02    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
051C: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
051E: 9E FE    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0520: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0522: 9E FA    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0524: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0526: 9E F6    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0528: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
052A: 9E F2    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
052C: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
052E: 90 11    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0530: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0535: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0537: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0538: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
053A: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
053B: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
053D: 20       POP   X                  (0795)     pop   X
                                        (0796) 
053E: 9E DE    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0540: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0541: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0543: 78       DEC   A                  (0828)     dec   A
0544: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0546: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
054F: 08       PUSH  A                  (0871)     push  A
0550: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0552: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0554: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0556: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0558: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
055A: D0 06    JNC   0x0561             (0877)     jnc   .Delay50u_End
055C: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
055E: 78       DEC   A                  (0880)     dec   A                              ; [4]
055F: BF FE    JNZ   0x055E             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0561: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0562: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
0563: 10       PUSH  X                  (0943)     push  X
0564: 59 00    MOV   X,[X+0]            (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
0566: 9F CD    CALL  _LCD_Position      (0945)     call  LCD_Position                 ; Set cursor position
0568: 20       POP   X                  (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
0569: 3D FE 00 CMP   [X-2],0x0          (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
056C: B0 05    JNZ   0x0572             (0950)     jnz   .LCD_CHECK1X
056E: 50 00    MOV   A,0x0              (0951)     mov   A,00h                         ; Load empty character
0570: 80 11    JMP   0x0582             (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
0572: 3D FE 06 CMP   [X-2],0x6          (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
0575: D0 07    JNC   0x057D             (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
0577: 52 FE    MOV   A,[X-2]            (0957)     mov   A,[X+BG_LENGTHX]
0579: 15 FE    SUB   [X-2],A            (0958)     sub   [X+BG_LENGTHX],A
057B: 80 06    JMP   0x0582             (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
057D: 50 06    MOV   A,0x6              (0962)     mov   A, 06h
057F: 17 FE 05 SUB   [X-2],0x5          (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
0582: 9E 86    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
0584: 7B FF    DEC   [X-1]              (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
0586: BF E2    JNZ   0x0569             (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
0588: 7F       RET                      (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
0589: 4F       MOV   X,SP               (1015)     mov   X, SP
058A: 10       PUSH  X                  (1016)     push  X
058B: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
058D: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
058F: 9F A4    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0591: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0592: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0595: B0 05    JNZ   0x059B             (1026)     jnz   .LCD_CHECK1
0597: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
0599: 80 11    JMP   0x05AB             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
059B: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
059E: D0 07    JNC   0x05A6             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
05A0: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
05A2: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
05A4: 80 06    JMP   0x05AB             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
05A6: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
05A8: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
05AB: 9E 5D    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
05AD: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
05AF: BF E2    JNZ   0x0592             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
05B1: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
05B2: 21 03    AND   A,0x3              (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
05B4: 08       PUSH  A                  (1098)     push  A
05B5: FF 7A    INDEX LCD_ROW_OFFSET     (1099)     index LCD_ROW_OFFSET  ; Get row offset
05B7: 03 00    ADD   A,[X+0]            (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
05B9: 9E 63    CALL  _LCD_Control       (1101)     call  LCD_Control                  ; Position Cursor
05BB: 3D FE 00 CMP   [X-2],0x0          (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
05BE: B0 05    JNZ   0x05C4             (1103)     jnz   .VBG_NZ_SEGX
05C0: 50 20    MOV   A,0x20             (1104)     mov   A,' '                        ; Load space character
05C2: 80 13    JMP   0x05D6             (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
05C4: 3D FE 09 CMP   [X-2],0x9          (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
05C7: D0 09    JNC   0x05D1             (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
05C9: 52 FE    MOV   A,[X-2]            (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
05CB: 78       DEC   A                  (1111)     dec   A
05CC: 56 FE 00 MOV   [X-2],0x0          (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
05CF: 80 06    JMP   0x05D6             (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
05D1: 17 FE 08 SUB   [X-2],0x8          (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
05D4: 50 07    MOV   A,0x7              (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
05D6: 9E 32    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(1120)     call  LCD_WriteData                ; Write value
05D8: 18       POP   A                  (1121)     pop   A
05D9: 78       DEC   A                  (1122)     dec   A
05DA: 7B FF    DEC   [X-1]              (1123)     dec   [X+VBG_CHAR_HEIGHTX]
05DC: BF D7    JNZ   0x05B4             (1124)     jnz   .VBG_LOOPX
05DE: 7F       RET                      (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
05DF: 4F       MOV   X,SP               (1168)     mov   X, SP
05E0: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
05E2: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
05E4: 08       PUSH  A                  (1172)     push  A
05E5: FF 4A    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
05E7: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
05E9: 9E 33    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
05EB: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
05EE: B0 05    JNZ   0x05F4             (1177)     jnz   .VBG_NZ_SEG
05F0: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
05F2: 80 13    JMP   0x0606             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
05F4: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
05F7: D0 09    JNC   0x0601             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
05F9: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
05FB: 78       DEC   A                  (1185)     dec   A
05FC: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
05FF: 80 06    JMP   0x0606             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0601: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
0604: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
0606: 9E 02    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(1194)     call  LCD_WriteData                ; Write value
0608: 18       POP   A                  (1195)     pop   A
0609: 78       DEC   A                  (1196)     dec   A
060A: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
060C: BF D7    JNZ   0x05E4             (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
060E: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
060F: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
0610: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
0611: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
0612: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0614: 9E 08    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
0616: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0619: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
061C: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
061E: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
0620: D0 05    JNC   0x0626             (1251)     jnc   .VBG_SOLID
0622: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0624: 80 03    JMP   0x0628             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0626: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0628: 9D E0    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(1257)     call  LCD_WriteData                ; character data
062A: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
062C: BF EF    JNZ   0x061C             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
062E: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
0630: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0633: BF E5    JNZ   0x0619             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0635: 18       POP   A                  (1264)     pop  A
0636: 18       POP   A                  (1265)     pop  A
0637: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0639: 9D E3    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
063B: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
064A: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
064B: 38 03    ADD   SP,0x3             (1320)     add   SP,3
064D: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
064F: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0651: 9D CB    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0653: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0656: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0659: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
065B: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
065E: B0 05    JNZ   0x0664             (1332)     jnz   .BG_OTHER
0660: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0662: 80 03    JMP   0x0666             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0664: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0666: 9D A2    CALL  LCD_Write_Data|LCD_WriteData|_LCD_Write_Data|_LCD_WriteData(1338)     call  LCD_WriteData
0668: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
066A: BF EE    JNZ   0x0659             (1340)     jnz   .BG_Loop2
066C: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
066E: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0671: BF E4    JNZ   0x0656             (1343)     jnz   .BG_Loop1
                                        (1344) 
0673: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0675: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0677: 9D A5    CALL  _LCD_Control       (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0679: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\adcincint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINCINT.asm
                                        (0004) ;;  Version: 1.20, Updated on 2011/12/1 at 17:19:45
                                        (0005) ;;
                                        (0006) ;;  DESCRIPTION: Assembler interrupt service routine for the ADCINC
                                        (0007) ;;               A/D Converter User Module. This code works for both the
                                        (0008) ;;               first and second-order modulator topologies.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "ADCINC.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export _ADCINC_ADConversion_ISR
                                        (0024) 
                                        (0025) export _ADCINC_iResult
                                        (0026) export  ADCINC_iResult
                                        (0027) export _ADCINC_fStatus
                                        (0028) export  ADCINC_fStatus
                                        (0029) export _ADCINC_bState
                                        (0030) export  ADCINC_bState
                                        (0031) export _ADCINC_fMode
                                        (0032) export  ADCINC_fMode
                                        (0033) export _ADCINC_bNumSamples
                                        (0034) export  ADCINC_bNumSamples
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM,REL)
                                        (0040)  ADCINC_iResult:
                                        (0041) _ADCINC_iResult:                           BLK  2 ;Calculated answer
                                        (0042)   iTemp:                                   BLK  2 ;internal temp storage
                                        (0043)  ADCINC_fStatus:
                                        (0044) _ADCINC_fStatus:                           BLK  1 ;ADC Status
                                        (0045)  ADCINC_bState:
                                        (0046) _ADCINC_bState:                            BLK  1 ;State value of ADC count
                                        (0047)  ADCINC_fMode:
                                        (0048) _ADCINC_fMode:                             BLK  1 ;Integrate and reset mode.
                                        (0049)  ADCINC_bNumSamples:
                                        (0050) _ADCINC_bNumSamples:                       BLK  1 ;Number of samples to take.
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0057) ;---------------------------------------------------
                                        (0058) ; Insert your custom declarations below this banner
                                        (0059) ;---------------------------------------------------
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _ADCINC_ADConversion_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION: Perform final filter operations to produce output samples.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;    The decimation rate is established by the PWM interrupt. Four timer
                                        (0087) ;    clocks elapse for each modulator output (decimator input) since the
                                        (0088) ;    phi1/phi2 generator divides by 4. This means the timer period and thus
                                        (0089) ;    it's interrupt must equal 4 times the actual decimation rate.  The
                                        (0090) ;    decimator is ru  for 2^(#bits-6).
                                        (0091) ;
                                        (0092) _ADCINC_ADConversion_ISR:
067A: 7A 19    DEC   [0x19]             (0093)     dec  [ADCINC_bState]
                                        (0094) if1:
067C: C0 02    JC    0x067F             (0095)     jc endif1 ; no underflow
067E: 7E       RETI                     (0096)     reti
                                        (0097) endif1:
067F: 3C 1A 00 CMP   [0x1A],0x0         (0098)     cmp [ADCINC_fMode],0
                                        (0099) if2: 
0682: B0 12    JNZ   0x0695             (0100)     jnz endif2  ;leaving reset mode
0684: 08       PUSH  A                  (0101)     push A                            ;read decimator
0685: 5D E5    MOV   A,REG[0xE5]        (0102)     mov  A, reg[DEC_DL]
0687: 53 17    MOV   [0x17],A           (0103)     mov  [iTemp + LowByte],A
0689: 5D E4    MOV   A,REG[0xE4]        (0104)     mov  A, reg[DEC_DH]
068B: 53 16    MOV   [0x16],A           (0105)     mov  [iTemp + HighByte], A
068D: 18       POP   A                  (0106)     pop A
068E: 55 1A 01 MOV   [0x1A],0x1         (0107)     mov [ADCINC_fMode],1
0691: 55 19 03 MOV   [0x19],0x3         (0108)     mov [ADCINC_bState],((1<<(ADCINC_bNUMBITS- 6))-1)
0694: 7E       RETI                     (0109)     reti
0695: 43 82 20 OR    REG[0x82],0x20     
0698: 43 83 10 OR    REG[0x83],0x10     
                                        (0110) endif2:
                                        (0111)     ;This code runs at end of integrate
                                        (0112)     ADCINC_RESET_INTEGRATOR_M
069B: 08       PUSH  A                  (0113)     push A
069C: 5D E5    MOV   A,REG[0xE5]        (0114)     mov  A, reg[DEC_DL]
069E: 12 17    SUB   A,[0x17]           (0115)     sub  A,[iTemp + LowByte]
06A0: 53 17    MOV   [0x17],A           (0116)     mov  [iTemp +LowByte],A
06A2: 5D E4    MOV   A,REG[0xE4]        (0117)     mov  A, reg[DEC_DH]
06A4: 1A 16    SBB   A,[0x16]           (0118)     sbb  A,[iTemp + HighByte]
06A6: 67       ASR   A                  (0119)     asr  A
06A7: 6E 17    RRC   [0x17]             (0120)     rrc  [iTemp + LowByte]
                                        (0121) 
                                        (0122)        ;Covert to Unipolar
                                        (0123) IF  ADCINC_9_OR_MORE_BITS
                                        (0124)     add  A, (1<<(ADCINC_bNUMBITS - 9))
                                        (0125) ELSE
06A9: 06 17 80 ADD   [0x17],0x80        (0126)     add [iTemp + LowByte], (1<<(ADCINC_bNUMBITS - 1)) ;work on lower Byte
06AC: 09 00    ADC   A,0x0              (0127)     adc A,0 
                                        (0128) ENDIF
                                        (0129)        ;check for overflow
                                        (0130) IF     ADCINC_8_OR_MORE_BITS
06AE: 39 01    CMP   A,0x1              (0131)     cmp A,(1<<(ADCINC_bNUMBITS - 8))
                                        (0132) if3: 
06B0: B0 05    JNZ   0x06B6             (0133)     jnz endif3 ;overflow
06B2: 78       DEC   A                  (0134)     dec A
06B3: 55 17 FF MOV   [0x17],0xFF        (0135)     mov [iTemp + LowByte],ffh
                                        (0136) endif3:
                                        (0137) ELSE
                                        (0138)     cmp [iTemp + LowByte],(1<<(ADCINC_bNUMBITS))
                                        (0139) if4: 
                                        (0140)     jnz endif4 ;overflow
                                        (0141)     dec [iTemp + LowByte]
                                        (0142) endif4:
                                        (0143) ENDIF
                                        (0144) IF ADCINC_SIGNED_DATA
                                        (0145) IF ADCINC_9_OR_MORE_BITS
                                        (0146)     sub A,(1<<(ADCINC_bNUMBITS - 9))
                                        (0147) ELSE
                                        (0148)     sub [iTemp +LowByte],(1<<(ADCINC_bNUMBITS - 1))
                                        (0149)     sbb A,0
                                        (0150) ENDIF
                                        (0151) ENDIF
06B6: 5F 15 17 MOV   [0x15],[0x17]      (0152)     mov  [ADCINC_iResult + LowByte],[iTemp +LowByte]
06B9: 53 14    MOV   [0x14],A           (0153)     mov  [ADCINC_iResult + HighByte],A
06BB: 55 18 01 MOV   [0x18],0x1         (0154)     mov  [ADCINC_fStatus],1
                                        (0155) ConversionReady:
                                        (0156)     ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0157)     ;---------------------------------------------------
                                        (0158)     ; Insert your custom code below this banner
                                        (0159)     ;---------------------------------------------------
                                        (0160)     ;  Sample data is now in iResult
                                        (0161)     ;
                                        (0162)     ;  NOTE: This interrupt service routine has already
                                        (0163)     ;  preserved the values of the A CPU register. If
                                        (0164)     ;  you need to use the X register you must preserve
                                        (0165)     ;  its value and restore it before the return from
                                        (0166)     ;  interrupt.
                                        (0167)     ;---------------------------------------------------
                                        (0168)     ; Insert your custom code above this banner
                                        (0169)     ;---------------------------------------------------
                                        (0170)     ;@PSoC_UserCode_END@ (Do not change this line.)
06BE: 18       POP   A                  (0171)     pop A
06BF: 3C 1B 00 CMP   [0x1B],0x0         (0172)     cmp [ADCINC_bNumSamples],0
                                        (0173) if5: 
06C2: B0 0E    JNZ   0x06D1             (0174)     jnz endif5 ; Number of samples is zero
06C4: 55 1A 00 MOV   [0x1A],0x0         (0175)     mov [ADCINC_fMode],0
06C7: 55 19 00 MOV   [0x19],0x0         (0176)     mov [ADCINC_bState],0
06CA: 41 83 EF AND   REG[0x83],0xEF     
06CD: 41 82 DF AND   REG[0x82],0xDF     
                                        (0177)     ADCINC_ENABLE_INTEGRATOR_M
06D0: 7E       RETI                     (0178)     reti       
                                        (0179) endif5:
06D1: 7A 1B    DEC   [0x1B]             (0180)     dec [ADCINC_bNumSamples]
                                        (0181) if6:
06D3: A0 0E    JZ    0x06E2             (0182)     jz endif6  ; count not zero
06D5: 55 1A 00 MOV   [0x1A],0x0         (0183)     mov [ADCINC_fMode],0
06D8: 55 19 00 MOV   [0x19],0x0         (0184)     mov [ADCINC_bState],0
06DB: 41 83 EF AND   REG[0x83],0xEF     
06DE: 41 82 DF AND   REG[0x82],0xDF     
                                        (0185)     ADCINC_ENABLE_INTEGRATOR_M
06E1: 7E       RETI                     (0186)     reti       
06E2: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0187) endif6:
                                        (0188)     ;All samples done
                                        (0189)     ADCINC_STOPADC_M
06E5: 7E       RETI                     (0190)  reti 
FILE: lib\adcinc.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINC.asm
                                        (0004) ;;   Version: 1.1, Updated on 2006/02/03 at 09:10:49
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the ADCINC A/D Converter
                                        (0008) ;;               User Module with 1st-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        function returns. Even though these registers may be preserved now,
                                        (0015) ;;        there is no guarantee they will be preserved in future releases.
                                        (0016) ;;-----------------------------------------------------------------------------
                                        (0017) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0018) ;;*****************************************************************************
                                        (0019) ;;*****************************************************************************
                                        (0020) 
                                        (0021) include "m8c.inc"
                                        (0022) include "memory.inc"
                                        (0023) 
                                        (0024) include "ADCINC.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  ADCINC_Start
                                        (0031) export _ADCINC_Start
                                        (0032) export  ADCINC_SetPower
                                        (0033) export _ADCINC_SetPower
                                        (0034) export  ADCINC_Stop
                                        (0035) export _ADCINC_Stop
                                        (0036) export  ADCINC_GetSamples
                                        (0037) export _ADCINC_GetSamples
                                        (0038) export  ADCINC_StopADC
                                        (0039) export _ADCINC_StopADC
                                        (0040) export  ADCINC_fIsDataAvailable
                                        (0041) export _ADCINC_fIsDataAvailable
                                        (0042) export  ADCINC_iClearFlagGetData
                                        (0043) export _ADCINC_iClearFlagGetData
                                        (0044) export  ADCINC_wClearFlagGetData
                                        (0045) export _ADCINC_wClearFlagGetData
                                        (0046) export  ADCINC_cClearFlagGetData
                                        (0047) export _ADCINC_cClearFlagGetData
                                        (0048) export  ADCINC_bClearFlagGetData
                                        (0049) export _ADCINC_bClearFlagGetData
                                        (0050) export  ADCINC_iGetData
                                        (0051) export _ADCINC_iGetData
                                        (0052) export  ADCINC_wGetData
                                        (0053) export _ADCINC_wGetData
                                        (0054) export  ADCINC_bGetData
                                        (0055) export _ADCINC_bGetData
                                        (0056) export  ADCINC_cGetData
                                        (0057) export _ADCINC_cGetData
                                        (0058) export  ADCINC_fClearFlag
                                        (0059) export _ADCINC_fClearFlag
                                        (0060) export  ADCINC_WritePulseWidth
                                        (0061) export _ADCINC_WritePulseWidth
                                        (0062) 
                                        (0063) 
                                        (0064) AREA bss (RAM,REL)
                                        (0065) 
                                        (0066) ;-----------------------------------------------
                                        (0067) ;  Constant Definitions
                                        (0068) ;-----------------------------------------------
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: ADCINC_Start
                                        (0080) ;
                                        (0081) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0082) ;               and starts the PWM
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0086) ;  RETURNS:      Nothing.
                                        (0087) ;  SIDE EFFECTS:
                                        (0088) ;    The A and X registers may be modified by this or future implementations
                                        (0089) ;    of this function.  When necessary, it is the calling function's
                                        (0090) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0091) ;    functions.
                                        (0092) ;
                                        (0093)  ADCINC_Start:
                                        (0094) _ADCINC_Start:
                                        (0095)    RAM_PROLOGUE RAM_USE_CLASS_1
06E6: 43 E7 C0 OR    REG[0xE7],0xC0     (0096)    or    reg[DEC_CR1],c0h
06E9: 90 0D    CALL  _ADCINC_SetPower   (0097)    call  ADCINC_SetPower
06EB: 43 82 20 OR    REG[0x82],0x20     
06EE: 43 83 10 OR    REG[0x83],0x10     
                                        (0098)    ADCINC_RESET_INTEGRATOR_M
06F1: 62 21 FF MOV   REG[0x21],0xFF     (0099)    mov   reg[ADCINC_PWMdr1],ffh
06F4: 43 23 01 OR    REG[0x23],0x1      (0100)    or    reg[ADCINC_PWMcr0],01h                      ; start PWM
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
06F7: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105)    
                                        (0106) .SECTION
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: ADCINC_SetPower
                                        (0109) ;
                                        (0110) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0111) ;-----------------------------------------------------------------------------
                                        (0112) ;
                                        (0113) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0114) ;  RETURNS:      Nothing.
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;    The A and X registers may be modified by this or future implementations
                                        (0117) ;    of this function.  When necessary, it is the calling function's
                                        (0118) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0119) ;    functions.
                                        (0120) ;
                                        (0121)  ADCINC_SetPower:
                                        (0122) _ADCINC_SetPower:
                                        (0123)    RAM_PROLOGUE RAM_USE_CLASS_2
06F8: 4F       MOV   X,SP               (0124)    mov  X,SP                                     ; Set up Stack frame
06F9: 21 03    AND   A,0x3              (0125)    and  A,03h                                    ; Ensure value is legal
06FB: 08       PUSH  A                  (0126)    push A
06FC: 5D 83    MOV   A,REG[0x83]        (0127)    mov  A,reg[ADCINC_AtoDcr3]                    ; First SC block:
06FE: 21 FC    AND   A,0xFC             (0128)    and  A,~03h                                   ;   clear power bits to zero
0700: 2B 00    OR    A,[X+0]            (0129)    or   A,[ X ]                                  ;   establish new value
0702: 60 83    MOV   REG[0x83],A        (0130)    mov  reg[ADCINC_AtoDcr3],A                    ;   change the actual setting
0704: 18       POP   A                  (0131)    pop  A
                                        (0132)    RAM_EPILOGUE RAM_USE_CLASS_2
0705: 7F       RET                      (0133)    ret
0706: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0134) .ENDSECTION
                                        (0135) 
                                        (0136) .SECTION
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;  FUNCTION NAME: ADCINC_Stop
                                        (0139) ;
                                        (0140) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0141) ;                 and turns off PWM
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:     None.
                                        (0145) ;  RETURNS:       Nothing.
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  When necessary, it is the calling function's
                                        (0149) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0150) ;    functions.
                                        (0151) ;
                                        (0152)  ADCINC_Stop:
                                        (0153) _ADCINC_Stop:
                                        (0154)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0155)    ADCINC_STOPADC_M
0709: 41 83 FC AND   REG[0x83],0xFC     (0156)    and  reg[ADCINC_AtoDcr3], ~03h
070C: 41 23 FE AND   REG[0x23],0xFE     (0157)    and  reg[ADCINC_PWMcr0], ~01h ; stop PWM
                                        (0158)    RAM_EPILOGUE RAM_USE_CLASS_1
070F: 7F       RET                      (0159)    ret
0710: 41 83 EF AND   REG[0x83],0xEF     
0713: 41 82 DF AND   REG[0x82],0xDF     
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: ADCINC_GetSamples
                                        (0166) ;
                                        (0167) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;
                                        (0170) ;  ARGUMENTS:    A register contain number of samples
                                        (0171) ;  RETURNS:      Nothing.
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    The A and X registers may be modified by this or future implementations
                                        (0174) ;    of this function.  When necessary, it is the calling function's
                                        (0175) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0176) ;    functions.
                                        (0177) ;          
                                        (0178)  ADCINC_GetSamples:
                                        (0179) _ADCINC_GetSamples:
                                        (0180)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0181)    RAM_SETPAGE_CUR >ADCINC_fMode
                                        (0182)    ADCINC_ENABLE_INTEGRATOR_M
0716: 55 1A 00 MOV   [0x1A],0x0         (0183)    mov [ADCINC_fMode],0
0719: 55 19 00 MOV   [0x19],0x0         (0184)    mov [ADCINC_bState],0
071C: 53 1B    MOV   [0x1B],A           (0185)    mov [ADCINC_bNumSamples],A
071E: 5D 22    MOV   A,REG[0x22]        (0186)    mov A, reg[ADCINC_PWMdr2]
0720: B0 04    JNZ   0x0725             (0187)    jnz  .SkipPulseWrite
0722: 62 22 01 MOV   REG[0x22],0x1      (0188)    mov reg[ADCINC_PWMdr2], 1
0725: 62 DB FE MOV   REG[0xDB],0xFE     
0728: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0189) .SkipPulseWrite:
                                        (0190)    ADCINC_STARTADC_M  ;enable interrupt 
                                        (0191)    RAM_EPILOGUE RAM_USE_CLASS_4 
072B: 7F       RET                      (0192)    ret
072C: 41 E1 FE AND   REG[0xE1],0xFE     
072F: 43 82 20 OR    REG[0x82],0x20     
0732: 43 83 10 OR    REG[0x83],0x10     
                                        (0193) .ENDSECTION
                                        (0194) 
                                        (0195) 
                                        (0196) .SECTION
                                        (0197) ;-----------------------------------------------------------------------------
                                        (0198) ;  FUNCTION NAME: ADCINC_StopADC
                                        (0199) ;
                                        (0200) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
                                        (0201) ;               is disabled but the PWM output is still active.
                                        (0202) ;               Integrator is reset
                                        (0203) ;-----------------------------------------------------------------------------
                                        (0204) ;
                                        (0205) ;  ARGUMENTS:    None.
                                        (0206) ;  RETURNS:      Nothing.
                                        (0207) ;  SIDE EFFECTS:
                                        (0208) ;    The A and X registers may be modified by this or future implementations
                                        (0209) ;    of this function.  When necessary, it is the calling function's
                                        (0210) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0211) ;    functions.
                                        (0212) ;
                                        (0213)  ADCINC_StopADC:
                                        (0214) _ADCINC_StopADC:
                                        (0215)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0216)    ADCINC_STOPADC_M
                                        (0217)    ADCINC_RESET_INTEGRATOR_M
                                        (0218)    RAM_EPILOGUE RAM_USE_CLASS_1 
0735: 7F       RET                      (0219)  ret
0736: 51 18    MOV   A,[0x18]           
                                        (0220) .ENDSECTION
                                        (0221) 
                                        (0222) 
                                        (0223) .SECTION
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  FUNCTION NAME: ADCINC_fIsDataAvailable
                                        (0226) ;
                                        (0227) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  ARGUMENTS:    None.
                                        (0230) ;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
                                        (0231) ;  SIDE EFFECTS:
                                        (0232) ;    The A and X registers may be modified by this or future implementations
                                        (0233) ;    of this function.  When necessary, it is the calling function's
                                        (0234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0235) ;    functions.
                                        (0236) ;          
                                        (0237)  ADCINC_fIsDataAvailable:
                                        (0238) _ADCINC_fIsDataAvailable:
                                        (0239)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0240)    ADCINC_fIsDataAvailable_M   
                                        (0241)    RAM_EPILOGUE RAM_USE_CLASS_4
0738: 7F       RET                      (0242)    ret
0739: 55 18 00 MOV   [0x18],0x0         
073C: 58 14    MOV   X,[0x14]           
073E: 51 15    MOV   A,[0x15]           
0740: 3C 18 00 CMP   [0x18],0x0         
0743: BF F5    JNZ   _ADCINC_iClearFlagGetData|_ADCINC_wClearFlagGetData|ADCINC_wClearFlagGetData|ADCINC_iClearFlagGetData
                                        (0243) .ENDSECTION
                                        (0244) 
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME:  ADCINC_iClearFlagGetData
                                        (0249) ;                  ADCINC_wClearFlagGetData
                                        (0250) ;
                                        (0251) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0252) ;                  Flag is checked after trandfer to insure valid data.
                                        (0253) ;                  available. Also clears the DATA_READY flag. 
                                        (0254) ;-----------------------------------------------------------------------------
                                        (0255) ;  ARGUMENTS:    None.
                                        (0256) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0257) ;  SIDE EFFECTS:
                                        (0258) ;    The A and X registers may be modified by this or future implementations
                                        (0259) ;    of this function.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;          
                                        (0263)  ADCINC_iClearFlagGetData:
                                        (0264) _ADCINC_iClearFlagGetData:
                                        (0265)  ADCINC_wClearFlagGetData:
                                        (0266) _ADCINC_wClearFlagGetData:
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0268)    ADCINC_iClearFlagGetData_M   
                                        (0269)    RAM_EPILOGUE RAM_USE_CLASS_4
0745: 7F       RET                      (0270)    ret
0746: 55 18 00 MOV   [0x18],0x0         
0749: 51 15    MOV   A,[0x15]           
                                        (0271) .ENDSECTION
                                        (0272) 
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME:  ADCINC_cClearFlagGetData
                                        (0277) ;                  ADCINC_bClearFlagGetData
                                        (0278) ;
                                        (0279) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  ARGUMENTS:    None.
                                        (0282) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0283) ;  SIDE EFFECTS:
                                        (0284) ;    The A and X registers may be modified by this or future implementations
                                        (0285) ;    of this function.  When necessary, it is the calling function's
                                        (0286) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0287) ;    functions.
                                        (0288) ;          
                                        (0289)  ADCINC_cClearFlagGetData:
                                        (0290) _ADCINC_cClearFlagGetData:
                                        (0291)  ADCINC_bClearFlagGetData:
                                        (0292) _ADCINC_bClearFlagGetData:
                                        (0293)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0294)    ADCINC_bClearFlagGetData_M     
                                        (0295)    RAM_EPILOGUE RAM_USE_CLASS_4
074B: 7F       RET                      (0296)    ret
074C: 58 14    MOV   X,[0x14]           
074E: 51 15    MOV   A,[0x15]           
                                        (0297) .ENDSECTION
                                        (0298) .SECTION
                                        (0299) ;-----------------------------------------------------------------------------
                                        (0300) ;  FUNCTION NAME:  ADCINC_iGetData
                                        (0301) ;                  ADCINC_wGetData
                                        (0302) ;
                                        (0303) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0304) ;                   available.
                                        (0305) ;-----------------------------------------------------------------------------
                                        (0306) ;  ARGUMENTS:    None.
                                        (0307) ;  RETURNS:      fastcall int iResult is returned in the X,A registers
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  When necessary, it is the calling function's
                                        (0311) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0312) ;    functions.
                                        (0313) ;          
                                        (0314)  ADCINC_iGetData:
                                        (0315) _ADCINC_iGetData:
                                        (0316)  ADCINC_wGetData:
                                        (0317) _ADCINC_wGetData:
                                        (0318)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0319)    ADCINC_wGetData_M          
                                        (0320)    RAM_EPILOGUE RAM_USE_CLASS_4
0750: 7F       RET                      (0321)    ret
0751: 51 15    MOV   A,[0x15]           
                                        (0322) .ENDSECTION
                                        (0323) .SECTION
                                        (0324) ;-----------------------------------------------------------------------------
                                        (0325) ;  FUNCTION NAME:  ADCINC_bGetData
                                        (0326) ;                  ADCINC_cGetData
                                        (0327) ;
                                        (0328) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0329) ;                   available.
                                        (0330) ;-----------------------------------------------------------------------------
                                        (0331) ;  ARGUMENTS:    None.
                                        (0332) ;  RETURNS:      fastcall CHAR cData returned in the A register
                                        (0333) ;  SIDE EFFECTS:
                                        (0334) ;    The A and X registers may be modified by this or future implementations
                                        (0335) ;    of this function.  When necessary, it is the calling function's
                                        (0336) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0337) ;    functions.
                                        (0338) ;          
                                        (0339)  ADCINC_bGetData:
                                        (0340) _ADCINC_bGetData:
                                        (0341)  ADCINC_cGetData:
                                        (0342) _ADCINC_cGetData:
                                        (0343)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0344)    ADCINC_cGetData_M        
                                        (0345)    RAM_EPILOGUE RAM_USE_CLASS_4
0753: 7F       RET                      (0346)    ret
0754: 51 18    MOV   A,[0x18]           
0756: 55 18 00 MOV   [0x18],0x0         
                                        (0347) .ENDSECTION
                                        (0348) 
                                        (0349) 
                                        (0350) .SECTION
                                        (0351) ;-----------------------------------------------------------------------------
                                        (0352) ;  FUNCTION NAME: ADCINC_fClearFlag
                                        (0353) ;
                                        (0354) ;  DESCRIPTION: Clears the data ready flag.
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  ARGUMENTS:    None.
                                        (0357) ;  RETURNS:      Nothing.
                                        (0358) ;  SIDE EFFECTS: 
                                        (0359) ;    The DATA_READY flag is cleared.
                                        (0360) ;    The A and X registers may be modified by this or future implementations
                                        (0361) ;    of this function.  When necessary, it is the calling function's
                                        (0362) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0363) ;    functions.
                                        (0364) ;          
                                        (0365)  ADCINC_fClearFlag:
                                        (0366) _ADCINC_fClearFlag:
                                        (0367)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0368)    ADCINC_fClearFlag_M    
                                        (0369)    RAM_EPILOGUE RAM_USE_CLASS_4
0759: 7F       RET                      (0370)    ret
075A: 60 22    MOV   REG[0x22],A        
                                        (0371) .ENDSECTION
                                        (0372) 
                                        (0373) 
                                        (0374) .SECTION
                                        (0375) ;-----------------------------------------------------------------------------
                                        (0376) ;  FUNCTION NAME: ADCINC_WritePulseWidth
                                        (0377) ;
                                        (0378) ;  DESCRIPTION:
                                        (0379) ;     Write the 8-bit period value into the compare register (DR2).
                                        (0380) ;-----------------------------------------------------------------------------
                                        (0381) ;
                                        (0382) ;  ARGUMENTS: fastcall BYTE bPeriodValue (passed in A)
                                        (0383) ;  RETURNS:   Nothing
                                        (0384) ;  SIDE EFFECTS:
                                        (0385) ;    The A and X registers may be modified by this or future implementations
                                        (0386) ;    of this function.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390)  ADCINC_WritePulseWidth:
                                        (0391) _ADCINC_WritePulseWidth:
                                        (0392)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0393)    ADCINC_WritePulseWidth_M  
                                        (0394)    RAM_EPILOGUE RAM_USE_CLASS_1
075C: 7F       RET                      (0395)    ret
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File ADCINC.asm
FILE: G:\Hobby\PROGRA~1\PSOCPR~1\SPI\SPI\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        													// Part specific constants and macros
(0006) #include "PSoCAPI.h"    													// PSoC API definitions for all User Modules
(0007) #pragma interrupt_handler Timer16
(0008) 
(0009) void Sample(void);
(0010) void SPI_Send(char *Senden);
(0011) 
(0012) char ADWandler = 0x05;
(0013) char SPI = 0x00;
(0014) 
(0015) void main(void)
(0016) {
(0017) 	M8C_EnableGInt; 
__UserModules_end|__text_start|_main|_main:
    075D: 71 01    OR    F,0x1
(0018) 	PGA_Start(PGA_MEDPOWER);
    075F: 10       PUSH  X
    0760: 50 02    MOV   A,0x2
    0762: 7C 03 90 LCALL _PGA_SetPower|_PGA_Start|PGA_Start|PGA_SetPower
(0019) 	LCD_Start();  
    0765: 7C 04 C5 LCALL LCD_Start|_LCD_Init|LCD_Init|_LCD_Start
(0020) 	SPIM_Start(SPIM_SPIM_MODE_0 | SPIM_SPIM_MSB_FIRST);
    0768: 50 00    MOV   A,0x0
    076A: 7C 03 7E LCALL _SPIM_Start
(0021) 	ADCINC_Start(ADCINC_HIGHPOWER);       
    076D: 50 03    MOV   A,0x3
    076F: 7C 06 E6 LCALL _ADCINC_Start
(0022)   	ADCINC_GetSamples(0); 
    0772: 50 00    MOV   A,0x0
    0774: 7C 07 10 LCALL _ADCINC_GetSamples
(0023) 	Timer16_EnableInt();  										
    0777: 7C 03 19 LCALL _Timer16_EnableInt
(0024)     Timer16_Start();  	
    077A: 7C 03 21 LCALL _Timer16_Start
    077D: 20       POP   X
    077E: 80 32    JMP   0x07B1
(0025) 
(0026) 	while (1)
(0027) 	{
(0028) 		if(SPI)
    0780: 3C 01 00 CMP   [SPI],0x0
    0783: A0 0E    JZ    0x0792
(0029) 		{
(0030) 			SPI_Send(&ADWandler);
    0785: 50 00    MOV   A,0x0
    0787: 08       PUSH  A
    0788: 50 00    MOV   A,0x0
    078A: 08       PUSH  A
    078B: 90 39    CALL  _SPI_Send
    078D: 38 FE    ADD   SP,0xFE
(0031) 			SPI = 0x00;
    078F: 55 01 00 MOV   [SPI],0x0
(0032) 		}
(0033) 		
(0034) 		//Sample();
(0035) 		LCD_Position(0,0);
    0792: 10       PUSH  X
    0793: 50 00    MOV   A,0x0
    0795: 57 00    MOV   X,0x0
    0797: 7C 05 35 LCALL _LCD_Position
(0036) 		LCD_PrCString("AD-Wert:");
    079A: 50 01    MOV   A,0x1
    079C: 08       PUSH  A
    079D: 50 50    MOV   A,0x50
    079F: 5C       MOV   X,A
    07A0: 18       POP   A
    07A1: 7C 03 C4 LCALL _LCD_PrCString
(0037) 		LCD_Position(1,0);
    07A4: 57 00    MOV   X,0x0
    07A6: 50 01    MOV   A,0x1
    07A8: 7C 05 35 LCALL _LCD_Position
(0038) 		LCD_PrHexByte(ADWandler);
    07AB: 51 00    MOV   A,[ADWandler]
    07AD: 7C 03 E6 LCALL _LCD_PrHexByte
    07B0: 20       POP   X
(0039) 	}
    07B1: 8F CE    JMP   0x0780
    07B3: 8F FF    JMP   0x07B3
(0040) 
(0041) }
(0042) 
(0043) void Sample(void)
(0044) {	
(0045) 	while(ADCINC_fIsDataAvailable() == 0);   
_Sample:
    07B5: 10       PUSH  X
    07B6: 7C 07 36 LCALL _ADCINC_fIsDataAvailable
    07B9: 20       POP   X
    07BA: 39 00    CMP   A,0x0
    07BC: AF F8    JZ    _Sample
(0046)     ADWandler = ADCINC_iClearFlagGetData();              
    07BE: 10       PUSH  X
    07BF: 7C 07 39 LCALL _ADCINC_iClearFlagGetData|_ADCINC_wClearFlagGetData|ADCINC_wClearFlagGetData|ADCINC_iClearFlagGetData
    07C2: 20       POP   X
    07C3: 53 00    MOV   [ADWandler],A
    07C5: 7F       RET   
(0047) }
(0048) 
(0049) void SPI_Send(char *Senden)
(0050) {
_SPI_Send:
  Senden               --> X-5
    07C6: 10       PUSH  X
    07C7: 4F       MOV   X,SP
(0051) 			while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    07C8: 10       PUSH  X
    07C9: 7C 03 8D LCALL SPIM_bReadStatus|_bSPIM_ReadStatus|bSPIM_ReadStatus|_SPIM_bReadStatus
    07CC: 20       POP   X
    07CD: 53 10    MOV   [__r0],A
    07CF: 47 10 10 TST   [__r0],0x10
    07D2: AF F5    JZ    0x07C8
(0052)     		{ 
(0053)     			SPIM_SendTxData(*Senden);
    07D4: 52 FC    MOV   A,[X-4]
    07D6: 53 0F    MOV   [__r1],A
    07D8: 3E 0F    MVI   A,[__r1]
    07DA: 10       PUSH  X
    07DB: 7C 03 87 LCALL _SPIM_SendTxData
    07DE: 20       POP   X
(0054) 				PRT2DR ^= 0x02;												//LED_SPI togglen
    07DF: 45 08 02 XOR   REG[0x8],0x2
(0055) 			}
    07E2: 20       POP   X
    07E3: 7F       RET   
(0056) }
(0057) 
(0058) void Timer16(void)
(0059) {	
_Timer16:
    07E4: 08       PUSH  A
    07E5: 51 10    MOV   A,[__r0]
    07E7: 08       PUSH  A
    07E8: 51 0F    MOV   A,[__r1]
    07EA: 08       PUSH  A
    07EB: 51 0E    MOV   A,[__r2]
    07ED: 08       PUSH  A
    07EE: 51 0D    MOV   A,[__r3]
    07F0: 08       PUSH  A
    07F1: 51 0C    MOV   A,[__r4]
    07F3: 08       PUSH  A
    07F4: 51 0B    MOV   A,[__r5]
    07F6: 08       PUSH  A
    07F7: 51 0A    MOV   A,[__r6]
    07F9: 08       PUSH  A
    07FA: 51 09    MOV   A,[__r7]
    07FC: 08       PUSH  A
    07FD: 51 08    MOV   A,[__r8]
    07FF: 08       PUSH  A
    0800: 51 07    MOV   A,[__r9]
    0802: 08       PUSH  A
    0803: 51 06    MOV   A,[__r10]
    0805: 08       PUSH  A
    0806: 51 05    MOV   A,[__r11]
    0808: 08       PUSH  A
    0809: 51 04    MOV   A,[__rX]
    080B: 08       PUSH  A
    080C: 51 03    MOV   A,[__rY]
    080E: 08       PUSH  A
    080F: 51 02    MOV   A,[__rZ]
    0811: 08       PUSH  A
(0060) 	SPI = 0x01;
    0812: 55 01 01 MOV   [SPI],0x1
(0061) 	Timer16_WritePeriod(32768);
    0815: 10       PUSH  X
    0816: 57 80    MOV   X,0x80
    0818: 50 00    MOV   A,0x0
    081A: 7C 03 29 LCALL _Timer16_WritePeriod
    081D: 20       POP   X
(0062) 	PRT2DR ^= 0x01;															//LED_Timer togglen
    081E: 45 08 01 XOR   REG[0x8],0x1
    0821: 18       POP   A
    0822: 53 02    MOV   [__rZ],A
    0824: 18       POP   A
    0825: 53 03    MOV   [__rY],A
    0827: 18       POP   A
    0828: 53 04    MOV   [__rX],A
    082A: 18       POP   A
    082B: 53 05    MOV   [__r11],A
    082D: 18       POP   A
    082E: 53 06    MOV   [__r10],A
    0830: 18       POP   A
    0831: 53 07    MOV   [__r9],A
    0833: 18       POP   A
    0834: 53 08    MOV   [__r8],A
    0836: 18       POP   A
    0837: 53 09    MOV   [__r7],A
    0839: 18       POP   A
    083A: 53 0A    MOV   [__r6],A
    083C: 18       POP   A
    083D: 53 0B    MOV   [__r5],A
    083F: 18       POP   A
    0840: 53 0C    MOV   [__r4],A
    0842: 18       POP   A
    0843: 53 0D    MOV   [__r3],A
    0845: 18       POP   A
    0846: 53 0E    MOV   [__r2],A
    0848: 18       POP   A
    0849: 53 0F    MOV   [__r1],A
    084B: 18       POP   A
    084C: 53 10    MOV   [__r0],A
    084E: 18       POP   A
    084F: 7E       RETI  
