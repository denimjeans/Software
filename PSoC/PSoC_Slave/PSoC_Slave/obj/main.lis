                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile G:\Dropbox\Hobby\PROGRA~1\PSOCPR~1\PSOC_S~1\PSOC_S~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 18
 0000           ; //----------------------------------------------------------------------------
 0000           ; // C main line
 0000           ; //----------------------------------------------------------------------------
 0000           ; 
 0000           ; #include <m8c.h>       
 0000           ; #include "PSoCAPI.h"
 0000           ; 
 0000           ; // Struct für den I²C-Buffer
 0000           ; struct I2C_Regs 
 0000           ; {
 0000           ;       int ADC;     
 0000           ;       int PWM_Freq;
 0000           ;       int PWM_Pulse;
 0000           ;       char Temperatur;
 0000           ; }I2C;
 0000           ; 
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 19
 0000           ;       EzI2Cs_SetRamBuffer(10, 10, (char *)&I2C);                                                                              // I²C Buffer setzen
 0000 10                push X
 0001 5000              mov A,>_I2C
 0003 08                push A
 0004 5000              mov A,<_I2C
 0006 08                push A
 0007 500A              mov A,10
 0009 08                push A
 000A 08                push A
 000B 7C0000            xcall _EzI2Cs_SetRamBuffer
 000E 38FC              add SP,-4
 0010 20                pop X
 0011                   .dbline 21
 0011           ; 
 0011           ;       M8C_EnableGInt;
 0011 7101                      or  F, 01h
 0013           
 0013                   .dbline 23
 0013           ;       
 0013           ;       EzI2Cs_Start();                                                                                                                                 // I²C Modul starten
 0013 10                push X
 0014 7C0000            xcall _EzI2Cs_Start
 0017                   .dbline 24
 0017           ;       EzI2Cs_EnableInt();                                                                                                                             // I²C Interrupts aktivieren
 0017 7C0000            xcall _EzI2Cs_EnableInt
 001A                   .dbline 25
 001A           ;       PWM16_Start();                                                                                                                                  // PWM Modul aktivieren
 001A 7C0000            xcall _PWM16_Start
 001D                   .dbline 27
 001D           ;       
 001D           ;       ADC10_Start(ADC10_FULLRANGE);                                                                                                   // ADC Modul aktivieren 
 001D 5003              mov A,3
 001F 7C0000            xcall _ADC10_Start
 0022                   .dbline 28
 0022           ;       ADC10_iCal(119, ADC10_CAL_VBG);  // 1.3V = 333 counts 
 0022 5003              mov A,3
 0024 08                push A
 0025 5000              mov A,0
 0027 08                push A
 0028 5077              mov A,119
 002A 08                push A
 002B 7C0000            xcall _ADC10_iCal
 002E 38FD              add SP,-3
 0030                   .dbline 29
 0030           ;       ADC10_StartADC();                                                                                                                               // Sampling starten
 0030 7C0000            xcall _ADC10_StartADC
 0033 20                pop X
 0034                   .dbline 32
 0034           ;       
 0034           ;       // Startwerte setzen
 0034           ;       I2C.PWM_Freq = 32767;                                                                                           
 0034 5503FF            mov [_I2C+2+1],-1
 0037 55027F            mov [_I2C+2],127
 003A                   .dbline 33
 003A           ;       I2C.PWM_Pulse = 16383;
 003A 5505FF            mov [_I2C+4+1],-1
 003D 55043F            mov [_I2C+4],63
 0040 8026              xjmp L5
 0042           L4:
 0042                   .dbline 36
 0042           ;       
 0042           ;       while(1)
 0042           ;       {
 0042                   .dbline 37
 0042           ;               PWM16_WritePeriod(I2C.PWM_Freq);
 0042 10                push X
 0043 5802              mov X,[_I2C+2]
 0045 5103              mov A,[_I2C+2+1]
 0047 7C0000            xcall _PWM16_WritePeriod
 004A                   .dbline 38
 004A           ;       PWM16_WritePulseWidth(I2C.PWM_Pulse);
 004A 5804              mov X,[_I2C+4]
 004C 5105              mov A,[_I2C+4+1]
 004E 7C0000            xcall _PWM16_WritePulseWidth
 0051 20                pop X
 0052           L9:
 0052                   .dbline 40
 0052           ;               
 0052           ;               while(0 == ADC10_fIsDataAvailable());  
 0052           L10:
 0052                   .dbline 40
 0052 10                push X
 0053 7C0000            xcall _ADC10_fIsDataAvailable
 0056 20                pop X
 0057 3900              cmp A,0
 0059 AFF8              jz L9
 005B                   .dbline 41
 005B           ;               I2C.ADC = ADC10_iGetDataClearFlag(); 
 005B 10                push X
 005C 7C0000            xcall _ADC10_iGetDataClearFlag
 005F 5A00              mov [__r0],X
 0061 20                pop X
 0062 5301              mov [_I2C+1],A
 0064 5F0000            mov [_I2C],[__r0]
 0067                   .dbline 42
 0067           ;       }
 0067           L5:
 0067                   .dbline 35
 0067 8FDA              xjmp L4
 0069           X0:
 0069                   .dbline -2
 0069           L1:
 0069                   .dbline 0 ; func end
 0069 8FFF              jmp .
 006B                   .dbend
                        .area bss(ram, con, rel)
 0000                   .dbfile G:\Dropbox\Hobby\PROGRA~1\PSOCPR~1\PSOC_S~1\PSOC_S~1\main.c
 0000           _I2C::
 0000                   .blkb 7
 0007                   .dbstruct 0 7 I2C_Regs
 0007                   .dbfield 0 ADC I
 0007                   .dbfield 2 PWM_Freq I
 0007                   .dbfield 4 PWM_Pulse I
 0007                   .dbfield 6 Temperatur c
 0007                   .dbend
 0007                   .dbsym e I2C _I2C S[I2C_Regs]
