 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: EzI2CsINT.asm
 0000           ;;  Version: 1.30, Updated on 2012/9/21 at 11:59:1
 0000           ;;  Generated by PSoC Designer 5.3.2710
 0000           ;;
 0000           ;;  DESCRIPTION: I2CFXM (Slave) Interrupt Service Routine
 0000           ;;  
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           EzI2Cs_I2C_FREE :                      equ  0x00      ; No transaction at the current moment
 0001           EzI2Cs_I2C_BUSY_RAM_READ :             equ  0x01      ; RAM read transaction in progress
 0002           EzI2Cs_I2C_BUSY_RAM_WRITE:             equ  0x02      ; RAM write transaction in progress
 0004           EzI2Cs_I2C_BUSY_ROM_READ :             equ  0x04      ; ROM read transaction in progress
 0008           EzI2Cs_I2C_BUSY_ROM_WRITE:             equ  0x08      ; ROM write transaction in progress
 0000           
 0000           ;--------------------------------------------------
 0000           ; Constants for EzI2Cs API's.
 0000           ;--------------------------------------------------
 0000           
 0000           EzI2Cs_DYNAMIC_ADDR:                   equ   0
 0000           EzI2Cs_ROM_ENABLE:                     equ   0
 0000           EzI2Cs_SYNC_FIX:                       equ   0
 0000           EzI2Cs_AUTO_ADDR_CHECK:                equ   0                       ;CY8C28X45 may have this 0 or 1 while all other have 0
 0000           EzI2Cs_ADDR_REG_PRESENT:               equ   0                       ;CY8C28X45 have 1 always while all other have 0
 0000           EzI2Cs_USED_I2C_BLOCK:                 equ   0                       ;CY8C28X45 have 0 for I2C Controller_0 and 1 for I2C Controller_1, other have 0
 0000           
                IF (EzI2Cs_ROM_ENABLE) 
                   EzI2Cs_ADDR_MASK:                        equ  0x7E    ; Mask off ROM Addr and R/W bit
                ELSE
 00FE              EzI2Cs_ADDR_MASK:                        equ  0xFE    ; Mask off  R/W bit
                ENDIF
                
                ;; I2C_CFG Register definitions
 0040           EzI2Cs_CFG_PSelect:                         equ  0x40   ; Pin Select, 0 = P1,7/5, 1 = P1,1,0
 0020           EzI2Cs_CFG_BUS_ERROR_IE:                    equ  0x20   ; Enable Interrupt on bus error
 0010           EzI2Cs_CFG_STOP_IE:                         equ  0x10   ; Enable Interrupt on Stop condition
 0000           EzI2Cs_CFG_CLOCK_100K:                      equ  0x00   ; 100kHz Standard clock rate
 0004           EzI2Cs_CFG_CLOCK_400K:                      equ  0x04   ; 400kHz Fast Mode
 0008           EzI2Cs_CFG_CLOCK_50K:                       equ  0x08   ; 50kHz  Standard Mode
 0002           EzI2Cs_CFG_Master_EN:                       equ  0x02   ; Enable Master Mode.               
 0001           EzI2Cs_CFG_Slave_EN:                        equ  0x01   ; Enable Slave Mode.               
 0000           
 0000           ;; I2C_SCR Register definitions
 0080           EzI2Cs_SCR_BUS_ERROR:                       equ  0x80  ; Bus Error                    
 0040           EzI2Cs_SCR_LOST_ARB:                        equ  0x40  ; Lost Arbitration  (Master Only)
 0020           EzI2Cs_SCR_STOP_STATUS:                     equ  0x20  ; Stop Status                  
 0010           EzI2Cs_SCR_ACK:                             equ  0x10  ; ACK Status                   
 0000           EzI2Cs_SCR_NAK:                             equ  0x00  ; NAK Status                   
 0008           EzI2Cs_SCR_ADDRESS:                         equ  0x08  ; Data is address.
 0004           EzI2Cs_SCR_TRANSMIT:                        equ  0x04  ; Sets direction of data flow                
 0002           EzI2Cs_SCR_LRB:                             equ  0x02  ; Last Received Bit                
 0001           EzI2Cs_SCR_BYTE_COM:                        equ  0x01  ; Byte Complete   
 0000           
 0000           ;; I2C_DR  Register definitions (Data Register)
 0000           
 0000           ;; I2C_MSCR Register definitions  (Master Mode Only)
 0008           EzI2Cs_MSCR_BUS_BUSY:                       equ  0x08  ; Bus is Busy with other trafic        
 0004           EzI2Cs_MSCR_MASTER_MODE:                    equ  0x04  ; ?????
 0002           EzI2Cs_MSCR_RESTART_REN:                    equ  0x02  ; Generate a Restart
 0001           EzI2Cs_MSCR_START_REN:                      equ  0x01  ; Generate a Start
 0000           
 0000           
 0000           ;; Valid address
 0078           EzI2Cs_SLAVE_ADDR:                          equ  (0x3c<<1)        ; Permanent Slave Address
 0000           EzI2Cs_ALT_SLAVE_ADDR:                      equ  ((0x3c<<1)&0x80) ; Permanent Slave Address
 0000           
 0080           EzI2Cs_ALT_ADDR_BIT:                        equ  0x80 ; Alternate Address bit
 0001           EzI2Cs_RW_FLAG:                             equ  0x01 ; Read/Write flag      
 0001           EzI2Cs_RD_FLAG:                             equ  0x01 ; Read/Write flag      
 0000           EzI2Cs_WR_FLAG:                             equ  0x00 ; Read/Write flag      
 0000           
 00D6           EzI2Cs_CFG_REG:                             equ d6h    ; I2C Configuration Register
 00D7           EzI2Cs_SCR_REG:                             equ d7h    ; I2C Enable Master/Slave Block Operation
 00D8           EzI2Cs_DR_REG:                              equ d8h    ; I2C Status and Control Register
 00D9           EzI2Cs_MSCR_REG:                            equ d9h    ; I2C Master Status and Control
                IF(EzI2Cs_ADDR_REG_PRESENT) ;Applicable for CY8C28X45
                EzI2Cs_ADDR_REG:             equ @ADDR_REG_ADDRh                 ; I2C Address
                EzI2Cs_HW_ADDR_MASK:                        equ 80h              ; I2C HW Address Mask
                ENDIF
                
                
                ;; Bit definitions for EzI2Cs_bState
 00B0           EzI2Cs_ACTIVITY_MASK:      equ  0xB0      ; Activity Mask
 0080           EzI2Cs_ANY_ACTIVITY:       equ  0x80      ; Any I2C bus activity.
 0020           EzI2Cs_READ_ACTIVITY:      equ  0x20      ; I2C read activity at primary address.
 0010           EzI2Cs_WRITE_ACTIVITY:     equ  0x10      ; I2C write activity at primary address.
 0000           
 0000           ;--------------------------------------------------
 0000           ;   EzI2Cs API Constants
 0000           ;--------------------------------------------------
 0000           
 00DE           EzI2Cs_INT_REG:                            equ 0x0de
 0001           EzI2Cs_INT_MASK:                           equ 0x01
 0000           
 0000           ; Definitions for EzI2Cs_EnableSlave function
 0000           EzI2Cs_CY8C27XXXA_ID:                       equ 0x0
 0000           
 0000           ;I2C_(status and control) reg write macro
 0000           ;----------------------------------------------------
 0000           ;  I2C_SCR and I2C_MSCR reg write macro
 0000           ;
 0000           ;  Use the following macros to write to the I2C_SCR register
 0000           ;  Usage:    SetI2C_SCR  WRITE_VALUE
 0000           ;
 0000           ;  where WRITE_VALUE is the data to be writen
 0000           ;
 0000           ;----------------------------------------------------
 0000           
 0000           
 0000           ; Write to the  EzI2Cs_SCR register
 0000               macro SetEzI2Cs_SCR
 0000           IF (EzI2Cs_SYNC_FIX)
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  X
 0000                   mov   X, A                        ; if data for I2C_SCR was in A save it in X
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07                          ; Mask off CPU speed
 0000                   or    A, 0x01                           ; Set CPU to 6 MHz
 0000                   mov   reg[OSC_CR0], A                   ; 
 0000                   and   F, ~FLAG_XIO_MASK                 ; set bank0
 0000                   mov   A, X                              ; if the operation uses data in A get it out of X
 0000                   mov   reg[EzI2Cs_SCR_REG], @0 ; write data to reg[I2C_SCR]
 0000                   or    F, FLAG_XIO_MASK                  ; set bank1
 0000                   pop   A                                 ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK                 ; set bank0
 0000                   mov   A, X                              ; if A was data restore it from X now
 0000                   pop   X                                 ; restore original accumulator
 0000           ELSE
 0000                   mov   reg[EzI2Cs_SCR_REG], @0 ; write data to reg[I2C_SCR]
 0000           ENDIF
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0062           PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
 0038           PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
 0006           PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
 0001           PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
 0010           CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
 0000           
 0068           ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
 0080           ADC0_CR_CMPST:        equ 80h    ;
 0040           ADC0_CR_LOREN:        equ 40h    ;
 0020           ADC0_CR_SHEN:         equ 20h    ;
 0008           ADC0_CR_CBSRC:        equ 08h    ;
 0004           ADC0_CR_ADCM:         equ 04h    ;
 0001           ADC0_CR_EN:	          equ 01h    ;
 0000           
 0069           ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
 0080           ADC1_CR_CMPST:        equ 80h    ;
 0040           ADC1_CR_LOREN:        equ 40h    ;
 0020           ADC1_CR_SHEN:         equ 20h    ;
 0008           ADC1_CR_CBSRC:        equ 08h    ;
 0004           ADC1_CR_ADCM:         equ 04h    ;
 0001           ADC1_CR_EN:	          equ 01h    ;
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 0
 0072           ACE00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACE00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 1
 0076           ACE01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACE01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 0
 0080           ASE10CR0:     equ 80h          ; Control register 0                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 1
 0084           ASE11CR0:     equ 84h          ; Control register 0                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Control Registers
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0018           CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
 0003           CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 000F           AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 000F           AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 006B           CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
 0040           CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
 0030           CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
 0004           CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
 0003           CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0008           VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E5           ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
 00E6           ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 00FA           FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
 0003           FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           SYSTEM_STACK_PAGE: equ 0   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0000           SYSTEM_LARGE_MEMORY_MODEL: equ 0   
 0001           SYSTEM_SMALL_MEMORY_MODEL: equ 1   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C21020.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
                export    EzI2Cs_varPage      
                export   _EzI2Cs_varPage      
                
                export    EzI2Cs_bState  
                export   _EzI2Cs_bState
                
                export    EzI2Cs_bRAM_RWoffset
                export   _EzI2Cs_bRAM_RWoffset
                
                export    EzI2Cs_bRAM_RWcntr
                export   _EzI2Cs_bRAM_RWcntr
                
                export   _EzI2Cs_pRAM_Buf_Addr_LSB
                export    EzI2Cs_pRAM_Buf_Addr_LSB
                
                IF (SYSTEM_LARGE_MEMORY_MODEL)
                export   _EzI2Cs_pRAM_Buf_Addr_MSB
                export    EzI2Cs_pRAM_Buf_Addr_MSB
                ENDIF
                
                export   _EzI2Cs_bRAM_Buf_Size                                
                export    EzI2Cs_bRAM_Buf_Size    
                
                export   _EzI2Cs_bRAM_Buf_WSize               
                export    EzI2Cs_bRAM_Buf_WSize  
                
                IF (EzI2Cs_ROM_ENABLE)
                export    EzI2Cs_bROM_RWoffset
                export   _EzI2Cs_bROM_RWoffset
                
                export    EzI2Cs_bROM_RWcntr   
                export   _EzI2Cs_bROM_RWcntr   
                
                export   _EzI2Cs_pROM_Buf_Addr_LSB
                export    EzI2Cs_pROM_Buf_Addr_LSB
                export   _EzI2Cs_pROM_Buf_Addr_MSB
                export    EzI2Cs_pROM_Buf_Addr_MSB
                
                export   _EzI2Cs_bROM_Buf_Size                           
                export    EzI2Cs_bROM_Buf_Size
                
                ENDIF
                
                export    EzI2Cs_bBusy_Flag  
                export   _EzI2Cs_bBusy_Flag
                
                AREA InterruptRAM (RAM, REL, CON)
                
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                
                
                ;; Exported variables
 0000            _EzI2Cs_varPage:                                  ; This points to the variable page
 0000             EzI2Cs_varPage:          
 0000           
 0000            _EzI2Cs_bState:
 0000             EzI2Cs_bState:                             blk 1
 0001           
 0001           ;; RAM space variables
 0001            _EzI2Cs_bRAM_RWoffset:                            ; RAM address counter.  This is reset each time
 0001             EzI2Cs_bRAM_RWoffset:                      blk 1 ; a read or write is initiated.
 0002           
 0002            _EzI2Cs_bRAM_RWcntr:                              ; RAM Read/Write counter.  Keeps track of offset 
 0002             EzI2Cs_bRAM_RWcntr:                        blk 1 ; during a read or write operation.  Reset to
 0003                                                                 ; _bRAM_RWoffset at start of R/W command.
 0003           
                IF (SYSTEM_LARGE_MEMORY_MODEL)
                 _EzI2Cs_pRAM_Buf_Addr_MSB:                        ; Base address (MSB) to RAM buffer.  
                  EzI2Cs_pRAM_Buf_Addr_MSB:                  blk 1 ; 
                ENDIF
                
 0003            _EzI2Cs_pRAM_Buf_Addr_LSB:                        ; Base address (LSB) to RAM buffer.  
 0003             EzI2Cs_pRAM_Buf_Addr_LSB:                  blk 1 ; 
 0004           
 0004            _EzI2Cs_bRAM_Buf_Size:                            ; Size of RAM buffer.   
 0004             EzI2Cs_bRAM_Buf_Size:                      blk 1 ; 
 0005           
 0005            _EzI2Cs_bRAM_Buf_WSize:                           ; Portion of the RAM buffer size that is writable.
 0005             EzI2Cs_bRAM_Buf_WSize:                     blk 1 ; 
 0006           
 0006           ;; ROM space variables
                IF (EzI2Cs_ROM_ENABLE)
                 _EzI2Cs_bROM_RWoffset:                            ; ROM address counter.  This is reset each time
                  EzI2Cs_bROM_RWoffset:                      blk 1 ; a read is initiated
                
                 _EzI2Cs_bROM_RWcntr:                              ; ROM read counter. Keeps track of offset 
                  EzI2Cs_bROM_RWcntr:                        blk 1 ; during a read operation.  Reset to
                                                                      ; _bRAM_RWoffset at start of command.
                
                 _EzI2Cs_pROM_Buf_Addr_MSB:                        ; ROM address (MSB) counter. (Relative to buffer)  This
                  EzI2Cs_pROM_Buf_Addr_MSB:                  blk 1 ; counter is reset each time a read is initiated.
                
                 _EzI2Cs_pROM_Buf_Addr_LSB:                        ; ROM address (MSB) counter. (Relative to buffer)  This
                  EzI2Cs_pROM_Buf_Addr_LSB:                  blk 1 ; counter is reset each time a read is initiated.
                
                 _EzI2Cs_bROM_Buf_Size:                            ; Size of RAM buffer.                            
                  EzI2Cs_bROM_Buf_Size:                      blk 1 ; 
                
                ENDIF
                
                IF (EzI2Cs_AUTO_ADDR_CHECK^1)
                IF (EzI2Cs_DYNAMIC_ADDR) 
                
                export    EzI2Cs_bAddr
                export   _EzI2Cs_bAddr 
                
                 _EzI2Cs_bAddr:
                  EzI2Cs_bAddr:                              blk 1
                ENDIF
                ENDIF
                
 0006            _EzI2Cs_bBusy_Flag:
 0006             EzI2Cs_bBusy_Flag:                         blk 1
 0007           
 0007           ;-----------------------------------------------
 0007           ;  EQUATES and TABLES
 0007           ;-----------------------------------------------
 0007           
 0007           ;; Bit definitions for EzI2Cs_bState
 0000           STATE_IDLE:         equ  0x00      ; Wait for Correct Address
 0002           STATE_WR_RAM_ADDR:  equ  0x02      ; Wait for Secondary address on write
 0004           STATE_WR_RAM:       equ  0x04      ; Write RAM Data
 0006           STATE_RD_RAM:       equ  0x06      ; Read RAM Data
 0007           
 0008           STATE_WR_ROM_ADDR:  equ  0x08      ; Wait for Secondary address on write
 000A           STATE_RD_ROM:       equ  0x0A      ; Read ROM Data
 0007           
 000C           STATE_WR_ROM:       equ  0x0C      ; Write ROM (Not supported at this time)
 000E           STATE_RESET:        equ  0x0E      ; Reset state machine
 0007           
 000E           STATE_MASK:         equ  0x0E
 000F           STATE_MASK2:        equ  0x0F      ; State Mask
 0007           
 0040           ALT_MODE_FLAG:      equ  0x40      ; Reserved
 0007           
 0007           
 0007           ;@PSoC_UserCode_INIT@ (Do not change this line.)
 0007           ;---------------------------------------------------
 0007           ; Insert your custom declarations below this banner
 0007           ;---------------------------------------------------
 0007           
 0007           ;------------------------
 0007           ;  Constant Definitions
 0007           ;------------------------
 0007           
 0007           
 0007           ;------------------------
 0007           ; Variable Allocation
 0007           ;------------------------
 0007           
 0007           
 0007           ;---------------------------------------------------
 0007           ; Insert your custom declarations above this banner
 0007           ;---------------------------------------------------
 0007           ;@PSoC_UserCode_END@ (Do not change this line.)
 0007           
 0007           
 0007           
 0007           
                AREA UserModules (ROM, REL, CON)
                
                export _EzI2Cs_ISR
                ;;****************************************************
                ;; I2C_ISR  main entry point from vector 60h
                ;;
                ;;****************************************************
                
 0000            EzI2Cs_ISR:
 0000           _EzI2Cs_ISR:
 0000           
 0000 08            push A
 0001 10            push X
 0002               
 0002               ;@PSoC_UserCode_ISR_START@ (Do not change this line.)
 0002               ;---------------------------------------------------
 0002               ; Insert your custom code below this banner
 0002               ;---------------------------------------------------
 0002           
 0002               ;---------------------------------------------------
 0002               ; Insert your custom code above this banner
 0002               ;---------------------------------------------------
 0002               ;@PSoC_UserCode_END@ (Do not change this line.)
 0002           
 0002           ;; The folling conditional code is only valid when using the
 0002           ;; large memory model.
                IF (SYSTEM_LARGE_MEMORY_MODEL)
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_2
                   ENDIF
                   mov   A, reg[ IDX_PP ]
                   push  A
                   mov   A, reg[ CUR_PP ]
                   push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >EzI2Cs_varPage
                   ENDIF
                   mov   A, [EzI2Cs_pRAM_Buf_Addr_MSB]   ; Set Index page mode pointer
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], A
                   ENDIF
                ENDIF
                
 0002 2E0080        or   [EzI2Cs_bState],EzI2Cs_ANY_ACTIVITY                         ; Set Activity flag
 0005 49D708        tst  reg[EzI2Cs_SCR_REG],EzI2Cs_SCR_ADDRESS                      ; Check for address
 0008 A009          jz   .I2C_CHECK_STOP                                             ; Go to check for Stop condition if no Address
 000A 2600F0        and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bits.                       
 000D 2E0000        or   [EzI2Cs_bState],STATE_IDLE                                  ; Address flag set, change to IDLE state
 0010 8008          jmp  .I2C_DO_STATE_MACHINE
 0012           .I2C_CHECK_STOP:
 0012               ; Check for Stop condition here.  If a stop condition
 0012               ; exists, reset state machine to idle.
 0012 49D720        tst reg[EzI2Cs_SCR_REG],EzI2Cs_SCR_STOP_STATUS                   ; Check for Stop condition
 0015 A003          jz .I2C_DO_STATE_MACHINE                                            ; No Stop condition - do I2C state mashine
 0017               ; Following line was commented due to CDT#60202.
 0017               ; The stop bit is cleared by SetEzI2Cs_SCR macro, so the functionality related to EzI2Cs_bBusy_Flag is preserved.
 0017               ; and reg[EzI2Cs_SCR_REG],~EzI2Cs_SCR_STOP_STATUS                ; Clear Stop bit
 0017 80A8          jmp  I2C_STATE_RESET
 0019           .I2C_DO_STATE_MACHINE:
 0019 5100          mov  A,[EzI2Cs_bState]    ; Get State
 001B 210E          and  A,STATE_MASK                   ; Mask off invalid states
 001D E001          jacc I2C_STATE_JUMP_TABLE
 001F           
 001F           I2C_STATE_JUMP_TABLE:
 001F 8011          jmp  I2C_STATE_IDLE                 ; Idle state
 0021 8067          jmp  I2C_STATE_WR_RAM_ADDR              ; Wait for Address write state
 0023 8079          jmp  I2C_STATE_WR_RAM               ; 
 0025 8047          jmp  I2C_STATE_RD_RAM
                IF (EzI2Cs_ROM_ENABLE)        ; Only valid if ROM enabled
                    jmp  I2C_STATE_WR_ROM_ADDR
                    jmp  I2C_STATE_RD_ROM
                    jmp  I2C_STATE_WR_ROM
                ELSE
 0027 8098          jmp  I2C_STATE_RESET
 0029 8096          jmp  I2C_STATE_RESET
 002B 8094          jmp  I2C_STATE_RESET
                ENDIF
 002D 8092          jmp  I2C_STATE_RESET
 002F           
 002F 8099          jmp  EzI2Cs_ISR_END
 0031           
 0031           
 0031               ;            *** I2C Idle state ***
 0031               ;
 0031               ;   Sit idle until a start with address is issued.
 0031               ;   Check to see if there is an address match
 0031               ;     If address match, ACK the bus and determine next state
 0031               ;     Else NAK the transfer and return to idle state.
 0031               ;   Also check stop for condition.IF (EzI2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
 0031               ;
 0031           I2C_STATE_IDLE:                 ; Idle state
 0031           
                IF (EzI2Cs_AUTO_ADDR_CHECK^1)   ;; for CY8C28X45 chip: skip address comparison and NACK sending stage-hardware will do this for us  if AutoAddressCompare feature is enabled.
                                                          ;; The code in this pre-compiler directive will be executed for all chips except CY8C28X45.
                IF (EzI2Cs_DYNAMIC_ADDR)  ;; DYNAMIC ADDRESS
                    mov  A,reg[EzI2Cs_DR_REG]                                        ; Get transmitted address
                    and  A,EzI2Cs_ADDR_MASK                                          ; Mask off alt address bit and R/W bit
                    cmp  A,[EzI2Cs_bAddr]                                            ; Check for proper Address
                    jz   .CHK_ADDR_MODE 
                IF (EzI2Cs_SYNC_FIX)
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07                          ; Mask off CPU speed
                        or    A, 0x01                           ; Set CPU to 6 MHz
                        mov   reg[OSC_CR0], A                   ; 
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if the operation uses data in A get it out of X
                        mov   reg[EzI2Cs_SCR_REG], ( EzI2Cs_SCR_NAK ) ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK                  ; set bank1
                        pop   A                                 ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if A was data restore it from X now
                        pop   X                                 ; restore original accumulator
                ELSE
                        mov   reg[EzI2Cs_SCR_REG], ( EzI2Cs_SCR_NAK ) ; write data to reg[I2C_SCR]
                ENDIF
                    jmp  EzI2Cs_ISR_END                                              ; Not valid Address, leave
                
                ELSE    ;; STATIC ADDRESS
 0031 5DD8          mov  A,reg[EzI2Cs_DR_REG]                                        ; Get transmitted address
 0033 21FE          and  A,EzI2Cs_ADDR_MASK                                          ; Mask off alt address bit and R/W bit
 0035 3978          cmp  A,EzI2Cs_SLAVE_ADDR                                         ; Check for proper Address
 0037 A006          jz   .CHK_ADDR_MODE 
                IF (EzI2Cs_SYNC_FIX)
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07                          ; Mask off CPU speed
                        or    A, 0x01                           ; Set CPU to 6 MHz
                        mov   reg[OSC_CR0], A                   ; 
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if the operation uses data in A get it out of X
                        mov   reg[EzI2Cs_SCR_REG], ( EzI2Cs_SCR_NAK ) ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK                  ; set bank1
                        pop   A                                 ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if A was data restore it from X now
                        pop   X                                 ; restore original accumulator
                ELSE
 0039 62D700            mov   reg[EzI2Cs_SCR_REG], ( EzI2Cs_SCR_NAK ) ; write data to reg[I2C_SCR]
                ENDIF
 003C 808C          jmp  EzI2Cs_ISR_END                                              ; Not valid Address, leave
                ENDIF
                ENDIF
                
 003E           .CHK_ADDR_MODE:   ; A proper address has been detected, now determine what mode, R/W alt_addr?? 
                IF (EzI2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                    tst  reg[EzI2Cs_DR_REG],EzI2Cs_ALT_ADDR_BIT                      ; Check for Alt address
                    jnz  SERVICE_ROM_ADDR
                ENDIF
                
 003E           .STANDARD_ADDR:
 003E 49D801        tst  reg[EzI2Cs_DR_REG],EzI2Cs_RD_FLAG                           ; Check for a Read operation
 0041 B00F          jnz  .PREPARE_FOR_RAM_READ
 0043           
 0043 550602        mov [EzI2Cs_bBusy_Flag], EzI2Cs_I2C_BUSY_RAM_WRITE               ; Write transaction in process - set Busy flag to WRITE
 0046           
 0046               ; Prepare for RAM Write Address operation
 0046 2600F0        and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
 0049 2E0002        or   [EzI2Cs_bState],STATE_WR_RAM_ADDR                           ; Set state machine to do RAM Write
                IF (EzI2Cs_SYNC_FIX)
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07                          ; Mask off CPU speed
                        or    A, 0x01                           ; Set CPU to 6 MHz
                        mov   reg[OSC_CR0], A                   ; 
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if the operation uses data in A get it out of X
                        mov   reg[EzI2Cs_SCR_REG], ( EzI2Cs_SCR_ACK ) ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK                  ; set bank1
                        pop   A                                 ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if A was data restore it from X now
                        pop   X                                 ; restore original accumulator
                ELSE
 004C 62D710            mov   reg[EzI2Cs_SCR_REG], ( EzI2Cs_SCR_ACK ) ; write data to reg[I2C_SCR]
                ENDIF
 004F 8079          jmp  EzI2Cs_ISR_END                                     ; Base address to RAM buffer.  
 0051           
 0051           .PREPARE_FOR_RAM_READ:
 0051 550601        mov [EzI2Cs_bBusy_Flag], EzI2Cs_I2C_BUSY_RAM_READ                ; Possible read transaction in process - set Busy flag to READ
 0054           
 0054 2600F0        and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
 0057 2E0006        or   [EzI2Cs_bState],STATE_RD_RAM                                ; Set state machine to do RAM Read 
 005A 5F0201        mov  [EzI2Cs_bRAM_RWcntr],[EzI2Cs_bRAM_RWoffset]                 ; Reset address counter to start of Offset
 005D 5103          mov  A,[EzI2Cs_pRAM_Buf_Addr_LSB]                                ; Get base address
 005F 0202          add  A,[EzI2Cs_bRAM_RWcntr]                                      ; Set Offset and add to base address      
 0061 5C            mov  X,A                                                         ; Put offset in X
 0062 5200          mov  A,[X]                                                       ; Get first byte to transmit
 0064 60D8          mov  reg[EzI2Cs_DR_REG],A                               ; Base address to RAM buffer.  
 0066 7602          inc  [EzI2Cs_bRAM_RWcntr]                                        ; Increment RAM buffer counter to next location.
 0068           
 0068                                                                                ; ACK command and transmit first byte.
                IF (EzI2Cs_SYNC_FIX)
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07                          ; Mask off CPU speed
                        or    A, 0x01                           ; Set CPU to 6 MHz
                        mov   reg[OSC_CR0], A                   ; 
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if the operation uses data in A get it out of X
                        mov   reg[EzI2Cs_SCR_REG], (EzI2Cs_SCR_ACK|EzI2Cs_SCR_TRANSMIT) ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK                  ; set bank1
                        pop   A                                 ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if A was data restore it from X now
                        pop   X                                 ; restore original accumulator
                ELSE
 0068 62D714            mov   reg[EzI2Cs_SCR_REG], (EzI2Cs_SCR_ACK|EzI2Cs_SCR_TRANSMIT) ; write data to reg[I2C_SCR]
                ENDIF
 006B 805D          jmp  EzI2Cs_ISR_END
 006D           
 006D               ;            *** I2C Read RAM state ***
 006D               ;
 006D           I2C_STATE_RD_RAM:
 006D               ;@PSoC_UserCode_RAM_RD@ (Do not change this line.)
 006D               ;---------------------------------------------------
 006D               ; Insert your custom code below this banner
 006D               ;---------------------------------------------------
 006D               
 006D               ;---------------------------------------------------
 006D               ; Insert your custom code above this banner
 006D               ;---------------------------------------------------
 006D               ;@PSoC_UserCode_END@ (Do not change this line.)
 006D               
 006D 5104          mov  A,[EzI2Cs_bRAM_Buf_Size]
 006F 78            dec  A
 0070 3A02          cmp  A,[EzI2Cs_bRAM_RWcntr]                                      ; Check to see if out of range.
 0072 C00F          jc   .I2C_TRANSMIT_DATA  ; WARNING!! Bogas data will be transmitted if out of range.   
 0074           
 0074 5103          mov  A,[EzI2Cs_pRAM_Buf_Addr_LSB]                                ; Get base address
 0076 0202          add  A,[EzI2Cs_bRAM_RWcntr]                                      ; Set Offset and add to base address      
 0078 5C            mov  X,A                                                         ; Put offset in X
 0079 5200          mov  A,[X]                                                       ; Get first byte to transmit
 007B 60D8          mov  reg[EzI2Cs_DR_REG],A                                        ; Write data to transmit register
 007D 7602          inc  [EzI2Cs_bRAM_RWcntr]                                        ; Increment RAM buffer counter to next location.
 007F 2E0020        or   [EzI2Cs_bState],EzI2Cs_READ_ACTIVITY                        ; Set Read Activity flag
 0082           
 0082           
 0082           .I2C_TRANSMIT_DATA:     
 0082 60D8          mov  reg[EzI2Cs_DR_REG],A                                        ; Write data to transmit register
                IF (EzI2Cs_SYNC_FIX)
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07                          ; Mask off CPU speed
                        or    A, 0x01                           ; Set CPU to 6 MHz
                        mov   reg[OSC_CR0], A                   ; 
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if the operation uses data in A get it out of X
                        mov   reg[EzI2Cs_SCR_REG], ( EzI2Cs_SCR_TRANSMIT ) ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK                  ; set bank1
                        pop   A                                 ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if A was data restore it from X now
                        pop   X                                 ; restore original accumulator
                ELSE
 0084 62D704            mov   reg[EzI2Cs_SCR_REG], ( EzI2Cs_SCR_TRANSMIT ) ; write data to reg[I2C_SCR]
                ENDIF
 0087 8041          jmp  EzI2Cs_ISR_END
 0089           
 0089           
 0089               ;            *** I2C Write RAM Address state ***
 0089               ;
 0089               ;  During this state, the RAM address offset is set.
 0089           I2C_STATE_WR_RAM_ADDR:              ; Wait for Address write state
 0089 5DD8          mov  A,reg[EzI2Cs_DR_REG]                                        ; Get transmitted Address offset
 008B 3A04          cmp  A,[EzI2Cs_bRAM_Buf_Size]                                    ; Check if out of range.
 008D D02D          jnc  I2C_NAK_DATA                                                ; If out of range NAK address
 008F A02B          jz   I2C_NAK_DATA
 0091           
 0091               ; Address in range
 0091 5302          mov  [EzI2Cs_bRAM_RWcntr],A                                      ; Reset address counter with new value
 0093 5301          mov  [EzI2Cs_bRAM_RWoffset],A                                    ; Set offset with new value.
 0095 2600F0        and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
 0098 2E0004        or   [EzI2Cs_bState],STATE_WR_RAM                                ; Set state machine to do RAM Write
 009B 801A          jmp  I2C_ACK_DATA                         ; ACK the data
 009D           
 009D           
 009D               ;            *** I2C Write RAM state
 009D           I2C_STATE_WR_RAM:  
 009D               ;@PSoC_UserCode_RAM_WR@ (Do not change this line.)
 009D               ;---------------------------------------------------
 009D               ; Insert your custom code below this banner
 009D               ;---------------------------------------------------
 009D               
 009D               ;---------------------------------------------------
 009D               ; Insert your custom code above this banner
 009D               ;---------------------------------------------------
 009D               ;@PSoC_UserCode_END@ (Do not change this line.)
 009D               
 009D 5105          mov  A,[EzI2Cs_bRAM_Buf_WSize]                                   ; Get buffer size to make sure we
 009F A01B          jz   I2C_NAK_DATA                                                ; If RAM WSize is zero, do not allow write.
 00A1 78            dec  A                                                           ; are in a valid area.
 00A2 3A02          cmp  A,[EzI2Cs_bRAM_RWcntr]                                      ; Check to see if out of range.
 00A4 C016          jc   I2C_NAK_DATA                                                ; If out of range NAK address
 00A6           
 00A6 5103          mov  A,[EzI2Cs_pRAM_Buf_Addr_LSB]                                ; Get base address
 00A8 0202          add  A,[EzI2Cs_bRAM_RWcntr]                                      ; Set Offset and add to base address      
 00AA 5C            mov  X,A                                                         ; Put offset in X
 00AB           
 00AB 5DD8          mov  A,reg[EzI2Cs_DR_REG]                                        ; Read data to be written
 00AD 5400          mov  [X],A                                                       ; Store data in Buffer
 00AF 2E0010        or   [EzI2Cs_bState],EzI2Cs_WRITE_ACTIVITY                       ; Set Write Activity flag
 00B2 7602          inc  [EzI2Cs_bRAM_RWcntr]                                        ; Advance pointer to next location
 00B4 8001          jmp  I2C_ACK_DATA                         ; ACK the data
 00B6           
 00B6               
 00B6               
                IF (EzI2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                
                SERVICE_ROM_ADDR:  ; At this time only ROM Read is supported.  
                    tst  reg[EzI2Cs_DR_REG],EzI2Cs_RD_FLAG                           ; Check for a Read operation
                    jnz  PREPARE_FOR_ROM_READ
                
                    mov [EzI2Cs_bBusy_Flag], EzI2Cs_I2C_BUSY_ROM_WRITE               ; Write transaction in process - set Busy flag to WRITE
                    
                    and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
                    or   [EzI2Cs_bState],STATE_WR_ROM_ADDR                           ; Set state machine to do ROM ADDR Write
                IF (EzI2Cs_SYNC_FIX)
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07                          ; Mask off CPU speed
                        or    A, 0x01                           ; Set CPU to 6 MHz
                        mov   reg[OSC_CR0], A                   ; 
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if the operation uses data in A get it out of X
                        mov   reg[EzI2Cs_SCR_REG], ( EzI2Cs_SCR_ACK ) ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK                  ; set bank1
                        pop   A                                 ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if A was data restore it from X now
                        pop   X                                 ; restore original accumulator
                ELSE
                        mov   reg[EzI2Cs_SCR_REG], ( EzI2Cs_SCR_ACK ) ; write data to reg[I2C_SCR]
                ENDIF
                    jmp  EzI2Cs_ISR_END                                    ; Base address to RAM buffer.  
                
                    ; Prepare for Write ROM Address.              
                I2C_STATE_WR_ROM_ADDR:
                    mov  A,reg[EzI2Cs_DR_REG]                                        ; Get transmitted Address offset
                    cmp  A,[EzI2Cs_bROM_Buf_Size]                                    ; Check if out of range.
                    jnc  I2C_NAK_DATA                                                ; If out of range NAK address
                    jz   I2C_NAK_DATA
                
                    mov  [EzI2Cs_bROM_RWcntr],A                                      ; Reset address counter with new value
                    mov  [EzI2Cs_bROM_RWoffset],A                                    ; Set offset with new value.
                    and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
                    or   [EzI2Cs_bState],STATE_WR_ROM                                ; Set state machine to do ROM Write
                    jmp  I2C_ACK_DATA
                
                I2C_STATE_WR_ROM:  // Flash command interpreter
                   ;@PSoC_UserCode_ROM_WR@ (Do not change this line.)
                   ;---------------------------------------------------
                   ; Insert your custom code below this banner
                   ;---------------------------------------------------
                
                   ;---------------------------------------------------
                   ; Insert your custom code above this banner
                   ;---------------------------------------------------
                   ;@PSoC_UserCode_END@ (Do not change this line.)
                
                    jnc  I2C_NAK_DATA                                                ; Write to ROM not supported.
                
                PREPARE_FOR_ROM_READ:
                    mov [EzI2Cs_bBusy_Flag], EzI2Cs_I2C_BUSY_ROM_READ                ; Possible read transaction in process - set Busy flag to READ
                    
                    and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
                    or   [EzI2Cs_bState],STATE_RD_ROM                                ; Set state machine to do ROM Read 
                    mov  [EzI2Cs_bROM_RWcntr],[EzI2Cs_bROM_RWoffset]                 ; Reset address counter to start of Offset
                    mov  X,[EzI2Cs_pROM_Buf_Addr_MSB]                                ; Get MSB of ROM address in X
                    mov  A,[EzI2Cs_pROM_Buf_Addr_LSB]                                ; Get LSB of ROM base address
                    add  A,[EzI2Cs_bROM_RWcntr]                                      ; Set Offset and add to base address      
                    jnc  .GET_ROM_VALUE
                    inc  X    ; Inc the MSB
                .GET_ROM_VALUE:
                    swap A,X  ; Place MSB of ROM address in A, and LSB in X for ROMX
                    romx      ; Get Rom value in A
                
                    mov  reg[EzI2Cs_DR_REG],A                              ; Base address to RAM buffer.  
                    inc  [EzI2Cs_bROM_RWcntr]                                        ; Increment RAM buffer counter to next location.
                
                                                                                     ; ACK command and transmit first byte.
                IF (EzI2Cs_SYNC_FIX)
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07                          ; Mask off CPU speed
                        or    A, 0x01                           ; Set CPU to 6 MHz
                        mov   reg[OSC_CR0], A                   ; 
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if the operation uses data in A get it out of X
                        mov   reg[EzI2Cs_SCR_REG], (EzI2Cs_SCR_ACK|EzI2Cs_SCR_TRANSMIT) ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK                  ; set bank1
                        pop   A                                 ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if A was data restore it from X now
                        pop   X                                 ; restore original accumulator
                ELSE
                        mov   reg[EzI2Cs_SCR_REG], (EzI2Cs_SCR_ACK|EzI2Cs_SCR_TRANSMIT) ; write data to reg[I2C_SCR]
                ENDIF
                    jmp  EzI2Cs_ISR_END
                
                
                I2C_STATE_RD_ROM:
                    ;@PSoC_UserCode_ROM_RD@ (Do not change this line.)
                    ;---------------------------------------------------
                    ; Insert your custom code below this banner
                    ;---------------------------------------------------
                
                    ;---------------------------------------------------
                    ; Insert your custom code above this banner
                    ;---------------------------------------------------
                    ;@PSoC_UserCode_END@ (Do not change this line.)
                
                    mov  A,[EzI2Cs_bROM_Buf_Size]
                    dec  A
                    cmp  A,[EzI2Cs_bROM_RWcntr]                                      ; Check to see if out of range.
                    jc   .I2C_TRANSMIT_ROM_DATA  ; WARNING!! Bogas data will be transmitted if out of range.   
                
                    mov  X,[EzI2Cs_pROM_Buf_Addr_MSB]                                ; Get MSB of ROM address in X
                    mov  A,[EzI2Cs_pROM_Buf_Addr_LSB]                                ; Get LSB of ROM base address
                    add  A,[EzI2Cs_bROM_RWcntr]                                      ; Set Offset and add to base address      
                    jnc  .GET_ROM_VALUE
                    inc  X    ; Inc the MSB
                .GET_ROM_VALUE:
                    swap A,X  ; Place MSB of ROM address in A, and LSB in X for ROMX
                    romx      ; Get Rom value in A
                    mov  reg[EzI2Cs_DR_REG],A                              ; Base address to RAM buffer.  
                    inc  [EzI2Cs_bROM_RWcntr]                                        ; Increment RAM buffer counter to next location.
                
                .I2C_TRANSMIT_ROM_DATA:     
                    mov  reg[EzI2Cs_DR_REG],A                                        ; Write data to transmit register
                IF (EzI2Cs_SYNC_FIX)
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07                          ; Mask off CPU speed
                        or    A, 0x01                           ; Set CPU to 6 MHz
                        mov   reg[OSC_CR0], A                   ; 
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if the operation uses data in A get it out of X
                        mov   reg[EzI2Cs_SCR_REG], (EzI2Cs_SCR_TRANSMIT) ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK                  ; set bank1
                        pop   A                                 ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if A was data restore it from X now
                        pop   X                                 ; restore original accumulator
                ELSE
                        mov   reg[EzI2Cs_SCR_REG], (EzI2Cs_SCR_TRANSMIT) ; write data to reg[I2C_SCR]
                ENDIF
                    jmp  EzI2Cs_ISR_END
                
                ENDIF
                
                ;; Generic handlers
                
 00B6           I2C_ACK_DATA:
                IF (EzI2Cs_SYNC_FIX)
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07                          ; Mask off CPU speed
                        or    A, 0x01                           ; Set CPU to 6 MHz
                        mov   reg[OSC_CR0], A                   ; 
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if the operation uses data in A get it out of X
                        mov   reg[EzI2Cs_SCR_REG], ( EzI2Cs_SCR_ACK ) ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK                  ; set bank1
                        pop   A                                 ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if A was data restore it from X now
                        pop   X                                 ; restore original accumulator
                ELSE
 00B6 62D710            mov   reg[EzI2Cs_SCR_REG], ( EzI2Cs_SCR_ACK ) ; write data to reg[I2C_SCR]
                ENDIF
 00B9 800F          jmp  EzI2Cs_ISR_END
 00BB           
 00BB           I2C_NAK_DATA:   ;; NAK data and return  !!WARNING, NOT SURE IF THIS WILL WORK
                IF (EzI2Cs_SYNC_FIX)
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07                          ; Mask off CPU speed
                        or    A, 0x01                           ; Set CPU to 6 MHz
                        mov   reg[OSC_CR0], A                   ; 
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if the operation uses data in A get it out of X
                        mov   reg[EzI2Cs_SCR_REG], ( EzI2Cs_SCR_NAK ) ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK                  ; set bank1
                        pop   A                                 ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK                 ; set bank0
                        mov   A, X                              ; if A was data restore it from X now
                        pop   X                                 ; restore original accumulator
                ELSE
 00BB 62D700            mov   reg[EzI2Cs_SCR_REG], ( EzI2Cs_SCR_NAK ) ; write data to reg[I2C_SCR]
                ENDIF
 00BE 800A          jmp  EzI2Cs_ISR_END
 00C0           
 00C0           I2C_STATE_RESET:
 00C0               ;@PSoC_UserCode_I2C_RST_Start@ (Do not change this line.)
 00C0               ;---------------------------------------------------
 00C0               ; Insert your custom code below this banner
 00C0               ;---------------------------------------------------
 00C0           
 00C0               ;---------------------------------------------------
 00C0               ; Insert your custom code above this banner
 00C0               ;---------------------------------------------------
 00C0               ;@PSoC_UserCode_END@ (Do not change this line.)
 00C0           
 00C0 2600F0        and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
 00C3 2E0000        or   [EzI2Cs_bState], STATE_IDLE    ; Reset State
 00C6 550600        mov [EzI2Cs_bBusy_Flag],EzI2Cs_I2C_FREE                          ; Clear Busy flag
 00C9               ; Reset pointer buffers as well
 00C9               ;@PSoC_UserCode_I2C_RST_End@ (Do not change this line.)
 00C9               ;---------------------------------------------------
 00C9               ; Insert your custom code below this banner
 00C9               ;---------------------------------------------------
 00C9           
 00C9               ;---------------------------------------------------
 00C9               ; Insert your custom code above this banner
 00C9               ;---------------------------------------------------
 00C9               ;@PSoC_UserCode_END@ (Do not change this line.)
 00C9           
 00C9           EzI2Cs_ISR_END:
 00C9           
 00C9           ; This conditional code is only used when using the large memory model.
                IF (SYSTEM_LARGE_MEMORY_MODEL)
                   pop   A
                   mov   reg[ CUR_PP ], A
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 00C9 20            pop  X
 00CA 18            pop  A
 00CB           
 00CB 7E            reti
 00CC           ; end of file EzI2CsINT.asm
