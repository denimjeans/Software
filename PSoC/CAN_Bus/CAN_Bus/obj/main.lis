 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _Canin::
 0000 00                .byte 0
 0001                   .dbfile H:\Hobby\PROGRA~1\PSOCPR~1\CAN_Bus\CAN_Bus\main.c
 0001                   .dbsym e Canin _Canin c
                        .area data(ram, con, rel)
 0000                   .dbfile H:\Hobby\PROGRA~1\PSOCPR~1\CAN_Bus\CAN_Bus\main.c
                        .area lit(rom, con, rel, lit)
 0000           _SPI_read::
 0000 03                .byte 3
 0001                   .dbsym e SPI_read _SPI_read kc
 0001           _SPI_write::
 0001 02                .byte 2
 0002                   .dbsym e SPI_write _SPI_write kc
 0002           _SPI_reset::
 0002 C0                .byte 192
 0003                   .dbsym e SPI_reset _SPI_reset kc
 0003           _SPI_rts0::
 0003 81                .byte 129
 0004                   .dbsym e SPI_rts0 _SPI_rts0 kc
 0004           _SPI_bitmodify::
 0004 05                .byte 5
 0005                   .dbsym e SPI_bitmodify _SPI_bitmodify kc
 0005           _Cnf1::
 0005 2A                .byte 42
 0006                   .dbsym e Cnf1 _Cnf1 kc
 0006           _Cnf2::
 0006 29                .byte 41
 0007                   .dbsym e Cnf2 _Cnf2 kc
 0007           _Cnf3::
 0007 28                .byte 40
 0008                   .dbsym e Cnf3 _Cnf3 kc
 0008           _Canctrl::
 0008 0F                .byte 15
 0009                   .dbsym e Canctrl _Canctrl kc
 0009           _Caninte::
 0009 2B                .byte 43
 000A                   .dbsym e Caninte _Caninte kc
 000A           _Txb0ctrl::
 000A 30                .byte 48
 000B                   .dbsym e Txb0ctrl _Txb0ctrl kc
 000B           _Txb0sidh::
 000B 31                .byte 49
 000C                   .dbsym e Txb0sidh _Txb0sidh kc
 000C           _Txb0sidl::
 000C 32                .byte 50
 000D                   .dbsym e Txb0sidl _Txb0sidl kc
 000D           _Txb0eid8::
 000D 33                .byte 51
 000E                   .dbsym e Txb0eid8 _Txb0eid8 kc
 000E           _Txb0eid0::
 000E 34                .byte 52
 000F                   .dbsym e Txb0eid0 _Txb0eid0 kc
 000F           _Txb0dlc::
 000F 35                .byte 53
 0010                   .dbsym e Txb0dlc _Txb0dlc kc
 0010           _Txb0d0::
 0010 36                .byte 54
 0011                   .dbsym e Txb0d0 _Txb0d0 kc
 0011           _Txb0d1::
 0011 37                .byte 55
 0012                   .dbsym e Txb0d1 _Txb0d1 kc
 0012           _Txb0d2::
 0012 38                .byte 56
 0013                   .dbsym e Txb0d2 _Txb0d2 kc
 0013           _Txb0d3::
 0013 39                .byte 57
 0014                   .dbsym e Txb0d3 _Txb0d3 kc
 0014           _Txb0d4::
 0014 3A                .byte 58
 0015                   .dbsym e Txb0d4 _Txb0d4 kc
 0015           _Txb0d5::
 0015 3B                .byte 59
 0016                   .dbsym e Txb0d5 _Txb0d5 kc
 0016           _Txb0d6::
 0016 3C                .byte 60
 0017                   .dbsym e Txb0d6 _Txb0d6 kc
 0017           _Txb0d7::
 0017 3D                .byte 61
 0018                   .dbsym e Txb0d7 _Txb0d7 kc
 0018           _Rxm0sidh::
 0018 20                .byte 32
 0019                   .dbsym e Rxm0sidh _Rxm0sidh kc
 0019           _Rxm0sidl::
 0019 21                .byte 33
 001A                   .dbsym e Rxm0sidl _Rxm0sidl kc
 001A           _Rxm0eid8::
 001A 22                .byte 34
 001B                   .dbsym e Rxm0eid8 _Rxm0eid8 kc
 001B           _Rxm0eid0::
 001B 23                .byte 35
 001C                   .dbsym e Rxm0eid0 _Rxm0eid0 kc
 001C           _Rxm1sidh::
 001C 24                .byte 36
 001D                   .dbsym e Rxm1sidh _Rxm1sidh kc
 001D           _Rxm1sidl::
 001D 25                .byte 37
 001E                   .dbsym e Rxm1sidl _Rxm1sidl kc
 001E           _Rxm1eid8::
 001E 26                .byte 38
 001F                   .dbsym e Rxm1eid8 _Rxm1eid8 kc
 001F           _Rxm1eid0::
 001F 27                .byte 39
 0020                   .dbsym e Rxm1eid0 _Rxm1eid0 kc
 0020           _Rxb0ctrl::
 0020 60                .byte 96
 0021                   .dbsym e Rxb0ctrl _Rxb0ctrl kc
 0021           _Rxb1ctrl::
 0021 70                .byte 112
 0022                   .dbsym e Rxb1ctrl _Rxb1ctrl kc
 0022           _Settings_Canctrl::
 0022 88                .byte 136
 0023                   .dbsym e Settings_Canctrl _Settings_Canctrl kc
                        .area text(rom, con, rel)
 0000                   .dbfile H:\Hobby\PROGRA~1\PSOCPR~1\CAN_Bus\CAN_Bus\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 58
 0000           ; //----------------------------------------------------------------------------
 0000           ; // C main line
 0000           ; //----------------------------------------------------------------------------
 0000           ; 
 0000           ; #include <m8c.h>                                                                                                      // Part specific constants and macros
 0000           ; #include "PSoCAPI.h"                                                                                                  // PSoC API definitions for all User Modules
 0000           ; #pragma interrupt_handler Timer16
 0000           ; 
 0000           ; // Unterprogramme
 0000           ; void Read_Register(const char *Adresse);
 0000           ; void Write_Register(const char *Daten, const char * Adresse);
 0000           ; void MCP2515_Init(void);
 0000           ; void Bitmodify(void);
 0000           ; 
 0000           ; char Canin = 0x00;
 0000           ; 
 0000           ; // Befehle
 0000           ; const char SPI_read = 0x03;
 0000           ; const char SPI_write = 0x02;
 0000           ; const char SPI_reset = 0xC0;
 0000           ; const char SPI_rts0 = 0x81;
 0000           ; const char SPI_bitmodify = 0x05;
 0000           ; 
 0000           ; // Registeradressen
 0000           ; const char Cnf1 = 0x2A;
 0000           ; const char Cnf2 = 0x29;
 0000           ; const char Cnf3 = 0x28;
 0000           ; const char Canctrl = 0x0F;
 0000           ; const char Caninte = 0x2B;
 0000           ; const char Txb0ctrl = 0x30;                                                   // Transmit Buffer 0 Control Register
 0000           ; const char Txb0sidh = 0x31;                                                   // Transmit Buffer 0 Std Identifier High
 0000           ; const char Txb0sidl = 0x32;                                                   // Transmit Buffer 0 Std Identifier Low
 0000           ; const char Txb0eid8 = 0x33;                                                   // Transmit Buffer 0 Ext Identifier High
 0000           ; const char Txb0eid0 = 0x34;                                                   // Transmit Buffer 0 Ext Identifier Low
 0000           ; const char Txb0dlc = 0x35;                                                    // Transmit Buffer 0 Data Length Code
 0000           ; const char Txb0d0 = 0x36;                                                     // Transmit Buffer 0 Data Byte 0
 0000           ; const char Txb0d1 = 0x37;                                                     // Transmit Buffer 0 Data Byte 1
 0000           ; const char Txb0d2 = 0x38;                                                     // Transmit Buffer 0 Data Byte 2
 0000           ; const char Txb0d3 = 0x39;                                                     // Transmit Buffer 0 Data Byte 3
 0000           ; const char Txb0d4 = 0x3A;                                                     // Transmit Buffer 0 Data Byte 4
 0000           ; const char Txb0d5 = 0x3B;                                                     // Transmit Buffer 0 Data Byte 5
 0000           ; const char Txb0d6 = 0x3C;                                                     // Transmit Buffer 0 Data Byte 6
 0000           ; const char Txb0d7 = 0x3D;                                                     // Transmit Buffer 0 Data Byte 7
 0000           ; const char Rxm0sidh = 0x20;                                                           // Receive Buffer 0 Std Identifier High
 0000           ; const char Rxm0sidl = 0x21;                                                           // Receive Buffer 0 Std Identifier Low
 0000           ; const char Rxm0eid8 = 0x22;                                                           // Receive Buffer 0 Ext Identifier High
 0000           ; const char Rxm0eid0 = 0x23;                                                           // Receive Buffer 0 Ext Identifier low
 0000           ; const char Rxm1sidh = 0x24;                                                           // Receive Buffer 1 Std Identifier High
 0000           ; const char Rxm1sidl = 0x25;                                                           // Receive Buffer 1 Std Identifier Low
 0000           ; const char Rxm1eid8 = 0x26;                                                           // Receive Buffer 1 Ext Identifier High
 0000           ; const char Rxm1eid0 = 0x27;                                                           // Receive Buffer 1 Ext Identifier low
 0000           ; const char Rxb0ctrl = 0x60;
 0000           ; const char Rxb1ctrl = 0x70;
 0000           ; 
 0000           ; const char Settings_Canctrl = 0x88;
 0000           ; 
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 59
 0000           ;       M8C_EnableGInt;                                                                                                         // Global Interrupts erlauben
 0000 7101                      or  F, 01h
 0002           
 0002                   .dbline 60
 0002           ;       TX8SW_Start();
 0002 10                push X
 0003 7C0000            xcall _TX8SW_Start
 0006                   .dbline 61
 0006           ;       SPIM_Start(SPIM_SPIM_MODE_0 | SPIM_SPIM_MSB_FIRST);
 0006 5000              mov A,0
 0008 7C0000            xcall _SPIM_Start
 000B                   .dbline 62
 000B           ;       Timer16_EnableInt();  
 000B 7C0000            xcall _Timer16_EnableInt
 000E                   .dbline 63
 000E           ;     Timer16_Start(); 
 000E 7C0000            xcall _Timer16_Start
 0011 20                pop X
 0012                   .dbline 65
 0012           ;               
 0012           ;       PRT1DR |= 0x02;                                                                                                 // P0[1] setzen
 0012 430402            or REG[0x4],2
 0015                   .dbline 68
 0015           ;       //MCP2515_Init();
 0015           ;       
 0015           ;       Write_Register(&Canctrl, &Settings_Canctrl);
 0015 5022              mov A,>_Settings_Canctrl
 0017 08                push A
 0018 5022              mov A,<_Settings_Canctrl
 001A 08                push A
 001B 5008              mov A,>_Canctrl
 001D 08                push A
 001E 5008              mov A,<_Canctrl
 0020 08                push A
 0021 9107              xcall _Write_Register
 0023                   .dbline 69
 0023           ;       Read_Register(&Canctrl);
 0023 5008              mov A,>_Canctrl
 0025 08                push A
 0026 5008              mov A,<_Canctrl
 0028 08                push A
 0029 902E              xcall _Read_Register
 002B 38FA              add SP,-6
 002D                   .dbline 71
 002D           ;       
 002D           ;               TX8SW_CPutString("Registerinhalte:");
 002D 10                push X
 002E 5061              mov A,>L2
 0030 08                push A
 0031 5061              mov A,<L2
 0033 5C                mov X,A
 0034 18                pop A
 0035 7C0000            xcall _TX8SW_CPutString
 0038                   .dbline 72
 0038           ;               TX8SW_SendData(0x0D);
 0038 500D              mov A,13
 003A 7C0000            xcall _TX8SW_SendData
 003D                   .dbline 73
 003D           ;               TX8SW_SendData(0x0A);
 003D 500A              mov A,10
 003F 7C0000            xcall _TX8SW_SendData
 0042                   .dbline 74
 0042           ;               SPIM_SendTxData(Canin);
 0042 62D000            mov REG[0xd0],>_Canin
 0045 5100              mov A,[_Canin]
 0047 7C0000            xcall _SPIM_SendTxData
 004A                   .dbline 75
 004A           ;               TX8SW_SendData(0x0D);
 004A 500D              mov A,13
 004C 7C0000            xcall _TX8SW_SendData
 004F                   .dbline 76
 004F           ;               TX8SW_SendData(0x0A);
 004F 500A              mov A,10
 0051 7C0000            xcall _TX8SW_SendData
 0054 20                pop X
 0055           L3:
 0055                   .dbline 79
 0055           ;       
 0055           ;       while(1)
 0055           ;       {
 0055                   .dbline 80
 0055           ;       }
 0055           L4:
 0055                   .dbline 78
 0055 8FFF              xjmp L3
 0057           X0:
 0057                   .dbline -2
 0057           L1:
 0057                   .dbline 0 ; func end
 0057 8FFF              jmp .
 0059                   .dbend
 0059                   .dbfunc e Read_Register _Read_Register fV
 0059           ;        Adresse -> X-5
 0059           _Read_Register::
 0059                   .dbline -1
 0059 10                push X
 005A 4F                mov X,SP
 005B                   .dbline 84
 005B           ; }
 005B           ; 
 005B           ; void Read_Register(const char *Adresse)
 005B           ; {
 005B                   .dbline 85
 005B           ;       PRT0DR &= ~0x02;
 005B 4100FD            and REG[0],-3
 005E           L7:
 005E                   .dbline 87
 005E           ;       
 005E           ;       while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
 005E           L8:
 005E                   .dbline 87
 005E 10                push X
 005F 7C0000            xcall _SPIM_bReadStatus
 0062 20                pop X
 0063 62D000            mov REG[0xd0],>__r0
 0066 5300              mov [__r0],A
 0068 470010            tst [__r0],16
 006B AFF2              jz L7
 006D                   .dbline 88
 006D           ;       SPIM_SendTxData(SPI_read);
 006D 5000              mov A,>_SPI_read
 006F 10                push X
 0070 5700              mov X,<_SPI_read
 0072 28                romx
 0073 20                pop X
 0074 10                push X
 0075 7C0000            xcall _SPIM_SendTxData
 0078 20                pop X
 0079           L10:
 0079                   .dbline 90
 0079           ;               
 0079           ;       while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
 0079           L11:
 0079                   .dbline 90
 0079 10                push X
 007A 7C0000            xcall _SPIM_bReadStatus
 007D 20                pop X
 007E 62D000            mov REG[0xd0],>__r0
 0081 5300              mov [__r0],A
 0083 470010            tst [__r0],16
 0086 AFF2              jz L10
 0088                   .dbline 91
 0088           ;       SPIM_SendTxData(*Adresse);
 0088 52FC              mov A,[X-4]
 008A 5300              mov [__r1],A
 008C 52FB              mov A,[X-5]
 008E 10                push X
 008F 5800              mov X,[__r1]
 0091 28                romx
 0092 20                pop X
 0093 10                push X
 0094 7C0000            xcall _SPIM_SendTxData
 0097 20                pop X
 0098           L13:
 0098                   .dbline 93
 0098           ;               
 0098           ;       while(!(SPIM_bReadStatus() & SPIM_SPIM_RX_BUFFER_FULL));
 0098           L14:
 0098                   .dbline 93
 0098 10                push X
 0099 7C0000            xcall _SPIM_bReadStatus
 009C 20                pop X
 009D 62D000            mov REG[0xd0],>__r0
 00A0 5300              mov [__r0],A
 00A2 470008            tst [__r0],8
 00A5 AFF2              jz L13
 00A7                   .dbline 94
 00A7           ;       Canin = SPIM_bReadRxData();
 00A7 10                push X
 00A8 7C0000            xcall _SPIM_bReadRxData
 00AB 20                pop X
 00AC 62D000            mov REG[0xd0],>_Canin
 00AF 5300              mov [_Canin],A
 00B1                   .dbline 96
 00B1           ;               
 00B1           ;               TX8SW_CPutString("Lesen:");     
 00B1 10                push X
 00B2 505A              mov A,>L16
 00B4 08                push A
 00B5 505A              mov A,<L16
 00B7 5C                mov X,A
 00B8 18                pop A
 00B9 7C0000            xcall _TX8SW_CPutString
 00BC                   .dbline 97
 00BC           ;               TX8SW_SendData(0x0D);
 00BC 500D              mov A,13
 00BE 7C0000            xcall _TX8SW_SendData
 00C1                   .dbline 98
 00C1           ;               TX8SW_SendData(0x0A);
 00C1 500A              mov A,10
 00C3 7C0000            xcall _TX8SW_SendData
 00C6                   .dbline 99
 00C6           ;               TX8SW_CPutString("SPI Read");
 00C6 5051              mov A,>L17
 00C8 08                push A
 00C9 5051              mov A,<L17
 00CB 5C                mov X,A
 00CC 18                pop A
 00CD 7C0000            xcall _TX8SW_CPutString
 00D0                   .dbline 100
 00D0           ;               TX8SW_SendData(0x0D);
 00D0 500D              mov A,13
 00D2 7C0000            xcall _TX8SW_SendData
 00D5                   .dbline 101
 00D5           ;               TX8SW_SendData(0x0A);
 00D5 500A              mov A,10
 00D7 7C0000            xcall _TX8SW_SendData
 00DA 20                pop X
 00DB                   .dbline 102
 00DB           ;               TX8SW_SendData(SPI_read);
 00DB 62D000            mov REG[0xd0],>__r0
 00DE 5000              mov A,>_SPI_read
 00E0 10                push X
 00E1 5700              mov X,<_SPI_read
 00E3 28                romx
 00E4 20                pop X
 00E5 10                push X
 00E6 7C0000            xcall _TX8SW_SendData
 00E9                   .dbline 103
 00E9           ;               TX8SW_SendData(0x0D);
 00E9 500D              mov A,13
 00EB 7C0000            xcall _TX8SW_SendData
 00EE                   .dbline 104
 00EE           ;               TX8SW_SendData(0x0A);
 00EE 500A              mov A,10
 00F0 7C0000            xcall _TX8SW_SendData
 00F3                   .dbline 105
 00F3           ;               TX8SW_CPutString("Adresse");
 00F3 5049              mov A,>L18
 00F5 08                push A
 00F6 5049              mov A,<L18
 00F8 5C                mov X,A
 00F9 18                pop A
 00FA 7C0000            xcall _TX8SW_CPutString
 00FD                   .dbline 106
 00FD           ;               TX8SW_SendData(0x0D);
 00FD 500D              mov A,13
 00FF 7C0000            xcall _TX8SW_SendData
 0102                   .dbline 107
 0102           ;               TX8SW_SendData(0x0A);
 0102 500A              mov A,10
 0104 7C0000            xcall _TX8SW_SendData
 0107 20                pop X
 0108                   .dbline 108
 0108           ;               TX8SW_SendData(*Adresse);
 0108 62D000            mov REG[0xd0],>__r0
 010B 52FC              mov A,[X-4]
 010D 5300              mov [__r1],A
 010F 52FB              mov A,[X-5]
 0111 10                push X
 0112 5800              mov X,[__r1]
 0114 28                romx
 0115 20                pop X
 0116 10                push X
 0117 7C0000            xcall _TX8SW_SendData
 011A                   .dbline 109
 011A           ;               TX8SW_SendData(0x0D);
 011A 500D              mov A,13
 011C 7C0000            xcall _TX8SW_SendData
 011F                   .dbline 110
 011F           ;               TX8SW_SendData(0x0A);
 011F 500A              mov A,10
 0121 7C0000            xcall _TX8SW_SendData
 0124 20                pop X
 0125                   .dbline 111
 0125           ;       PRT1DR |= 0x02;                                                                                                 // P0[1] setzen         
 0125 430402            or REG[0x4],2
 0128                   .dbline -2
 0128           L6:
 0128 20                pop X
 0129                   .dbline 0 ; func end
 0129 7F                ret
 012A                   .dbsym l Adresse -5 pkc
 012A                   .dbend
 012A                   .dbfunc e Write_Register _Write_Register fV
 012A           ;          Daten -> X-7
 012A           ;        Adresse -> X-5
 012A           _Write_Register::
 012A                   .dbline -1
 012A 10                push X
 012B 4F                mov X,SP
 012C                   .dbline 115
 012C           ; }
 012C           ; 
 012C           ; void Write_Register(const char *Adresse, const char *Daten)
 012C           ; {
 012C                   .dbline 116
 012C           ;       PRT0DR &= ~0x02;
 012C 4100FD            and REG[0],-3
 012F           L20:
 012F                   .dbline 118
 012F           ;       
 012F           ;       while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
 012F           L21:
 012F                   .dbline 118
 012F 10                push X
 0130 7C0000            xcall _SPIM_bReadStatus
 0133 20                pop X
 0134 62D000            mov REG[0xd0],>__r0
 0137 5300              mov [__r0],A
 0139 470010            tst [__r0],16
 013C AFF2              jz L20
 013E                   .dbline 119
 013E           ;       SPIM_SendTxData(SPI_write);
 013E 5001              mov A,>_SPI_write
 0140 10                push X
 0141 5701              mov X,<_SPI_write
 0143 28                romx
 0144 20                pop X
 0145 10                push X
 0146 7C0000            xcall _SPIM_SendTxData
 0149 20                pop X
 014A           L23:
 014A                   .dbline 121
 014A           ;               
 014A           ;       while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
 014A           L24:
 014A                   .dbline 121
 014A 10                push X
 014B 7C0000            xcall _SPIM_bReadStatus
 014E 20                pop X
 014F 62D000            mov REG[0xd0],>__r0
 0152 5300              mov [__r0],A
 0154 470010            tst [__r0],16
 0157 AFF2              jz L23
 0159                   .dbline 122
 0159           ;       SPIM_SendTxData(*Adresse);
 0159 52FC              mov A,[X-4]
 015B 5300              mov [__r1],A
 015D 52FB              mov A,[X-5]
 015F 10                push X
 0160 5800              mov X,[__r1]
 0162 28                romx
 0163 20                pop X
 0164 10                push X
 0165 7C0000            xcall _SPIM_SendTxData
 0168 20                pop X
 0169           L26:
 0169                   .dbline 124
 0169           ;               
 0169           ;       while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
 0169           L27:
 0169                   .dbline 124
 0169 10                push X
 016A 7C0000            xcall _SPIM_bReadStatus
 016D 20                pop X
 016E 62D000            mov REG[0xd0],>__r0
 0171 5300              mov [__r0],A
 0173 470010            tst [__r0],16
 0176 AFF2              jz L26
 0178                   .dbline 125
 0178           ;       SPIM_SendTxData(*Daten);
 0178 52FA              mov A,[X-6]
 017A 5300              mov [__r1],A
 017C 52F9              mov A,[X-7]
 017E 10                push X
 017F 5800              mov X,[__r1]
 0181 28                romx
 0182 20                pop X
 0183 10                push X
 0184 7C0000            xcall _SPIM_SendTxData
 0187                   .dbline 127
 0187           ;               
 0187           ;               TX8SW_CPutString("Schreiben:");
 0187 503E              mov A,>L29
 0189 08                push A
 018A 503E              mov A,<L29
 018C 5C                mov X,A
 018D 18                pop A
 018E 7C0000            xcall _TX8SW_CPutString
 0191                   .dbline 128
 0191           ;               TX8SW_SendData(0x0D);
 0191 500D              mov A,13
 0193 7C0000            xcall _TX8SW_SendData
 0196                   .dbline 129
 0196           ;               TX8SW_SendData(0x0A);
 0196 500A              mov A,10
 0198 7C0000            xcall _TX8SW_SendData
 019B                   .dbline 130
 019B           ;               TX8SW_CPutString("SPI Write:");
 019B 5033              mov A,>L30
 019D 08                push A
 019E 5033              mov A,<L30
 01A0 5C                mov X,A
 01A1 18                pop A
 01A2 7C0000            xcall _TX8SW_CPutString
 01A5                   .dbline 131
 01A5           ;               TX8SW_SendData(0x0D);
 01A5 500D              mov A,13
 01A7 7C0000            xcall _TX8SW_SendData
 01AA                   .dbline 132
 01AA           ;               TX8SW_SendData(0x0A);
 01AA 500A              mov A,10
 01AC 7C0000            xcall _TX8SW_SendData
 01AF 20                pop X
 01B0                   .dbline 133
 01B0           ;               TX8SW_SendData(SPI_write);
 01B0 62D000            mov REG[0xd0],>__r0
 01B3 5001              mov A,>_SPI_write
 01B5 10                push X
 01B6 5701              mov X,<_SPI_write
 01B8 28                romx
 01B9 20                pop X
 01BA 10                push X
 01BB 7C0000            xcall _TX8SW_SendData
 01BE                   .dbline 134
 01BE           ;               TX8SW_SendData(0x0D);
 01BE 500D              mov A,13
 01C0 7C0000            xcall _TX8SW_SendData
 01C3                   .dbline 135
 01C3           ;               TX8SW_SendData(0x0A);
 01C3 500A              mov A,10
 01C5 7C0000            xcall _TX8SW_SendData
 01C8                   .dbline 136
 01C8           ;               TX8SW_CPutString("Adresse:");
 01C8 502A              mov A,>L31
 01CA 08                push A
 01CB 502A              mov A,<L31
 01CD 5C                mov X,A
 01CE 18                pop A
 01CF 7C0000            xcall _TX8SW_CPutString
 01D2                   .dbline 137
 01D2           ;               TX8SW_SendData(0x0D);
 01D2 500D              mov A,13
 01D4 7C0000            xcall _TX8SW_SendData
 01D7                   .dbline 138
 01D7           ;               TX8SW_SendData(0x0A);
 01D7 500A              mov A,10
 01D9 7C0000            xcall _TX8SW_SendData
 01DC 20                pop X
 01DD                   .dbline 139
 01DD           ;               TX8SW_SendData(*Adresse);
 01DD 62D000            mov REG[0xd0],>__r0
 01E0 52FC              mov A,[X-4]
 01E2 5300              mov [__r1],A
 01E4 52FB              mov A,[X-5]
 01E6 10                push X
 01E7 5800              mov X,[__r1]
 01E9 28                romx
 01EA 20                pop X
 01EB 10                push X
 01EC 7C0000            xcall _TX8SW_SendData
 01EF                   .dbline 140
 01EF           ;               TX8SW_SendData(0x0D);
 01EF 500D              mov A,13
 01F1 7C0000            xcall _TX8SW_SendData
 01F4                   .dbline 141
 01F4           ;               TX8SW_SendData(0x0A);
 01F4 500A              mov A,10
 01F6 7C0000            xcall _TX8SW_SendData
 01F9                   .dbline 142
 01F9           ;               TX8SW_CPutString("Daten:");
 01F9 5023              mov A,>L32
 01FB 08                push A
 01FC 5023              mov A,<L32
 01FE 5C                mov X,A
 01FF 18                pop A
 0200 7C0000            xcall _TX8SW_CPutString
 0203                   .dbline 143
 0203           ;               TX8SW_SendData(0x0D);
 0203 500D              mov A,13
 0205 7C0000            xcall _TX8SW_SendData
 0208                   .dbline 144
 0208           ;               TX8SW_SendData(0x0A);
 0208 500A              mov A,10
 020A 7C0000            xcall _TX8SW_SendData
 020D 20                pop X
 020E                   .dbline 145
 020E           ;               TX8SW_SendData(*Daten);
 020E 62D000            mov REG[0xd0],>__r0
 0211 52FA              mov A,[X-6]
 0213 5300              mov [__r1],A
 0215 52F9              mov A,[X-7]
 0217 10                push X
 0218 5800              mov X,[__r1]
 021A 28                romx
 021B 20                pop X
 021C 10                push X
 021D 7C0000            xcall _TX8SW_SendData
 0220                   .dbline 146
 0220           ;               TX8SW_SendData(0x0D);
 0220 500D              mov A,13
 0222 7C0000            xcall _TX8SW_SendData
 0225                   .dbline 147
 0225           ;               TX8SW_SendData(0x0A);
 0225 500A              mov A,10
 0227 7C0000            xcall _TX8SW_SendData
 022A 20                pop X
 022B                   .dbline 149
 022B           ;               
 022B           ;       PRT1DR |= 0x02;                                                                                                 // P0[1] setzen         
 022B 430402            or REG[0x4],2
 022E                   .dbline -2
 022E           L19:
 022E 20                pop X
 022F                   .dbline 0 ; func end
 022F 7F                ret
 0230                   .dbsym l Daten -7 pkc
 0230                   .dbsym l Adresse -5 pkc
 0230                   .dbend
 0230                   .dbfunc e MCP2515_Init _MCP2515_Init fV
 0230           _MCP2515_Init::
 0230                   .dbline -1
 0230                   .dbline 153
 0230           ; }
 0230           ; 
 0230           ; void MCP2515_Init(void)
 0230           ; {
 0230                   .dbline 154
 0230           ;       PRT0DR &= ~0x02;                                                                                                        // P1[1] löschen
 0230 4100FD            and REG[0],-3
 0233                   .dbline 155
 0233           ;       SPIM_SendTxData(SPI_reset);
 0233 62D000            mov REG[0xd0],>__r0
 0236 5002              mov A,>_SPI_reset
 0238 10                push X
 0239 5702              mov X,<_SPI_reset
 023B 28                romx
 023C 20                pop X
 023D 10                push X
 023E 7C0000            xcall _SPIM_SendTxData
 0241 20                pop X
 0242           L34:
 0242                   .dbline 156
 0242           ;       while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
 0242           L35:
 0242                   .dbline 156
 0242 10                push X
 0243 7C0000            xcall _SPIM_bReadStatus
 0246 20                pop X
 0247 62D000            mov REG[0xd0],>__r0
 024A 5300              mov [__r0],A
 024C 470010            tst [__r0],16
 024F AFF2              jz L34
 0251                   .dbline 157
 0251           ;       PRT1DR |= 0x02;                                                                                                 // P0[1] setzen
 0251 430402            or REG[0x4],2
 0254                   .dbline -2
 0254           L33:
 0254                   .dbline 0 ; func end
 0254 7F                ret
 0255                   .dbend
 0255                   .dbfunc e Bitmodify _Bitmodify fV
 0255           _Bitmodify::
 0255                   .dbline -1
 0255                   .dbline 162
 0255           ; 
 0255           ; }
 0255           ; 
 0255           ; void Bitmodify(void)
 0255           ; {
 0255                   .dbline -2
 0255           L37:
 0255                   .dbline 0 ; func end
 0255 7F                ret
 0256                   .dbend
 0256                   .dbfunc e Timer16 _Timer16 fV
 0256           _Timer16::
 0256                   .dbline -1
 0256 08                push A
 0257                   .dbline 167
 0257           ; 
 0257           ; }
 0257           ; 
 0257           ; void Timer16(void)
 0257           ; {
 0257                   .dbline -2
 0257           L38:
 0257 18                pop A
 0258                   .dbline 0 ; func end
 0258 7E                reti
 0259                   .dbend
                        .area lit(rom, con, rel, lit)
 0023           L32:
 0023 446174656E3A00    .byte 'D,'a,'t,'e,'n,58,0
 002A           L31:
 002A 416472657373653A00        .byte 'A,'d,'r,'e,'s,'s,'e,58,0
 0033           L30:
 0033 5350492057726974653A00    .byte 'S,'P,'I,32,'W,'r,'i,'t,'e,58,0
 003E           L29:
 003E 53636872656962656E3A00    .byte 'S,'c,'h,'r,'e,'i,'b,'e,'n,58,0
 0049           L18:
 0049 4164726573736500  .byte 'A,'d,'r,'e,'s,'s,'e,0
 0051           L17:
 0051 535049205265616400        .byte 'S,'P,'I,32,'R,'e,'a,'d,0
 005A           L16:
 005A 4C6573656E3A00    .byte 'L,'e,'s,'e,'n,58,0
 0061           L2:
 0061 5265676973746572696E68616C74653A  .byte 'R,'e,'g,'i,'s,'t,'e,'r,'i,'n,'h,'a,'l,'t,'e,58
 0071 00                .byte 0
