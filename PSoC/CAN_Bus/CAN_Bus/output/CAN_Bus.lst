FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.2.2401
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 05 29 LJMP  _Timer16_ISR       (0153)     ljmp	_Timer16_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 05 8D LJMP  _SPIM_ISR          (0157)     ljmp	_SPIM_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
007E: 43 FE 04 OR    REG[0xFE],0x4      (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
                                        (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [Canin+243],0x0    (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [Canin+244],0x0    (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
008F: 62 E0 9A MOV   REG[0xE0],0x9A     (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
0097: 43 E0 40 OR    REG[0xE0],0x40     (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
009A: 62 E2 00 MOV   REG[0xE2],0x0      (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
009D: 49 DA 40 TST   REG[0xDA],0x40     (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
00A0: AF FC    JZ    0x009D             (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
                                        (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
00A2: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
00A5: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
00A8: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00AB: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00AE: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00B1: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00B3: 4E       SWAP  SP,A               (0410)     swap  A, SP
00B4: 62 D3 07 MOV   REG[0xD3],0x7      
00B7: 62 D0 00 MOV   REG[0xD0],0x0      
00BA: 62 D5 00 MOV   REG[0xD5],0x0      
00BD: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00C0: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00C2: 7C 03 B1 LCALL 0x03B1             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00C5: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00C8: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00CA: 57 AA    MOV   X,0xAA             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00CC: 08       PUSH  A                  (0486)     push  A
00CD: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00CE: 53 04    MOV   [__r0],A           (0488)     mov   [__r0], A
00D0: 18       POP   A                  (0489)     pop   A
00D1: 75       INC   X                  (0490)     inc   X
00D2: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00D4: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00D5: 4B       SWAP  A,X                (0493)     swap  A, X
00D6: 51 04    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00D8: 80 04    JMP   0x00DD             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00DA: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00DB: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00DD: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00E0: 08       PUSH  A                  (0521)     push  A
00E1: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00E2: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00E4: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00E5: A0 4B    JZ    0x0131             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00E7: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00E8: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00E9: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00EB: 08       PUSH  A                  (0529)     push  A
00EC: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00ED: 53 04    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00EF: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00F0: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00F1: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00F3: 08       PUSH  A                  (0535)     push  A
00F4: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00F5: A0 1C    JZ    0x0112             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00F7: 53 03    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00F9: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00FA: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00FB: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00FD: 08       PUSH  A                  (0549)     push  A
00FE: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00FF: 3F 04    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
0101: 47 04 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
0104: B0 06    JNZ   0x010B             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
0106: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0108: 74       INC   A                  (0555)     inc   A
0109: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
010B: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
010C: 7A 03    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
010E: BF EB    JNZ   0x00FA             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0110: 8F C9    JMP   0x00DA             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0112: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0113: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0114: 09 00    ADC   A,0x0              (0566)     adc   A, 0
0116: 08       PUSH  A                  (0567)     push  A
0117: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
0118: 53 03    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
011A: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
011C: 3F 04    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
011E: 47 04 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0121: B0 08    JNZ   0x012A             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0123: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0125: 74       INC   A                  (0580)     inc   A
0126: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
0128: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
012A: 7A 03    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
012C: BF EF    JNZ   0x011C             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
012E: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
012F: 8F AA    JMP   0x00DA             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0131: 18       POP   A                  (0590)     pop   A                            ; balance stack
0132: 71 10    OR    F,0x10             
0134: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
0136: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
0139: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
013B: 62 E0 80 MOV   REG[0xE0],0x80     (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
013E: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0141: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0143: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
0146: 7C 05 A8 LCALL __UserModules_end|__text_start|_main|_main(0674)     lcall _main                    ; call main
                                        (0675) .Exit:
0149: 8F FF    JMP   0x0149             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
014B: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
014D: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.2.2401
02AC: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_can_bus_Bank1
                                        (0006) export LoadConfigTBL_can_bus_Bank0
                                        (0007) export LoadConfigTBL_can_bus_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_can_bus_Bank0:
                                        (0010) ;  Instance name SPIM, User Module SPIM
                                        (0011) ;       Instance name SPIM, Block Name SPIM(DCB02)
                                        (0012) 	db		2bh, 00h		;SPIM_CONTROL_REG  (DCB02CR0)
                                        (0013) 	db		29h, 00h		;SPIM_TX_BUFFER_REG(DCB02DR1)
                                        (0014) 	db		2ah, 00h		;SPIM_RX_BUFFER_REG(DCB02DR2)
                                        (0015) ;  Instance name TX8SW, User Module TX8SW
                                        (0016) ;  Instance name Timer16, User Module Timer16
                                        (0017) ;       Instance name Timer16, Block Name TIMER16_LSB(DBB00)
                                        (0018) 	db		23h, 00h		;Timer16_CONTROL_LSB_REG(DBB00CR0)
                                        (0019) 	db		21h, ffh		;Timer16_PERIOD_LSB_REG(DBB00DR1)
                                        (0020) 	db		22h, 00h		;Timer16_COMPARE_LSB_REG(DBB00DR2)
                                        (0021) ;       Instance name Timer16, Block Name TIMER16_MSB(DBB01)
                                        (0022) 	db		27h, 04h		;Timer16_CONTROL_MSB_REG(DBB01CR0)
                                        (0023) 	db		25h, ffh		;Timer16_PERIOD_MSB_REG(DBB01DR1)
                                        (0024) 	db		26h, 00h		;Timer16_COMPARE_MSB_REG(DBB01DR2)
                                        (0025) ;  Global Register values Bank 0
                                        (0026) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0027) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0028) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0029) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0030) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0031) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0032) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0033) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0034) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0035) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0036) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0037) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0038) 	db		b5h, 11h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0039) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0040) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0041) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0042) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0043) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0044) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0045) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0046) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0047) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0048) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0049) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0050) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0051) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0052) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0053) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0054) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0055) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0056) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0057) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0058) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0059) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0060) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0061) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0062) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0063) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0064) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0065) 	db		ffh
                                        (0066) LoadConfigTBL_can_bus_Bank1:
                                        (0067) ;  Instance name SPIM, User Module SPIM
                                        (0068) ;       Instance name SPIM, Block Name SPIM(DCB02)
                                        (0069) 	db		28h, 06h		;SPIM_FUNCTION_REG (DCB02FN)
                                        (0070) 	db		29h, c6h		;SPIM_INPUT_REG    (DCB02IN)
                                        (0071) 	db		2ah, 6ch		;SPIM_OUTPUT_REG   (DCB02OU)
                                        (0072) ;  Instance name TX8SW, User Module TX8SW
                                        (0073) ;  Instance name Timer16, User Module Timer16
                                        (0074) ;       Instance name Timer16, Block Name TIMER16_LSB(DBB00)
                                        (0075) 	db		20h, 00h		;Timer16_FUNC_LSB_REG(DBB00FN)
                                        (0076) 	db		21h, 17h		;Timer16_INPUT_LSB_REG(DBB00IN)
                                        (0077) 	db		22h, 40h		;Timer16_OUTPUT_LSB_REG(DBB00OU)
                                        (0078) ;       Instance name Timer16, Block Name TIMER16_MSB(DBB01)
                                        (0079) 	db		24h, 20h		;Timer16_FUNC_MSB_REG(DBB01FN)
                                        (0080) 	db		25h, 37h		;Timer16_INPUT_MSB_REG(DBB01IN)
                                        (0081) 	db		26h, 40h		;Timer16_OUTPUT_MSB_REG(DBB01OU)
                                        (0082) ;  Global Register values Bank 1
                                        (0083) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0084) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0085) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0086) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0087) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0088) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0089) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0090) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0091) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0092) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0093) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0094) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0095) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0096) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0097) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0098) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0099) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0100) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0101) 	db		ffh
                                        (0102) AREA psoc_config(rom, rel)
                                        (0103) LoadConfigTBL_can_bus_Ordered:
                                        (0104) ;  Ordered Global Register values
                                        (0105) 	M8C_SetBank0
02AE: 62 00 02 MOV   REG[0x0],0x2       (0106) 	mov	reg[00h], 02h		; Port_0_Data register (PRT0DR)
02B1: 71 10    OR    F,0x10             
                                        (0107) 	M8C_SetBank1
02B3: 62 00 02 MOV   REG[0x0],0x2       (0108) 	mov	reg[00h], 02h		; Port_0_DriveMode_0 register (PRT0DM0)
02B6: 62 01 FF MOV   REG[0x1],0xFF      (0109) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
02B9: 70 EF    AND   F,0xEF             
                                        (0110) 	M8C_SetBank0
02BB: 62 03 FC MOV   REG[0x3],0xFC      (0111) 	mov	reg[03h], fch		; Port_0_DriveMode_2 register (PRT0DM2)
02BE: 62 02 01 MOV   REG[0x2],0x1       (0112) 	mov	reg[02h], 01h		; Port_0_GlobalSelect register (PRT0GS)
02C1: 71 10    OR    F,0x10             
                                        (0113) 	M8C_SetBank1
02C3: 62 02 00 MOV   REG[0x2],0x0       (0114) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
02C6: 62 03 00 MOV   REG[0x3],0x0       (0115) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
02C9: 70 EF    AND   F,0xEF             
                                        (0116) 	M8C_SetBank0
02CB: 62 01 00 MOV   REG[0x1],0x0       (0117) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
02CE: 62 04 00 MOV   REG[0x4],0x0       (0118) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
02D1: 71 10    OR    F,0x10             
                                        (0119) 	M8C_SetBank1
02D3: 62 04 00 MOV   REG[0x4],0x0       (0120) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
02D6: 62 05 FF MOV   REG[0x5],0xFF      (0121) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
02D9: 70 EF    AND   F,0xEF             
                                        (0122) 	M8C_SetBank0
02DB: 62 07 FC MOV   REG[0x7],0xFC      (0123) 	mov	reg[07h], fch		; Port_1_DriveMode_2 register (PRT1DM2)
02DE: 62 06 00 MOV   REG[0x6],0x0       (0124) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
02E1: 71 10    OR    F,0x10             
                                        (0125) 	M8C_SetBank1
02E3: 62 06 00 MOV   REG[0x6],0x0       (0126) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
02E6: 62 07 00 MOV   REG[0x7],0x0       (0127) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
02E9: 70 EF    AND   F,0xEF             
                                        (0128) 	M8C_SetBank0
02EB: 62 05 00 MOV   REG[0x5],0x0       (0129) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
02EE: 62 08 00 MOV   REG[0x8],0x0       (0130) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
02F1: 71 10    OR    F,0x10             
                                        (0131) 	M8C_SetBank1
02F3: 62 08 03 MOV   REG[0x8],0x3       (0132) 	mov	reg[08h], 03h		; Port_2_DriveMode_0 register (PRT2DM0)
02F6: 62 09 FC MOV   REG[0x9],0xFC      (0133) 	mov	reg[09h], fch		; Port_2_DriveMode_1 register (PRT2DM1)
02F9: 70 EF    AND   F,0xEF             
                                        (0134) 	M8C_SetBank0
02FB: 62 0B FC MOV   REG[0xB],0xFC      (0135) 	mov	reg[0bh], fch		; Port_2_DriveMode_2 register (PRT2DM2)
02FE: 62 0A 03 MOV   REG[0xA],0x3       (0136) 	mov	reg[0ah], 03h		; Port_2_GlobalSelect register (PRT2GS)
0301: 71 10    OR    F,0x10             
                                        (0137) 	M8C_SetBank1
0303: 62 0A 00 MOV   REG[0xA],0x0       (0138) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0306: 62 0B 00 MOV   REG[0xB],0x0       (0139) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0309: 70 EF    AND   F,0xEF             
                                        (0140) 	M8C_SetBank0
030B: 62 09 00 MOV   REG[0x9],0x0       (0141) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
030E: 62 0C 00 MOV   REG[0xC],0x0       (0142) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0311: 71 10    OR    F,0x10             
                                        (0143) 	M8C_SetBank1
0313: 62 0C 00 MOV   REG[0xC],0x0       (0144) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0316: 62 0D 00 MOV   REG[0xD],0x0       (0145) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0319: 70 EF    AND   F,0xEF             
                                        (0146) 	M8C_SetBank0
031B: 62 0F 00 MOV   REG[0xF],0x0       (0147) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
031E: 62 0E 00 MOV   REG[0xE],0x0       (0148) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0321: 71 10    OR    F,0x10             
                                        (0149) 	M8C_SetBank1
0323: 62 0E 00 MOV   REG[0xE],0x0       (0150) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0326: 62 0F 00 MOV   REG[0xF],0x0       (0151) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0329: 70 EF    AND   F,0xEF             
                                        (0152) 	M8C_SetBank0
032B: 62 0D 00 MOV   REG[0xD],0x0       (0153) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
032E: 62 10 00 MOV   REG[0x10],0x0      (0154) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0331: 71 10    OR    F,0x10             
                                        (0155) 	M8C_SetBank1
0333: 62 10 00 MOV   REG[0x10],0x0      (0156) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0336: 62 11 00 MOV   REG[0x11],0x0      (0157) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0339: 70 EF    AND   F,0xEF             
                                        (0158) 	M8C_SetBank0
033B: 62 13 00 MOV   REG[0x13],0x0      (0159) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
033E: 62 12 00 MOV   REG[0x12],0x0      (0160) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0341: 71 10    OR    F,0x10             
                                        (0161) 	M8C_SetBank1
0343: 62 12 00 MOV   REG[0x12],0x0      (0162) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0346: 62 13 00 MOV   REG[0x13],0x0      (0163) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0349: 70 EF    AND   F,0xEF             
                                        (0164) 	M8C_SetBank0
034B: 62 11 00 MOV   REG[0x11],0x0      (0165) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
034E: 62 14 00 MOV   REG[0x14],0x0      (0166) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0351: 71 10    OR    F,0x10             
                                        (0167) 	M8C_SetBank1
0353: 62 14 00 MOV   REG[0x14],0x0      (0168) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0356: 62 15 00 MOV   REG[0x15],0x0      (0169) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0359: 70 EF    AND   F,0xEF             
                                        (0170) 	M8C_SetBank0
035B: 62 17 00 MOV   REG[0x17],0x0      (0171) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
035E: 62 16 00 MOV   REG[0x16],0x0      (0172) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0361: 71 10    OR    F,0x10             
                                        (0173) 	M8C_SetBank1
0363: 62 16 00 MOV   REG[0x16],0x0      (0174) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0366: 62 17 00 MOV   REG[0x17],0x0      (0175) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0369: 70 EF    AND   F,0xEF             
                                        (0176) 	M8C_SetBank0
036B: 62 15 00 MOV   REG[0x15],0x0      (0177) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
036E: 62 18 00 MOV   REG[0x18],0x0      (0178) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
0371: 71 10    OR    F,0x10             
                                        (0179) 	M8C_SetBank1
0373: 62 18 00 MOV   REG[0x18],0x0      (0180) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0376: 62 19 00 MOV   REG[0x19],0x0      (0181) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0379: 70 EF    AND   F,0xEF             
                                        (0182) 	M8C_SetBank0
037B: 62 1B 00 MOV   REG[0x1B],0x0      (0183) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
037E: 62 1A 00 MOV   REG[0x1A],0x0      (0184) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0381: 71 10    OR    F,0x10             
                                        (0185) 	M8C_SetBank1
0383: 62 1A 00 MOV   REG[0x1A],0x0      (0186) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0386: 62 1B 00 MOV   REG[0x1B],0x0      (0187) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0389: 70 EF    AND   F,0xEF             
                                        (0188) 	M8C_SetBank0
038B: 62 19 00 MOV   REG[0x19],0x0      (0189) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
038E: 62 1C 00 MOV   REG[0x1C],0x0      (0190) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0391: 71 10    OR    F,0x10             
                                        (0191) 	M8C_SetBank1
0393: 62 1C 00 MOV   REG[0x1C],0x0      (0192) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0396: 62 1D 00 MOV   REG[0x1D],0x0      (0193) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0399: 70 EF    AND   F,0xEF             
                                        (0194) 	M8C_SetBank0
039B: 62 1F 00 MOV   REG[0x1F],0x0      (0195) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
039E: 62 1E 00 MOV   REG[0x1E],0x0      (0196) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
03A1: 71 10    OR    F,0x10             
                                        (0197) 	M8C_SetBank1
03A3: 62 1E 00 MOV   REG[0x1E],0x0      (0198) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
03A6: 62 1F 00 MOV   REG[0x1F],0x0      (0199) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
03A9: 70 EF    AND   F,0xEF             
                                        (0200) 	M8C_SetBank0
03AB: 62 1D 00 MOV   REG[0x1D],0x0      (0201) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
03AE: 70 EF    AND   F,0xEF             
                                        (0202) 	M8C_SetBank0
03B0: 7F       RET                      (0203) 	ret
                                        (0204) 
                                        (0205) 
                                        (0206) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.2.2401
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_can_bus
                                        (0026) export _LoadConfig_can_bus
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) 
                                        (0030) 
                                        (0031) export NO_SHADOW
                                        (0032) export _NO_SHADOW
                                        (0033) 
                                        (0034) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0035) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0036) 
                                        (0037) AREA psoc_config(rom, rel)
                                        (0038) 
                                        (0039) ;---------------------------------------------------------------------------
                                        (0040) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0041) ;                  parameters handled by boot code, like CPU speed). This
                                        (0042) ;                  function can be called from user code, but typically it
                                        (0043) ;                  is only called from boot.
                                        (0044) ;
                                        (0045) ;       INPUTS: None.
                                        (0046) ;      RETURNS: Nothing.
                                        (0047) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0048) ;               In the large memory model currently only the page
                                        (0049) ;               pointer registers listed below are modified.  This does
                                        (0050) ;               not guarantee that in future implementations of this
                                        (0051) ;               function other page pointer registers will not be
                                        (0052) ;               modified.
                                        (0053) ;          
                                        (0054) ;               Page Pointer Registers Modified: 
                                        (0055) ;               CUR_PP
                                        (0056) ;
                                        (0057) _LoadConfigInit:
                                        (0058)  LoadConfigInit:
                                        (0059)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0060)     
03B1: 55 02 02 MOV   [0x2],0x2          (0061) 	mov		[Port_0_Data_SHADE], 2h
                                        (0062) 
03B4: 7C 03 BB LCALL 0x03BB             (0063) 	lcall	LoadConfig_can_bus
03B7: 7C 02 AC LCALL 0x02AC             (0064) 	lcall	LoadConfigTBL_can_bus_Ordered
                                        (0065) 
                                        (0066) 
                                        (0067)     RAM_EPILOGUE RAM_USE_CLASS_4
03BA: 7F       RET                      (0068)     ret
                                        (0069) 
                                        (0070) ;---------------------------------------------------------------------------
                                        (0071) ; Load Configuration can_bus
                                        (0072) ;
                                        (0073) ;    Load configuration registers for can_bus.
                                        (0074) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0075) ;
                                        (0076) ;       INPUTS: None.
                                        (0077) ;      RETURNS: Nothing.
                                        (0078) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0079) ;               modified as may the Page Pointer registers!
                                        (0080) ;               In the large memory model currently only the page
                                        (0081) ;               pointer registers listed below are modified.  This does
                                        (0082) ;               not guarantee that in future implementations of this
                                        (0083) ;               function other page pointer registers will not be
                                        (0084) ;               modified.
                                        (0085) ;          
                                        (0086) ;               Page Pointer Registers Modified: 
                                        (0087) ;               CUR_PP
                                        (0088) ;
                                        (0089) _LoadConfig_can_bus:
                                        (0090)  LoadConfig_can_bus:
                                        (0091)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0092) 
03BB: 10       PUSH  X                  (0093) 	push	x
03BC: 70 EF    AND   F,0xEF             
                                        (0094)     M8C_SetBank0                    ; Force bank 0
03BE: 50 00    MOV   A,0x0              (0095)     mov     a, 0                    ; Specify bank 0
03C0: 67       ASR   A                  (0096)     asr     a                       ; Store in carry flag
                                        (0097)                                     ; Load bank 0 table:
03C1: 50 02    MOV   A,0x2              (0098)     mov     A, >LoadConfigTBL_can_bus_Bank0
03C3: 57 12    MOV   X,0x12             (0099)     mov     X, <LoadConfigTBL_can_bus_Bank0
03C5: 7C 03 D6 LCALL 0x03D6             (0100)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0101) 
03C8: 50 01    MOV   A,0x1              (0102)     mov     a, 1                    ; Specify bank 1
03CA: 67       ASR   A                  (0103)     asr     a                       ; Store in carry flag
                                        (0104)                                     ; Load bank 1 table:
03CB: 50 02    MOV   A,0x2              (0105)     mov     A, >LoadConfigTBL_can_bus_Bank1
03CD: 57 73    MOV   X,0x73             (0106)     mov     X, <LoadConfigTBL_can_bus_Bank1
03CF: 7C 03 D6 LCALL 0x03D6             (0107)     lcall   LoadConfig              ; Load the bank 1 values
03D2: 70 EF    AND   F,0xEF             
                                        (0108) 
                                        (0109)     M8C_SetBank0                    ; Force return to bank 0
03D4: 20       POP   X                  (0110) 	pop		x
                                        (0111) 
                                        (0112)     RAM_EPILOGUE RAM_USE_CLASS_4
03D5: 7F       RET                      (0113)     ret
                                        (0114) 
                                        (0115) 
                                        (0116) 
                                        (0117) 
                                        (0118) ;---------------------------------------------------------------------------
                                        (0119) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0120) ;              pairs. Terminate on address=0xFF.
                                        (0121) ;
                                        (0122) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0123) ;           Flag Register Carry bit encodes the Register Bank
                                        (0124) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0125) ;
                                        (0126) ;  RETURNS: nothing.
                                        (0127) ;
                                        (0128) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0129) ;                X-3 Temporary store for register address
                                        (0130) ;                X-2 LSB of config table address
                                        (0131) ;                X-1 MSB of config table address
                                        (0132) ;
                                        (0133) LoadConfig:
                                        (0134)     RAM_PROLOGUE RAM_USE_CLASS_2
03D6: 38 02    ADD   SP,0x2             (0135)     add     SP, 2                   ; Set up local vars
03D8: 10       PUSH  X                  (0136)     push    X                       ; Save config table address on stack
03D9: 08       PUSH  A                  (0137)     push    A
03DA: 4F       MOV   X,SP               (0138)     mov     X, SP
03DB: 56 FC 00 MOV   [X-4],0x0          (0139)     mov     [X-4], 0                ; Set default Destination to Bank 0
03DE: D0 04    JNC   0x03E3             (0140)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
03E0: 56 FC 01 MOV   [X-4],0x1          (0141)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0142) .BankSelectSaved:
03E3: 18       POP   A                  (0143)     pop     A
03E4: 20       POP   X                  (0144)     pop     X
03E5: 70 EF    AND   F,0xEF             
03E7: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0145) 
                                        (0146) LoadConfigLp:
                                        (0147)     M8C_SetBank0                    ; Switch to bank 0
                                        (0148)     M8C_ClearWDT                    ; Clear the watchdog for long inits
03EA: 10       PUSH  X                  (0149)     push    X                       ; Preserve the config table address
03EB: 08       PUSH  A                  (0150)     push    A
03EC: 28       ROMX                     (0151)     romx                            ; Load register address from table
03ED: 39 FF    CMP   A,0xFF             (0152)     cmp     A, END_CONFIG_TABLE     ; End of table?
03EF: A0 1F    JZ    0x040F             (0153)     jz      EndLoadConfig           ;   Yes, go wrap it up
03F1: 4F       MOV   X,SP               (0154)     mov     X, SP                   ;
03F2: 48 FC 01 TST   [X-4],0x1          (0155)     tst     [X-4], 1                ; Loading IO Bank 1?
03F5: A0 03    JZ    0x03F9             (0156)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03F7: 71 10    OR    F,0x10             
                                        (0157)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0158) .IOBankNowSet:
03F9: 54 FD    MOV   [X-3],A            (0159)     mov     [X-3], A                ; Stash the register address
03FB: 18       POP   A                  (0160)     pop     A                       ; Retrieve the table address
03FC: 20       POP   X                  (0161)     pop     X
03FD: 75       INC   X                  (0162)     inc     X                       ; Advance to the data byte
03FE: 09 00    ADC   A,0x0              (0163)     adc     A, 0
0400: 10       PUSH  X                  (0164)     push    X                       ; Save the config table address again
0401: 08       PUSH  A                  (0165)     push    A
0402: 28       ROMX                     (0166)     romx                            ; load config data from the table
0403: 4F       MOV   X,SP               (0167)     mov     X, SP                   ; retrieve the register address
0404: 59 FD    MOV   X,[X-3]            (0168)     mov     X, [X-3]
0406: 61 00    MOV   REG[X+0x0],A       (0169)     mov     reg[X], A               ; Configure the register
0408: 18       POP   A                  (0170)     pop     A                       ; retrieve the table address
0409: 20       POP   X                  (0171)     pop     X
040A: 75       INC   X                  (0172)     inc     X                       ; advance to next table entry
040B: 09 00    ADC   A,0x0              (0173)     adc     A, 0
040D: 8F D7    JMP   0x03E5             (0174)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0175) EndLoadConfig:
040F: 38 FC    ADD   SP,0xFC            (0176)     add     SP, -4
0411: 70 3F    AND   F,0x3F             
0413: 71 C0    OR    F,0xC0             
                                        (0177)     RAM_EPILOGUE RAM_USE_CLASS_2
0415: 7F       RET                      (0178)     ret
                                        (0179) 
                                        (0180) AREA InterruptRAM(ram, rel)
                                        (0181) 
                                        (0182) NO_SHADOW:
                                        (0183) _NO_SHADOW:
                                        (0184) ; write only register shadows
                                        (0185) _Port_0_Data_SHADE:
                                        (0186) Port_0_Data_SHADE:	BLK	1
                                        (0187) 
FILE: lib\tx8sw.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;  FILENAME: TX8SW.asm
0426: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;
0429: 2E 02 80 OR    [0x2],0x80         
042C: 51 02    MOV   A,[0x2]            
042E: 60 00    MOV   REG[0x0],A         (0004) ;;  Version: 1.2, Updated on 2011/12/1 at 17:23:32
0430: 41 03 7F AND   REG[0x3],0x7F      (0005) ;;  Generated by PSoC Designer 5.2.2401
0433: 71 10    OR    F,0x10             
                                        (0006) ;;
0435: 43 00 80 OR    REG[0x0],0x80      (0007) ;;  DESCRIPTION: Routines for Firmware Serial Transmitter
0438: 41 01 7F AND   REG[0x1],0x7F      (0008) ;;
043B: 70 EF    AND   F,0xEF             
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "TX8SW.inc"
                                        (0017) 
                                        (0018) export   TX8SW_Start
                                        (0019) export  _TX8SW_Start
                                        (0020) export   TX8SW_Stop
                                        (0021) export  _TX8SW_Stop
                                        (0022) export   TX8SW_SendData
                                        (0023) export  _TX8SW_SendData
                                        (0024) 
                                        (0025) ;-----------------------------------------------
                                        (0026) ;  High Level TX functions
                                        (0027) ;-----------------------------------------------
                                        (0028) export  TX8SW_PutSHexByte
                                        (0029) export _TX8SW_PutSHexByte
                                        (0030) export  TX8SW_PutSHexInt
                                        (0031) export _TX8SW_PutSHexInt
                                        (0032) export  TX8SW_PutChar
                                        (0033) export _TX8SW_PutChar
                                        (0034) export  TX8SW_CPutString
                                        (0035) export _TX8SW_CPutString
                                        (0036) export  TX8SW_PutString
                                        (0037) export _TX8SW_PutString
                                        (0038) export  TX8SW_Write
                                        (0039) export _TX8SW_Write
                                        (0040) export  TX8SW_CWrite
                                        (0041) export _TX8SW_CWrite
                                        (0042) export  TX8SW_PutCRLF
                                        (0043) export _TX8SW_PutCRLF
                                        (0044) 
                                        (0045) ;-----------------------------------------------
                                        (0046) AREA InterruptRAM (RAM, REL)
                                        (0047)   TX8SW_bData:    blk  1
                                        (0048)   TX8SW_bParity:  blk  1
                                        (0049) ;-----------------------------------------------
                                        (0050) 
                                        (0051) AREA UserModules (ROM, REL)
                                        (0052) 
                                        (0053) .LITERAL
                                        (0054)   Digits:    DS    "0123456789ABCDEF"
                                        (0055) .ENDLITERAL
                                        (0056) 
                                        (0057) .SECTION
                                        (0058) ;-----------------------------------------------------------------------------
                                        (0059) ;  FUNCTION NAME: TX8SW_Start(void)
                                        (0060) ;
                                        (0061) ;  DESCRIPTION:
                                        (0062) ;     Sets the output pin into high logical level
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS: none
                                        (0067) ;
                                        (0068) ;  RETURNS:  none
                                        (0069) ;
                                        (0070) ;  SIDE EFFECTS:
                                        (0071) ;    The A and X registers may be modified by this or future implementations
                                        (0072) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0073) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0074) ;    responsibility to preserve their values across calls to fastcall16
                                        (0075) ;    functions.
                                        (0076) ;-----------------------------------------------------------------------------
                                        (0077)  TX8SW_Start:
                                        (0078) _TX8SW_Start:
                                        (0079)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0080) 
                                        (0081)    RAM_SETPAGE_CUR >Port_0_Data_SHADE
                                        (0082)    
                                        (0083)    TX8SW_Start_M      ; Set the output pin into Strong DM and into high logical level
                                        (0084) 
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_4
043D: 7F       RET                      (0086)    ret
043E: 43 03 80 OR    REG[0x3],0x80      
0441: 71 10    OR    F,0x10             
0443: 43 01 80 OR    REG[0x1],0x80      
0446: 41 00 7F AND   REG[0x0],0x7F      
0449: 70 EF    AND   F,0xEF             
                                        (0087) .ENDSECTION
                                        (0088) 
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: TX8SW_Stop
                                        (0092) ;
                                        (0093) ;  DESCRIPTION:
                                        (0094) ;     This function was added for compatibility reason
                                        (0095) ;
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:  none
                                        (0099) ;
                                        (0100) ;  RETURNS:  none
                                        (0101) ;
                                        (0102) ;  SIDE EFFECTS:
                                        (0103) ;    The A and X registers may be modified by this or future implementations
                                        (0104) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0105) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0106) ;    responsibility to preserve their values across calls to fastcall16
                                        (0107) ;    functions.
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109)  TX8SW_Stop:
                                        (0110) _TX8SW_Stop:
                                        (0111)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0112) 
                                        (0113)    TX8SW_Stop_M      ; Set the output pin into HiZ-analog DM
                                        (0114) 
                                        (0115)    RAM_EPILOGUE RAM_USE_CLASS_1
044B: 7F       RET                      (0116)    ret
044C: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0117) .ENDSECTION
                                        (0118) 
                                        (0119) 
                                        (0120) .SECTION
                                        (0121) ;-----------------------------------------------------------------------------
                                        (0122) ;  FUNCTION NAME: TX8SW_PutChar
                                        (0123) ;  FUNCTION NAME: TX8SW_SendData
                                        (0124) ;
                                        (0125) ;  DESCRIPTION:
                                        (0126) ;     Sends one byte via TX pin.
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:
                                        (0129) ;     A  => (BYTE) Data/char to transmit
                                        (0130) ;
                                        (0131) ;  RETURNS:
                                        (0132) ;
                                        (0133) ;  SIDE EFFECTS:
                                        (0134) ;    The A and X registers may be modified by this or future implementations
                                        (0135) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0136) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0137) ;    responsibility to preserve their values across calls to fastcall16
                                        (0138) ;    functions.
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140)  TX8SW_PutChar:
                                        (0141) _TX8SW_PutChar:
                                        (0142)  TX8SW_SendData:
                                        (0143) _TX8SW_SendData:
                                        (0144) 
                                        (0145)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)     RAM_SETPAGE_CUR >TX8SW_bData
                                        (0147) 
044F: 53 00    MOV   [0x0],A            (0148)     mov     [TX8SW_bData], A
0451: 71 10    OR    F,0x10             
                                        (0149) IF (TX8SW_PARITY)
                                        (0150)   IF (TX8SW_DATA_BITS & TX8SW_DATA_BITS_8)
                                        (0151) 
                                        (0152)     IF (TX8SW_PARITY & TX8SW_PARITY_ODD)
                                        (0153)     mov     [TX8SW_bParity], 1
                                        (0154)     ELSE
                                        (0155)     mov     [TX8SW_bParity], 0
                                        (0156)     ENDIF
                                        (0157) 
                                        (0158)     mov     X, 8
                                        (0159) .P0:
                                        (0160)     rlc     A
                                        (0161)     jnc     .P1
                                        (0162)     xor     [TX8SW_bParity], 1
                                        (0163) .P1:
                                        (0164)     dec     X
                                        (0165)     jnz     .P0
                                        (0166)   ELSE
                                        (0167)     IF (TX8SW_PARITY & TX8SW_PARITY_ODD)
                                        (0168)     or      [TX8SW_bData], 0x80
                                        (0169)     ELSE
                                        (0170)     and     [TX8SW_bData], ~0x80
                                        (0171)     ENDIF
                                        (0172)     mov     X, 8
                                        (0173) .P0:
                                        (0174)     rlc     A
                                        (0175)     jnc     .P1
                                        (0176)     xor     [TX8SW_bData], 0x80
                                        (0177) .P1:
                                        (0178)     dec     X
                                        (0179)     jnz     .P0
                                        (0180)   ENDIF
                                        (0181) ENDIF
                                        (0182) 
                                        (0183)     M8C_SetBank1
0453: 5D E0    MOV   A,REG[0xE0]        (0184)     mov     A, reg[OSC_CR0]            ; Get the System Oscillator control register
0455: 08       PUSH  A                  (0185)     push    A                          ; and save it on the stack
0456: 21 F8    AND   A,0xF8             (0186)     and     A, ~OSC_CR0_CPU            ; Clear the CPU clock selects
0458: 29 05    OR    A,0x5              (0187)     or      A, TX8SW_OSC_CR0           ; Set CPU clock according to required baudrate
045A: 70 FE    AND   F,0xFE             
                                        (0188) 
                                        (0189)     M8C_DisableGInt
045C: 60 E0    MOV   REG[0xE0],A        (0190)     mov     reg[OSC_CR0], A            ; set CPU clock
045E: 70 EF    AND   F,0xEF             
                                        (0191)     M8C_SetBank0
                                        (0192) 
0460: 4B       SWAP  A,X                (0193)     swap    A, X                       ; some delay
0461: 4B       SWAP  A,X                (0194)     swap    A, X
0462: 4B       SWAP  A,X                (0195)     swap    A, X
0463: 4B       SWAP  A,X                (0196)     swap    A, X
                                        (0197) 
0464: 51 02    MOV   A,[0x2]            (0198)     mov      A, [Port_0_Data_SHADE]
                                        (0199) 
                                        (0200) ;-- Send data
                                        (0201) ;----------------------------------------------------
                                        (0202) IF (TX8SW_CYCL & TX8SW_CYCL_26)
                                        (0203) Send_26:                               ; send at 26 cycles per bit
                                        (0204) ;--- send start bit
                                        (0205)     and     A, ~TX8SW_PinMask
                                        (0206)     mov     reg[TX8SW_PortDR], A       ; 5
                                        (0207) 
                                        (0208)     TX8SW_SendBit                      ; send all data bits
                                        (0209)     TX8SW_SendBit
                                        (0210)     TX8SW_SendBit
                                        (0211)     TX8SW_SendBit
                                        (0212)     TX8SW_SendBit
                                        (0213)     TX8SW_SendBit
                                        (0214)     TX8SW_SendBit
                                        (0215) 
                                        (0216) IF (TX8SW_SEND_8)
                                        (0217)     TX8SW_SendBit
                                        (0218) ENDIF
                                        (0219) 
                                        (0220) IF (TX8SW_SEND_9)
                                        (0221)     rrc     [TX8SW_bParity]            ; 7
                                        (0222)     jc      . + 6                      ; 5
                                        (0223)     and     A, ~TX8SW_PinMask          ; 4
                                        (0224)     jmp     . + 6                      ; 5
                                        (0225)     or      A, TX8SW_PinMask           ; 4
                                        (0226)     jmp     . + 2                      ; 5
                                        (0227)     mov     reg[TX8SW_PortDR], A       ; 5
                                        (0228) ENDIF
                                        (0229) 
                                        (0230)     tst     [0],0                      ; 8
                                        (0231)     tst     reg[1],0                   ; 9
                                        (0232) 
                                        (0233) ;--- send stop bit(s)
                                        (0234)     or      A, TX8SW_PinMask           ; 4
                                        (0235)     mov     reg[TX8SW_PortDR], A       ; 5
                                        (0236) 
                                        (0237) IF (TX8SW_SEND_2_STOP)
                                        (0238)     mov     X, 4                       ; 4
                                        (0239) ELSE
                                        (0240)     mov     X, 1                       ; 4
                                        (0241) ENDIF
                                        (0242) .L0:
                                        (0243)     dec     X                          ; 4
                                        (0244)     jnz     .L0                        ; 5
                                        (0245) ENDIF
                                        (0246) 
                                        (0247) ;----------------------------------------------------
                                        (0248) IF (TX8SW_CYCL & TX8SW_CYCL_39)
                                        (0249) Send_39:                               ; send at 39 cycles per bit
                                        (0250) ;--- send start bit
0466: 21 7F    AND   A,0x7F             (0251)     and     A, ~TX8SW_PinMask
0468: 60 00    MOV   REG[0x0],A         (0252)     mov     reg[TX8SW_PortDR], A       ; 5
                                        (0253) IF (TX8SW_SEND_8)
046A: 57 08    MOV   X,0x8              (0254)     mov     X, 8                       ; 4
                                        (0255) ELSE
                                        (0256)     mov     X, 7
                                        (0257) ENDIF
046C: 80 01    JMP   0x046E             (0258)     jmp    .L1                         ; 5
                                        (0259) 
                                        (0260) .L1:
046E: 40       NOP                      (0261)     nop                                ; 4
046F: 6E 00    RRC   [0x0]              
0471: C0 05    JC    0x0477             
0473: 21 7F    AND   A,0x7F             
0475: 80 05    JMP   0x047B             
0477: 29 80    OR    A,0x80             
0479: 80 01    JMP   0x047B             
047B: 60 00    MOV   REG[0x0],A         
                                        (0262)     TX8SW_SendBit                      ; 26
047D: 79       DEC   X                  (0263)     dec    X                           ; 4
047E: BF EF    JNZ   0x046E             (0264)     jnz    .L1                         ; 5
                                        (0265) 
                                        (0266) 
                                        (0267) IF (TX8SW_SEND_9)
                                        (0268)     rrc     [TX8SW_bParity]            ; 7   (26)
                                        (0269)     jc      . + 6                      ; 5
                                        (0270)     and     A, ~TX8SW_PinMask          ; 4
                                        (0271)     jmp     . + 6                      ; 5
                                        (0272)     or      A, TX8SW_PinMask           ; 4
                                        (0273)     jmp     . + 2                      ; 5
                                        (0274)     mov     reg[TX8SW_PortDR], A       ; 5
                                        (0275) 
                                        (0276)     nop                                ; 4
                                        (0277)     dec     X                          ; 4
                                        (0278)     jmp    .+2                         ; 5
                                        (0279) ENDIF
                                        (0280) 
0480: 6E 01    RRC   [0x1]              (0281)     rrc     [TX8SW_bParity]            ; 7
0482: 6E 01    RRC   [0x1]              (0282)     rrc     [TX8SW_bParity]            ; 7
0484: 6E 01    RRC   [0x1]              (0283)     rrc     [TX8SW_bParity]            ; 7
                                        (0284) 
                                        (0285) ;--- send stop bit(s)
0486: 29 80    OR    A,0x80             (0286)     or      A, TX8SW_PinMask           ; 4
0488: 60 00    MOV   REG[0x0],A         (0287)     mov     reg[TX8SW_PortDR], A       ; 5
                                        (0288) 
                                        (0289) IF (TX8SW_SEND_2_STOP)
                                        (0290)     mov     X, 7                       ; 4
                                        (0291) ELSE
048A: 57 03    MOV   X,0x3              (0292)     mov     X, 3                       ; 4
                                        (0293) ENDIF
                                        (0294) .L0:
048C: 79       DEC   X                  (0295)     dec     X                          ; 4
048D: BF FE    JNZ   0x048C             (0296)     jnz     .L0                        ; 5
                                        (0297) ENDIF
                                        (0298) 
                                        (0299) ;----------------------------------------------------
                                        (0300) IF (TX8SW_CYCL & TX8SW_CYCL_78)
                                        (0301) Send_78:                                ; send at 78 cycles per bit
                                        (0302) ;--- send start bit
                                        (0303)     and     A, ~TX8SW_PinMask
                                        (0304)     mov     reg[TX8SW_PortDR], A       ; 5
                                        (0305) IF (TX8SW_SEND_8)
                                        (0306)     mov     X, 8                       ; 4
                                        (0307) ELSE
                                        (0308)     mov     X, 7
                                        (0309) ENDIF
                                        (0310)     jmp    .L1                         ; 5
                                        (0311) 
                                        (0312) .L1:
                                        (0313)     swap    A, X                       ; 5
                                        (0314)     swap    A, X                       ; 5
                                        (0315)     swap    A, X                       ; 5
                                        (0316)     swap    A, X                       ; 5
                                        (0317)     swap    A, X                       ; 5
                                        (0318)     swap    A, X                       ; 5
                                        (0319)     tst     reg[1],0                   ; 9
                                        (0320)     nop                                ; 4
                                        (0321)     TX8SW_SendBit                      ; 26
                                        (0322)     dec    X                           ; 4
                                        (0323)     jnz    .L1                         ; 5
                                        (0324) 
                                        (0325) IF (TX8SW_SEND_9)
                                        (0326)     mov     X, 3                       ; 4
                                        (0327) .L2:
                                        (0328)     nop                                ; 4
                                        (0329)     dec     X                          ; 4
                                        (0330)     jnz     .L2                        ; 5
                                        (0331) 
                                        (0332)     rrc     [TX8SW_bParity]            ; 7   (26)
                                        (0333)     jc      . + 6                      ; 5
                                        (0334)     and     A, ~TX8SW_PinMask          ; 4
                                        (0335)     jmp     . + 6                      ; 5
                                        (0336)     or      A, TX8SW_PinMask           ; 4
                                        (0337)     jmp     . + 2                      ; 5
                                        (0338)     mov     reg[TX8SW_PortDR], A       ; 5
                                        (0339) 
                                        (0340)     tst     reg[1],0                   ; 9
                                        (0341) ENDIF
                                        (0342)     mov     X, 3                       ; 4
                                        (0343) .L3:
                                        (0344)     rrc     [TX8SW_bData]              ; 7
                                        (0345)     dec     X                          ; 4
                                        (0346)     jnz     .L3                        ; 5
                                        (0347) 
                                        (0348)     nop                                ; 4
                                        (0349)     nop                                ; 4
                                        (0350) 
                                        (0351) ;--- send stop bit(s)
                                        (0352)     or      A, TX8SW_PinMask           ; 4
                                        (0353)     mov     reg[TX8SW_PortDR], A       ; 5
                                        (0354) 
                                        (0355) IF (TX8SW_SEND_2_STOP)
                                        (0356)     mov     X, 16                      ; 4
                                        (0357) ELSE
                                        (0358)     mov     X, 7                       ; 4
                                        (0359) ENDIF
                                        (0360) .L0:
                                        (0361)     dec     X                          ; 4
                                        (0362)     jnz     .L0                        ; 5
                                        (0363) ENDIF
                                        (0364) ;----------------------------------------------------
                                        (0365) 
048F: 18       POP   A                  (0366)     pop     A                          ; 5
0490: 71 10    OR    F,0x10             
                                        (0367)     M8C_SetBank1                       ; 4
0492: 60 E0    MOV   REG[0xE0],A        (0368)     mov     reg[OSC_CR0], A            ; Restore CPU Clock
0494: 70 EF    AND   F,0xEF             
0496: 71 01    OR    F,0x1              
                                        (0369) 
                                        (0370)     M8C_SetBank0
                                        (0371)     M8C_EnableGInt
                                        (0372) 
                                        (0373)     RAM_EPILOGUE RAM_USE_CLASS_4
0498: 7F       RET                      (0374)     ret
                                        (0375) 
                                        (0376) .ENDSECTION
                                        (0377) 
                                        (0378) .SECTION
                                        (0379) ;-----------------------------------------------------------------------------
                                        (0380) ;  FUNCTION NAME: TX8SW_PutSHexByte
                                        (0381) ;
                                        (0382) ;  DESCRIPTION:
                                        (0383) ;     Send a byte in Hex representation (two characters) via TX pin
                                        (0384) ;
                                        (0385) ;  ARGUMENTS:
                                        (0386) ;     A  => (BYTE) Data/char to be sent
                                        (0387) ;
                                        (0388) ;  RETURNS:
                                        (0389) ;     none.
                                        (0390) ;
                                        (0391) ;  SIDE EFFECTS:
                                        (0392) ;    The A and X registers may be modified by this or future implementations
                                        (0393) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0394) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0395) ;    responsibility to preserve their values across calls to fastcall16
                                        (0396) ;    functions.
                                        (0397) ;-----------------------------------------------------------------------------
                                        (0398)  TX8SW_PutSHexByte:
                                        (0399) _TX8SW_PutSHexByte:
0499: 08       PUSH  A                  (0400)     push   A
049A: 67       ASR   A                  (0401)     asr    A
049B: 67       ASR   A                  (0402)     asr    A
049C: 67       ASR   A                  (0403)     asr    A
049D: 67       ASR   A                  (0404)     asr    A
049E: 21 0F    AND   A,0xF              (0405)     and    A, 0x0F
04A0: FF 74    INDEX 0x0416             (0406)     index  Digits
04A2: 9F A8    CALL  TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData(0407)     call   TX8SW_PutChar
04A4: 18       POP   A                  (0408)     pop    A
04A5: 21 0F    AND   A,0xF              (0409)     and    A, 0x0F
04A7: FF 6D    INDEX 0x0416             (0410)     index  Digits
04A9: 9F A1    CALL  TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData(0411)     call   TX8SW_PutChar
04AB: 7F       RET                      (0412)     ret
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) .SECTION
                                        (0416) ;-----------------------------------------------------------------------------
                                        (0417) ;  FUNCTION NAME: TX8SW_PutSHexInt
                                        (0418) ;
                                        (0419) ;  DESCRIPTION:
                                        (0420) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0421) ;
                                        (0422) ;  ARGUMENTS:
                                        (0423) ;     Pointer to string
                                        (0424) ;     A  => LSB of Int
                                        (0425) ;     X  => MSB of Int
                                        (0426) ;
                                        (0427) ;  RETURNS:
                                        (0428) ;     none.
                                        (0429) ;
                                        (0430) ;  SIDE EFFECTS:
                                        (0431) ;    The A and X registers may be modified by this or future implementations
                                        (0432) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0433) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0434) ;    responsibility to preserve their values across calls to fastcall16
                                        (0435) ;    functions.
                                        (0436) ;
                                        (0437)  TX8SW_PutSHexInt:
                                        (0438) _TX8SW_PutSHexInt:
                                        (0439)     RAM_PROLOGUE RAM_USE_CLASS_1
04AC: 08       PUSH  A                  (0440)     push A
04AD: 5B       MOV   A,X                (0441)     mov  A, X
04AE: 9F E9    CALL  _TX8SW_PutSHexByte (0442)     call  TX8SW_PutSHexByte            ; Print MSB
04B0: 18       POP   A                  (0443)     pop   A                            ; Move LSB into position
04B1: 9F E6    CALL  _TX8SW_PutSHexByte (0444)     call  TX8SW_PutSHexByte            ; Print LSB
                                        (0445)     RAM_EPILOGUE RAM_USE_CLASS_1
04B3: 7F       RET                      (0446)     ret
                                        (0447) .ENDSECTION
                                        (0448) 
                                        (0449) .SECTION
                                        (0450) ;-----------------------------------------------------------------------------
                                        (0451) ;  FUNCTION NAME: TX8SW_CPutString
                                        (0452) ;
                                        (0453) ;  DESCRIPTION:
                                        (0454) ;     Send String out through UART TX port.
                                        (0455) ;
                                        (0456) ;
                                        (0457) ;  ARGUMENTS:
                                        (0458) ;     Pointer to String
                                        (0459) ;     A has MSB of string address
                                        (0460) ;     X has LSB of string address
                                        (0461) ;
                                        (0462) ;  RETURNS:
                                        (0463) ;     none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16
                                        (0470) ;    functions.
                                        (0471) ;-----------------------------------------------------------------------------
                                        (0472)  TX8SW_CPutString:
                                        (0473) _TX8SW_CPutString:
                                        (0474)    RAM_PROLOGUE RAM_USE_CLASS_1
04B4: 08       PUSH  A                  (0475)    push  A                             ; Store ROM pointer
04B5: 10       PUSH  X                  (0476)    push  X
04B6: 28       ROMX                     (0477)    romx                                ; Get character from ROM
04B7: A0 0B    JZ    0x04C3             (0478)    jz    .End_CPutString
04B9: 9F 91    CALL  TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData(0479)    call  TX8SW_PutChar                 ; Print character
04BB: 20       POP   X                  (0480)    pop   X
04BC: 18       POP   A                  (0481)    pop   A
04BD: 75       INC   X                  (0482)    inc   X                             ; Inc LSB of pointer
04BE: DF F5    JNC   _TX8SW_CPutString  (0483)    jnc   TX8SW_CPutString              ; Check for carry
04C0: 74       INC   A                  (0484)    inc   A                             ; Inc MSB of pointer
04C1: 8F F2    JMP   _TX8SW_CPutString  (0485)    jmp   TX8SW_CPutString
                                        (0486) 
                                        (0487) 
                                        (0488) .End_CPutString:
04C3: 38 FE    ADD   SP,0xFE            (0489)    add   SP, -2
                                        (0490)    RAM_EPILOGUE RAM_USE_CLASS_1
04C5: 7F       RET                      (0491)    ret
04C6: 70 BF    AND   F,0xBF             
04C8: 60 D3    MOV   REG[0xD3],A        
                                        (0492) .ENDSECTION
                                        (0493) 
                                        (0494) .SECTION
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;  FUNCTION NAME: TX8SW_PutString
                                        (0497) ;
                                        (0498) ;  DESCRIPTION:
                                        (0499) ;     Send String out through UART TX port.
                                        (0500) ;
                                        (0501) ;
                                        (0502) ;  ARGUMENTS:
                                        (0503) ;     Pointer to String
                                        (0504) ;     A has MSB of string address
                                        (0505) ;     X has LSB of string address
                                        (0506) ;
                                        (0507) ;  RETURNS:
                                        (0508) ;     none
                                        (0509) ;
                                        (0510) ;  SIDE EFFECTS:
                                        (0511) ;    The A and X registers may be modified by this or future implementations
                                        (0512) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0513) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0514) ;    responsibility to preserve their values across calls to fastcall16
                                        (0515) ;    functions.
                                        (0516) ;
                                        (0517) ;    Currently only the page pointer registers listed below are modified:
                                        (0518) ;          IDX_PP
                                        (0519) ;-----------------------------------------------------------------------------
                                        (0520)  TX8SW_PutString:
                                        (0521) _TX8SW_PutString:
                                        (0522)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0523)    RAM_SETPAGE_IDX A
                                        (0524) .PutStringLoop:
04CA: 52 00    MOV   A,[X+0]            (0525)    mov   A,[X]                         ; Get value pointed to by X
04CC: A0 08    JZ    0x04D5             (0526)    jz    End_PutString                 ; Check for end of string
04CE: 10       PUSH  X                  (0527)    push  X
04CF: 9F 7B    CALL  TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData(0528)    call  TX8SW_PutChar                 ; Send character to Tx port
04D1: 20       POP   X                  (0529)    pop   X
04D2: 75       INC   X                  (0530)    inc   X                             ; Advance pointer to next character
04D3: 8F F6    JMP   0x04CA             (0531)    jmp   .PutStringLoop                ; Get next character
04D5: 70 3F    AND   F,0x3F             
04D7: 71 C0    OR    F,0xC0             
                                        (0532) 
                                        (0533) End_PutString:
                                        (0534)    RAM_EPILOGUE RAM_USE_CLASS_3
04D9: 7F       RET                      (0535)    ret
                                        (0536) .ENDSECTION
                                        (0537) 
                                        (0538) 
                                        (0539) .SECTION
                                        (0540) ;-----------------------------------------------------------------------------
                                        (0541) ;  FUNCTION NAME: TX8SW_PutCRLF
                                        (0542) ;
                                        (0543) ;  DESCRIPTION:
                                        (0544) ;     Send a CR and LF
                                        (0545) ;
                                        (0546) ;  ARGUMENTS:
                                        (0547) ;     none.
                                        (0548) ;
                                        (0549) ;  RETURNS:
                                        (0550) ;     none.
                                        (0551) ;
                                        (0552) ;  SIDE EFFECTS:
                                        (0553) ;    The A and X registers may be modified by this or future implementations
                                        (0554) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0555) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0556) ;    responsibility to preserve their values across calls to fastcall16
                                        (0557) ;    functions.
                                        (0558) ;-----------------------------------------------------------------------------
                                        (0559) _TX8SW_PutCRLF:
                                        (0560)  TX8SW_PutCRLF:
04DA: 50 0D    MOV   A,0xD              (0561)     mov    A, 0x0D                        ; Send CR
04DC: 9F 6E    CALL  TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData(0562)     call   TX8SW_PutChar
04DE: 50 0A    MOV   A,0xA              (0563)     mov    A, 0x0A                        ; Send LF
04E0: 9F 6A    CALL  TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData(0564)     call   TX8SW_PutChar
04E2: 7F       RET                      (0565)     ret
04E3: 70 BF    AND   F,0xBF             
04E5: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0566) .ENDSECTION
                                        (0567) 
                                        (0568) .SECTION
                                        (0569) ;-----------------------------------------------------------------------------
                                        (0570) ;  FUNCTION NAME: TX8SW_Write
                                        (0571) ;
                                        (0572) ;  DESCRIPTION:
                                        (0573) ;     Send String of length X to serial port
                                        (0574) ;
                                        (0575) ;
                                        (0576) ;  ARGUMENTS:
                                        (0577) ;     Pointer to String
                                        (0578) ;     [SP-5] Count of characters to send
                                        (0579) ;     [SP-4] has MSB of string address
                                        (0580) ;     [SP-3] has LSB of string address
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to preserve their values across calls to fastcall16
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) ;    Currently only the page pointer registers listed below are modified:
                                        (0593) ;          IDX_PP
                                        (0594) ;-----------------------------------------------------------------------------
                                        (0595) CNT_LEN:    equ -5                         ; Length of data to send
                                        (0596) STR_MSB:    equ -4                         ; MSB pointer of string
                                        (0597) STR_LSB:    equ -3                         ; LSB pointer of string
                                        (0598) 
                                        (0599)  TX8SW_Write:
                                        (0600) _TX8SW_Write:
                                        (0601)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0602)    RAM_SETPAGE_IDX2STK
04E8: 4F       MOV   X,SP               (0603)    mov   X, SP
                                        (0604) 
                                        (0605) .NextByteLoop:
04E9: 52 FB    MOV   A,[X-5]            (0606)    mov   A,[X+CNT_LEN]                     ; Get length of string to send
04EB: A0 15    JZ    0x0501             (0607)    jz    .End_Write
04ED: 7B FB    DEC   [X-5]              (0608)    dec   [X+CNT_LEN]                       ; Decrement counter
                                        (0609) 
                                        (0610)    IF SYSTEM_LARGE_MEMORY_MODEL
04EF: 52 FC    MOV   A,[X-4]            (0611)    mov   A, [X+STR_MSB]                    ; Load pointer to char to send
                                        (0612)    ENDIF
                                        (0613) 
04F1: 59 FD    MOV   X,[X-3]            (0614)    mov   X, [X+STR_LSB]                    ; Get character to send
04F3: 60 D3    MOV   REG[0xD3],A        
                                        (0615)    RAM_SETPAGE_IDX A                       ; switch index pages
04F5: 52 00    MOV   A,[X+0]            (0616)    mov   A, [X]
04F7: 9F 53    CALL  TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData(0617)    call    TX8SW_PutChar               ; Send character to UART
04F9: 4F       MOV   X,SP               (0618)    mov   X, SP
04FA: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0619)    RAM_SETPAGE_IDX2STK
04FD: 77 FD    INC   [X-3]              (0620)    inc   [X+STR_LSB]
04FF: 8F E9    JMP   0x04E9             (0621)    jmp   .NextByteLoop
0501: 70 3F    AND   F,0x3F             
0503: 71 C0    OR    F,0xC0             
                                        (0622) 
                                        (0623) .End_Write:
                                        (0624)    RAM_EPILOGUE RAM_USE_CLASS_3
0505: 7F       RET                      (0625)    ret
                                        (0626) 
                                        (0627) .ENDSECTION
                                        (0628) .SECTION
                                        (0629) ;-----------------------------------------------------------------------------
                                        (0630) ;  FUNCTION NAME: TX8SW_CWrite
                                        (0631) ;
                                        (0632) ;  DESCRIPTION:
                                        (0633) ;     Send String of length X to serial port
                                        (0634) ;
                                        (0635) ;  ARGUMENTS:
                                        (0636) ;     Pointer to String
                                        (0637) ;     [SP-6] MSB of Count of character to send
                                        (0638) ;     [SP-5] LSB of Count of character to send
                                        (0639) ;     [SP-4] has MSB of string address
                                        (0640) ;     [SP-3] has LSB of string address
                                        (0641) ;
                                        (0642) ;  RETURNS:
                                        (0643) ;     none
                                        (0644) ;
                                        (0645) ;  SIDE EFFECTS:
                                        (0646) ;    The A and X registers may be modified by this or future implementations
                                        (0647) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0648) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0649) ;    responsibility to preserve their values across calls to fastcall16
                                        (0650) ;    functions.
                                        (0651) ;-----------------------------------------------------------------------------
                                        (0652) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0653) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0654) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0655) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0656) 
                                        (0657)  TX8SW_CWrite:
                                        (0658) _TX8SW_CWrite:
                                        (0659)    RAM_PROLOGUE RAM_USE_CLASS_2
0506: 4F       MOV   X,SP               (0660)    mov   X,SP
                                        (0661) 
                                        (0662) .CW_Loop:
                                        (0663)                                              ; Check for zero counter
0507: 3D FA 00 CMP   [X-6],0x0          (0664)    cmp   [X+CLEN_MSB],0x00
050A: B0 06    JNZ   0x0511             (0665)    jnz   .CW_WRITEIT
050C: 3D FB 00 CMP   [X-5],0x0          (0666)    cmp   [X+CLEN_LSB],0x00
050F: A0 18    JZ    0x0528             (0667)    jz    .End_CWrite                         ; Leave if done
                                        (0668) 
                                        (0669) .CW_WRITEIT:                                 ; Save pointers
0511: 10       PUSH  X                  (0670)    push  X
0512: 52 FC    MOV   A,[X-4]            (0671)    mov   A,[X+CSTR_MSB]
0514: 59 FD    MOV   X,[X-3]            (0672)    mov   X,[X+CSTR_LSB]
0516: 28       ROMX                     (0673)    romx                                     ; Get character from ROM
0517: 9F 33    CALL  TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData(0674)    call  TX8SW_PutChar
0519: 20       POP   X                  (0675)    pop   X
                                        (0676) 
051A: 07 FD 01 ADD   [X-3],0x1          (0677)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
051D: 0F FC 00 ADC   [X-4],0x0          (0678)    adc   [X+CSTR_MSB],0
                                        (0679) 
                                        (0680)                                             ; Dec the counter
0520: 17 FB 01 SUB   [X-5],0x1          (0681)    sub   [X+CLEN_LSB],0x01
0523: 1F FA 00 SBB   [X-6],0x0          (0682)    sbb   [X+CLEN_MSB],0x00
                                        (0683) 
0526: 8F E0    JMP   0x0507             (0684)    jmp   .CW_Loop
                                        (0685) 
                                        (0686) .End_CWrite:
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0528: 7F       RET                      (0688)    ret
FILE: lib\timer16int.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16INT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2011/12/1 at 17:23:24
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer16.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer16_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer16_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer16_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
0529: 7D 07 FE LJMP  _Timer16           (0068) 	ljmp _Timer16
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ; Insert your custom assembly code above this banner
                                        (0071)    ;---------------------------------------------------
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert a lcall to a C function below this banner
                                        (0075)    ; and un-comment the lines between these banners
                                        (0076)    ;---------------------------------------------------
                                        (0077)    
                                        (0078)    ;PRESERVE_CPU_CONTEXT
                                        (0079)    ;lcall _My_C_Function
                                        (0080)    ;RESTORE_CPU_CONTEXT
                                        (0081)    
                                        (0082)    ;---------------------------------------------------
                                        (0083)    ; Insert a lcall to a C function above this banner
                                        (0084)    ; and un-comment the lines between these banners
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0087) 
052C: 7E       RETI                     (0088)    reti
                                        (0089) 
                                        (0090) 
                                        (0091) ; end of file Timer16INT.asm
FILE: lib\timer16.asm                   (0001) ;;*****************************************************************************
052D: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16.asm
                                        (0004) ;;   Version: 2.6, Updated on 2011/12/1 at 17:23:24
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer16.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer16_EnableInt
                                        (0030) export _Timer16_EnableInt
                                        (0031) export  Timer16_DisableInt
                                        (0032) export _Timer16_DisableInt
                                        (0033) export  Timer16_Start
                                        (0034) export _Timer16_Start
                                        (0035) export  Timer16_Stop
                                        (0036) export _Timer16_Stop
                                        (0037) export  Timer16_WritePeriod
                                        (0038) export _Timer16_WritePeriod
                                        (0039) export  Timer16_WriteCompareValue
                                        (0040) export _Timer16_WriteCompareValue
                                        (0041) export  Timer16_wReadCompareValue
                                        (0042) export _Timer16_wReadCompareValue
                                        (0043) export  Timer16_wReadTimer
                                        (0044) export _Timer16_wReadTimer
                                        (0045) export  Timer16_wReadTimerSaveCV
                                        (0046) export _Timer16_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer16_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer16_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer16_ReadTimer         ; deprecated
                                        (0053) export _wTimer16_ReadTimer         ; deprecated
                                        (0054) export  wTimer16_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer16_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer16_ReadCounter       ; obsolete
                                        (0058) export _wTimer16_ReadCounter       ; obsolete
                                        (0059) export  wTimer16_CaptureCounter    ; obsolete
                                        (0060) export _wTimer16_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA can_bus_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer16_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer16_EnableInt:
                                        (0098) _Timer16_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer16_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0530: 7F       RET                      (0102)    ret
0531: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer16_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer16_DisableInt:
                                        (0126) _Timer16_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer16_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0534: 7F       RET                      (0130)    ret
0535: 43 23 01 OR    REG[0x23],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer16_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer16_Start:
                                        (0154) _Timer16_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer16_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0538: 7F       RET                      (0158)    ret
0539: 41 23 FE AND   REG[0x23],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer16_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer16_Stop:
                                        (0182) _Timer16_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer16_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
053C: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer16_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer16_WritePeriod:
                                        (0211) _Timer16_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
053D: 60 21    MOV   REG[0x21],A        (0213)    mov   reg[Timer16_PERIOD_LSB_REG], A
053F: 5B       MOV   A,X                (0214)    mov   A, X
0540: 60 25    MOV   REG[0x25],A        (0215)    mov   reg[Timer16_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
0542: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer16_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer16_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer16_WriteCompareValue:
                                        (0243) _Timer16_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
0543: 60 22    MOV   REG[0x22],A        (0245)    mov   reg[Timer16_COMPARE_LSB_REG], A
0545: 5B       MOV   A,X                (0246)    mov   A, X
0546: 60 26    MOV   REG[0x26],A        (0247)    mov   reg[Timer16_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
0548: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer16_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer16_wReadCompareValue:
                                        (0272) _Timer16_wReadCompareValue:
                                        (0273)  wTimer16_ReadCompareValue:                      ; this name deprecated
                                        (0274) _wTimer16_ReadCompareValue:                      ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
0549: 5D 26    MOV   A,REG[0x26]        (0276)    mov   A, reg[Timer16_COMPARE_MSB_REG]
054B: 5C       MOV   X,A                (0277)    mov   X, A
054C: 5D 22    MOV   A,REG[0x22]        (0278)    mov   A, reg[Timer16_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
054E: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer16_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer16_wReadTimerSaveCV:
                                        (0321) _Timer16_wReadTimerSaveCV:
                                        (0322)  wTimer16_ReadTimerSaveCV:                       ; this name deprecated
                                        (0323) _wTimer16_ReadTimerSaveCV:                       ; this name deprecated
                                        (0324)  wTimer16_ReadCounter:                           ; this name deprecated
                                        (0325) _wTimer16_ReadCounter:                           ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
054F: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
0550: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
0552: 5D 23    MOV   A,REG[0x23]        (0334)    mov   A, reg[Timer16_CONTROL_LSB_REG]         ; save the Control register
0554: 08       PUSH  A                  (0335)    push  A
0555: 5D 22    MOV   A,REG[0x22]        (0336)    mov   A, reg[Timer16_COMPARE_LSB_REG]         ; save the Compare register
0557: 08       PUSH  A                  (0337)    push  A
0558: 5D 26    MOV   A,REG[0x26]        (0338)    mov   A, reg[Timer16_COMPARE_MSB_REG]
055A: 08       PUSH  A                  (0339)    push  A
055B: 5D 20    MOV   A,REG[0x20]        (0340)    mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
055D: 5D 26    MOV   A,REG[0x26]        (0342)    mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Now grab DR2 (DR0) and save
055F: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
0561: 5D 22    MOV   A,REG[0x22]        (0344)    mov   A, reg[Timer16_COMPARE_LSB_REG]
0563: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
0565: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
0567: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
056A: A0 03    JZ    0x056E             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
056C: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
056E: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
0570: 70 FE    AND   F,0xFE             
0572: 41 23 FE AND   REG[0x23],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer16_Stop_M                                ; Disable (stop) the timer
0575: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
0576: 60 26    MOV   REG[0x26],A        (0355)    mov   reg[Timer16_COMPARE_MSB_REG], A
0578: 18       POP   A                  (0356)    pop   A
0579: 60 22    MOV   REG[0x22],A        (0357)    mov   reg[Timer16_COMPARE_LSB_REG], A
057B: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
057C: 60 23    MOV   REG[0x23],A        (0359)    mov   reg[Timer16_CONTROL_LSB_REG], A
057E: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
057F: 20       POP   X                  (0361)    pop   X
0580: 70 3F    AND   F,0x3F             
0582: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
0584: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer16_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer16_wReadTimer:
                                        (0397) _Timer16_wReadTimer:
                                        (0398)  wTimer16_ReadTimer:                             ; this name deprecated
                                        (0399) _wTimer16_ReadTimer:                             ; this name deprecated
                                        (0400)  wTimer16_CaptureCounter:                        ; this name deprecated
                                        (0401) _wTimer16_CaptureCounter:                        ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
0585: 5D 20    MOV   A,REG[0x20]        (0404)    mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
0587: 5D 26    MOV   A,REG[0x26]        (0407)    mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Return DR2 (actually DR0)
0589: 5C       MOV   X,A                (0408)    mov   X, A
058A: 5D 22    MOV   A,REG[0x22]        (0409)    mov   A, reg[Timer16_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
058C: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer16.asm
FILE: lib\spimint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIMINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2011/12/1 at 17:23:20
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:
                                        (0008) ;;    Interrupt handler routine for SPIM user module instance: SPIM.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "SPIM.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) export  _SPIM_ISR
                                        (0023) 
                                        (0024) 
                                        (0025) AREA InterruptRAM (RAM,REL,CON)
                                        (0026) 
                                        (0027) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0028) ;---------------------------------------------------
                                        (0029) ; Insert your custom declarations below this banner
                                        (0030) ;---------------------------------------------------
                                        (0031) 
                                        (0032) ;------------------------
                                        (0033) ; Includes
                                        (0034) ;------------------------
                                        (0035) 
                                        (0036) 	
                                        (0037) ;------------------------
                                        (0038) ;  Constant Definitions
                                        (0039) ;------------------------
                                        (0040) 
                                        (0041) 
                                        (0042) ;------------------------
                                        (0043) ; Variable Allocation
                                        (0044) ;------------------------
                                        (0045) 
                                        (0046) 
                                        (0047) ;---------------------------------------------------
                                        (0048) ; Insert your custom declarations above this banner
                                        (0049) ;---------------------------------------------------
                                        (0050) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0051) 
                                        (0052) 
                                        (0053) AREA UserModules (ROM, REL)
                                        (0054) 
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;  FUNCTION NAME: _SPIM_ISR
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0059) ;
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;
                                        (0062) 
                                        (0063) _SPIM_ISR:
                                        (0064) 
                                        (0065)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0066)    ;---------------------------------------------------
                                        (0067)    ; Insert your custom assembly code below this banner
                                        (0068)    ;---------------------------------------------------
                                        (0069)    ;   NOTE: interrupt service routines must preserve
                                        (0070)    ;   the values of the A and X CPU registers.
                                        (0071)    
                                        (0072)    ;---------------------------------------------------
                                        (0073)    ; Insert your custom assembly code above this banner
                                        (0074)    ;---------------------------------------------------
                                        (0075)    
                                        (0076)    ;---------------------------------------------------
                                        (0077)    ; Insert a lcall to a C function below this banner
                                        (0078)    ; and un-comment the lines between these banners
                                        (0079)    ;---------------------------------------------------
                                        (0080)    
                                        (0081)    ;PRESERVE_CPU_CONTEXT
                                        (0082)    ;lcall _My_C_Function
                                        (0083)    ;RESTORE_CPU_CONTEXT
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
058D: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file SPIMINT.asm
FILE: lib\spim.asm                      (0001) ;;*****************************************************************************
058E: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIM.asm
                                        (0004) ;;   Version: 2.6, Updated on 2011/12/1 at 17:23:20
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SPIM User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SPIM.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export   SPIM_EnableInt
                                        (0030) export  _SPIM_EnableInt
                                        (0031) export   SPIM_DisableInt
                                        (0032) export  _SPIM_DisableInt
                                        (0033) export   SPIM_Start
                                        (0034) export  _SPIM_Start
                                        (0035) export   SPIM_Stop
                                        (0036) export  _SPIM_Stop
                                        (0037) export   SPIM_SendTxData
                                        (0038) export  _SPIM_SendTxData
                                        (0039) export   SPIM_bReadRxData
                                        (0040) export  _SPIM_bReadRxData
                                        (0041) export   SPIM_bReadStatus
                                        (0042) export  _SPIM_bReadStatus
                                        (0043) 
                                        (0044) // These globals will be removed in a future release
                                        (0045) // Do not use
                                        (0046) export   bSPIM_ReadRxData
                                        (0047) export  _bSPIM_ReadRxData
                                        (0048) export   bSPIM_ReadStatus
                                        (0049) export  _bSPIM_ReadStatus
                                        (0050) 
                                        (0051) ;-----------------------------------------------
                                        (0052) ;  Constant Definitions
                                        (0053) ;-----------------------------------------------
                                        (0054) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0055) 
                                        (0056) 
                                        (0057) area UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: SPIM_EnableInt
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Enables the SPIM interrupt by setting the interrupt enable mask
                                        (0065) ;     bit associated with this User Module.
                                        (0066) ;
                                        (0067) ;     NOTE:  Remember to enable the global interrupt by calling the
                                        (0068) ;           M8C global macro: M8C_EnableGInt
                                        (0069) ;
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:  none
                                        (0073) ;
                                        (0074) ;  RETURNS:  none
                                        (0075) ;
                                        (0076) ;  SIDE EFFECTS: 
                                        (0077) ;    The A and X registers may be modified by this or future implementations
                                        (0078) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0079) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0080) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0081) ;    functions.
                                        (0082) ;
                                        (0083) ;  THEORY of OPERATION or PROCEDURE:
                                        (0084) ;     Sets the specific user module interrupt enable mask bit.
                                        (0085) ;
                                        (0086)  SPIM_EnableInt:
                                        (0087) _SPIM_EnableInt:
                                        (0088)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0089)    M8C_EnableIntMask SPIM_INT_REG, SPIM_bINT_MASK
                                        (0090)    RAM_EPILOGUE RAM_USE_CLASS_1
0591: 7F       RET                      (0091)    ret
0592: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0092) 
                                        (0093) .ENDSECTION
                                        (0094) 
                                        (0095) .SECTION
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;  FUNCTION NAME: SPIM_DisableInt
                                        (0098) ;
                                        (0099) ;  DESCRIPTION:
                                        (0100) ;     Disables this SPIM's interrupt by clearing the interrupt enable mask bit
                                        (0101) ;     associated with this User Module.
                                        (0102) ;
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;
                                        (0105) ;  ARGUMENTS:  none
                                        (0106) ;
                                        (0107) ;  RETURNS:  none
                                        (0108) ;
                                        (0109) ;  SIDE EFFECTS: 
                                        (0110) ;    The A and X registers may be modified by this or future implementations
                                        (0111) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0112) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0113) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0114) ;    functions.
                                        (0115) ;
                                        (0116) ;  THEORY of OPERATION or PROCEDURE:
                                        (0117) ;     Clears the specific user module interrupt enable mask bit.
                                        (0118) ;
                                        (0119)  SPIM_DisableInt:
                                        (0120) _SPIM_DisableInt:
                                        (0121)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0122)    M8C_DisableIntMask SPIM_INT_REG, SPIM_bINT_MASK
                                        (0123)    RAM_EPILOGUE RAM_USE_CLASS_1
0595: 7F       RET                      (0124)    ret
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: SPIM_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit, SPI mode, and LSB/MSB first configuration of the SPIM
                                        (0134) ;     user module.
                                        (0135) ;
                                        (0136) ;     Transmission will begin transmitting when a byte is written into the TX buffer
                                        (0137) ;     using the SPIM_SendTxData function.
                                        (0138) ;
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140) ;
                                        (0141) ;  ARGUMENTS:
                                        (0142) ;     BYTE bConfiguration - Consists of SPI Mode and LSB/MSB first bit.
                                        (0143) ;           Use defined masks - masks can be OR'd together.
                                        (0144) ;     PASSED in Accumulator.
                                        (0145) ;
                                        (0146) ;  RETURNS:  none
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS: 
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155) ;  THEORY of OPERATION or PROCEDURE:
                                        (0156) ;     1) Set all Slave Select outputs high
                                        (0157) ;     2) Set the specified SPI configuration bits in the Control register.
                                        (0158) ;
                                        (0159)  SPIM_Start:
                                        (0160) _SPIM_Start:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    ; setup the SPIM configuration setting
0596: 29 01    OR    A,0x1              (0163)    or    A, bfCONTROL_REG_START_BIT
0598: 60 2B    MOV   REG[0x2B],A        (0164)    mov   REG[SPIM_CONTROL_REG], A
                                        (0165)    RAM_EPILOGUE RAM_USE_CLASS_1
059A: 7F       RET                      (0166)    ret
                                        (0167) 
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) .SECTION
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;  FUNCTION NAME: SPIM_Stop
                                        (0173) ;
                                        (0174) ;  DESCRIPTION:
                                        (0175) ;     Disables SPIM operation.
                                        (0176) ;
                                        (0177) ;-----------------------------------------------------------------------------
                                        (0178) ;
                                        (0179) ;  ARGUMENTS:  none
                                        (0180) ;
                                        (0181) ;  RETURNS:  none
                                        (0182) ;
                                        (0183) ;  SIDE EFFECTS: 
                                        (0184) ;    The A and X registers may be modified by this or future implementations
                                        (0185) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0186) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0187) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0188) ;    functions.
                                        (0189) ;
                                        (0190) ;  THEORY of OPERATION or PROCEDURE:
                                        (0191) ;     Clear the start bit in the Control register.
                                        (0192) ;
                                        (0193)  SPIM_Stop:
                                        (0194) _SPIM_Stop:
                                        (0195)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0196)    ; clear the SPIM stop bits
059B: 41 2B FE AND   REG[0x2B],0xFE     (0197)    and   REG[SPIM_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0198)    RAM_EPILOGUE RAM_USE_CLASS_1
059E: 7F       RET                      (0199)    ret
                                        (0200) 
                                        (0201) .ENDSECTION
                                        (0202) 
                                        (0203) .SECTION
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: SPIM_SendTxData
                                        (0206) ;
                                        (0207) ;  DESCRIPTION:
                                        (0208) ;     Initiates an SPI data transfer.
                                        (0209) ;
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:
                                        (0213) ;     BYTE  bTxData - data to transmit.
                                        (0214) ;        Passed in Accumulator.
                                        (0215) ;
                                        (0216) ;  RETURNS:  none
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS: 
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;
                                        (0225) ;  THEORY of OPERATION or PROCEDURE:
                                        (0226) ;     Writes data to the TX buffer register.
                                        (0227) ;
                                        (0228)  SPIM_SendTxData:
                                        (0229) _SPIM_SendTxData:
                                        (0230)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231)    ; Transmit the data!
059F: 60 29    MOV   REG[0x29],A        (0232)    mov REG[SPIM_TX_BUFFER_REG], A
                                        (0233)    RAM_EPILOGUE RAM_USE_CLASS_1
05A1: 7F       RET                      (0234)    ret
                                        (0235) 
                                        (0236) .ENDSECTION
                                        (0237) 
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: SPIM_bReadRxData
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0244) ;     sure data is valid.
                                        (0245) ;
                                        (0246) ;-----------------------------------------------------------------------------
                                        (0247) ;
                                        (0248) ;  ARGUMENTS:  none
                                        (0249) ;
                                        (0250) ;  RETURNS:
                                        (0251) ;     bRxData - returned in A.
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS: 
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260) ;  THEORY of OPERATION or PROCEDURE:
                                        (0261) ;
                                        (0262)  SPIM_bReadRxData:
                                        (0263) _SPIM_bReadRxData:
                                        (0264)  bSPIM_ReadRxData:
                                        (0265) _bSPIM_ReadRxData:
                                        (0266)    RAM_PROLOGUE RAM_USE_CLASS_1
05A2: 5D 2A    MOV   A,REG[0x2A]        (0267)    mov A, REG[SPIM_RX_BUFFER_REG]
                                        (0268)    RAM_EPILOGUE RAM_USE_CLASS_1   
05A4: 7F       RET                      (0269)    ret
                                        (0270) 
                                        (0271) 
                                        (0272) .ENDSECTION
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME: SPIM_ReadStatus
                                        (0277) ;
                                        (0278) ;  DESCRIPTION:
                                        (0279) ;     Reads the SPIM Status bits in the Control/Status register.
                                        (0280) ;
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;
                                        (0283) ;  ARGUMENTS:  none
                                        (0284) ;
                                        (0285) ;  RETURNS:
                                        (0286) ;     BYTE  bStatus - transmit status data.  Use the defined bit masks.
                                        (0287) ;        Returned in Accumulator.
                                        (0288) ;
                                        (0289) ;  SIDE EFFECTS: 
                                        (0290) ;    The A and X registers may be modified by this or future implementations
                                        (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0294) ;    functions.
                                        (0295) ;
                                        (0296) ;  THEORY of OPERATION or PROCEDURE:
                                        (0297) ;     Read the status and control register.
                                        (0298) ;
                                        (0299)  SPIM_bReadStatus:
                                        (0300) _SPIM_bReadStatus:
                                        (0301)  bSPIM_ReadStatus:
                                        (0302) _bSPIM_ReadStatus:
                                        (0303)    RAM_PROLOGUE RAM_USE_CLASS_1
05A5: 5D 2B    MOV   A,REG[0x2B]        (0304)    mov A,  REG[SPIM_CONTROL_REG]
                                        (0305)    RAM_EPILOGUE RAM_USE_CLASS_1   
05A7: 7F       RET                      (0306)    ret
                                        (0307) 
                                        (0308) .ENDSECTION
                                        (0309) 
                                        (0310) ; End of File SPIM.asm
FILE: H:\Hobby\PROGRA~1\PSOCPR~1\CAN_Bus\CAN_Bus\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        												// Part specific constants and macros
(0006) #include "PSoCAPI.h"    												// PSoC API definitions for all User Modules
(0007) #pragma interrupt_handler Timer16
(0008) 
(0009) // Unterprogramme
(0010) void Read_Register(const char *Adresse);
(0011) void Write_Register(const char *Daten, const char * Adresse);
(0012) void MCP2515_Init(void);
(0013) void Bitmodify(void);
(0014) 
(0015) char Canin = 0x00;
(0016) 
(0017) // Befehle
(0018) const char SPI_read = 0x03;
(0019) const char SPI_write = 0x02;
(0020) const char SPI_reset = 0xC0;
(0021) const char SPI_rts0 = 0x81;
(0022) const char SPI_bitmodify = 0x05;
(0023) 
(0024) // Registeradressen
(0025) const char Cnf1 = 0x2A;
(0026) const char Cnf2 = 0x29;
(0027) const char Cnf3 = 0x28;
(0028) const char Canctrl = 0x0F;
(0029) const char Caninte = 0x2B;
(0030) const char Txb0ctrl = 0x30;                                       		// Transmit Buffer 0 Control Register
(0031) const char Txb0sidh = 0x31;                                       		// Transmit Buffer 0 Std Identifier High
(0032) const char Txb0sidl = 0x32;                                       		// Transmit Buffer 0 Std Identifier Low
(0033) const char Txb0eid8 = 0x33;                                       		// Transmit Buffer 0 Ext Identifier High
(0034) const char Txb0eid0 = 0x34;                                       		// Transmit Buffer 0 Ext Identifier Low
(0035) const char Txb0dlc = 0x35;                                        		// Transmit Buffer 0 Data Length Code
(0036) const char Txb0d0 = 0x36;                                        		// Transmit Buffer 0 Data Byte 0
(0037) const char Txb0d1 = 0x37;                                         		// Transmit Buffer 0 Data Byte 1
(0038) const char Txb0d2 = 0x38;                                         		// Transmit Buffer 0 Data Byte 2
(0039) const char Txb0d3 = 0x39;                                         		// Transmit Buffer 0 Data Byte 3
(0040) const char Txb0d4 = 0x3A;                                         		// Transmit Buffer 0 Data Byte 4
(0041) const char Txb0d5 = 0x3B;                                         		// Transmit Buffer 0 Data Byte 5
(0042) const char Txb0d6 = 0x3C;                                         		// Transmit Buffer 0 Data Byte 6
(0043) const char Txb0d7 = 0x3D;                                         		// Transmit Buffer 0 Data Byte 7
(0044) const char Rxm0sidh = 0x20;                                				// Receive Buffer 0 Std Identifier High
(0045) const char Rxm0sidl = 0x21;                                				// Receive Buffer 0 Std Identifier Low
(0046) const char Rxm0eid8 = 0x22;                                				// Receive Buffer 0 Ext Identifier High
(0047) const char Rxm0eid0 = 0x23;                                				// Receive Buffer 0 Ext Identifier low
(0048) const char Rxm1sidh = 0x24;                                				// Receive Buffer 1 Std Identifier High
(0049) const char Rxm1sidl = 0x25;                                				// Receive Buffer 1 Std Identifier Low
(0050) const char Rxm1eid8 = 0x26;                                				// Receive Buffer 1 Ext Identifier High
(0051) const char Rxm1eid0 = 0x27;                                				// Receive Buffer 1 Ext Identifier low
(0052) const char Rxb0ctrl = 0x60;
(0053) const char Rxb1ctrl = 0x70;
(0054) 
(0055) const char Settings_Canctrl = 0x88;
(0056) 
(0057) void main(void)
(0058) {
(0059) 	M8C_EnableGInt; 													// Global Interrupts erlauben
__UserModules_end|__text_start|_main|_main:
    05A8: 71 01    OR    F,0x1
(0060) 	TX8SW_Start();
    05AA: 10       PUSH  X
    05AB: 7C 04 26 LCALL _TX8SW_Start
(0061) 	SPIM_Start(SPIM_SPIM_MODE_0 | SPIM_SPIM_MSB_FIRST);
    05AE: 50 00    MOV   A,0x0
    05B0: 7C 05 96 LCALL _SPIM_Start
(0062) 	Timer16_EnableInt();  
    05B3: 7C 05 2D LCALL _Timer16_EnableInt
(0063)     Timer16_Start(); 
    05B6: 7C 05 35 LCALL _Timer16_Start
    05B9: 20       POP   X
(0064) 		
(0065) 	PRT1DR |= 0x02;     												// P0[1] setzen
    05BA: 43 04 02 OR    REG[0x4],0x2
(0066) 	//MCP2515_Init();
(0067) 	
(0068) 	Write_Register(&Canctrl, &Settings_Canctrl);
    05BD: 50 01    MOV   A,0x1
    05BF: 08       PUSH  A
    05C0: 50 C2    MOV   A,0xC2
    05C2: 08       PUSH  A
    05C3: 50 01    MOV   A,0x1
    05C5: 08       PUSH  A
    05C6: 50 A8    MOV   A,0xA8
    05C8: 08       PUSH  A
    05C9: 91 07    CALL  _Write_Register
(0069) 	Read_Register(&Canctrl);
    05CB: 50 01    MOV   A,0x1
    05CD: 08       PUSH  A
    05CE: 50 A8    MOV   A,0xA8
    05D0: 08       PUSH  A
    05D1: 90 2E    CALL  _Read_Register
    05D3: 38 FA    ADD   SP,0xFA
(0070) 	
(0071) 	  	TX8SW_CPutString("Registerinhalte:");
    05D5: 10       PUSH  X
    05D6: 50 02    MOV   A,0x2
    05D8: 08       PUSH  A
    05D9: 50 01    MOV   A,0x1
    05DB: 5C       MOV   X,A
    05DC: 18       POP   A
    05DD: 7C 04 B4 LCALL _TX8SW_CPutString
(0072) 		TX8SW_SendData(0x0D);
    05E0: 50 0D    MOV   A,0xD
    05E2: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0073) 		TX8SW_SendData(0x0A);
    05E5: 50 0A    MOV   A,0xA
    05E7: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0074) 		SPIM_SendTxData(Canin);
    05EA: 62 D0 00 MOV   REG[0xD0],0x0
    05ED: 51 05    MOV   A,[Canin]
    05EF: 7C 05 9F LCALL _SPIM_SendTxData
(0075) 		TX8SW_SendData(0x0D);
    05F2: 50 0D    MOV   A,0xD
    05F4: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0076) 		TX8SW_SendData(0x0A);
    05F7: 50 0A    MOV   A,0xA
    05F9: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
    05FC: 20       POP   X
(0077) 	
(0078) 	while(1)
(0079) 	{
(0080) 	}
    05FD: 8F FF    JMP   0x05FD
    05FF: 8F FF    JMP   0x05FF
(0081) }
(0082) 
(0083) void Read_Register(const char *Adresse)
(0084) {
_Read_Register:
  Adresse              --> X-5
    0601: 10       PUSH  X
    0602: 4F       MOV   X,SP
(0085) 	PRT0DR &= ~0x02;
    0603: 41 00 FD AND   REG[0x0],0xFD
(0086) 	
(0087) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0606: 10       PUSH  X
    0607: 7C 05 A5 LCALL _SPIM_bReadStatus|_bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus
    060A: 20       POP   X
    060B: 62 D0 00 MOV   REG[0xD0],0x0
    060E: 53 04    MOV   [__r0],A
    0610: 47 04 10 TST   [__r0],0x10
    0613: AF F2    JZ    0x0606
(0088) 	SPIM_SendTxData(SPI_read);
    0615: 50 01    MOV   A,0x1
    0617: 10       PUSH  X
    0618: 57 A0    MOV   X,0xA0
    061A: 28       ROMX  
    061B: 20       POP   X
    061C: 10       PUSH  X
    061D: 7C 05 9F LCALL _SPIM_SendTxData
    0620: 20       POP   X
(0089) 		
(0090) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0621: 10       PUSH  X
    0622: 7C 05 A5 LCALL _SPIM_bReadStatus|_bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus
    0625: 20       POP   X
    0626: 62 D0 00 MOV   REG[0xD0],0x0
    0629: 53 04    MOV   [__r0],A
    062B: 47 04 10 TST   [__r0],0x10
    062E: AF F2    JZ    0x0621
(0091) 	SPIM_SendTxData(*Adresse);
    0630: 52 FC    MOV   A,[X-4]
    0632: 53 03    MOV   [__r1],A
    0634: 52 FB    MOV   A,[X-5]
    0636: 10       PUSH  X
    0637: 58 03    MOV   X,[__r1]
    0639: 28       ROMX  
    063A: 20       POP   X
    063B: 10       PUSH  X
    063C: 7C 05 9F LCALL _SPIM_SendTxData
    063F: 20       POP   X
(0092) 		
(0093) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_RX_BUFFER_FULL));
    0640: 10       PUSH  X
    0641: 7C 05 A5 LCALL _SPIM_bReadStatus|_bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus
    0644: 20       POP   X
    0645: 62 D0 00 MOV   REG[0xD0],0x0
    0648: 53 04    MOV   [__r0],A
    064A: 47 04 08 TST   [__r0],0x8
    064D: AF F2    JZ    0x0640
(0094) 	Canin = SPIM_bReadRxData();
    064F: 10       PUSH  X
    0650: 7C 05 A2 LCALL _SPIM_bReadRxData|_bSPIM_ReadRxData|bSPIM_ReadRxData|SPIM_bReadRxData
    0653: 20       POP   X
    0654: 62 D0 00 MOV   REG[0xD0],0x0
    0657: 53 05    MOV   [Canin],A
(0095) 		
(0096) 		TX8SW_CPutString("Lesen:");	
    0659: 10       PUSH  X
    065A: 50 01    MOV   A,0x1
    065C: 08       PUSH  A
    065D: 50 FA    MOV   A,0xFA
    065F: 5C       MOV   X,A
    0660: 18       POP   A
    0661: 7C 04 B4 LCALL _TX8SW_CPutString
(0097) 		TX8SW_SendData(0x0D);
    0664: 50 0D    MOV   A,0xD
    0666: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0098) 		TX8SW_SendData(0x0A);
    0669: 50 0A    MOV   A,0xA
    066B: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0099) 		TX8SW_CPutString("SPI Read");
    066E: 50 01    MOV   A,0x1
    0670: 08       PUSH  A
    0671: 50 F1    MOV   A,0xF1
    0673: 5C       MOV   X,A
    0674: 18       POP   A
    0675: 7C 04 B4 LCALL _TX8SW_CPutString
(0100) 		TX8SW_SendData(0x0D);
    0678: 50 0D    MOV   A,0xD
    067A: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0101) 		TX8SW_SendData(0x0A);
    067D: 50 0A    MOV   A,0xA
    067F: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
    0682: 20       POP   X
(0102) 		TX8SW_SendData(SPI_read);
    0683: 62 D0 00 MOV   REG[0xD0],0x0
    0686: 50 01    MOV   A,0x1
    0688: 10       PUSH  X
    0689: 57 A0    MOV   X,0xA0
    068B: 28       ROMX  
    068C: 20       POP   X
    068D: 10       PUSH  X
    068E: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0103) 		TX8SW_SendData(0x0D);
    0691: 50 0D    MOV   A,0xD
    0693: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0104) 		TX8SW_SendData(0x0A);
    0696: 50 0A    MOV   A,0xA
    0698: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0105) 		TX8SW_CPutString("Adresse");
    069B: 50 01    MOV   A,0x1
    069D: 08       PUSH  A
    069E: 50 E9    MOV   A,0xE9
    06A0: 5C       MOV   X,A
    06A1: 18       POP   A
    06A2: 7C 04 B4 LCALL _TX8SW_CPutString
(0106) 		TX8SW_SendData(0x0D);
    06A5: 50 0D    MOV   A,0xD
    06A7: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0107) 		TX8SW_SendData(0x0A);
    06AA: 50 0A    MOV   A,0xA
    06AC: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
    06AF: 20       POP   X
(0108) 		TX8SW_SendData(*Adresse);
    06B0: 62 D0 00 MOV   REG[0xD0],0x0
    06B3: 52 FC    MOV   A,[X-4]
    06B5: 53 03    MOV   [__r1],A
    06B7: 52 FB    MOV   A,[X-5]
    06B9: 10       PUSH  X
    06BA: 58 03    MOV   X,[__r1]
    06BC: 28       ROMX  
    06BD: 20       POP   X
    06BE: 10       PUSH  X
    06BF: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0109) 		TX8SW_SendData(0x0D);
    06C2: 50 0D    MOV   A,0xD
    06C4: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0110) 		TX8SW_SendData(0x0A);
    06C7: 50 0A    MOV   A,0xA
    06C9: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
    06CC: 20       POP   X
(0111) 	PRT1DR |= 0x02;     												// P0[1] setzen		
    06CD: 43 04 02 OR    REG[0x4],0x2
    06D0: 20       POP   X
    06D1: 7F       RET   
(0112) }
(0113) 
(0114) void Write_Register(const char *Adresse, const char *Daten)
(0115) {
_Write_Register:
  Daten                --> X-7
  Adresse              --> X-5
    06D2: 10       PUSH  X
    06D3: 4F       MOV   X,SP
(0116) 	PRT0DR &= ~0x02;
    06D4: 41 00 FD AND   REG[0x0],0xFD
(0117) 	
(0118) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    06D7: 10       PUSH  X
    06D8: 7C 05 A5 LCALL _SPIM_bReadStatus|_bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus
    06DB: 20       POP   X
    06DC: 62 D0 00 MOV   REG[0xD0],0x0
    06DF: 53 04    MOV   [__r0],A
    06E1: 47 04 10 TST   [__r0],0x10
    06E4: AF F2    JZ    0x06D7
(0119) 	SPIM_SendTxData(SPI_write);
    06E6: 50 01    MOV   A,0x1
    06E8: 10       PUSH  X
    06E9: 57 A1    MOV   X,0xA1
    06EB: 28       ROMX  
    06EC: 20       POP   X
    06ED: 10       PUSH  X
    06EE: 7C 05 9F LCALL _SPIM_SendTxData
    06F1: 20       POP   X
(0120) 		
(0121) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    06F2: 10       PUSH  X
    06F3: 7C 05 A5 LCALL _SPIM_bReadStatus|_bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus
    06F6: 20       POP   X
    06F7: 62 D0 00 MOV   REG[0xD0],0x0
    06FA: 53 04    MOV   [__r0],A
    06FC: 47 04 10 TST   [__r0],0x10
    06FF: AF F2    JZ    0x06F2
(0122) 	SPIM_SendTxData(*Adresse);
    0701: 52 FC    MOV   A,[X-4]
    0703: 53 03    MOV   [__r1],A
    0705: 52 FB    MOV   A,[X-5]
    0707: 10       PUSH  X
    0708: 58 03    MOV   X,[__r1]
    070A: 28       ROMX  
    070B: 20       POP   X
    070C: 10       PUSH  X
    070D: 7C 05 9F LCALL _SPIM_SendTxData
    0710: 20       POP   X
(0123) 		
(0124) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    0711: 10       PUSH  X
    0712: 7C 05 A5 LCALL _SPIM_bReadStatus|_bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus
    0715: 20       POP   X
    0716: 62 D0 00 MOV   REG[0xD0],0x0
    0719: 53 04    MOV   [__r0],A
    071B: 47 04 10 TST   [__r0],0x10
    071E: AF F2    JZ    0x0711
(0125) 	SPIM_SendTxData(*Daten);
    0720: 52 FA    MOV   A,[X-6]
    0722: 53 03    MOV   [__r1],A
    0724: 52 F9    MOV   A,[X-7]
    0726: 10       PUSH  X
    0727: 58 03    MOV   X,[__r1]
    0729: 28       ROMX  
    072A: 20       POP   X
    072B: 10       PUSH  X
    072C: 7C 05 9F LCALL _SPIM_SendTxData
(0126) 		
(0127) 		TX8SW_CPutString("Schreiben:");
    072F: 50 01    MOV   A,0x1
    0731: 08       PUSH  A
    0732: 50 DE    MOV   A,0xDE
    0734: 5C       MOV   X,A
    0735: 18       POP   A
    0736: 7C 04 B4 LCALL _TX8SW_CPutString
(0128) 		TX8SW_SendData(0x0D);
    0739: 50 0D    MOV   A,0xD
    073B: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0129) 		TX8SW_SendData(0x0A);
    073E: 50 0A    MOV   A,0xA
    0740: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0130) 		TX8SW_CPutString("SPI Write:");
    0743: 50 01    MOV   A,0x1
    0745: 08       PUSH  A
    0746: 50 D3    MOV   A,0xD3
    0748: 5C       MOV   X,A
    0749: 18       POP   A
    074A: 7C 04 B4 LCALL _TX8SW_CPutString
(0131) 		TX8SW_SendData(0x0D);
    074D: 50 0D    MOV   A,0xD
    074F: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0132) 		TX8SW_SendData(0x0A);
    0752: 50 0A    MOV   A,0xA
    0754: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
    0757: 20       POP   X
(0133) 		TX8SW_SendData(SPI_write);
    0758: 62 D0 00 MOV   REG[0xD0],0x0
    075B: 50 01    MOV   A,0x1
    075D: 10       PUSH  X
    075E: 57 A1    MOV   X,0xA1
    0760: 28       ROMX  
    0761: 20       POP   X
    0762: 10       PUSH  X
    0763: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0134) 		TX8SW_SendData(0x0D);
    0766: 50 0D    MOV   A,0xD
    0768: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0135) 		TX8SW_SendData(0x0A);
    076B: 50 0A    MOV   A,0xA
    076D: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0136) 		TX8SW_CPutString("Adresse:");
    0770: 50 01    MOV   A,0x1
    0772: 08       PUSH  A
    0773: 50 CA    MOV   A,0xCA
    0775: 5C       MOV   X,A
    0776: 18       POP   A
    0777: 7C 04 B4 LCALL _TX8SW_CPutString
(0137) 		TX8SW_SendData(0x0D);
    077A: 50 0D    MOV   A,0xD
    077C: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0138) 		TX8SW_SendData(0x0A);
    077F: 50 0A    MOV   A,0xA
    0781: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
    0784: 20       POP   X
(0139) 		TX8SW_SendData(*Adresse);
    0785: 62 D0 00 MOV   REG[0xD0],0x0
    0788: 52 FC    MOV   A,[X-4]
    078A: 53 03    MOV   [__r1],A
    078C: 52 FB    MOV   A,[X-5]
    078E: 10       PUSH  X
    078F: 58 03    MOV   X,[__r1]
    0791: 28       ROMX  
    0792: 20       POP   X
    0793: 10       PUSH  X
    0794: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0140) 		TX8SW_SendData(0x0D);
    0797: 50 0D    MOV   A,0xD
    0799: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0141) 		TX8SW_SendData(0x0A);
    079C: 50 0A    MOV   A,0xA
    079E: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0142) 		TX8SW_CPutString("Daten:");
    07A1: 50 01    MOV   A,0x1
    07A3: 08       PUSH  A
    07A4: 50 C3    MOV   A,0xC3
    07A6: 5C       MOV   X,A
    07A7: 18       POP   A
    07A8: 7C 04 B4 LCALL _TX8SW_CPutString
(0143) 		TX8SW_SendData(0x0D);
    07AB: 50 0D    MOV   A,0xD
    07AD: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0144) 		TX8SW_SendData(0x0A);
    07B0: 50 0A    MOV   A,0xA
    07B2: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
    07B5: 20       POP   X
(0145) 		TX8SW_SendData(*Daten);
    07B6: 62 D0 00 MOV   REG[0xD0],0x0
    07B9: 52 FA    MOV   A,[X-6]
    07BB: 53 03    MOV   [__r1],A
    07BD: 52 F9    MOV   A,[X-7]
    07BF: 10       PUSH  X
    07C0: 58 03    MOV   X,[__r1]
    07C2: 28       ROMX  
    07C3: 20       POP   X
    07C4: 10       PUSH  X
    07C5: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0146) 		TX8SW_SendData(0x0D);
    07C8: 50 0D    MOV   A,0xD
    07CA: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
(0147) 		TX8SW_SendData(0x0A);
    07CD: 50 0A    MOV   A,0xA
    07CF: 7C 04 4C LCALL TX8SW_SendData|_TX8SW_PutChar|TX8SW_PutChar|_TX8SW_SendData
    07D2: 20       POP   X
(0148) 		
(0149) 	PRT1DR |= 0x02;     												// P0[1] setzen		
    07D3: 43 04 02 OR    REG[0x4],0x2
    07D6: 20       POP   X
    07D7: 7F       RET   
(0150) }
(0151) 
(0152) void MCP2515_Init(void)
(0153) {
(0154) 	PRT0DR &= ~0x02;													// P1[1] löschen
_MCP2515_Init:
    07D8: 41 00 FD AND   REG[0x0],0xFD
(0155) 	SPIM_SendTxData(SPI_reset);
    07DB: 62 D0 00 MOV   REG[0xD0],0x0
    07DE: 50 01    MOV   A,0x1
    07E0: 10       PUSH  X
    07E1: 57 A2    MOV   X,0xA2
    07E3: 28       ROMX  
    07E4: 20       POP   X
    07E5: 10       PUSH  X
    07E6: 7C 05 9F LCALL _SPIM_SendTxData
    07E9: 20       POP   X
(0156) 	while(!(SPIM_bReadStatus() & SPIM_SPIM_TX_BUFFER_EMPTY));
    07EA: 10       PUSH  X
    07EB: 7C 05 A5 LCALL _SPIM_bReadStatus|_bSPIM_ReadStatus|SPIM_bReadStatus|bSPIM_ReadStatus
    07EE: 20       POP   X
    07EF: 62 D0 00 MOV   REG[0xD0],0x0
    07F2: 53 04    MOV   [__r0],A
    07F4: 47 04 10 TST   [__r0],0x10
    07F7: AF F2    JZ    0x07EA
(0157) 	PRT1DR |= 0x02;     												// P0[1] setzen
    07F9: 43 04 02 OR    REG[0x4],0x2
    07FC: 7F       RET   
(0158) 
(0159) }
(0160) 
(0161) void Bitmodify(void)
(0162) {
_Bitmodify:
    07FD: 7F       RET   
(0163) 
(0164) }
(0165) 
(0166) void Timer16(void)
(0167) {
_Timer16:
    07FE: 08       PUSH  A
    07FF: 18       POP   A
