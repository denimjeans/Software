                ;;*****************************************************************************
                ;;*****************************************************************************
                ;;  FILENAME: I2CHWINT.asm
                ;;  Version: 1.90, Updated on 2012/9/21 at 11:59:4
                ;;  Generated by PSoC Designer 5.3.2710
                ;;
                ;;  DESCRIPTION: I2CHW MultiMaster Interrupt Service Routine.
                ;;
                ;;      File stored in Master directory of user module
                ;;      program flow would likely be to first determine what 'mode' the device is in.  
                ;;  I.e. is Master and Slave mode enabled?  Control of program flow must take 
                ;;  more into account when all more modes are enabled.
                ;;
                ;;
                ;;-----------------------------------------------------------------------------
                ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                ;;*****************************************************************************
                ;;*****************************************************************************
                
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0062           PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
 0038           PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
 0006           PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
 0001           PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
 0010           CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
 0000           
 0068           ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
 0080           ADC0_CR_CMPST:        equ 80h    ;
 0040           ADC0_CR_LOREN:        equ 40h    ;
 0020           ADC0_CR_SHEN:         equ 20h    ;
 0008           ADC0_CR_CBSRC:        equ 08h    ;
 0004           ADC0_CR_ADCM:         equ 04h    ;
 0001           ADC0_CR_EN:	          equ 01h    ;
 0000           
 0069           ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
 0080           ADC1_CR_CMPST:        equ 80h    ;
 0040           ADC1_CR_LOREN:        equ 40h    ;
 0020           ADC1_CR_SHEN:         equ 20h    ;
 0008           ADC1_CR_CBSRC:        equ 08h    ;
 0004           ADC1_CR_ADCM:         equ 04h    ;
 0001           ADC1_CR_EN:	          equ 01h    ;
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 0
 0072           ACE00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACE00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 1
 0076           ACE01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACE01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 0
 0080           ASE10CR0:     equ 80h          ; Control register 0                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 1
 0084           ASE11CR0:     equ 84h          ; Control register 0                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Control Registers
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0018           CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
 0003           CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 000F           AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 000F           AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 006B           CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
 0040           CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
 0030           CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
 0004           CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
 0003           CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0008           VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E5           ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
 00E6           ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 00FA           FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
 0003           FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           SYSTEM_STACK_PAGE: equ 0   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0000           SYSTEM_LARGE_MEMORY_MODEL: equ 0   
 0001           SYSTEM_SMALL_MEMORY_MODEL: equ 1   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C21020.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
 0004           I2CHW_MUM_SEL: equ 4h
 0000           
 0001           I2CHW_SLAVE: equ 1
 0002           I2CHW_MSTR:  equ 2
 0004           I2CHW_MMS:   equ 4
 0000           
 0000           ;I2CHW_SLAVE_ADDR:                          equ   20h                ;Permanent Slave Address
 0000           I2CHW_ADDR_REG_PRESENT:                     equ   0                  ;CY8C28X45 have 1 always while all other have 0
 0000           I2CHW_AUTO_ADDR_CHECK:                      equ   0                  ;CY8C28X45 may have this 0 or 1 while all other have 0
 0000           I2CHW_USED_I2C_BLOCK:                       equ   0                  ;CY8C28X45 have 0 for I2C Controller_0 and 1 for I2C Controller_1, other have 0
 0000           
 0000           ;--------------------------------------------------
 0000           ;   I2CHW API Constants
 0000           ;--------------------------------------------------
 0000           
 00DE           I2CHW_INT_REG:                             equ 0x0de
 0001           I2CHW_INT_MASK:                            equ 0x01
 0000           
 0000           
 0000           
 0000           ;-----------------
 0000           ; Misc. equates
 0000           ;-----------------
 0000           
 0000           ;I2CHW_RsrcStatus byte, Status Bit definitions
 0001           I2CHW_RD_NOERR:                             equ 0x1   ;read completed without errors
 0002           I2CHW_RD_OVERFLOW:                          equ 0x2   ;master read more bytes than were contained in read buffer
 0004           I2CHW_RD_COMPLETE:                          equ 0x4   ;last read transaction complete
 0008           I2CHW_READFLASH:                            equ 0x8   ;set- next read will use flash read buffer, clear- next read will use ram read buffer
 0010           I2CHW_WR_NOERR:                             equ 0x10  ;write completed without errors
 0020           I2CHW_WR_OVERFLOW:                          equ 0x20  ;received bytes exceeded write buffer length
 0040           I2CHW_WR_COMPLETE:                          equ 0x40  ;Master uses this definition, slave uses that below.
 0040           I2CHW_ISR_NEW_ADDR:                         equ 0x40  ;New addre received (can infer that previous transaction is complete)
 0080           I2CHW_ISR_ACTIVE:                           equ 0x80  ;ISR for I2C_slave is is active
 0000           
 0000           
 0004           fI2C_NAKnextWr:                             equ 0x04  ;flag to tell slave to nak next byte from master
 0000           
 0000           
 0000           ;=== I2C equates ===
 0000           
 0000           
 0000           
 00D7           I2CHW_SCR:                                  equ d7h    ; I2C Enable Master/Slave Block Operation
 0000           
 0080           I2CM_BUSERR:    equ 0x80
 0040           I2CM_LOSTARB:   equ 0x40
 0020           I2C_STOP_ST:    equ 0x20
 0010           I2C_ACKOUT:     equ 0x10
 0008           I2C_ADDRIN:     equ 0x08
 0004           I2C_TX:         equ 0x04 ;compliment is RX
 0002           I2C_LST_BIT:    equ 0x02
 0001           I2C_BYTE_COMPL: equ 0x01
 0000           
 00D6           I2CHW_CFG:                                  equ d6h    ; I2C Configuration RegisterI2C
 0000           
 0020           I2C_BUSERRIE:   equ 0x20
 0010           I2C_STOPIE:     equ 0x10
 0008           I2C_CLKR1:      equ 0x08
 0004           I2C_CLKR0:      equ 0x04
 0002           I2C_M_EN:       equ 0x02
 0001           I2C_S_EN:       equ 0x01
 0000           
 00D9           I2CHW_MSCR:                                 equ d9h    ; I2C Master Status and Control
 0000           
 0008           I2CM_BUSBUSY:   equ 0x08
 0004           I2CM_MASTEROP:  equ 0x04
 0002           I2CM_RESTRT:    equ 0x02
 0001           I2CM_SNDSTRT:   equ 0x01
 0000           
 00D8           I2CHW_DR:                                   equ d8h    ; I2C Status and Control Register
 0000           
                IF(I2CHW_ADDR_REG_PRESENT) ;Applicable for CY8C28X45
                I2CHW_ADDR:                  equ @ADDR_ADDRh                     ; I2C Address
                ENDIF
                
                ;Equates used as conditional compile keys
                
                
 0000           I2CHW_READ_BUFTYPE:                         equ 0x0
 0000           
 0000           I2CHW_READ_FLASH:                           equ I2CHW_READ_BUFTYPE & 0x01
 0000           
 0000           I2CHW_24MHZ_FIX:                            equ 0x0
 0000           
 0000           I2CHW_THROTTLE_CLK_RATE:                    equ I2CHW_24MHZ_FIX & 0x01
 0000           
 0000           I2CHW_POLLING_ENABLE:                       equ 0x0
 0000           
 0000           I2CHW_POLLED_PROCESS:                       equ I2CHW_POLLING_ENABLE & 0x01
 0000           
 0000           ;I2C_(status and control) reg write macro
 0000           ;----------------------------------------------------
 0000           ;  I2C_SCR and I2C_MSCR reg write macro
 0000           ;
 0000           ;  Use the following macros to write to the I2C_SCR register
 0000           ;  Usage:    SetI2C_MSCR WRITE_VALUE
 0000           ;            SetI2C_SCR  WRITE_VALUE
 0000           ;            SetI2C_CFG  WRITE_VALUE
 0000           ;
 0000           ;  where WRITE_VALUE is the data to be writen
 0000           ;
 0000           ;----------------------------------------------------
 0000           ; Write to the  I2CHW_SCR register
 0000           ;
 0000               macro SetI2CHW_SCR
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  X
 0000                   mov   X, A                        ; if data for I2C_SCR was in A save it in X
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x1
 0000                   mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if the operation uses data in A get it out of X
 0000                   mov   reg[I2CHW_SCR], @0    ; write data to reg[I2C_SCR]
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   pop   A                           ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if A was data restore it from X now
 0000                   pop   X                           ; restore original accumulator
 0000           ELSE
 0000                   mov   reg[I2CHW_SCR], @0 ; write data to reg[I2C_SCR]
 0000           ENDIF
 0000               macro SetI2CHW_MSCR
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  X
 0000                   mov   X, A                        ; if data for I2C_SCR was in A save it in X
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x01
 0000                   mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if the operation uses data in A get it out of X
 0000                   mov   reg[I2CHW_MSCR], @0   ; write data to reg[I2C_MSCR]
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   pop   A                           ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if A was data restore it from X now
 0000                   pop   X                           ; restore original accumulator
 0000           ELSE
 0000                   mov  reg[I2CHW_MSCR], @0   ; write data to reg[I2C_MSCR]
 0000           ENDIF
 0000               macro BitSetI2CHW_CFG
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  A
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x02
 0000                   mov   reg[OSC_CR0], A             ; throttle the clock down to 12Mhz
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                           ELSE
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                           ENDIF
 0000                   pop   A                           ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   pop   A                           ; restore original accumulator
 0000           ELSE
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           or    F, FLAG_XIO_MASK            ; set bank1
 0000                   or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                           and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                           ELSE
 0000                           or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                           ENDIF
 0000           ENDIF
 0000               macro BitClrI2CHW_CFG
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK                    ; set bank1
 0000                   push  A
 0000                   mov   A, reg[OSC_CR0]                     ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x02
 0000                   mov   reg[OSC_CR0], A                     ; throttle the clock down to 12Mhz
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                           ELSE
 0000                   and   F, ~FLAG_XIO_MASK                   ; set bank0
 0000                   and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                   or    F, FLAG_XIO_MASK                    ; set bank1
 0000                           ENDIF
 0000                   pop   A                                   ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK                   ; set bank0
 0000                   pop   A                                   ; restore original accumulator
 0000           ELSE
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           or    F, FLAG_XIO_MASK                    ; set bank1
 0000                   and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                           and   F, ~FLAG_XIO_MASK                   ; set bank0
 0000                           ELSE
 0000                           and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                           ENDIF
 0000           ENDIF
 0000               macro I2CHW_SERVICE_RETURN
 0000           
 0000           IF I2CHW_POLLED_PROCESS
 0000                   ret                                       ; NOT and ISR so use only a ret to return from poll
 0000           ELSE    
 0000                   reti                                      ; use reti to return from ISR
 0000           ENDIF
 0000               macro I2CHW_POLL_SERVICE
 0000           
 0000           IF I2CHW_POLLED_PROCESS
 0000                   lcall  I2CHW_Poll              ; Call this function repeatedly if we are in a loop
 0000                                                                     ; waiting for bStatus BUS_BUSY to clear.  Otherwise
 0000                                                                                                             ; this is a deadlock condtion
 0000           ENDIF
 0001           I2CHW_READ:           equ  0x01 ; Set the R/W flag after the slave address.
 0000           I2CHW_WRITE:          equ  0x00 ; Clear the R/W flag after the slave address.
 0000           I2CHW_XFER_ERROR:     equ  0x00 ; Slave did not ACK
 0000           
 0000           I2CHW_CompleteXfer:   equ  0x00 ; Perform a complete I2C transfer
 0001           I2CHW_RepStart:       equ  0x01 ; Perform a complete transfer with a Repeat Start
 0002           I2CHW_NoStop:         equ  0x02 ; Perform a complete transfer, but leave off the stop.
 0000           
 0000           I2CHW_NAKslave:       equ  0x00 ; NAK the slave after a read
 0001           I2CHW_ACKslave:       equ  0x01 ; ACK the slave after a read
 0000           
 0000           ; end of file I2CHW.inc
 0004           I2CHW_BUS_BUSY:                        equ  0x04  ; Set when the bus is busy
 0008           I2CHW_LOST_ARB:                        equ  0x08  ; Set when the master has lost arbitration
 0010           I2CHW_BUS_ERROR:                       equ  0x10  ; Set when a bus error has occurred
 0020           I2CHW_SLAVE_NAK:                       equ  0x20  ; Set when a slave has failed to respond
 0040           I2CHW_ERROR:                           equ  0x40  ; Set when a requested operation failed.
 0080           I2CHW_ISR_ACTIVE:                      equ  0x80  ; Set when ISR is active and I2C operation
 0000                                                             ;  is under progress
 0000           
 0001           I2CHW_SLAVE_OPTION:                    equ 1
 0000           
 0080           fMULTIMASTER_NAK_NEXT_WR:              equ  0x80  ; This is a seperate NAK_NEXT_WR for MULTIMASTER_SLAVE_OPERATION
 0000           
 0000           I2CHW_USED_I2C_BLOCK:                  equ   0 ;CY8C28X45 have 0 for I2C Controller_0 and 1 for I2C Controller_1, other have 0
 0000           
 0000           
 0000           ; end of file I2CHWmms.inc
 0020           I2CHW_SLAVE_ADDR:                           equ        20h     ;     Permanent Slave Address
 0000           I2CHW_USED_I2C_BLOCK:                  equ   0                       ;CY8C28X45 have 0 for I2C Controller_0 and 1 for I2C Controller_1, other have 0
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global Symbols
 0000           ;-----------------------------------------------
 0000           
                export     I2CHW_MasterRead_Count
                export    _I2CHW_MasterRead_Count
                export     I2CHW_MasterWrite_Count
                export    _I2CHW_MasterWrite_Count
                export    pI2CHW_MasterRead_BufLO
                export   _pI2CHW_MasterRead_BufLO
                export    pI2CHW_MasterWrite_BufLO
                export   _pI2CHW_MasterWrite_BufLO
                export    I2CHW_MasterStatus
                export   _I2CHW_MasterStatus
                export    I2CHW_SlaveAddr
                export   _I2CHW_SlaveAddr
                
                
                area InterruptRAM(RAM, REL, CON)
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                
 0000             I2CHW_SlaveAddr:
 0000            _I2CHW_SlaveAddr:                     BLK    1
 0001             I2CHW_MasterStatus:
 0001            _I2CHW_MasterStatus:                  BLK    1
                IF SYSTEM_LARGE_MEMORY_MODEL
                export    pI2CHW_MasterWrite_BufHI
                export   _pI2CHW_MasterWrite_BufHI
                
                 pI2CHW_MasterWrite_BufHI:
                _pI2CHW_MasterWrite_BufHI:                   blk     1
                ENDIF
 0002            pI2CHW_MasterWrite_BufLO:
 0002           _pI2CHW_MasterWrite_BufLO:             BLK    1
 0003             I2CHW_MasterWrite_Count:
 0003            _I2CHW_MasterWrite_Count:             BLK    1
                IF I2CHW_READ_FLASH
                export    pI2CHW_MasterRead_BufHI
                export   _pI2CHW_MasterRead_BufHI
                
                 pI2CHW_MasterRead_BufHI:
                _pI2CHW_MasterRead_BufHI:                    blk     1
                ELSE
                IF SYSTEM_LARGE_MEMORY_MODEL
                export    pI2CHW_MasterRead_BufHI
                export   _pI2CHW_MasterRead_BufHI
                
                 pI2CHW_MasterRead_BufHI:
                _pI2CHW_MasterRead_BufHI:                    blk     1
                ENDIF
                ENDIF
 0004            pI2CHW_MasterRead_BufLO:
 0004           _pI2CHW_MasterRead_BufLO:              BLK    1
                IF I2CHW_READ_FLASH
                export    I2CHW_MasterRead_CountHI
                export   _I2CHW_MasterRead_CountHI
                
                 I2CHW_MasterRead_CountHI:
                _I2CHW_MasterRead_CountHI:                   blk    1
                ENDIF
 0005            I2CHW_MasterRead_Count:
 0005           _I2CHW_MasterRead_Count:               BLK    1
 0006           
 0006           
 0006           
                IF I2CHW_SLAVE_OPTION
                
                export    I2CHW_SlaveStatus
                export   _I2CHW_SlaveStatus
                export     I2CHW_SlaveRead_Count
                export    _I2CHW_SlaveRead_Count
                export     I2CHW_SlaveWrite_Count
                export    _I2CHW_SlaveWrite_Count
                export    pI2CHW_SlaveRead_BufLO
                export   _pI2CHW_SlaveRead_BufLO
                export    pI2CHW_SlaveWrite_BufLO
                export   _pI2CHW_SlaveWrite_BufLO
                export    I2CHW_SlaveRead_CountHI
                export   _I2CHW_SlaveRead_CountHI
                
                
 0006             I2CHW_SlaveStatus:
 0006            _I2CHW_SlaveStatus:                   BLK    1
                IF SYSTEM_LARGE_MEMORY_MODEL
                export    pI2CHW_SlaveWrite_BufHI
                export   _pI2CHW_SlaveWrite_BufHI
                
                 pI2CHW_SlaveWrite_BufHI:
                _pI2CHW_SlaveWrite_BufHI:                    blk     1
                ENDIF
 0007            pI2CHW_SlaveWrite_BufLO:
 0007           _pI2CHW_SlaveWrite_BufLO:              BLK    1
 0008             I2CHW_SlaveWrite_Count:
 0008            _I2CHW_SlaveWrite_Count:              BLK    1
                IF I2CHW_READ_FLASH
                export    pI2CHW_SlaveRead_BufHI
                export   _pI2CHW_SlaveRead_BufHI
                
                 pI2CHW_SlaveRead_BufHI:
                _pI2CHW_SlaveRead_BufHI:                     blk     1
                ELSE
                IF SYSTEM_LARGE_MEMORY_MODEL
                export    pI2CHW_SlaveRead_BufHI
                export   _pI2CHW_SlaveRead_BufHI
                
                 pI2CHW_SlaveRead_BufHI:
                _pI2CHW_SlaveRead_BufHI:                     blk     1
                ENDIF
                ENDIF
 0009            pI2CHW_SlaveRead_BufLO:
 0009           _pI2CHW_SlaveRead_BufLO:               BLK    1
 000A            I2CHW_SlaveRead_CountHI:
 000A           _I2CHW_SlaveRead_CountHI:              BLK    1
 000B            I2CHW_SlaveRead_Count:
 000B           _I2CHW_SlaveRead_Count:                BLK    1
 000C           
                ENDIF
                
                
                IF I2CHW_POLLED_PROCESS
                
                I2CHW_Poll_Status:                             blk      1  ;internal variable used for polled operation
                ;bit 0 - Write transaction started begin looking for the STOP state to terminate the transaction
                I2C_WRITE_STARTED:       equ     0x01
                ;bit 1 - Undefined
                ;bit 2 - Undefined
                ;bit 3 - Undefined
                ;bit 4 - Undefined
                ;bit 5 - Undefined
                ;bit 6 - Undefined
                ;bit 7 - Undefined
                
                ENDIF
                
                
 0000           SNIFF_DATA:  equ 0
 0000           DEBUG_STATE: equ 0
 000C           
 000C           ;@PSoC_UserCode_INIT@ (Do not change this line.)
 000C           ;---------------------------------------------------
 000C           ; Insert your custom declarations below this banner
 000C           ;---------------------------------------------------
 000C           
 000C           ;------------------------
 000C           ; Includes
 000C           ;------------------------
 000C           
 000C           	
 000C           ;------------------------
 000C           ;  Constant Definitions
 000C           ;------------------------
 000C           
 000C           
 000C           ;------------------------
 000C           ; Variable Allocation
 000C           ;------------------------
 000C           
 000C           
 000C           ;---------------------------------------------------
 000C           ; Insert your custom declarations above this banner
 000C           ;---------------------------------------------------
 000C           ;@PSoC_UserCode_END@ (Do not change this line.)
 000C           
 000C           
 000C           
                AREA UserModules (ROM, REL)
                
                export _I2CHW_ISR
                export _I2CHW_Poll
                export  I2CHW_Poll
                
                ;;****************************************************
                ;; I2C_ISR  main entry point from vector 60h
                ;;
                ;;****************************************************
                
                IF I2CHW_POLLED_PROCESS
                
                _I2CHW_ISR:
                    reti ; stub out the ISR if this is going to be a polled function
                
                 
                 
                 I2CHW_Poll:
                _I2CHW_Poll:
                ;    cases are:
                ;    1. Stop state after a Master write to this slave
                ;    2. possible Stop condition COMBINED with a new transaction is not a problem since the Stop will only flag that the 
                ;       previous write has been completed. (so just call the I2CA_Process routine for this case and let the process routine take
                ;       care of it.
                    ;case 1
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], ( >I2CHW_Poll_Status )
                   ENDIF
                
                    tst [I2CHW_Poll_Status], I2C_WRITE_STARTED
                    jz  NOT_I2C_Write
                    tst reg[ I2CHW_SCR], I2C_STOP_ST
                    ;make sure the pushes and pops 'line up' or die horribly
                    jz  NOT_I2C_Write
                    push A
                    push X
                IF SYSTEM_LARGE_MEMORY_MODEL
                   mov   A, reg[ IDX_PP ]
                   push  A
                ENDIF
                    jmp Slave_STOPTRAP
                    
                NOT_I2C_Write:    
                    tst reg[ I2CHW_SCR], I2C_BYTE_COMPL
                    jnz I2CHW_Process   ;if no other critical events are in evidence, process an I2C byte if it's done
                    ret
                
                 I2CHW_Process:
                _I2CHW_Process:  ;don't need to export user will call I2CA_POLL which will call the I2CA_Process routine if necessary
                
                
                
                ELSE
                ;; STUB for polling function when it's un-defined
 0000            I2CHW_Poll:
 0000           _I2CHW_Poll:
 0000 7F            ret
 0001           
 0001           
 0001           ;;*****************************************************************************************
 0001           ;;                 I2C_MASTER  main entry point from vector 60h
 0001           ;;*****************************************************************************************
 0001           
 0001           _I2CHW_ISR:
                ENDIF
 0001 08            push A
 0002 10            push X
                IF SYSTEM_LARGE_MEMORY_MODEL
                   mov   A, reg[ IDX_PP ]
                   push  A
                ENDIF
                
 0003           Process_REENTRY:
 0003           ;******************************************************************************************
 0003           ;If two masters attempt to address one another and do so simultaneously within the window of
 0003           ;the start bit, one may still have it's address bit set indicating that it failed in acquiring
 0003           ;the bus prior to an arbitration loss event.  Since the Data register may be overwritten
 0003           ;the presence of the address request bit can cause an address event with incorrect data
 0003           ;if undetected.  A byte-complete event when the address bit is still set indicates that this
 0003           ;has happened.
 0003           ;          
 0003           ;******************************************************************************************
 0003 5DD9          mov A, reg[I2CHW_MSCR]
 0005 2101          and A, 0x01                                              ;;Test if Start_Gen/address req is Set
 0007 A007          jz  ContinueByteCompl                                    ;;If not jump out
 0009 41D9FE        and reg[I2CHW_MSCR], ~0x01                               ;;If address req is set clear it
 000C 2E0048        or  [I2CHW_bStatus],(I2CHW_LOST_ARB | I2CHW_ERROR)       ; Set the ERROR and LOST_ARB flags in the bus status register
 000F               ;or  [I2CHW_bStatus], I2CHW_ERROR // Then flag an error
 000F                   ;; if an address has been received it's possible that it's this devices slave address
 000F           ContinueByteCompl:
 000F           ;******************************************************************************************
 000F           ;Before doing anything else check for the presence of a STOP_ST in combination with the
 000F           ;STOP Interrupt Enable (STOPIE).  If this is what happened set appropriate bits, 
 000F           ;clear and reset the main I2CHW interrupt to assure that we haven't missed a BYTE_COMPLETE
 000F           ;interrupt and exit the interrupt.  If a BYTE_COMPLETE interrupt is concurrent with the STOP 
 000F           ;interrupt the next entry to this interrupt will be immediate and the STOPIE bit will now be 
 000F           ;cleared.  This removes the possibility of trying to process two different events within one 
 000F           ;interrupt.
 000F           ;          
 000F           ;******************************************************************************************
 000F           ;first check to see if the slave function is enabled
 000F           ;so no valid address are detected without the interrupt 
 000F           ;capability to ACK them
                    IF(I2CHW_USED_I2C_BLOCK)
                    or    F, FLAG_XIO_MASK
                    tst reg[I2CHW_CFG],I2C_S_EN                                ; is the slave function enabled?
                    and   F, ~FLAG_XIO_MASK
                    ELSE
 000F 49D601        tst reg[I2CHW_CFG],I2C_S_EN                                ; is the slave function enabled?
                    ENDIF
 0012 A00B          jz  ByteComplProcess 
 0014           ; Check the Stop Bit in SCR only if the Stop Interrupt is enabled.    
                    IF(I2CHW_USED_I2C_BLOCK)
                    or    F, FLAG_XIO_MASK
                    tst reg[I2CHW_CFG],I2C_STOPIE
                    and   F, ~FLAG_XIO_MASK
                    ELSE
 0014 49D610        tst reg[I2CHW_CFG],I2C_STOPIE
                    ENDIF
 0017 A006          jz  ByteComplProcess
 0019 49D720        tst reg[I2CHW_SCR],I2C_STOP_ST                         ; Test if the Interrupt is due to Stop Condition
 001C           ;conditions that must be met here are Slave-enabled, STOP int enabled (STOPIE), and STOP_ST (status bit set)
 001C B206          jnz Slave_STOPTRAP                                       ; If yes process Stop Trap
 001E           
 001E           ByteComplProcess:
 001E           ;*********END TEST OF STOP STATUS**********************************************************       
 001E           
 001E 49D780        tst reg[I2CHW_SCR],I2CM_BUSERR                           ; Test if the Interrupt is due to Bus Error
 0021 B01C          jnz ReportBusError                                       ; If yes Report Bus Error
 0023           
 0023               
 0023 49D740        tst reg[I2CHW_SCR],I2CM_LOSTARB                          ; Test the Lost Arbitration bit
 0026 A023          jz  NoLostArb                                            ; If not set, proceed
 0028           
 0028           ;******************************************************************************************
 0028           ;                     Control is here if Master Lost Arbitration
 0028           ;******************************************************************************************
 0028           ; 1. Set the ERROR and LOST_ARB flags in the bStatus register.
 0028           ; 2. Branch to Slave ISR if the Address bit is set in I2C_SCR and Slave mode enabled.
 0028           ; 3. If Slave mode not enabled or Address bit not set, release the bus.
 0028           
 0028 2E0048        or  [I2CHW_bStatus],(I2CHW_LOST_ARB | I2CHW_ERROR)       ; Set the ERROR and LOST_ARB flags in the bus status register
                IF I2CHW_SLAVE_OPTION
                ;first check to see if the slave function is enabled
                ;so no valid address are detected without the interrupt 
                ;capability to ACK them
                IF DEBUG_STATE
                   mov A, 'b'
                   lcall TX8_1_PutChar
                   mov A, '0'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                   lcall TX8_1_PutCRLF
                ENDIF
                    IF(I2CHW_USED_I2C_BLOCK)
                    or    F, FLAG_XIO_MASK
                    tst reg[I2CHW_CFG],I2C_S_EN                              ; is the slave function enabled?
                    and   F, ~FLAG_XIO_MASK
                    ELSE
 002B 49D601        tst reg[I2CHW_CFG],I2C_S_EN                              ; is the slave function enabled?
                    ENDIF
 002E A006          jz  ArbitrationLossBusRelease 
 0030 49D708        tst reg[I2CHW_SCR],I2C_ADDRIN                            ; Test if the Received byte is an address
 0033 B134          jnz I2CHW_ISR_SLAVE                                      ; If yes, the master probably has been addressed as slave
                ENDIF
                
 0035           ArbitrationLossBusRelease:
 0035           ;******************************************************************************************
 0035           ;;; EXIT ON ARBITRATION LOSS, RELEASE BUS IGNORE FURTHER ACTIVITY ;;;
 0035           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, "b"
                   lcall TX8_1_PutChar
                   mov A, "1"
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                   lcall TX8_1_PutCRLF
                ENDIF
                
                ;
                ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0035 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                
                ; Enable Stop Trap.  The ISR_ACTIVE bit will be cleared only when a Stop condition is
                ; detected. ie, when the winning master releases the bus
                ; On the other hand why bother?  The bit is therefore decreed to be cleared,
                ; IFF the Slave it NOT enabled. 
                ;    BitSetI2CHW_CFG I2C_STOPIE
 0038 26007F        and [I2CHW_bStatus],~I2CHW_ISR_ACTIVE
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 003B 20            pop X
 003C 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 003D 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
                ;******************************************************************************************
                ;                          Interrupt Caused by Bus Error
                ;******************************************************************************************
                ; Set the ERROR and BUS_ERROR flags in the bStatus register
 003E           ReportBusError:
 003E           ;******************************************************************************************
 003E           ;;; EXIT ON BUS ERROR (STATE OF BUS IS UNKNOWN--PROBABLY STALLED), RELEASE BUS IGNORE FURTHER ACTIVITY ;;;
 003E           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'b'
                   lcall TX8_1_PutChar
                   mov A, 'E'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                
                ;
                ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 003E 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                
 0041 2E0050        or [I2CHW_bStatus],(I2CHW_ERROR | I2CHW_BUS_ERROR)
 0044 26007F        and [I2CHW_bStatus],~I2CHW_ISR_ACTIVE
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 0047 20            pop X
 0048 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 0049 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
                ;******************************************************************************************
                ;                              No Errors encountered
                ;******************************************************************************************
 004A           NoLostArb:
 004A           
                IF I2CHW_SLAVE_OPTION
 004A 49D904            tst REG[I2CHW_MSCR],I2CM_MASTEROP                           ; Test if Master is in control
 004D A003              jz TstSlaveOperational                                      ; If not branch to SLAVE_ISR
 004F 8008              jmp ProceedWithMasterOp  
 0051           TstSlaveOperational:
 0051               
 0051           ;first check to see if the slave function is enabled
 0051           ;so no valid address are detected without the interrupt 
 0051           ;capability to ACK them
                    IF(I2CHW_USED_I2C_BLOCK)
                    or    F, FLAG_XIO_MASK
                    tst reg[I2CHW_CFG],I2C_S_EN                              ; is the slave function enabled?
                    and   F, ~FLAG_XIO_MASK
                    ELSE
 0051 49D601        tst reg[I2CHW_CFG],I2C_S_EN                              ; is the slave function enabled?
                    ENDIF
 0054 AFE0          jz  ArbitrationLossBusRelease 
 0056 8111          jmp I2CHW_ISR_SLAVE                                      ; If not branch to SLAVE_ISR  
                ENDIF
                
 0058           ProceedWithMasterOp:
 0058           ;******************************************************************************************
 0058           	;Only use the SLAVE stop trap for Writes to the Slave from and external master.
 0058           	;The stop interrupt will only cause problems otherwise.
 0058           	;Do not use stop interrupts for multi-master (master) mode.
 0058           ;******************************************************************************************
 0058           
 0058 49D708        tst reg[I2CHW_SCR], I2C_ADDRIN
 005B A015          jz DataState
 005D           
 005D           ; Test if a Start Generation is pending, or the if the Slave ACK'ed or NAKed the address.
 005D           AddrState:
 005D 49D901        tst reg[I2CHW_MSCR], I2CM_SNDSTRT
 0060 B029          jnz NoStart                                              ; A start is pending                            
 0062 49D702        tst reg[I2CHW_SCR], ( I2C_LST_BIT )         
 0065 B018          jnz SlaveAddrNAK                                         ; Slave did not answer 
 0067           
 0067           ; Slave has acknowledged here.  Now it is to be decided if data has to be transmitted or
 0067           ; received.  This is done by testing the R/W bit of the SlaveAddr.  If this bit is 0, then
 0067           ; it is a write operation.  If 1, then it is a read operation
 0067 470001        tst [I2CHW_SlaveAddr], 01                   
 006A B029          jnz I2C_ReadSlave1stByte                                 ; Branch to Read byte
 006C 8087          jmp I2C_WriteSlave1stByte                                ; Branch to Write byte
 006E           ;******************************************************************************************
 006E           ;;; UNREACHABLE EXIT POINT STACK MAY BE CORRUPTED ;;;
 006E           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 0xEE
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 006E 20            pop X
 006F 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 0070 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
                ; A data byte has been transmitted or has been received.  This is again decided by testing
                ; the R/W bit of the SlaveAddr byte.  If 0, then a byte transmission has been completed and
                ; the next byte has to be transmitted.  If 1, a byte has been received and has to be ACK'ed
                ; or NAKed
 0071           DataState:
 0071 2E0080        or [I2CHW_bStatus], I2CHW_ISR_ACTIVE
 0074 470001        tst [I2CHW_SlaveAddr], 01                                
 0077 B028          jnz I2C_ReadSlave                                        ; Process the received byte
 0079 8080          jmp I2C_WriteSlave                                       ; Write next byte to Slave
 007B           ;******************************************************************************************
 007B           ;;; UNREACHABLE EXIT POINT STACK MAY BE CORRUPTED ;;;
 007B           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 0xEE
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 007B 20                pop X
 007C 18                pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 007D 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
                ; Slave did not ACK.  Either the Slave was not present or is busy.  So release the bus,
                ; set the ERROR and SLAVE_NAK bits in the bStatus register and return
 007E           SlaveAddrNAK:
 007E           ;******************************************************************************************
 007E           ;;; EXIT STATE: SLAVE NAK'ED IT'S ADDRESS ,RELEASE BUS (MASTER OPERATION STATE An);;;
 007E           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'A'
                   lcall TX8_1_PutChar
                   mov A, 'n'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF SNIFF_DATA
                   mov A, reg[I2CHW_DR]
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF DEBUG_STATE
                   lcall TX8_1_PutCRLF
                ENDIF
                
                
                ;
                ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 007E 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                
 0081 26007F        and [I2CHW_bStatus], ~I2CHW_ISR_ACTIVE
 0084 2E0060        or [I2CHW_bStatus], (I2CHW_ERROR | I2CHW_SLAVE_NAK )        ; Set the ERROR and SLAVE_NAK Flag
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 0087 20            pop X
 0088 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 0089 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
 008A           NoStart:
 008A           ; A previous generated start could not be sent.  This could be because the bus has already
 008A           ; been acquired by another Master.  So test the Address bit.  If it is set, it is possible
 008A           ; that the Slave has been addressed.  Branch to Slave ISR to compare the address.
 008A           
 008A           ;first check to see if the slave function is enabled
 008A           ;so no valid address are detected without the interrupt 
 008A           ;capability to ACK them
                    IF(I2CHW_USED_I2C_BLOCK)
                    or    F, FLAG_XIO_MASK
                    tst reg[I2CHW_CFG],I2C_S_EN                              ; is the slave function enabled?
                    and   F, ~FLAG_XIO_MASK
                    ELSE
 008A 49D601        tst reg[I2CHW_CFG],I2C_S_EN                              ; is the slave function enabled?
                    ENDIF
 008D AFA7          jz  ArbitrationLossBusRelease 
 008F           
 008F 49D708        tst reg[I2CHW_SCR],I2C_ADDRIN                            ; Test if the Received byte is an address
 0092           
                IF I2CHW_SLAVE_OPTION
 0092 B0D5          jnz I2CHW_ISR_SLAVE                                      ; If yes, branch to Slave ISR
                ELSE
                ; If Slave mode is not enabled then nothing to do.  In fact, this condition could never
                ; occur.  If the Slave were disabled, then a Byte complete interrupt will only be 
                ; generated on successful completion of Start.  In that case, the Start bit will already
                ; have been cleared and the program can never branch here.  Still just to make sure...
                    and [I2CHW_bStatus],~I2CHW_ISR_ACTIVE    
                ;******************************************************************************************
                ;;; UNREACHABLE EXIT POINT STACK MAY BE CORRUPTED: RELEASE BUS COMPLETELY;;;
                ;;; ISR program flow should not reach this point.
                ;******************************************************************************************
                IF DEBUG_STATE
                   mov [I2CHW_ExitState], 0xE1
                   mov A, 0xE1
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                
                ;
                ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
                        mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
                    pop X
                    pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
                        reti                                      ; use reti to return from ISR
                ENDIF
                ENDIF
                    
                ; The control has branched here because a byte has been received from the Slave.  Process
                ; this received data.
 0094           I2C_ReadSlave1stByte:
 0094           
 0094 2E0080        or [I2CHW_bStatus], I2CHW_ISR_ACTIVE
 0097 2601FB        and [I2CHW_MasterStatus], ~I2CHW_RD_COMPLETE
 009A           
 009A           ;read normal data in from slave immediately after the address is sent, there is no data to read
 009A           ;but the bus is stalled at byte complete
 009A           ;******************************************************************************************
 009A           ;;; EXIT STATE: READING FROM SLAVE (MASTER OPERATION STATE Ar);;;
 009A           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'A'
                   lcall TX8_1_PutChar
                   mov A, 'r'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF SNIFF_DATA
                   mov A, reg[I2CHW_DR]
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                
                
                ;
                ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 009A 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 009D 20            pop X
 009E 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 009F 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
 00A0           I2C_ReadSlave:                                               ;this is just a normal read
 00A0           
 00A0           ; MASTER READ from SLAVE
 00A0           ; (and writing to it's own RAM--Write_Buf and Write_Cnt)
 00A0           ;
 00A0           ;@PSoC_UserCode_BODY1@ (Do not change this line.)
 00A0           ;---------------------------------------------------
 00A0           ; Insert your custom code below this banner
 00A0           ;---------------------------------------------------
 00A0           
 00A0           ;********************************************************
 00A0           ; By modifying the section from here down to the next comment block
 00A0           ; a user could process data for a custom I2C Master Read (write to RAM) application
 00A0           ; NOTE: I2C handshakes (ACK/NAK may be effected by any introduced bugs)
 00A0           ;********************************************************
 00A0 470180       tst   [I2CHW_MasterStatus], fMULTIMASTER_NAK_NEXT_WR
 00A3 B014         jnz   InStoreData
 00A5              ;
 00A5              ;process write data here
 00A5              ;
 00A5 7A03         dec   [I2CHW_MasterWrite_Count]
 00A7 C03D         jc    CompleteRDXfer                                      ; carry set if value became -1
 00A9           
 00A9 3C0300       cmp   [I2CHW_MasterWrite_Count], 00                       ;set nak flag, dec count, and store data
 00AC A003         jz    InNakNextByte
 00AE 8006         jmp   InNotBufEnd
 00B0           InNakNextByte:                                               ;set the nakflag in I2CHW_bStatus
 00B0 2E0180       or    [I2CHW_MasterStatus], fMULTIMASTER_NAK_NEXT_WR
 00B3 8004         jmp   InStoreData
 00B5           InNotBufEnd:
 00B5 26017F       and   [I2CHW_MasterStatus], ~fMULTIMASTER_NAK_NEXT_WR     ;clear the nak flag in case it was set from a previous operation
 00B8           InStoreData:
 00B8              ;This is the ONLY place this bit is set  This bit should never be cleared by the isr ONLY by the API ClrWrStatus()
 00B8 2E0101       or    [I2CHW_MasterStatus], I2CHW_RD_NOERR                ;set current status
                IF SYSTEM_LARGE_MEMORY_MODEL
                   mov   A, [pI2CHW_MasterWrite_BufHI]
                ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], A
                   ENDIF
 00BB 5802         mov   X, [pI2CHW_MasterWrite_BufLO]
 00BD 5DD8         mov   A, reg[I2CHW_DR]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
 00BF 5400         mov   [X],A                                               ;save the last byte
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_00b
                   ENDIF
 00C1 7602         inc   [pI2CHW_MasterWrite_BufLO]
 00C3           
 00C3 470180       tst   [I2CHW_MasterStatus], fMULTIMASTER_NAK_NEXT_WR
 00C6 B007         jnz   NAK_this_one
 00C8           
 00C8           ;********************************************************
 00C8           ; End user I2C Buffered WRITE (to RAM) Customization
 00C8           ;********************************************************
 00C8           ;@PSoC_UserCode_END@ (Do not change this line.)
 00C8           
 00C8           AckTheRead:
 00C8           ;******************************************************************************************
 00C8           ;;; NORMAL ACK UPON READING SLAVE DATA (STATE DATA Ra);;;
 00C8           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'R'
                   lcall TX8_1_PutChar
                   mov A, 'a'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF SNIFF_DATA
                   mov A, reg[I2CHW_DR]
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                
                ;
                ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], I2C_ACKOUT    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 00C8 62D710            mov   reg[I2CHW_SCR], I2C_ACKOUT ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 00CB 20            pop X
 00CC 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 00CD 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
 00CE           NAK_this_one:
 00CE 26017F        and  [I2CHW_MasterStatus], ~fMULTIMASTER_NAK_NEXT_WR     ; Clear NAKNextWr bit
 00D1 2601F8        and   [I2CHW_MasterStatus], ~0x07                        ; Clear the read status bits
 00D4 260003        and [I2CHW_bStatus], (I2CHW_NoStop | I2CHW_RepStart)
 00D7 A00D          jz      CompleteRDXfer
 00D9           ; If No stop mode, then do not send ACK or NAK.  The next transaction should be
 00D9           ; with a Repeat Start Condition.  The bus is stalled till next transaction.
 00D9 26007F        and   [I2CHW_bStatus], ~I2CHW_ISR_ACTIVE
 00DC 2E0101        or    [I2CHW_MasterStatus], I2CHW_RD_NOERR
 00DF 2E0104        or    [I2CHW_MasterStatus], I2CHW_RD_COMPLETE
 00E2           
 00E2           ;******************************************************************************************
 00E2           ;;; EXIT ISR WITHOUT RELEASING BUS: A RESTART/REPEAT START WAS REQUESTED (STATE DATA Rx);;;
 00E2           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'R'
                   lcall TX8_1_PutChar
                   mov A, 'x'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF SNIFF_DATA
                   mov A, reg[I2CHW_DR]
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF DEBUG_STATE
                   lcall TX8_1_PutCRLF
                ENDIF
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 00E2 20            pop X
 00E3 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 00E4 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
                ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                ;The NAK (not I2C_SNDACK) bit in I2C_SCR below will automatically generate a stop
 00E5           CompleteRDXfer:
 00E5           ;@PSoC_UserCode_BODY7@ (Do not change this line.)
 00E5           ;---------------------------------------------------
 00E5           ; Insert your custom code below this banner
 00E5           ;---------------------------------------------------
 00E5                   ; *****
 00E5                   ; Here the user can write code to process the received data
 00E5                   ; The bus will be stalled till the processing is complete.
 00E5                   ; ******
 00E5           ;********************************************************
 00E5           ; End user I2C Buffered WRITE (to RAM) Customization
 00E5           ;********************************************************
 00E5           ;@PSoC_UserCode_END@ (Do not change this line.)
 00E5           
 00E5           ;******************************************************************************************
 00E5           ;;; NORMAL NAK UPON READING LAST SLAVE DATA BYTE (STATE DATA Rs);;;
 00E5           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'R'
                   lcall TX8_1_PutChar
                   mov A, 's'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF SNIFF_DATA
                   mov A, reg[I2CHW_DR]
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF DEBUG_STATE
                   lcall TX8_1_PutCRLF
                ENDIF
 00E5 2E0101        or    [I2CHW_MasterStatus], I2CHW_RD_NOERR
 00E8 2E0104        or    [I2CHW_MasterStatus], I2CHW_RD_COMPLETE
 00EB           ; Clear the NoStop and RepStart and ISR_ACTIVE bits in the bStatus register
 00EB 26007C        and [I2CHW_bStatus], ~(I2CHW_RepStart | I2CHW_NoStop | I2CHW_ISR_ACTIVE)
 00EE           
 00EE           ;
 00EE           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 00EE           ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 00EE 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 00F1 20            pop X
 00F2 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 00F3 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
                
                ; Control has branched here because a byte transmit has completed.  Check if more bytes
                ; have to be transmitted to slave.  If this is the first byte to be transmitted, then
                ; clear the WR_COMPLETE flag in the MaterStatus register and set the ISR_ACTIVE flag
                ; in the bStatus register.
                
 00F4           I2C_WriteSlave1stByte:
 00F4           ;******************************************************************************************
 00F4           ;;; SLAVE ACK'ED ADDR BEGIN DATA WRITE (STATE DATA Aw);;;
 00F4           ;******************************************************************************************
 00F4 2601BF        and [I2CHW_MasterStatus], ~I2CHW_WR_COMPLETE
 00F7 2E0080        or [I2CHW_bStatus], I2CHW_ISR_ACTIVE
                IF DEBUG_STATE
                   mov A, 'A'
                   lcall TX8_1_PutChar
                   mov A, 'w'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF SNIFF_DATA
                   mov A, reg[I2CHW_DR]
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                
 00FA           I2C_WriteSlave:
 00FA 49D702        tst reg[I2CHW_SCR], ( I2C_LST_BIT )                      ;must be a zero or no slave answered
 00FD B040          jnz SlaveDataNAK
 00FF 5004          mov A, (I2C_TX)
 0101 08            push A
 0102           
 0102           ;
 0102           ;MASTER is WRITING TO SLAVE (& reading data from ram or flash buffer)
 0102           ;
 0102           ;;code snipped from SW I2C below
 0102           
 0102           I2C_ObtainOutData:
 0102           
 0102           ;********************************************************
 0102           ; here we need to get the next data to output (master-read)
 0102           ; also set the status byte for use on exit
 0102           ;********************************************************
 0102           
                IF I2CHW_READ_FLASH
                ;@PSoC_UserCode_BODY2@ (Do not change this line.)
                ;---------------------------------------------------
                ; Insert your custom code below this banner
                ; to modify the way a master might read non-volatile data
                ; to send.
                ;---------------------------------------------------
                
                    tst  [I2CHW_MasterStatus],I2CHW_READFLASH
                    jz   ReadOutData
                
                    ;
                    ;get the data
                    ;
                    mov  X, [pI2CHW_MasterRead_BufLO]
                    mov  A, [pI2CHW_MasterRead_BufHI]
                    romx
                    mov  reg[I2CHW_DR],A
                    dec  [I2CHW_MasterRead_Count]                            ;calculate addr lsb
                    jnc  NoDecHighCount
                    dec  [I2CHW_MasterRead_CountHI]
                    jc   MstrWRComplete
                
                NoDecHighCount:
                    inc  [pI2CHW_MasterRead_BufLO]                           ;set the next flash address to read
                    jnc  NoIncHiAddr
                    inc  [pI2CHW_MasterRead_BufHI]
                NoIncHiAddr:
                   jmp   I2CNormalOutput
                ;
                ;****** THERE SHOULD BE NO WAY TO REACH THIS STATE WE'LL JUST TERMINATE THE ACTIVITY SINCE WERE THE MASTER
                ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                ;
                ;FlashRdOverflow:
                    ;deal with the over flow condition by re-sending last data byte (dec the low addr)
                
                ;   or    [I2CHW_MasterStatus], I2CHW_RD_OVERFLOW
                ;                                                                      ;set count back to 0
                ;   mov   [I2CHW_MasterReadCountHI], 0                                  ;functionally the same as incrementing ffff and less instructions
                ;   mov   [I2CHW_MasterReadCount], 0
                ;   jmp   I2CNormalRead
                
                ;---------------------------------------------------
                ; Insert your custom code above this banner
                ;---------------------------------------------------
                ;@PSoC_UserCode_END@ (Do not change this line.)
                
                ENDIF
                
                ;@PSoC_UserCode_BODY3@ (Do not change this line.)
                ;---------------------------------------------------
                ; Insert your custom code below this banner
                ; to modify the way a master might read RAM data to send
                ; to an I2C device
                ; By replacing the section from here down to the next block
                ; a user could process data for a custom I2C READ application
                ;---------------------------------------------------
 0102           ReadOutData:
 0102              ;read the current data byte
                IF SYSTEM_LARGE_MEMORY_MODEL
                   mov   A, [pI2CHW_MasterRead_BufHI]
                ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], A
                   ENDIF
 0102 5804         mov   X, [pI2CHW_MasterRead_BufLO]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
 0104 5200         mov   A, [X]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_00b
                   ENDIF
 0106 60D8         mov   reg[I2CHW_DR], A
 0108 7A05         dec   [I2CHW_MasterRead_Count]
 010A           
 010A C00C         jc    MstrWRComplete
 010C 7604         inc   [pI2CHW_MasterRead_BufLO]
 010E 8001         jmp   I2CNormalOutput
 0110           ;
 0110           ;ram read overflow detected here, just re-send the last location in the buffer
 0110           ;
 0110           ;********        THERE SHOULD BE NO WAY TO OVERFLOW FOR THIS CASE
 0110           ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
 0110           ;
 0110           ;RamRDOverflow:
 0110           ;   or    [I2CHW_MasterStatus], I2CHW_RD_OVERFLOW
 0110           ;   inc   [I2CHW_MasterReadCount]                                       ; set back to zero
 0110           
 0110           ;---------------------------------------------------
 0110           ; End user I2C MASTER WRITE TO SLAVE /READ buffer customization section
 0110           ; Insert your custom code above this banner
 0110           ;---------------------------------------------------
 0110           ;@PSoC_UserCode_END@ (Do not change this line.)
 0110           
 0110           I2CNormalOutput:
 0110           ;******************************************************************************************
 0110           ;;; NORMAL WRITE TO SLAVE (SET I2C_TX bit) (STATE DATA W);;;
 0110           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'W'
                   lcall TX8_1_PutChar
                ENDIF
                IF SNIFF_DATA
                   mov A, reg[I2CHW_DR]
                   lcall TX8_1_PutSHexByte
                ENDIF
                
                        ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                        ;and place there based on whether or not the previous transmission was our I2C address.
 0110 18                pop   A
 0111 40                nop
 0112           
 0112           
 0112           ;
 0112           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 0112           ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], A    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0112 60D7              mov   reg[I2CHW_SCR], A ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 0114 20            pop X
 0115 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 0116 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
 0117           MstrWRComplete:
 0117 26018F        and   [I2CHW_MasterStatus], ~0x70                        ;clear the write status bits
 011A           ; Check if the write was called under No stop or repeat start conditions.
 011A           ; If yes, then do not generate the stop condition.  The bus is stalled.
 011A           ; The user may want to use the bus for the next transaction by using repeat start.
 011A 260003        and [I2CHW_bStatus], (I2CHW_NoStop | I2CHW_RepStart)
 011D A00E          jz      CompleteWRXfer                                   ; Complete Transfer condition   
 011F 18            pop  A                                                   ; Clear the stack for return
 0120 2E0140        or    [I2CHW_MasterStatus], I2CHW_WR_COMPLETE
 0123 2E0110        or    [I2CHW_MasterStatus], I2CHW_WR_NOERR
 0126           
 0126 26007F        and  [I2CHW_bStatus], ~I2CHW_ISR_ACTIVE
 0129           
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
                ;******************************************************************************************
                ;;; EXIT ISR WITHOUT RELEASING BUS REPEAT START/RESTART REQUESTED (STATE DATA Wx);;;
                ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                   mov A, 'x'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                   lcall TX8_1_PutCRLF
                ENDIF
 0129 20            pop X
 012A 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 012B 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
                ; Complete Transfer condition. Set the WR_COMPLETE, and WR_NOERR bits and generate
                ; a Stop.  The release of the I2C_TX bit in I2C_SCR below will automatically generate a stop
 012C           CompleteWRXfer:
 012C           ;******************************************************************************************
 012C           ;;; RELEASE BUS AFTER LAST BYTE TRANSMITTED TO SLAVE (STATE DATA Ws);;;
 012C           ;******************************************************************************************
 012C           ;must also fix up the data count because it was decremented past zero on the Byte_Complete 
 012C           ;AFTER the last byte was transmitted.  This makes sure that if the entire transmission was
 012C           ;successful the count will be 0.  
 012C 7605          inc  [I2CHW_MasterRead_Count]                          
                IF I2CHW_READ_FLASH
                    inc  [I2CHW_MasterRead_CountHI]                                              ;if a two byte count decremented past zero
                                                                                 ;both high and lo addrs should be incremented.
                ENDIF
                
                IF DEBUG_STATE
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                   mov A, 's'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                   lcall TX8_1_PutCRLF
                ENDIF
 012E 18            pop   A
 012F           
 012F 2E0140        or    [I2CHW_MasterStatus], I2CHW_WR_COMPLETE
 0132 2E0110        or    [I2CHW_MasterStatus], I2CHW_WR_NOERR
 0135           ; Clear the NoStop and RepStart and ISR_ACTIVEbits in the bus status register
 0135 26007C        and [I2CHW_bStatus], ~(I2CHW_RepStart | I2CHW_NoStop | I2CHW_ISR_ACTIVE)
 0138           
 0138           ;
 0138           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 0138           ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0138 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 013B 20            pop X
 013C 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 013D 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
                ; We are here because the Slave NAKed the previous data byte.
                ; Set the WR_COMPLETE and WR_OVERFLOW bits in the MasterStatus register.
                ; Also check for NoStop, RepeatStart conditions and accordingly generate a Stop or leave
                ; the bus stalled
 013E           SlaveDataNAK:
 013E           ;must also fix up the data buffer.  While it is marginally safe to nak a byte as a slave and 
 013E           ;store it.  It is NEVER safe as a master to notice that a written byte has been nak'ed by a 
 013E           ;slave and fail to re-send it.
 013E           ;this piece of code fixes up the count and buffer that the master is using to get data from
 013E           ;to re-transmit the byte when the next master write is done.
 013E 7605          inc  [I2CHW_MasterRead_Count]                          ;calculate addr lsb
                IF I2CHW_READ_FLASH
                    jnc  NoIncHighCount
                    inc  [I2CHW_MasterRead_CountHI]
                
                NoIncHighCount:
                ENDIF
 0140 7A04          dec  [pI2CHW_MasterRead_BufLO]                         ;set the next flash address to read
                IF SYSTEM_LARGE_MEMORY_MODEL
                    jnc  NoDecHiAddr
                    dec  [pI2CHW_MasterRead_BufHI]
                NoDecHiAddr:
                ELSE
                IF I2CHW_READ_FLASH
                    jnc  NoDecHiCAddr
                    dec  [pI2CHW_MasterRead_BufHI]
                NoDecHiCAddr:
                ENDIF
                ENDIF
                
 0142 470002        tst [I2CHW_bStatus],I2CHW_NoStop
 0145 B007          jnz ReturnSlaveDataNAK
 0147 40            nop
 0148           ;******************************************************************************************
 0148           ;;; SLAVE NAK'ED A TRANSMISSION (STATE DATA 0xWn);;;
 0148           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                   mov A, 'n'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                
                ;
                ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0148 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                
 014B 8001          jmp UpdateSlaveDataNAKStatus
 014D           
 014D           ReturnSlaveDataNAK:
 014D           ;******************************************************************************************
 014D           ;;; SLAVE NAK'ED BUT A DON'T RELEASE BUS AT INITIATING ROUTINES REQUEST (STATE DATA Wz);;;
 014D           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                   mov A, 'z'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                   lcall TX8_1_PutCRLF
                ENDIF
 014D           UpdateSlaveDataNAKStatus:
 014D 26007F        and [I2CHW_bStatus], ~I2CHW_ISR_ACTIVE
 0150 26018F        and   [I2CHW_MasterStatus], ~0x70                        ;clear the write status bits
 0153 2E0140        or    [I2CHW_MasterStatus], I2CHW_WR_COMPLETE
 0156 2E0120        or    [I2CHW_MasterStatus], I2CHW_WR_OVERFLOW
 0159           
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 0159 20            pop X
 015A 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 015B 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
 015C           STOPTRAP:
 015C           ;******************************************************************************************
 015C           ;;; STOP INTERRUPTS SHOULD NOT GENERALLY BE USED FOR MULTI-MASTER-SLAVE OPERATIONS (STATE DATA Es);;;
 015C           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'E'
                   lcall TX8_1_PutChar
                   mov A, 's'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                   lcall TX8_1_PutCRLF
                ENDIF
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK                    ; set bank1
                        push  A
                        mov   A, reg[OSC_CR0]                     ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x02
                        mov   reg[OSC_CR0], A                     ; throttle the clock down to 12Mhz
                                IF(I2CHW_USED_I2C_BLOCK)
                                and   reg[I2CHW_CFG], ~I2C_STOPIE           ; write data to reg[I2C_CFG]
                                ELSE
                        and   F, ~FLAG_XIO_MASK                   ; set bank0
                        and   reg[I2CHW_CFG], ~I2C_STOPIE           ; write data to reg[I2C_CFG]
                        or    F, FLAG_XIO_MASK                    ; set bank1
                                ENDIF
                        pop   A                                   ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK                   ; set bank0
                        pop   A                                   ; restore original accumulator
                ELSE
                                IF(I2CHW_USED_I2C_BLOCK)
                                or    F, FLAG_XIO_MASK                    ; set bank1
                        and   reg[I2CHW_CFG], ~I2C_STOPIE           ; write data to reg[I2C_CFG]
                                and   F, ~FLAG_XIO_MASK                   ; set bank0
                                ELSE
 015C 41D6EF                    and   reg[I2CHW_CFG], ~I2C_STOPIE           ; write data to reg[I2C_CFG]
                                ENDIF
                ENDIF
                
                ;
                ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 015F 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                
                
 0162 26007F        and [I2CHW_bStatus], ~I2CHW_ISR_ACTIVE
 0165           
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 0165 20            pop X
 0166 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 0167 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
                ;****************************************************************************************
                ;                                  Slave ISR 
                ;****************************************************************************************
                ; 1. Test the Address In bit of I2C_SCR.  If set, then compare the received address with
                ;    self address.  If match occurs, generate ACK, else NAK.
                ; 2. If I2C_TX bit of I2C_SCR is set, then we are transmitting and a byte complete interrupt
                ;    has occurred.  So check the ACK or NAK condition received from the Master.
                ; 3. If the Stop detect bit of I2C_SCR is set, then process a stop condition.
                ; 4. If none of the above, then process data received from Master
                
                IF I2CHW_SLAVE_OPTION
                
 0168           I2CHW_ISR_SLAVE:
 0168           
 0168 49D708        tst reg[I2CHW_SCR], I2C_ADDRIN
 016B B05D          jnz I2C_EvaluateADDRIN                                   ; Process received Address
 016D           
 016D 49D704        tst reg[I2CHW_SCR], I2C_TX  
 0170 B094          jnz I2C_EvaluateACKIN                                    ; Process ACK or NAK from Master
 0172           
 0172               ; KLY Only check stop status if stop interrupt enabled
                    IF(I2CHW_USED_I2C_BLOCK)
                    or    F, FLAG_XIO_MASK
                    tst reg[I2CHW_CFG],I2C_STOPIE
                    and   F, ~FLAG_XIO_MASK
                    ELSE
 0172 49D610        tst reg[I2CHW_CFG],I2C_STOPIE
                    ENDIF
 0175 A006          jz ProcessRxData
 0177           
 0177 49D720        tst reg[I2CHW_SCR], I2C_STOP_ST
 017A B0A8          jnz Slave_STOPTRAP ; Process Stop condition
 017C           
 017C               ProcessRxData:
 017C           
 017C 49D720        tst reg[I2CHW_SCR], I2C_STOP_ST
 017F B0A3          jnz Slave_STOPTRAP                                       ; Process Stop condition
 0181           
 0181           ; Process Received Data here
 0181           
 0181           ;;code snipped from old SW I2C below
 0181           ;
 0181           ; MASTER WRITE to SLAVE
 0181           ;
 0181           ;@PSoC_UserCode_BODY4@ (Do not change this line.)
 0181           ;---------------------------------------------------
 0181           ; Insert your custom code below this banner
 0181           ;---------------------------------------------------
 0181           ; By modifying the section from here down to the next comment block
 0181           ; a user could process data for a custom I2C WRITE application
 0181           ; NOTE: I2C handshakes (ACK/NAK may be effected by any introduced bugs)
 0181           ;********************************************************
 0181 470680        tst   [I2CHW_SlaveStatus], fMULTIMASTER_NAK_NEXT_WR
 0184 B014          jnz   WrStoreData
 0186           ;
 0186           ;process write data here
 0186           ;
 0186 7A08          dec   [I2CHW_SlaveWrite_Count]
 0188 C026          jc    I2CHW_WriteOverflow                                ; carry set if value became -1
 018A           ;jz    WrStoreData
 018A 3C0800        cmp   [I2CHW_SlaveWrite_Count], 00                       ;set nak flag, dec count, and store data
 018D A003          jz    WrNakNextByte
 018F 8006          jmp   WrNotBufEnd
 0191           WrNakNextByte:                                               ;set the ank flag in I2CHW_bStatus
 0191 2E0680        or    [I2CHW_SlaveStatus], fMULTIMASTER_NAK_NEXT_WR
 0194 8004          jmp   WrStoreData
 0196           WrNotBufEnd:
 0196 26067F        and   [I2CHW_SlaveStatus], ~fMULTIMASTER_NAK_NEXT_WR     ;clear the nak flag in case it was set from a previous operation
 0199           WrStoreData:
 0199           ;This is the ONLY place this bit is set  This bit should never be cleared by the isr ONLY by the API ClrWrStatus()
 0199 2E0610        or    [I2CHW_SlaveStatus], I2CHW_WR_NOERR                ;set current status
                IF SYSTEM_LARGE_MEMORY_MODEL
                    mov   A, [pI2CHW_SlaveWrite_BufHI]
                ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], A
                   ENDIF
 019C 5807          mov   X, [pI2CHW_SlaveWrite_BufLO]
 019E 5DD8          mov   A, reg[I2CHW_DR]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
 01A0 5400          mov   [X],A                                              ;save the last byte
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_00b
                   ENDIF
 01A2 7607          inc   [pI2CHW_SlaveWrite_BufLO] 
 01A4           
 01A4 470680        tst   [I2CHW_SlaveStatus], fMULTIMASTER_NAK_NEXT_WR
 01A7 B00F          jnz   Slave_NAK_this_one
 01A9           
 01A9           ;---------------------------------------------------
 01A9           ; End user I2C WRITE Customization
 01A9           ; Insert your custom code above this banner
 01A9           ;---------------------------------------------------
 01A9           ;@PSoC_UserCode_END@ (Do not change this line.)
 01A9           
 01A9           ;******************************************************************************************
 01A9           ;;; ACK DATA RECEIVED FROM ANOTHER MASTER (STATE DATA wa);;;
 01A9           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'w'
                   lcall TX8_1_PutChar
                   mov A, 'a'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF SNIFF_DATA
                   mov A, reg[I2CHW_DR]
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                
                
                ;
                ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], (I2C_ACKOUT )    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 01A9 62D710            mov   reg[I2CHW_SCR], (I2C_ACKOUT ) ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 01AC 20            pop X
 01AD 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 01AE 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
                
                ;
                ;ram-write-overflow label here, just rewrite the last location in the buffer
                ;    and set the overflow flag
                ;
 01AF           I2CHW_WriteOverflow:
 01AF 2E0620       or    [I2CHW_SlaveStatus], I2CHW_WR_OVERFLOW              ; flag the overflow
 01B2 2606EF       and   [I2CHW_SlaveStatus], ~I2CHW_WR_NOERR
 01B5 7608         inc   [I2CHW_SlaveWrite_Count]                            ; put it back to zero
 01B7           ;If data is to be Nak'ed
 01B7           Slave_NAK_this_one:
 01B7           ;******************************************************************************************
 01B7           ;;; NAK DATA RECEIVED FROM ANOTHER MASTER (IGNORE FURTHER TRAFFIC) (STATE DATA wn);;;
 01B7           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'w'
                   lcall TX8_1_PutChar
                   mov A, 'n'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF SNIFF_DATA
                   mov A, reg[I2CHW_DR]
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                ;
                ; If the user wants to process the received data before NAK
                ; this is the place to do it.
                ; The Bus will be stalled till the processing is complete.
                ;
 01B7 26067F        and   [I2CHW_SlaveStatus], ~fMULTIMASTER_NAK_NEXT_WR     ;clear the nak flag in case it was set from a previous operation
 01BA           
 01BA           
 01BA           ;
 01BA           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 01BA           ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], ( 0 )    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 01BA 62D700            mov   reg[I2CHW_SCR], ( 0 ) ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 01BD 20            pop X
 01BE 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 01BF 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
                
                ;********************************************************
                ; Treat the case where the Slave will be continuing to
                ; receive data after receiving the address
                ;********************************************************
 01C0           I2C_AckAddr_RXdata:
                IF I2CHW_POLLED_PROCESS
                    or [I2CHW_Poll_Status], I2C_WRITE_STARTED
                ELSE
                    IF(I2CHW_USED_I2C_BLOCK)
                    or    F, FLAG_XIO_MASK
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  A
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x02
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 12Mhz
                                IF(I2CHW_USED_I2C_BLOCK)
                                or    reg[I2CHW_CFG], ( I2C_STOPIE )    ; write data to reg[I2C_CFG]
                                ELSE
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        or    reg[I2CHW_CFG], ( I2C_STOPIE )    ; write data to reg[I2C_CFG]
                        or    F, FLAG_XIO_MASK            ; set bank1
                                ENDIF
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        pop   A                           ; restore original accumulator
                ELSE
                                IF(I2CHW_USED_I2C_BLOCK)
                                or    F, FLAG_XIO_MASK            ; set bank1
                        or    reg[I2CHW_CFG], ( I2C_STOPIE )    ; write data to reg[I2C_CFG]
                                and   F, ~FLAG_XIO_MASK           ; set bank0
                                ELSE
                                or    reg[I2CHW_CFG], ( I2C_STOPIE )    ; write data to reg[I2C_CFG]
                                ENDIF
                ENDIF
                    and   F, ~FLAG_XIO_MASK
                    ELSE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  A
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x02
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 12Mhz
                                IF(I2CHW_USED_I2C_BLOCK)
                                or    reg[I2CHW_CFG], ( I2C_STOPIE )    ; write data to reg[I2C_CFG]
                                ELSE
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        or    reg[I2CHW_CFG], ( I2C_STOPIE )    ; write data to reg[I2C_CFG]
                        or    F, FLAG_XIO_MASK            ; set bank1
                                ENDIF
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        pop   A                           ; restore original accumulator
                ELSE
                                IF(I2CHW_USED_I2C_BLOCK)
                                or    F, FLAG_XIO_MASK            ; set bank1
                        or    reg[I2CHW_CFG], ( I2C_STOPIE )    ; write data to reg[I2C_CFG]
                                and   F, ~FLAG_XIO_MASK           ; set bank0
                                ELSE
 01C0 43D610                    or    reg[I2CHW_CFG], ( I2C_STOPIE )    ; write data to reg[I2C_CFG]
                                ENDIF
                ENDIF
                    ENDIF
                ENDIF
                ;******************************************************************************************
                ;;; ACK ADDRESS FOR SLAVE WRITE (STATE DATA aw);;;
                ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'a'
                   lcall TX8_1_PutChar
                   mov A, 'w'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF SNIFF_DATA
                   mov A, reg[I2CHW_DR]
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                
                
                ;
                ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], ( I2C_ACKOUT )    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 01C3 62D710            mov   reg[I2CHW_SCR], ( I2C_ACKOUT ) ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 01C6 20            pop X
 01C7 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 01C8 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
                ;********************************************************
                ; Look to see if the address is us or someone else
                ; use the carry flag to identify a READ or WRITE address
                ;********************************************************
 01C9           I2C_EvaluateADDRIN:
 01C9 5106          mov A, [I2CHW_SlaveStatus]
 01CB 2130          and A, (I2CHW_WR_NOERR | I2CHW_WR_OVERFLOW)
 01CD A007          jz  NewADDRNotSet                                        ;set new addr only if previous data appears to be in buffer
 01CF 2E0640        or  [I2CHW_SlaveStatus], I2CHW_WR_COMPLETE               ;Same bit as I2CHW_ISR_NEW_ADDR
 01D2                                                                        ;SET WR_COMPL bit if it appears there was write taking place just previous
 01D2                                                                        ;to this new address by looking at the status bits
 01D2           
 01D2           
                IF I2CHW_POLLED_PROCESS                                                                         ;if a new addr was received it's OK to terminate stop detection
                    and [I2CHW_Poll_Status], ~I2C_WRITE_STARTED              ;used to determine the end of a Master write to a slave.
                ELSE                                                                                                                                                ;A REPEAT START could have terminated the transaction without a STOP
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK                    ; set bank1
                        push  A
                        mov   A, reg[OSC_CR0]                     ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x02
                        mov   reg[OSC_CR0], A                     ; throttle the clock down to 12Mhz
                                IF(I2CHW_USED_I2C_BLOCK)
                                and   reg[I2CHW_CFG], ~I2C_STOPIE           ; write data to reg[I2C_CFG]
                                ELSE
                        and   F, ~FLAG_XIO_MASK                   ; set bank0
                        and   reg[I2CHW_CFG], ~I2C_STOPIE           ; write data to reg[I2C_CFG]
                        or    F, FLAG_XIO_MASK                    ; set bank1
                                ENDIF
                        pop   A                                   ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK                   ; set bank0
                        pop   A                                   ; restore original accumulator
                ELSE
                                IF(I2CHW_USED_I2C_BLOCK)
                                or    F, FLAG_XIO_MASK                    ; set bank1
                        and   reg[I2CHW_CFG], ~I2C_STOPIE           ; write data to reg[I2C_CFG]
                                and   F, ~FLAG_XIO_MASK                   ; set bank0
                                ELSE
 01D2 41D6EF                    and   reg[I2CHW_CFG], ~I2C_STOPIE           ; write data to reg[I2C_CFG]
                                ENDIF
                ENDIF
                ENDIF
                    
                
 01D5           NewADDRNotSet:                                               ;use as a way to tag the end of a master write to slave
 01D5           
 01D5           ;@PSoC_UserCode_BODY8@ (Do not change this line.)
 01D5           ;---------------------------------------------------
 01D5           ; Insert your custom code below this banner
 01D5           ;---------------------------------------------------
 01D5           ;
 01D5           ; User could modify this section to allow the I2C routine
 01D5           ; to respond to multiple addresses, memory based soft addresses,
 01D5           ; I/O pin based addresses etc.
 01D5           ;
 01D5           
 01D5 5DD8          mov A, reg[I2CHW_DR]
 01D7 70F9          and F, 0xF9                                              ;clear Carry (C) AND Zero (Z) in Flag register
 01D9 6D            rrc A                                                    ;carry now holds bit 0 (r/~w) from addr byte
                IF (I2CHW_AUTO_ADDR_CHECK^1)   ;; for CY8C28X45 chip: skip address comparison and NACK sending stage-hardware will do this for us  if AutoAddressCompare feature is enabled.
                                                          ;; The code in this pre-compiler directive will be executed for all chips except CY8C28X45.
 01DA 3120          xor A,  I2CHW_SLAVE_ADDR                                 ;for an equate
 01DC B03D          jnz I2C_Terminate
                ENDIF
 01DE 2E0080        or [I2CHW_bStatus], I2CHW_ISR_ACTIVE
 01E1           
 01E1           
 01E1           ;********************************************************
 01E1           ; End user I2C Buffered WRITE (to RAM) Customization
 01E1           ;********************************************************
 01E1           ;@PSoC_UserCode_END@ (Do not change this line.)
 01E1           
 01E1           I2CHW_send_ack:                                              ;slave send address ack
 01E1           
 01E1           ;OK so the addresses were the same was it a read (c=1) or a write (c=0)
 01E1 DFDE          jnc I2C_AckAddr_RXdata                                   ;(Master Write/Slave Receive) for this case we receive data and ack it
 01E3           
 01E3           ;********************************************************
 01E3           ;Master Read (Master Read/Slave Transmit) Ack the address too.
 01E3           ;for this case the master has just sent us OUR read address which must be Ack'ed and will
 01E3           ;subsequently be reading from us (which the master will Ack.  So for the first bit we must
 01E3           ; set the I2C_TX AND the ACK bits in the I2C_SCR (first byte only)
 01E3           ; THEN we'll just be reading the ACK from the master as it reads our data
 01E3           ;********************************************************
                IF DEBUG_STATE
                   mov A, 'a'
                   lcall TX8_1_PutChar
                   mov A, 'r'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF SNIFF_DATA
                   mov A, reg[I2CHW_DR]
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                
 01E3 2606FB        and [I2CHW_SlaveStatus], ~I2CHW_RD_COMPLETE              ;Master will NAK us at the end of transaction
 01E6 5014          mov A, (I2C_ACKOUT | I2C_TX)
 01E8 08            push A
 01E9           
 01E9           ;
 01E9           ;MASTER is READING FROM SLAVE (ram or flash buffer)
 01E9           ;
 01E9           ;;code snipped from old SW I2C below
 01E9           
 01E9           I2C_ObtainReadData:
 01E9           
 01E9           ;********************************************************
 01E9           ; here we need to get the next data to output (master-read)
 01E9           ; also set the status byte for use on exit
 01E9           ;********************************************************
                IF I2CHW_READ_FLASH
                ;@PSoC_UserCode_BODY5@ (Do not change this line.)
                ;---------------------------------------------------
                ; Insert your custom code below this banner
                ; User flash read customization could take place within
                ; this area
                ;---------------------------------------------------
                    tst  [I2CHW_SlaveStatus],I2CHW_READFLASH
                    jz   ReadRamData
                
                ;
                ;get the data
                ;
                    mov  X, [pI2CHW_SlaveRead_BufLO]
                    mov  A, [pI2CHW_SlaveRead_BufHI]
                    romx
                    mov  reg[I2CHW_DR],A
                    dec  [I2CHW_SlaveRead_Count]                             ;calculate addr lsb
                    jnc  SlaveNoDecHighCount
                    dec  [I2CHW_SlaveRead_CountHI]
                    jc   FlashRdOverflow
                
                SlaveNoDecHighCount:
                
                    inc  [pI2CHW_SlaveRead_BufLO]                            ;set the next flash address to read
                    jnc  SlaveNoIncHiAddr
                    inc  [pI2CHW_SlaveRead_BufHI]
                SlaveNoIncHiAddr:
                    jmp   I2CNormalRead
                
                FlashRdOverflow:
                ;deal with the over flow condition by re-sending last data byte (dec the low order addr byte)
                
                    or    [I2CHW_SlaveStatus], I2CHW_RD_OVERFLOW
                    and   [I2CHW_SlaveStatus], ~I2CHW_RD_NOERR
                ;set count back to 0
                    mov   [I2CHW_SlaveRead_CountHI], 0                       ;functionally the same as incrementing ffff and less instructions
                    mov   [I2CHW_SlaveRead_Count], 0
                    jmp   I2CNormalRead                          
                ;---------------------------------------------------
                ; Insert your custom code above this banner
                ; END User flash read customization
                ;---------------------------------------------------
                ;@PSoC_UserCode_END@ (Do not change this line.)
                
                ENDIF
                
                ;@PSoC_UserCode_BODY6@ (Do not change this line.)
                ;---------------------------------------------------
                ; Insert your custom code below this banner
                ;---------------------------------------------------
                ; By replacing the section from here down to the next block
                ; a user could process data for a custom I2C READ application
                ;********************************************************
 01E9           ReadRamData:
 01E9           ;read the current data byte
                IF SYSTEM_LARGE_MEMORY_MODEL
                    mov   A, [pI2CHW_SlaveRead_BufHI]
                ENDIF
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[IDX_PP], A
                   ENDIF
 01E9 5809          mov   X, [pI2CHW_SlaveRead_BufLO]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
 01EB 5200          mov   A, [X]
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_00b
                   ENDIF
 01ED 60D8          mov   reg[I2CHW_DR], A
 01EF 7A0B          dec   [I2CHW_SlaveRead_Count]
 01F1 C005          jc    I2CHW_readOverflow
 01F3 7609          inc   [pI2CHW_SlaveRead_BufLO]
 01F5 8009          jmp   I2CNormalRead
 01F7           ;
 01F7           ;ram read overflow detected here, just re-send the last location in the buffer
 01F7           ;
 01F7           I2CHW_readOverflow:
 01F7 2E0602        or    [I2CHW_SlaveStatus], I2CHW_RD_OVERFLOW
 01FA 2606FE        and   [I2CHW_SlaveStatus], ~I2CHW_RD_NOERR
 01FD 760B          inc   [I2CHW_SlaveRead_Count]                            ; set back to zero
 01FF           
 01FF           ;********************************************************
 01FF           ; End user I2C READ customization section
 01FF           ;********************************************************
 01FF           ; Insert your custom code above this banner
 01FF           ;---------------------------------------------------
 01FF           ;@PSoC_UserCode_END@ (Do not change this line.)
 01FF           
 01FF           
 01FF           I2CNormalRead:
 01FF           
 01FF           ;******************************************************************************************
 01FF           ;;; MASTER READ (SLAVE TRANSMITTING DATA) (STATE DATA r);;;
 01FF           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'r'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF SNIFF_DATA
                   mov A, reg[I2CHW_DR]
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                ;and place there based on whether or not the previous transmission was our I2C address.
 01FF 18            pop A
 0200           
 0200           ;
 0200           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 0200           ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], A    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0200 60D7              mov   reg[I2CHW_SCR], A ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 0202 20            pop X
 0203 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 0204 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
                ; 1. If NAK received from Master, then clear the ISR_ACTIVE flag in bStatus register, set
                ;    the RD_NO_ERR and RD_COMPLETE flags in SlaveStatus register and wait for the next 
                ;    address to be received.
                ; 2. If ACK received from Master, then transmit the next byte.
 0205           I2C_EvaluateACKIN:
 0205 49D702        tst reg[I2CHW_SCR], I2C_LST_BIT
 0208 B006          jnz I2C_LastByteToMstr                                   ; Terminate and wait for next address
 020A               
 020A 5004          mov A, ( I2C_TX )
 020C 08            push A
 020D 8FDB          jmp I2C_ObtainReadData                                   ; Send next byte to Master
 020F           
 020F           I2C_LastByteToMstr:
 020F 2E0601        or  [I2CHW_SlaveStatus], I2CHW_RD_NOERR 
 0212 2E0604        or  [I2CHW_SlaveStatus], I2CHW_RD_COMPLETE
 0215 26007F            and [I2CHW_bStatus], ~I2CHW_ISR_ACTIVE
 0218           ;******************************************************************************************
 0218           ;;; MASTER NAK'ED READ DATA (STATE DATA rn);;;
 0218           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'r'
                   lcall TX8_1_PutChar
                   mov A, 'n'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF SNIFF_DATA
                   mov A, reg[I2CHW_DR]
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF DEBUG_STATE
                   lcall TX8_1_PutCRLF
                ENDIF
 0218 8001      jmp  I2C_TerminateSlaveRead
 021A           
 021A           I2C_Terminate:
 021A           ;******************************************************************************************
 021A           ;;; NAK ADDRESS FOR SLAVE (STATE DATA an);;;
 021A           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'a'
                   lcall TX8_1_PutChar
                   mov A, 'n'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
                IF SNIFF_DATA
                   mov A, reg[I2CHW_DR]
                   lcall TX8_1_PutSHexByte
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                ENDIF
 021A           I2C_TerminateSlaveRead:
 021A 26007F        and [I2CHW_bStatus], ~I2CHW_ISR_ACTIVE
 021D           
 021D           
 021D           ;
 021D           ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
 021D           ;
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 021D 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 0220 20            pop X
 0221 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 0222 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
                ; A Stop Condition has been detected.
 0223           Slave_STOPTRAP:
 0223               ;I2C stop detected
 0223           ;
 0223           ; set a flag to indicate END OF TRANSMISSION
 0223           ;
 0223 2E0640        or  [I2CHW_SlaveStatus], I2CHW_WR_COMPLETE               ;only SET by ISR USER must clear.
 0226 26007F        and [I2CHW_bStatus], ~I2CHW_ISR_ACTIVE
                IF I2CHW_POLLED_PROCESS
                    and [I2CHW_Poll_Status], ~I2C_WRITE_STARTED
                    jmp ExitISR
                ELSE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK                    ; set bank1
                        push  A
                        mov   A, reg[OSC_CR0]                     ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x02
                        mov   reg[OSC_CR0], A                     ; throttle the clock down to 12Mhz
                                IF(I2CHW_USED_I2C_BLOCK)
                                and   reg[I2CHW_CFG], ~I2C_STOPIE           ; write data to reg[I2C_CFG]
                                ELSE
                        and   F, ~FLAG_XIO_MASK                   ; set bank0
                        and   reg[I2CHW_CFG], ~I2C_STOPIE           ; write data to reg[I2C_CFG]
                        or    F, FLAG_XIO_MASK                    ; set bank1
                                ENDIF
                        pop   A                                   ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK                   ; set bank0
                        pop   A                                   ; restore original accumulator
                ELSE
                                IF(I2CHW_USED_I2C_BLOCK)
                                or    F, FLAG_XIO_MASK                    ; set bank1
                        and   reg[I2CHW_CFG], ~I2C_STOPIE           ; write data to reg[I2C_CFG]
                                and   F, ~FLAG_XIO_MASK                   ; set bank0
                                ELSE
 0229 41D6EF                    and   reg[I2CHW_CFG], ~I2C_STOPIE           ; write data to reg[I2C_CFG]
                                ENDIF
                ENDIF
 022C 49D701        tst reg[I2CHW_SCR], I2C_BYTE_COMPL
 022F           ;;if BYTE_COMPL is set, there's an excellent chance to lose an ISR.  Because of the way they are
 022F           ;; latched into the INT_MSK.  Therefore clear the applicable bit (STOPIE) and jump directly to the 
 022F           ;; top of this routing since the bus is currently stalled.  Just in case the ISR is properly latched,
 022F           ;; clear the mask bit since it's is serviced manually.
 022F A006          jz ExitISR
 0231 41DDFE        and  reg[INT_CLR3], ~0x01                                ;clear the I2C interrupt
                ENDIF
                ;******************************************************************************************
                ;;;  FORCING INTERRUPT REPROCESS (STATE DATA Sf);;;
                ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'S'
                   lcall TX8_1_PutChar
                   mov A, 'f'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                   lcall TX8_1_PutCRLF
                ENDIF
 0234 8DCE              jmp Process_REENTRY
 0236                   
 0236           ExitISR: 
 0236           ;******************************************************************************************
 0236           ;;; SLAVE NORMAL STOP (STATE DATA S);;;
 0236           ;******************************************************************************************
                IF DEBUG_STATE
                   mov A, 'S'
                   lcall TX8_1_PutChar
                   mov A, 0x2c
                   lcall TX8_1_PutChar
                   lcall TX8_1_PutCRLF
                ENDIF
                
                IF SYSTEM_LARGE_MEMORY_MODEL
                   pop   A
                   mov   reg[ IDX_PP ], A
                ENDIF
 0236 20            pop X
 0237 18            pop A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                IF I2CHW_POLLED_PROCESS
                        ret                                       ; NOT and ISR so use only a ret to return from poll
                ELSE    
 0238 7E                reti                                      ; use reti to return from ISR
                ENDIF
                
                ENDIF
                
                ; end of file I2CHWINT.asm
