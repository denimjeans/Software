 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           ;;  FILENAME: I2CHW_Mstr.asm
 0000           ;;  Version: 1.90, Updated on 2012/9/21 at 11:59:4
 0000           ;;  Generated by PSoC Designer 5.3.2710
 0000           ;;
 0000           ;;  DESCRIPTION: I2CHW MultiMaster User Module software implementation file
 0000           ;;
 0000           ;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
 0000           ;;        arguments and observe the associated "Registers are volatile" policy.
 0000           ;;        This means it is the caller's responsibility to preserve any values
 0000           ;;        in the X and A registers that are still needed after the API
 0000           ;;        function returns. Even though these registers may be preserved now,
 0000           ;;        there is no guarantee they will be preserved in future releases.
 0000           ;;-----------------------------------------------------------------------------
 0000           ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
 0000           ;;*****************************************************************************
 0000           ;;*****************************************************************************
 0000           
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0062           PWM_CR:       equ 62h          ; Pulse-Width Modulator Control
 0038           PWM_CR_HIGH:          equ 38h    ; MASK: PWM high time
 0006           PWM_CR_LOW:           equ 06h	 ; MASK: PWM low time
 0001           PWM_CR_EN:            equ 01h	 ; MASK: Enable/Disable PWM function
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus Register           (#)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0020           CMP_CR1_CLDIS1:       equ 20h    ; MASK: Column 1 comparator synch enable
 0010           CMP_CR1_CLDIS0:	      equ 10h    ; MASK: Column 0 comparator synch enable
 0000           
 0068           ADC0_CR:      equ 68h          ; Analog Column 0 Configuration
 0080           ADC0_CR_CMPST:        equ 80h    ;
 0040           ADC0_CR_LOREN:        equ 40h    ;
 0020           ADC0_CR_SHEN:         equ 20h    ;
 0008           ADC0_CR_CBSRC:        equ 08h    ;
 0004           ADC0_CR_ADCM:         equ 04h    ;
 0001           ADC0_CR_EN:	          equ 01h    ;
 0000           
 0069           ADC1_CR:      equ 69h          ; Analog Column 1 Configuration
 0080           ADC1_CR_CMPST:        equ 80h    ;
 0040           ADC1_CR_LOREN:        equ 40h    ;
 0020           ADC1_CR_SHEN:         equ 20h    ;
 0008           ADC1_CR_CBSRC:        equ 08h    ;
 0004           ADC1_CR_ADCM:         equ 04h    ;
 0001           ADC1_CR_EN:	          equ 01h    ;
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 0
 0072           ACE00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACE00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type E Row 0 Col 1
 0076           ACE01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACE01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 0
 0080           ASE10CR0:     equ 80h          ; Control register 0                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType E Row 1 Col 1
 0084           ASE11CR0:     equ 84h          ; Control register 0                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Control Registers
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0018           CLK_CR1_ACLK1:        equ 18h    ; MASK: Digital PSoC block for analog source
 0003           CLK_CR1_ACLK0:        equ 03h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 000F           AMD_CR0_AMOD0:        equ 0Fh    ; MASK: Modulation source for analog column 1
 0000           
 0064           CMP_GO_EN:    equ 64h          ; Comparator Bus To Global Out Enable      (RW)
 0080           CMP_GO_EN_GOO5:       equ 80h    ; MASK: Selected Col 1 signal to GOO5
 0040           CMP_GO_EN_GOO1:       equ 40h    ; MASK: Selected Col 1 signal to GOO1
 0030           CMP_GO_EN_SEL1:       equ 30h    ; MASK: Column 1 Signal Select
 0008           CMP_GO_EN_GOO4:       equ 08h    ; MASK: Selected Col 0 signal to GOO4
 0004           CMP_GO_EN_GOO0:       equ 04h    ; MASK: Selected Col 0 signal to GOO0
 0003           CMP_GO_EN_SEL0:       equ 03h    ; MASK: Column 0 Signal Select
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 000F           AMD_CR1_AMOD1:        equ 0Fh    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 006B           CLK_CR3:      equ 6Bh          ; Analog Clock Source Control Register 3   (RW)
 0040           CLK_CR3_SYS1:         equ 40h    ; MASK: Analog Clock 1 selection
 0030           CLK_CR3_DIVCLK1:      equ 30h    ; MASK: Analog Clock 1 divider
 0004           CLK_CR3_SYS0:         equ 04h    ; MASK: Analog Clock 0 selection
 0003           CLK_CR3_DIVCLK0:      equ 03h    ; MASK: Analog Clock 0 divider
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GO_EN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GO_EN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GO_EN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GO_EN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GO_EN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GO_EN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GO_EN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GO_EN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3SEL:       equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0008           VLT_CMP_NOWRITE:      equ 08h    ; MASK: Vcc below allowed flash write level
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E5           ADC0_TR:      equ 0E5h		   ; ADC Column 0 Trim Register               (RW)
 00E6           ADC1_TR:      equ 0E6h          ; ADC Column 1 Trim Register               (RW)
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 00FA           FLS_PR1:      equ 0FAh          ; Flash Program Register 1                 (RW)
 0003           FLS_PR1_BANK:         equ 03h    ; MASK: Select Active Flash Bank
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           SYSTEM_STACK_PAGE: equ 0   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0000           SYSTEM_LARGE_MEMORY_MODEL: equ 0   
 0001           SYSTEM_SMALL_MEMORY_MODEL: equ 1   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C21020.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
 0004           I2CHW_MUM_SEL: equ 4h
 0000           
 0001           I2CHW_SLAVE: equ 1
 0002           I2CHW_MSTR:  equ 2
 0004           I2CHW_MMS:   equ 4
 0000           
 0000           ;I2CHW_SLAVE_ADDR:                          equ   20h                ;Permanent Slave Address
 0000           I2CHW_ADDR_REG_PRESENT:                     equ   0                  ;CY8C28X45 have 1 always while all other have 0
 0000           I2CHW_AUTO_ADDR_CHECK:                      equ   0                  ;CY8C28X45 may have this 0 or 1 while all other have 0
 0000           I2CHW_USED_I2C_BLOCK:                       equ   0                  ;CY8C28X45 have 0 for I2C Controller_0 and 1 for I2C Controller_1, other have 0
 0000           
 0000           ;--------------------------------------------------
 0000           ;   I2CHW API Constants
 0000           ;--------------------------------------------------
 0000           
 00DE           I2CHW_INT_REG:                             equ 0x0de
 0001           I2CHW_INT_MASK:                            equ 0x01
 0000           
 0000           
 0000           
 0000           ;-----------------
 0000           ; Misc. equates
 0000           ;-----------------
 0000           
 0000           ;I2CHW_RsrcStatus byte, Status Bit definitions
 0001           I2CHW_RD_NOERR:                             equ 0x1   ;read completed without errors
 0002           I2CHW_RD_OVERFLOW:                          equ 0x2   ;master read more bytes than were contained in read buffer
 0004           I2CHW_RD_COMPLETE:                          equ 0x4   ;last read transaction complete
 0008           I2CHW_READFLASH:                            equ 0x8   ;set- next read will use flash read buffer, clear- next read will use ram read buffer
 0010           I2CHW_WR_NOERR:                             equ 0x10  ;write completed without errors
 0020           I2CHW_WR_OVERFLOW:                          equ 0x20  ;received bytes exceeded write buffer length
 0040           I2CHW_WR_COMPLETE:                          equ 0x40  ;Master uses this definition, slave uses that below.
 0040           I2CHW_ISR_NEW_ADDR:                         equ 0x40  ;New addre received (can infer that previous transaction is complete)
 0080           I2CHW_ISR_ACTIVE:                           equ 0x80  ;ISR for I2C_slave is is active
 0000           
 0000           
 0004           fI2C_NAKnextWr:                             equ 0x04  ;flag to tell slave to nak next byte from master
 0000           
 0000           
 0000           ;=== I2C equates ===
 0000           
 0000           
 0000           
 00D7           I2CHW_SCR:                                  equ d7h    ; I2C Enable Master/Slave Block Operation
 0000           
 0080           I2CM_BUSERR:    equ 0x80
 0040           I2CM_LOSTARB:   equ 0x40
 0020           I2C_STOP_ST:    equ 0x20
 0010           I2C_ACKOUT:     equ 0x10
 0008           I2C_ADDRIN:     equ 0x08
 0004           I2C_TX:         equ 0x04 ;compliment is RX
 0002           I2C_LST_BIT:    equ 0x02
 0001           I2C_BYTE_COMPL: equ 0x01
 0000           
 00D6           I2CHW_CFG:                                  equ d6h    ; I2C Configuration RegisterI2C
 0000           
 0020           I2C_BUSERRIE:   equ 0x20
 0010           I2C_STOPIE:     equ 0x10
 0008           I2C_CLKR1:      equ 0x08
 0004           I2C_CLKR0:      equ 0x04
 0002           I2C_M_EN:       equ 0x02
 0001           I2C_S_EN:       equ 0x01
 0000           
 00D9           I2CHW_MSCR:                                 equ d9h    ; I2C Master Status and Control
 0000           
 0008           I2CM_BUSBUSY:   equ 0x08
 0004           I2CM_MASTEROP:  equ 0x04
 0002           I2CM_RESTRT:    equ 0x02
 0001           I2CM_SNDSTRT:   equ 0x01
 0000           
 00D8           I2CHW_DR:                                   equ d8h    ; I2C Status and Control Register
 0000           
                IF(I2CHW_ADDR_REG_PRESENT) ;Applicable for CY8C28X45
                I2CHW_ADDR:                  equ @ADDR_ADDRh                     ; I2C Address
                ENDIF
                
                ;Equates used as conditional compile keys
                
                
 0000           I2CHW_READ_BUFTYPE:                         equ 0x0
 0000           
 0000           I2CHW_READ_FLASH:                           equ I2CHW_READ_BUFTYPE & 0x01
 0000           
 0000           I2CHW_24MHZ_FIX:                            equ 0x0
 0000           
 0000           I2CHW_THROTTLE_CLK_RATE:                    equ I2CHW_24MHZ_FIX & 0x01
 0000           
 0000           I2CHW_POLLING_ENABLE:                       equ 0x0
 0000           
 0000           I2CHW_POLLED_PROCESS:                       equ I2CHW_POLLING_ENABLE & 0x01
 0000           
 0000           ;I2C_(status and control) reg write macro
 0000           ;----------------------------------------------------
 0000           ;  I2C_SCR and I2C_MSCR reg write macro
 0000           ;
 0000           ;  Use the following macros to write to the I2C_SCR register
 0000           ;  Usage:    SetI2C_MSCR WRITE_VALUE
 0000           ;            SetI2C_SCR  WRITE_VALUE
 0000           ;            SetI2C_CFG  WRITE_VALUE
 0000           ;
 0000           ;  where WRITE_VALUE is the data to be writen
 0000           ;
 0000           ;----------------------------------------------------
 0000           ; Write to the  I2CHW_SCR register
 0000           ;
 0000               macro SetI2CHW_SCR
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  X
 0000                   mov   X, A                        ; if data for I2C_SCR was in A save it in X
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x1
 0000                   mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if the operation uses data in A get it out of X
 0000                   mov   reg[I2CHW_SCR], @0    ; write data to reg[I2C_SCR]
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   pop   A                           ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if A was data restore it from X now
 0000                   pop   X                           ; restore original accumulator
 0000           ELSE
 0000                   mov   reg[I2CHW_SCR], @0 ; write data to reg[I2C_SCR]
 0000           ENDIF
 0000               macro SetI2CHW_MSCR
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  X
 0000                   mov   X, A                        ; if data for I2C_SCR was in A save it in X
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x01
 0000                   mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if the operation uses data in A get it out of X
 0000                   mov   reg[I2CHW_MSCR], @0   ; write data to reg[I2C_MSCR]
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   pop   A                           ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if A was data restore it from X now
 0000                   pop   X                           ; restore original accumulator
 0000           ELSE
 0000                   mov  reg[I2CHW_MSCR], @0   ; write data to reg[I2C_MSCR]
 0000           ENDIF
 0000               macro BitSetI2CHW_CFG
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  A
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x02
 0000                   mov   reg[OSC_CR0], A             ; throttle the clock down to 12Mhz
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                           ELSE
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                           ENDIF
 0000                   pop   A                           ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   pop   A                           ; restore original accumulator
 0000           ELSE
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           or    F, FLAG_XIO_MASK            ; set bank1
 0000                   or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                           and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                           ELSE
 0000                           or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                           ENDIF
 0000           ENDIF
 0000               macro BitClrI2CHW_CFG
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK                    ; set bank1
 0000                   push  A
 0000                   mov   A, reg[OSC_CR0]                     ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x02
 0000                   mov   reg[OSC_CR0], A                     ; throttle the clock down to 12Mhz
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                           ELSE
 0000                   and   F, ~FLAG_XIO_MASK                   ; set bank0
 0000                   and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                   or    F, FLAG_XIO_MASK                    ; set bank1
 0000                           ENDIF
 0000                   pop   A                                   ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK                   ; set bank0
 0000                   pop   A                                   ; restore original accumulator
 0000           ELSE
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           or    F, FLAG_XIO_MASK                    ; set bank1
 0000                   and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                           and   F, ~FLAG_XIO_MASK                   ; set bank0
 0000                           ELSE
 0000                           and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                           ENDIF
 0000           ENDIF
 0000               macro I2CHW_SERVICE_RETURN
 0000           
 0000           IF I2CHW_POLLED_PROCESS
 0000                   ret                                       ; NOT and ISR so use only a ret to return from poll
 0000           ELSE    
 0000                   reti                                      ; use reti to return from ISR
 0000           ENDIF
 0000               macro I2CHW_POLL_SERVICE
 0000           
 0000           IF I2CHW_POLLED_PROCESS
 0000                   lcall  I2CHW_Poll              ; Call this function repeatedly if we are in a loop
 0000                                                                     ; waiting for bStatus BUS_BUSY to clear.  Otherwise
 0000                                                                                                             ; this is a deadlock condtion
 0000           ENDIF
 0004           I2CHW_BUS_BUSY:                        equ  0x04  ; Set when the bus is busy
 0008           I2CHW_LOST_ARB:                        equ  0x08  ; Set when the master has lost arbitration
 0010           I2CHW_BUS_ERROR:                       equ  0x10  ; Set when a bus error has occurred
 0020           I2CHW_SLAVE_NAK:                       equ  0x20  ; Set when a slave has failed to respond
 0040           I2CHW_ERROR:                           equ  0x40  ; Set when a requested operation failed.
 0080           I2CHW_ISR_ACTIVE:                      equ  0x80  ; Set when ISR is active and I2C operation
 0000                                                             ;  is under progress
 0000           
 0001           I2CHW_SLAVE_OPTION:                    equ 1
 0000           
 0080           fMULTIMASTER_NAK_NEXT_WR:              equ  0x80  ; This is a seperate NAK_NEXT_WR for MULTIMASTER_SLAVE_OPERATION
 0000           
 0000           I2CHW_USED_I2C_BLOCK:                  equ   0 ;CY8C28X45 have 0 for I2C Controller_0 and 1 for I2C Controller_1, other have 0
 0000           
 0000           
 0000           ; end of file I2CHWmms.inc
 0001           I2CHW_READ:           equ  0x01 ; Set the R/W flag after the slave address.
 0000           I2CHW_WRITE:          equ  0x00 ; Clear the R/W flag after the slave address.
 0000           I2CHW_XFER_ERROR:     equ  0x00 ; Slave did not ACK
 0000           
 0000           I2CHW_CompleteXfer:   equ  0x00 ; Perform a complete I2C transfer
 0001           I2CHW_RepStart:       equ  0x01 ; Perform a complete transfer with a Repeat Start
 0002           I2CHW_NoStop:         equ  0x02 ; Perform a complete transfer, but leave off the stop.
 0000           
 0000           I2CHW_NAKslave:       equ  0x00 ; NAK the slave after a read
 0001           I2CHW_ACKslave:       equ  0x01 ; ACK the slave after a read
 0000           
 0000           ; end of file I2CHW.inc
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global Symbols
 0000           ;-----------------------------------------------
 0000           
                export   I2CHW_fSendRepeatStart
                export  _I2CHW_fSendRepeatStart
                export   I2CHW_fSendStart
                export  _I2CHW_fSendStart
                export   I2CHW_SendStop
                export  _I2CHW_SendStop
                export   I2CHW_fReadBytesNoStall
                export  _I2CHW_fReadBytesNoStall
                export   I2CHW_fReadBytes
                export  _I2CHW_fReadBytes
                export   I2CHW_bWriteBytesNoStall
                export  _I2CHW_bWriteBytesNoStall
                export   I2CHW_bWriteBytes
                export  _I2CHW_bWriteBytes
                export   I2CHW_bWriteCBytesNoStall
                export  _I2CHW_bWriteCBytesNoStall
                export   I2CHW_bWriteCBytes
                export  _I2CHW_bWriteCBytes
                
                export   I2CHW_fWrite
                export  _I2CHW_fWrite
                
                export   I2CHW_bRead
                export  _I2CHW_bRead
                
                
                
                ;-------------------------------------------------------------------
                ;  Declare the varables for both the assembler and C compiler.
                ;-------------------------------------------------------------------
                export  I2CHW_bStatus
                export _I2CHW_bStatus
                
                export  I2CHW_RsrcStatus
                export _I2CHW_RsrcStatus
                ;export   I2CHW_bData
                ;export  _I2CHW_bData
                
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                area InterruptRAM(RAM, REL, CON)
                
 0000           _I2CHW_bStatus:
 0000            I2CHW_bStatus:                      BLK  1   ; Bus Status during transfers
 0001           
 0001           _I2CHW_RsrcStatus:
 0001            I2CHW_RsrcStatus:                   BLK  1   ; Bus Status during transfers
 0002           
                AREA UserModules (ROM, REL)
                ;-----------------------------------------------
                ;  EQUATES
                ;-----------------------------------------------
 0001           I2CHW_SLAVE_ACKed:                   equ 0x01 ; This bit set if Slave ACKed Master
 0010           I2CHW_SEND_ACK:                      equ 0x10 ; If this flag set, Master should send ACK
 0000           
 0000           .SECTION
 0000           ;-----------------------------------------------------------------------------
 0000           ;  FUNCTION NAME: I2CHW_bWriteBytesNoStall
 0000           ;
 0000           ;  DESCRIPTION:
 0000           ;    Write multiple data bytes to slave device from RAM. This function allows
 0000           ;    for proper bus arbitration when there is more than one master on the bus
 0000           ;    by first checking to see if the bus is busy.
 0000           ;
 0000           ;-----------------------------------------------------------------------------
 0000           ;
 0000           ;  ARGUMENTS:
 0000           ; [SP-7]=> Mode flags that allow the programmer to set flags
 0000           ;          to determine if:
 0000           ;              0x01 => Use RePeatStart instead of Start
 0000           ;              0x02 => Don't send Stop
 0000           ; [SP-6]=> Count of bytes to write.
 0000           ; [SP-5]=> MSB of Array address to put data in (ignored small mem model).
 0000           ; [SP-4]=> LSB of Array address to put data in.
 0000           ; [SP-3]=> Address of slave
 0000           ;
 0000           ;
 0000           ;  RETURNS:  Master Status/Control register or 0xFF if the bus was busy.
 0000           ;
 0000           ;  SIDE EFFECTS:
 0000           ;    The A and X registers may be modified by this or future implementations
 0000           ;    of this function.  The same is true for all RAM page pointer registers in
 0000           ;    the Large Memory Model.  When necessary, it is the calling function's
 0000           ;    responsibility to perserve their values across calls to fastcall16 
 0000           ;    functions.
 0000           ;          
 0000           ;    Currently only the page pointer registers listed below are modified: 
 0000           ;          CUR_PP
 0000           ;
 0000           ;  THEORY of OPERATION or PROCEDURE:
 0000           ;    1. Checks if the Bus is free.
 0000           ;    2. If busy returns 0xFF.
 0000           ;    3. Else continues the transmission via entry into the bWriteBytes API.
 0000           ;
 0000           ;-----------------------------------------------------------------------------
 FFFFFFF9           TxMode:       equ  -7
 FFFFFFFA           TxByteCount:  equ  -6
 FFFFFFFB           TxArrayHI:    equ  -5
 FFFFFFFC           TxArrayLO:    equ  -4
 FFFFFFFD           TxSlaveAddr:  equ  -3
 0000            I2CHW_bWriteBytesNoStall:
 0000           _I2CHW_bWriteBytesNoStall:
 0000           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_MasterStatus
                   ENDIF
                
 0000 4F                mov   X, SP
 0001                   ;test the I2CM_BUSBUSY bit in the MSCR reg
 0001 49D908            tst reg[I2CHW_MSCR], I2CM_BUSBUSY
 0004 A005              jz I2C_BusFree2
 0006 50FF              mov A, 0xff;   bus busy
 0008 7F                ret
 0009                   
 0009           ;-----------------------------------------------------------------------------
 0009           ;  FUNCTION NAME: I2CHW_bWriteBytes
 0009           ;
 0009           ;  DESCRIPTION:
 0009           ;    Write multiple data bytes to slave device from RAM.
 0009           ;
 0009           ;-----------------------------------------------------------------------------
 0009           ;
 0009           ;  ARGUMENTS:
 0009           ; [SP-7]=> Mode flags that allow the programmer to set flags
 0009           ;          to determine if:
 0009           ;              0x01 => Use RePeatStart instead of Start
 0009           ;              0x02 => Don't send Stop
 0009           ; [SP-6]=> Count of bytes to write.
 0009           ; [SP-5]=> MSB of Array address to put data in (ignored small mem model).
 0009           ; [SP-4]=> LSB of Array address to put data in.
 0009           ; [SP-3]=> Address of slave
 0009           ;
 0009           ;
 0009           ;  RETURNS:  Bus Status
 0009           ;
 0009           ;  SIDE EFFECTS:
 0009           ;    The A and X registers may be modified by this or future implementations
 0009           ;    of this function.  The same is true for all RAM page pointer registers in
 0009           ;    the Large Memory Model.  When necessary, it is the calling function's
 0009           ;    responsibility to perserve their values across calls to fastcall16 
 0009           ;    functions.
 0009           ;          
 0009           ;    Currently only the page pointer registers listed below are modified: 
 0009           ;          CUR_PP
 0009           ;
 0009           ;  THEORY of OPERATION or PROCEDURE:
 0009           ;    1. Checks if the Bus is free.  If not, sets the ERROR and BUS_BUSY flags and exits
 0009           ;    2. If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already 
 0009           ;       running this routine will pend on the ISR_ACTIVE bit until it can run
 0009           ;    3. Initializes the Read buffer in RAM to read data to be sent
 0009           ;    4. Performs a Start or Restart according the Mode specified
 0009           ;    5. The rest is taken care of by the ISR
 0009           ;
 0009           ;-----------------------------------------------------------------------------         
 FFFFFFF9           TxMode:       equ  -7
 FFFFFFFA           TxByteCount:  equ  -6
 FFFFFFFB           TxArrayHI:    equ  -5
 FFFFFFFC           TxArrayLO:    equ  -4
 FFFFFFFD           TxSlaveAddr:  equ  -3
 0009           
 0009            I2CHW_bWriteBytes:
 0009           _I2CHW_bWriteBytes:
 0009           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_MasterStatus
                   ENDIF
                
 0009 4F                mov   X, SP
 000A                   
 000A                   ; Write code here to test the bus busy flag proceed with the start only if the
 000A                   ; bus is free.  If the bus is busy, set flag in the status register and exit
 000A                   
 000A           I2C_BusFree2:
 000A               ;push  A
 000A           I2CMSCR_NotReady2:
                IF I2CHW_POLLED_PROCESS
                        lcall  I2CHW_Poll              ; Call this function repeatedly if we are in a loop
                                                                          ; waiting for bStatus BUS_BUSY to clear.  Otherwise
                                                                                                                  ; this is a deadlock condtion
                ENDIF
 000A 470080        tst    [I2CHW_bStatus], I2CHW_ISR_ACTIVE
 000D               ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
 000D               ;and   A, 0x0f                                         ;only look at the lower bits
 000D                    
 000D                    
 000D                    
 000D BFFC          jnz   I2CMSCR_NotReady2
 000F               ;pop   A
 000F           
 000F 550000            mov [I2CHW_bStatus],0                                                            ; Clear all Error flags
 0012 48F901            tst [X+RxMode],I2CHW_RepStart
 0015 B001              jnz BypassBusBusy2                                                                         ; Check transfer is with a Repeat Start condition
 0017                                                                                                                                            ;  Then no need to check if the bus is busy.
 0017           ;   This doesn't seem to contribute, causes lock ups
 0017           ;   BUS_BUSY is cleared automatically when a stop condition happens &
 0017           ;   the master will not generate a start when the bus it busy anyway.
 0017           ;       tst REG[I2C_MSCR],I2CM_BUSBUSY                                   ; Test if the Bus is busy
 0017           ;       jnz I2C_ReturnBusBusy                                                           ; If free proceed
 0017           
 0017           BypassBusBusy2:
 0017 2E0080        or    [I2CHW_bStatus], I2CHW_ISR_ACTIVE                ; flag set here and cleared at end of ISR
 001A 52FD          mov   A, [X + TxSlaveAddr]
 001C 64            asl   A                                                ; Shift address to the left to make
 001D                                                                      ; a complete byte with the R/W bit.
 001D                                                                      ; The ASL takes care of clearing bit 0.
 001D 5300          mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
 001F 60D8          mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
 0021 52F9          mov   A, [X+TxMode]                                                             ; place the TxMode in status so ISR can access it
 0023 2C00          or   [I2CHW_bStatus],A
 0025               ;
 0025               ;we must now initialize a read buffer using I2CHW_InitMasterRamRead
 0025               ;
 0025 10            push   X                                                 ;preserve since it's used later
 0026 77FA          inc    [X+TxByteCount]                                   ;increase this by one since the init routine will decrement it by 1
 0028                                                                        ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
 0028 52FA          mov    A, [X+TxByteCount]                                ;get the write buf size
 002A 08            push   A
 002B 52FB          mov    A, [X+TxArrayHI]                                  ;get the write buf addr
 002D 08            push   A                                                                                            ;this will be ignored
 002E 52FC          mov    A, [X+TxArrayLO]                                  ;get the write buf addr
 0030 08            push   A
 0031 9000          call  I2CHW_InitMasterRamRead                          ;sets the addr and byte count to write to
 0033 38FD          add SP, -3
 0035 20            pop X                                                    ;restore X to be used for the rest of this routine
 0036               ;and  [I2CHW_MasterStatus],~I2C_READFLASH              ;shouldn't be needed should have been taken care of in InitMasterRamRead routine
 0036           
 0036           
 0036 5100          mov   A,[I2CHW_SlaveAddr]
 0038 48F901        tst   [x+TxMode],I2CHW_RepStart
 003B B00A          jnz   DoRestartTx
 003D 49D701        tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                 ; indicates the I2C bus is stalled
 0040 B050          jnz   DoRestartRx
 0042 9162          call  I2CHW_DoStart                                      ; Send a start and address.
 0044 8003          jmp   DoTxAck
 0046           DoRestartTx:
 0046 90AA          call  I2CHW_DoBufferRepeatStart                          ; Send a repeat start and address.
 0048           DoTxAck:
 0048           
 0048           
 0048           WriteSlaveAck:
 0048 5100          mov  a,[I2CHW_bStatus]
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 004A 7F            ret
 004B           
 004B           .ENDSECTION
 004B           
 004B           .SECTION
 004B           ;-----------------------------------------------------------------------------
 004B           ;  FUNCTION NAME: I2CHW_fReadBytesNoStall
 004B           ;
 004B           ;  DESCRIPTION:
 004B           ;    Reads Multiple bytes from Slave. This function allows
 004B           ;    for proper bus arbitration when there is more than one master on the bus
 004B           ;    by first checking to see if the bus is busy.
 004B           ;-----------------------------------------------------------------------------
 004B           ;
 004B           ;  ARGUMENTS:
 004B           ;  [SP-7]=> Mode flags that allow the programmer to set flags
 004B           ;           to determine if:
 004B           ;             0x01 => Use RepeatStart instead of Start
 004B           ;             0x02 => Don't send Stop
 004B           ;  [SP-6]=> Count of bytes to read.
 004B           ;  [SP-5]=> MSB of Array address to put data in (ignorned for small mem model)
 004B           ;  [SP-4]=> LSB of Array address to put data in 
 004B           ;  [SP-3]=> Address of slave
 004B           ;
 004B           ;  RETURNS:  Master Status/Control register or 0xFF if the bus was busy.
 004B           ;
 004B           ;  SIDE EFFECTS:
 004B           ;    The A and X registers may be modified by this or future implementations
 004B           ;    of this function.  The same is true for all RAM page pointer registers in
 004B           ;    the Large Memory Model.  When necessary, it is the calling function's
 004B           ;    responsibility to perserve their values across calls to fastcall16 
 004B           ;    functions.
 004B           ;          
 004B           ;    Currently only the page pointer registers listed below are modified: 
 004B           ;          CUR_PP
 004B           ;
 004B           ;  THEORY of OPERATION or PROCEDURE:
 004B           ;    1. Checks if the Bus is free.
 004B           ;    2. If busy returns 0xFF.
 004B           ;    3. Else continues the transmission via entry into the fReadBytes API.
 004B           ;
 004B           ;-----------------------------------------------------------------------------
 FFFFFFF9           RxMode:         equ  -7
 FFFFFFFA           RxCnt:          equ  -6
 FFFFFFFB           RxArrayHI:      equ  -5
 FFFFFFFC           RxArrayLO:      equ  -4
 FFFFFFFD           RxSlaveAddr:    equ  -3
 004B            I2CHW_fReadBytesNoStall:
 004B           _I2CHW_fReadBytesNoStall:
 004B           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_MasterStatus
                   ENDIF
                
 004B 4F                mov   X, SP
 004C                   ;test the I2CM_BUSBUSY bit in the MSCR reg
 004C 49D908            tst reg[I2CHW_MSCR], I2CM_BUSBUSY
 004F A005              jz I2C_BusFree1
 0051 50FF              mov A, 0xff;   bus busy
 0053 7F                ret
 0054           ;-----------------------------------------------------------------------------
 0054           ;  FUNCTION NAME: I2CHW_fReadBytes
 0054           ;
 0054           ;  DESCRIPTION:
 0054           ;    Reads Multiple bytes from Slave
 0054           ;-----------------------------------------------------------------------------
 0054           ;
 0054           ;  ARGUMENTS:
 0054           ;  [SP-7]=> Mode flags that allow the programmer to set flags
 0054           ;           to determine if:
 0054           ;             0x01 => Use RepeatStart instead of Start
 0054           ;             0x02 => Don't send Stop
 0054           ;  [SP-6]=> Count of bytes to read.
 0054           ;  [SP-5]=> MSB of Array address to put data in (ignorned for small mem model)
 0054           ;  [SP-4]=> LSB of Array address to put data in 
 0054           ;  [SP-3]=> Address of slave
 0054           ;
 0054           ;  RETURNS:  The Bus Status
 0054           ;
 0054           ;  SIDE EFFECTS:
 0054           ;    The A and X registers may be modified by this or future implementations
 0054           ;    of this function.  The same is true for all RAM page pointer registers in
 0054           ;    the Large Memory Model.  When necessary, it is the calling function's
 0054           ;    responsibility to perserve their values across calls to fastcall16 
 0054           ;    functions.
 0054           ;          
 0054           ;    Currently only the page pointer registers listed below are modified: 
 0054           ;          CUR_PP
 0054           ;
 0054           ;  THEORY of OPERATION or PROCEDURE:
 0054           ;    1. Checks if the Bus is free.  If not, sets the ERROR and BUS_BUSY flags and exits
 0054           ;    2. If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already 
 0054           ;       running this routine will pend on the ISR_ACTIVE bit until it can run
 0054           ;    3. Initializes the write buffer in RAM for Master to deposit data
 0054           ;    4. Performs a Start or Restart according the Mode specified
 0054           ;    5. The rest is taken care of by the ISR
 0054           ;
 0054           ;----------------------------------------------------------------------------- 
 FFFFFFF9           RxMode:         equ  -7
 FFFFFFFA           RxCnt:          equ  -6
 FFFFFFFB           RxArrayHI:      equ  -5
 FFFFFFFC           RxArrayLO:      equ  -4
 FFFFFFFD           RxSlaveAddr:    equ  -3
 0054           
 0054            I2CHW_fReadBytes:
 0054           _I2CHW_fReadBytes:
 0054           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_MasterStatus
                   ENDIF
 0054 4F                mov   X, SP
 0055                   
 0055           I2C_BusFree1:	
 0055               ;push  A
 0055           I2CMSCR_NotReady1:
                IF I2CHW_POLLED_PROCESS
                        lcall  I2CHW_Poll              ; Call this function repeatedly if we are in a loop
                                                                          ; waiting for bStatus BUS_BUSY to clear.  Otherwise
                                                                                                                  ; this is a deadlock condtion
                ENDIF
 0055 470080            tst    [I2CHW_bStatus], I2CHW_ISR_ACTIVE
 0058               ;mov   A, reg[I2CHW_MSCR]                            ;read the mscr register to look for pending master operations
 0058               ;and   A, 0x0f                                         ;only look at the lower bits
 0058                    
 0058                    
 0058                    
 0058                    
 0058                   ; Here a Timeout condition may be used to get out if the program hangs
 0058 BFFC              jnz   I2CMSCR_NotReady1
 005A                   ;pop   A
 005A           
 005A 550000            mov [I2CHW_bStatus],0                                           ; Clear the Error Flags
 005D           
 005D 48F901            tst [X+RxMode],I2CHW_RepStart
 0060 B001              jnz BypassBusBusy1                                                                                       ; Check if transfer is with a Repeat Start condition
 0062                                                                                                                                                          ;  Then no need to check if the bus is busy.
 0062           
 0062           BypassBusBusy1:
 0062 2E0080            or    [I2CHW_bStatus], I2CHW_ISR_ACTIVE                 ; flag set here and cleared by ISR
 0065 52FD          mov   A, [X + TxSlaveAddr]
 0067 64                asl   A                                                   ; Shift address to the left to make
 0068                                                                            ; a complete byte with the R/W bit.
 0068 2901          or    A,0x01                                                 ; OR the address with the Read bit.
 006A 5300          mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
 006C 60D8          mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
 006E 52F9          mov   A, [X+RxMode]                                      ; place the RxMode in status so ISR can access it
 0070 2C00          or   [I2CHW_bStatus],A                                                                         ; Set the Mode bit in Status register
 0072           
 0072               ;
 0072               ;we must now initialize a read buffer using I2CHW_InitMasterWrite
 0072               ;
 0072 10            push   X                                               ;preserve since it's used later
 0073 52FA          mov    A, [X+RxCnt]                                    ;get the write buf size
 0075 08            push   A                                                                                
 0076 52FB          mov    A, [X+RxArrayHI]                                ;get the write addrHI
 0078 08            push   A                                                                               
 0079 52FC          mov    A, [X+RxArrayLO]                                                                              ;get the write addrLO
 007B 08            push   A                                               ;this will be ignored
 007C 9000          call  I2CHW_InitMasterWrite                            ;sets the addr and byte count to write to
 007E 38FD          add    SP, -3
 0080 20            pop    X                                               ;restore X to be used for the rest of this routine
 0081           
 0081 5100          mov   A,[I2CHW_SlaveAddr]
 0083 48F901        tst   [x+RxMode],I2CHW_RepStart
 0086 B00A          jnz   DoRestartRx
 0088 49D701        tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
 008B B005          jnz   DoRestartRx
 008D 9117          call  I2CHW_DoStart                                    ; Send a start and address.
 008F 8003          jmp   CheckRxAck
 0091           
 0091           DoRestartRx:
 0091           	
 0091 905F          call  I2CHW_DoBufferRepeatStart                          ; Send a repeat start and address.
 0093           
 0093                   ; note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
 0093                   ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
 0093                   ; as a whole be able to detect that a stop has not been sent previously in this transmission.
 0093           
 0093           CheckRxAck:                                                ; Test to see if Slave ACKed
 0093                   ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
 0093                   ;is finished.
 0093           End_RD:
 0093 5100          mov  a,[I2CHW_bStatus]
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0095 7F                ret
 0096           
 0096           .ENDSECTION
 0096           
 0096           .SECTION
 0096           ;-----------------------------------------------------------------------------
 0096           ;  FUNCTION NAME: I2CHW_bWriteCBytesNoStall
 0096           ;
 0096           ;  DESCRIPTION:
 0096           ;    Write multiple data bytes to slave device from ROM. This function allows
 0096           ;    for proper bus arbitration when there is more than one master on the bus
 0096           ;    by first checking to see if the bus is busy.
 0096           ;
 0096           ;-----------------------------------------------------------------------------
 0096           ;
 0096           ;  ARGUMENTS:
 0096           ;  [SP-7]=> Mode flags that allow the programmer to set flags
 0096           ;            to determine if:
 0096           ;               0x01 => Use RepeatStart instead of Start
 0096           ;               0x02 => Don't send Stop
 0096           ;  [SP-6]=> Count of bytes to write.
 0096           ;  [SP-5]=> MSB of ROM Array address to get data from
 0096           ;  [SP-4]=> LSB of ROM Array address to get data from.
 0096           ;  [SP-3]=> Address of slave
 0096           ;
 0096           ;  RETURNS:  Master Status/Control register or 0xFF if the bus was busy.
 0096           ;
 0096           ;  SIDE EFFECTS:
 0096           ;    The A and X registers may be modified by this or future implementations
 0096           ;    of this function.  The same is true for all RAM page pointer registers in
 0096           ;    the Large Memory Model.  When necessary, it is the calling function's
 0096           ;    responsibility to perserve their values across calls to fastcall16 
 0096           ;    functions.
 0096           ;          
 0096           ;    Currently only the page pointer registers listed below are modified: 
 0096           ;          CUR_PP
 0096           ;
 0096           ;  THEORY of OPERATION or PROCEDURE:
 0096           ;    1. Checks if the Bus is free.
 0096           ;    2. If busy returns 0xFF.
 0096           ;    3. Else continues the transmission via entry into the bWriteCBytes API.
 0096           ;
 0096           ;-----------------------------------------------------------------------------
 FFFFFFF9           TxCMode:       equ  -7
 FFFFFFFA           TxCByteCount:  equ  -6
 FFFFFFFB           TxCArrayMSB:   equ  -5
 FFFFFFFC           TxCArrayLSB:   equ  -4
 0096            I2CHW_bWriteCBytesNoStall:
 0096           _I2CHW_bWriteCBytesNoStall:
 0096           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_MasterStatus
                   ENDIF
                
 0096 4F                mov   X, SP
 0097                   ;test the I2CM_BUSBUSY bit in the MSCR reg
 0097 49D908            tst reg[I2CHW_MSCR], I2CM_BUSBUSY
 009A A005              jz I2C_BusFree3
 009C 50FF              mov A, 0xff;   bus busy
 009E 7F                ret
 009F           ;-----------------------------------------------------------------------------
 009F           ;  FUNCTION NAME: I2CHW_bWriteCBytes
 009F           ;
 009F           ;  DESCRIPTION:
 009F           ;    Write multiple data bytes to slave device from ROM
 009F           ;
 009F           ;-----------------------------------------------------------------------------
 009F           ;
 009F           ;  ARGUMENTS:
 009F           ;  [SP-7]=> Mode flags that allow the programmer to set flags
 009F           ;            to determine if:
 009F           ;               0x01 => Use RepeatStart instead of Start
 009F           ;               0x02 => Don't send Stop
 009F           ;  [SP-6]=> Count of bytes to write.
 009F           ;  [SP-5]=> MSB of ROM Array address to get data from
 009F           ;  [SP-4]=> LSB of ROM Array address to get data from.
 009F           ;  [SP-3]=> Address of slave
 009F           ;
 009F           ;  RETURNS:  Bus Status
 009F           ;
 009F           ;  SIDE EFFECTS:
 009F           ;    The A and X registers may be modified by this or future implementations
 009F           ;    of this function.  The same is true for all RAM page pointer registers in
 009F           ;    the Large Memory Model.  When necessary, it is the calling function's
 009F           ;    responsibility to perserve their values across calls to fastcall16 
 009F           ;    functions.
 009F           ;          
 009F           ;    Currently only the page pointer registers listed below are modified: 
 009F           ;          CUR_PP
 009F           ;
 009F           ;  THEORY of OPERATION or PROCEDURE:
 009F           ;    1. Checks if the Bus is free.  If not, sets the ERROR and BUS_BUSY flags and exits
 009F           ;    2. If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already 
 009F           ;       running this routine will pend on the ISR_ACTIVE bit until it can run
 009F           ;    3. Initializes the Read buffer in ROM to read data to be sent
 009F           ;    4. Performs a Start or Restart according the Mode specified
 009F           ;    5. The rest is taken care of by the ISR
 009F           ;
 009F           ;-----------------------------------------------------------------------------    
 FFFFFFF9           TxCMode:       equ  -7
 FFFFFFFA           TxCByteCount:  equ  -6
 FFFFFFFB           TxCArrayMSB:   equ  -5
 FFFFFFFC           TxCArrayLSB:   equ  -4
 009F           ;TxSlaveAddr:  equ  -3	  ;defined above this line if for reference only
 009F           
 009F            I2CHW_bWriteCBytes:
 009F           _I2CHW_bWriteCBytes:
 009F           
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_MasterStatus
                   ENDIF
 009F 4F                mov   X, SP
 00A0           
 00A0                   ; Write code here to test the bus busy flag proceed with the start only if the
 00A0                   ; bus is free.  If the bus is busy, set flag in the status register and exit
 00A0           
 00A0           I2C_BusFree3:
 00A0               ;push  A
 00A0           I2CMSCR_NotReady3:
                IF I2CHW_POLLED_PROCESS
                        lcall  I2CHW_Poll              ; Call this function repeatedly if we are in a loop
                                                                          ; waiting for bStatus BUS_BUSY to clear.  Otherwise
                                                                                                                  ; this is a deadlock condtion
                ENDIF
 00A0 470080        tst    [I2CHW_bStatus], I2CHW_ISR_ACTIVE
 00A3               ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
 00A3               ;and   A, 0x0f                                         ;only look at the lower bits
 00A3                    ;For multi master operations, a pening start or restart
 00A3                    ;request might be OK, the master might be waiting to
 00A3                    ;acquire the bus from another master
 00A3 BFFC          jnz   I2CMSCR_NotReady3
 00A5               ;pop   A
 00A5 550000            mov [I2CHW_bStatus],0                                                            ; Clear the Error Flags
 00A8 48F901            tst [X+RxMode],I2CHW_RepStart
 00AB B001              jnz BypassBusBusy3                                      ; Check transfer is with a Repeat Start condition
 00AD                                                                                           ;  Then no need to check if the bus is busy.
 00AD           
 00AD           BypassBusBusy3:
 00AD 2E0080        or    [I2CHW_bStatus], I2CHW_ISR_ACTIVE                          ;lag set here but cleared in ISRf
 00B0 52FD          mov   A, [X + TxSlaveAddr]
 00B2 64            asl   A                                                ; Shift address to the left to make
 00B3                                                                      ; a complete byte with the R/W bit.
 00B3                                                                      ; The ASL takes care of clearing bit 0.
 00B3 5300          mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
 00B5 60D8          mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
 00B7 52F9          mov   A, [X+RxMode]                                    ; place the RxMode in status so ISR can access it
 00B9 2C00          or   [I2CHW_bStatus],A
 00BB               ;
 00BB               ;we must now initialize a read buffer using I2CHW_InitMasterFlashRead
 00BB               ;
 00BB 10            push   X                                                 ;preserve X since it's used later
 00BC 5000          mov    A, 0                                              ;get the write buf size (this is the hi order part)
 00BE 77FA          inc    [X+TxCByteCount]                                  ;increase this by one since the init routine will decrement it by 1
 00C0 D002          jnc     . + 3                                            ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
 00C2 74            inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
 00C3 08            push   A
 00C4 52FA          mov    A, [X+TxCByteCount]                               ;initFlasRead needs a 2 byte count this is the low ord byte
 00C6 08            push   A
 00C7 52FB          mov    A, [X+TxCArrayMSB]                                ;get the write buf addr
 00C9 08            push   A                                                                                        ;this will be ignored
 00CA 52FC          mov    A, [X+TxCArrayLSB]                                ;get the write buf addr
 00CC 08            push   A
 00CD 4F            mov    X, sp
 00CE 79            dec    X
 00CF 9000          call  I2CHW_InitMasterFlashRead                        ;sets the addr and byte count to write to
 00D1 38FC          add SP, -4
 00D3 20            pop X                                                    ;restore X to be used for the rest of this routine
 00D4           
 00D4 2E0008        or  [I2CHW_MasterStatus],I2CHW_READFLASH
 00D7 5100          mov   A,[I2CHW_SlaveAddr]
 00D9 48F901        tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
 00DC B00A          jnz   DoCRestartTx                                       ; should executed.
 00DE 49D701        tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
 00E1 BFAF          jnz   DoRestartRx
 00E3 90C1          call  I2CHW_DoStart                                    ; Send a start and address.
 00E5 8003          jmp   DoCTxAck
 00E7           DoCRestartTx:
 00E7 9009          call  I2CHW_DoBufferRepeatStart                            ; Send a repeat start and address.
 00E9           
 00E9           DoCTxAck:                                                    ; Test to see if Slave is ACKed
 00E9           
 00E9           CWriteSlaveAck:
 00E9 5100          mov A,[I2CHW_bStatus]                                                                           ; Return Bus Status
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00EB 7F            ret
 00EC           
 00EC           
 00EC           I2C_ReturnBusBusy:
 00EC 2E0044        or   [I2CHW_bStatus],(I2CHW_BUS_BUSY | I2CHW_ERROR)
 00EF 5100          mov  a,[I2CHW_bStatus]
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00F1 7F            ret
 00F2               
 00F2           .ENDSECTION
 00F2           
 00F2           .SECTION
 00F2           ;-----------------------------------------------------------------------------
 00F2           ;  FUNCTION NAME: I2CHW_DoBufferRepeatStart
 00F2           ;
 00F2           ;  DESCRIPTION:
 00F2           ;    Send repeated start condition and send slave address for buffered transfers.
 00F2           ;-----------------------------------------------------------------------------
 00F2           ;
 00F2           ;  ARGUMENTS:
 00F2           ;     This routine is called internally only.  It is not exported or intended as an API
 00F2           ;
 00F2           ;  RETURNS:
 00F2           ;    None
 00F2           ;
 00F2           ;  SIDE EFFECTS:
 00F2           ;    The A and X registers may be modified by this or future implementations
 00F2           ;    of this function.  The same is true for all RAM page pointer registers in
 00F2           ;    the Large Memory Model.  When necessary, it is the calling function's
 00F2           ;    responsibility to perserve their values across calls to fastcall16 
 00F2           ;    functions.
 00F2           ;          
 00F2           ;    Currently only the page pointer registers listed below are modified: 
 00F2           ;          CUR_PP
 00F2           ;
 00F2           ;  THEORY of OPERATION or PROCEDURE:
 00F2           ;    1. It checks if the Master is in control of the Bus.  If not, sets the ERROR
 00F2           ;       flag and returns
 00F2           ;    2. This is similar to the I2C_DoRepeatStart entry point but this function does not
 00F2           ;       wait for the byte_complete flag.
 00F2           ;
 00F2           ;-----------------------------------------------------------------------------
 00F2           
 00F2           I2CHW_DoBufferRepeatStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_SlaveAddr
                   ENDIF
                    ;here the path through the routine is dependent on the previous transmission.
                        ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                        ; I2C interrupt
                        ; 2a. the master must NAK the byte if he is reading from the slave.
                        ; We do have to look at the status of the I2C block to see what is going on because if there was a
                        ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                        ; by setting the master restart bit and clearing to I2C_SCR (I2C_TX)
                        ; 2b. if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                        ; I2C_SCR reg.  (same as if we were writing to slave).
                        ; 3. once the ISR starts it will figure out which direction we are going with data (sending/receiving)
                        ;
 00F2 60D8          mov   reg[I2CHW_DR], A
 00F4 5300          mov   [I2CHW_SlaveAddr], A
 00F6                   ;tst      reg[I2CHW_MSCR], I2CM_MASTEROP;               ;do we even have control of the bus?
 00F6                   ;jz    notBusMasterErr
 00F6 5DD9          mov   A, reg[I2CHW_MSCR]                                    ;read the mscr register to look for pending master operations
 00F8 210F          and   A, 0x0f                                               ;only look at the lower bits
 00FA A016          jz    BusIdleSendStart
 00FC                   ; for a single master system this should not be an issue,
 00FC                   ; so we'll go ahead and request the restart.  If a stop condition was already generated
 00FC                   ; the state machine will automatically generate a start instead.
 00FC           
 00FC               ; for a Multimaster system, we have to test if the Master is in control of the bus.
 00FC               ; If the condition is Bus Busy, but Master is not in control, then
 00FC           
 00FC 49D904            tst reg[I2CHW_MSCR],I2CM_MASTEROP                                                                                     ; Test if the Bus is in the control of the Master
 00FF A058              jz NotBusMaster1                                                                                
 0101           
 0101               ;SetI2CHW_SCR I2CM_RESTRT
 0101               ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
 0101               ;SetI2CHW_SCR          I2C_TX                               ;even though the restart has been requested the state
 0101                   ;mov      reg[I2CHW_SCR], I2C_TX                        ;even though the restart has been requested the state
 0101           
 0101           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x01
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_MSCR], I2CM_RESTRT   ; write data to reg[I2C_MSCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0101 62D902            mov  reg[I2CHW_MSCR], I2CM_RESTRT   ; write data to reg[I2C_MSCR]
                ENDIF
                ;ELSE
                ;    mov  reg[I2CHW_MSCR], I2CM_RESTRT
                ;ENDIF
                
 0104 49D704        tst   reg[I2CHW_SCR], I2C_TX
 0107 B005          jnz   I2C_RestartRecieve
 0109           
 0109           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], I2C_TX    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0109 62D704            mov   reg[I2CHW_SCR], I2C_TX ; write data to reg[I2C_SCR]
                ENDIF
                ;ELSE
                ;    mov  reg[I2CHW_SCR], I2C_TX                                ;send Ack
                ;ENDIF
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 010C 7F            ret
 010D           
 010D           I2C_RestartRecieve:
 010D           
 010D           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 010D 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_SCR], 0                                    ;send Ack
                ;ENDIF
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0110 7F            ret
 0111           
 0111           ; Since something appears to be messed up do the next best thing to 
 0111           ; a repeat start, send a start.
 0111           BusIdleSendStart:
 0111 5100          mov    A, [I2CHW_SlaveAddr]
 0113 9091          call   I2CHW_DoStart
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0115 7F            ret
 0116           
 0116           .ENDSECTION
 0116           
 0116           .SECTION
 0116           
 0116           ;-----------------------------------------------------------------------------
 0116           ;  FUNCTION NAME: I2CHW_fSendRepeatStart
 0116           ;
 0116           ;  DESCRIPTION:
 0116           ;    Send repeated start condition and send slave address.
 0116           ;
 0116           ;-----------------------------------------------------------------------------
 0116           ;
 0116           ;  ARGUMENTS:
 0116           ;    A has the Slave Address
 0116           ;    X has the data direction. 0-Write, 1-Read
 0116           ;
 0116           ;  RETURNS: Bus Status
 0116           ;    Reg A contains non-0 if there was an error
 0116           ;    reg A contains 0 for success 
 0116           ;        I2CHW_bStatus contains the contains error information
 0116           ;
 0116           ;  SIDE EFFECTS:
 0116           ;    The A and X registers may be modified by this or future implementations
 0116           ;    of this function.  The same is true for all RAM page pointer registers in
 0116           ;    the Large Memory Model.  When necessary, it is the calling function's
 0116           ;    responsibility to perserve their values across calls to fastcall16 
 0116           ;    functions.
 0116           ;          
 0116           ;    Currently only the page pointer registers listed below are modified: 
 0116           ;          CUR_PP
 0116           ;
 0116           ;  THEORY of OPERATION or PROCEDURE:
 0116           ;    1. If the ISR is active, waits till the action is complete
 0116           ;    2. Checks if the Mater has control on the bus.  If not sets the ERROR
 0116           ;       bit in the bStatus register and returns.
 0116           ;    3. Sends the Repeat Start
 0116           ;    4. Waits for the Byte Complete bit to be set.  
 0116           ;    5. Checks if Slave has acknowledged.  If not, sets the SLAVE_NAK
 0116           ;       and ERROR bits and returns.
 0116           ;    
 0116           ;   WARNING: This routine will disable the interrupt
 0116           ;-----------------------------------------------------------------------------
 0116            I2CHW_fSendRepeatStart:
 0116           _I2CHW_fSendRepeatStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_bStatus
                   ENDIF
                    
 0116 08            push  A
 0117 2E0001        or   [I2CHW_bStatus], I2CHW_RepStart
 011A           I2CMSCR_NotReady4:
                IF I2CHW_POLLED_PROCESS
                        lcall  I2CHW_Poll              ; Call this function repeatedly if we are in a loop
                                                                          ; waiting for bStatus BUS_BUSY to clear.  Otherwise
                                                                                                                  ; this is a deadlock condtion
                ENDIF
 011A 470080        tst    [I2CHW_bStatus], I2CHW_ISR_ACTIVE                    ; Test if ISR is active on another operation
 011D BFFC          jnz   I2CMSCR_NotReady4                                     ; Wait if the ISR is already busy...
 011F 49D701        tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                  
 0122 AFF7          jz   I2CMSCR_NotReady4                                      ; Wait if the ISR is already busy...
 0124 18            pop   A
 0125           
 0125 41DEFE        and   reg[I2CHW_INT_REG], ~I2CHW_INT_MASK              ; disable specified interrupt enable bit
 0128 550004        mov   [I2CHW_bStatus], I2CHW_BUS_BUSY
 012B 49D904        tst   reg[I2CHW_MSCR],I2CM_MASTEROP                         ; Test if the Master has control on the bus
 012E A026          jz    Err_Exit_RepStart                                     ; If not Bus Master return
 0130               
 0130 64            asl   a                                                     ; Shift address to the left
 0131 79            dec   x                                                     ; If zero, C flag will be set
 0132 C003          jc    I2C_DoRepeatStart                                     ; Do a write if zero
 0134 2901          or    a,0x01                                                ; Set Read flag
 0136           
 0136           I2C_DoRepeatStart:
 0136               ;here the path through the routine is dependent on the previous transmission.
 0136                   ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
 0136                   ; I2C interrupt
 0136                   ; 2. the master must NAK the byte if he is reading from the slave.
 0136                   ; We don't have to look at the status of the I2C block to see what is going on because if there was a
 0136                   ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
 0136                   ; by setting the master restart bit and writing to I2C_SCR (I2C_TX)
 0136                   ; if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
 0136                   ; I2C_SCR reg.  (same as if we were writing to slave).
 0136                   ;
 0136 60D8          mov   reg[I2CHW_DR], A
 0138 5300          mov   [I2CHW_SlaveAddr], A
 013A           
 013A           ; machine is stalling the SCL and has to be 'released'
 013A           ; Set the RESTRT bit in I2C_MSCR
 013A           ; Clear I2C_SCR to generate a restart condition
 013A           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x01
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_MSCR], I2CM_RESTRT   ; write data to reg[I2C_MSCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 013A 62D902            mov  reg[I2CHW_MSCR], I2CM_RESTRT   ; write data to reg[I2C_MSCR]
                ENDIF
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 013D 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                ;    mov   reg[I2CHW_SCR], 0                                   
                ;ENDIF
                
                ; Wait till the Restart is complete
 0140           WaitRepStrtCompl:
 0140 5DD7          mov   A,  reg[I2CHW_SCR]
 0142           ;;    I2CHW_POLL_SERVICE                                                                             ;Not appropriate for low level functions
 0142 49D701        tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                  
 0145 AFFA          jz    WaitRepStrtCompl
 0147 550020        mov   [I2CHW_bStatus], I2CHW_SLAVE_NAK
 014A 49D702        tst   reg[I2CHW_SCR], I2C_LST_BIT                               ; Test to see if Slave ACKed
 014D B007          jnz   Err_Exit_RepStart                                ; If Slave did not ACK return with SLAVE_NAK Error
 014F           ;    or   [I2CHW_bStatus], I2CHW_RepStart
 014F 550000        mov   [I2CHW_bStatus], 0
 0152 5100          mov   A, [I2CHW_bStatus]
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0154 7F            ret
 0155           
 0155           Err_Exit_RepStart:
 0155               
 0155               ;mov   [I2CHW_bStatus], 0xff	                          ;I2CHW_bStatus should already contain an error condition
 0155 5001          mov   A, 01
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0157 7F            ret
 0158           
 0158           NotBusMaster1:
 0158               ; Some sort of improper operation is being attempted.  The Master has to be in cotrol
 0158               ; to generate a Repeat Start condition.  Set ERROR Flag and return
 0158 2E0040            or [I2CHW_bStatus],I2CHW_ERROR
 015B 26007F            and [I2CHW_bStatus],~I2CHW_ISR_ACTIVE
 015E 5100          mov   A,[I2CHW_bStatus] 
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0160 7F            ret
 0161           
 0161           .ENDSECTION
 0161           
 0161           .SECTION
 0161           ;-----------------------------------------------------------------------------
 0161           ;  FUNCTION NAME: I2CHW_fSendStart
 0161           ;
 0161           ;  DESCRIPTION:
 0161           ;    Generates start condition and sends slave address.
 0161           ;
 0161           ;-----------------------------------------------------------------------------
 0161           ;
 0161           ;  ARGUMENTS:
 0161           ;    A => Contains the slave address.
 0161           ;        X => Conntains the value of the R/W bit. 0 for Write, and Non zero for Read
 0161           ;
 0161           ;  RETURNS:
 0161           ;    Reg A contains non-0 if there was an error
 0161           ;    reg A contains 0 for success 
 0161           ;        I2CHW_bStatus contains the contains error information
 0161           ;
 0161           ;  SIDE EFFECTS:
 0161           ;    The A and X registers may be modified by this or future implementations
 0161           ;    of this function.  The same is true for all RAM page pointer registers in
 0161           ;    the Large Memory Model.  When necessary, it is the calling function's
 0161           ;    responsibility to perserve their values across calls to fastcall16 
 0161           ;    functions.
 0161           ;          
 0161           ;    Currently only the page pointer registers listed below are modified: 
 0161           ;          CUR_PP
 0161           ;
 0161           ;  THEORY of OPERATION or PROCEDURE:
 0161           ;   1. If the I2CHW_ISR_ACTIVE flag is set, it waits till this is cleared
 0161           ;   2. Disables Interrupt
 0161           ;   3. Checks if any BYTE_COMPLETE interrupt is pending.  If yes, sets ERROR flag and
 0161           ;      returns
 0161           ;   4. Checks if Bus is Busy.  If yes, sets the ERROR and BUS_BUSY flags and exits
 0161           ;
 0161           ;  WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
 0161           ;   flag is set to return.
 0161           ;
 0161           ;-----------------------------------------------------------------------------
 0161            I2CHW_fSendStart:
 0161           _I2CHW_fSendStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_bStatus
                   ENDIF
                    ;wait if the bus is already busy...
                    ;push  A
 0161 550000        mov   [I2CHW_bStatus], 0x00
 0164           I2CMSCR_NotReady5:
                IF I2CHW_POLLED_PROCESS
                        lcall  I2CHW_Poll              ; Call this function repeatedly if we are in a loop
                                                                          ; waiting for bStatus BUS_BUSY to clear.  Otherwise
                                                                                                                  ; this is a deadlock condtion
                ENDIF
 0164 470080        tst    [I2CHW_bStatus], I2CHW_ISR_ACTIVE
 0167 BFFC          jnz   I2CMSCR_NotReady5
 0169                   
 0169               ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
 0169               ;and   A, 0x0f                                         ;only look at the lower bits
 0169                     ;For multi master operations, a pening start or restart
 0169                     ;request might be OK, the master might be waiting to
 0169                     ;acquire the bus from another master
 0169               ;pop   A
 0169           
 0169               ; disable the interrupt
 0169                   ; *** NOT REENABLED ***
 0169                   ;
 0169 550040        mov    [I2CHW_bStatus], I2CHW_ERROR
 016C 41DEFE        and   reg[I2CHW_INT_REG], ~I2CHW_INT_MASK              ; disable specified interrupt enable bit
 016F 49D701        tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; If there is a pending BYTE_COMPL here
 0172                                                                      ; it is highly probable that a start is not the
 0172                                                                      ; right thing to do
 0172 B02D          jnz   Err_Exit_Start
 0174           
 0174 550004        mov    [I2CHW_bStatus], I2CHW_BUS_BUSY
 0177 49D908            tst   REG[I2CHW_MSCR],I2CM_BUSBUSY                        ; Test if the Bus is busy
 017A A003              jz    I2C_BusFree4                                        ; If free proceed
 017C 8023              jmp   Err_Exit_Start                                      ; If busy return with Bus Busy Error
 017E           
 017E           I2C_BusFree4:	
 017E 64            asl   a                                                ; Shift address to the left
 017F 79            dec   x                                                ; If zero, C flag will be set
 0180 C003          jc    I2C_SndWRStart                                   ; Do a write if zero
 0182 2901          or    a,0x01                                           ; Set Read flag
 0184           I2C_SndWRStart:
 0184           
 0184 60D8          mov   reg[I2CHW_DR], A
 0186 5300          mov   [I2CHW_SlaveAddr], A
 0188           
 0188           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x01
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_MSCR], I2CM_SNDSTRT   ; write data to reg[I2C_MSCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0188 62D901            mov  reg[I2CHW_MSCR], I2CM_SNDSTRT   ; write data to reg[I2C_MSCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                ;ENDIF
                
 018B           WaitStrtByteCompl:
 018B 5DD7          mov   A,  reg[I2CHW_SCR]
 018D 49D701        tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                         ; Test to see if Slave ACKed
 0190 AFFA          jz    WaitStrtByteCompl
 0192 49D702        tst   reg[I2CHW_SCR], I2C_LST_BIT
 0195 B007          jnz   Err_Exit_SlaveNak
 0197 550000        mov    [I2CHW_bStatus], 0
 019A 5100          mov   A,[I2CHW_bStatus]
 019C               ;mov  A, 0 ;effective result of previous two operations
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 019C 7F            ret
 019D           
 019D           Err_Exit_SlaveNak:
 019D 2E0020            or    [I2CHW_bStatus],I2CHW_SLAVE_NAK
 01A0           
 01A0           Err_Exit_Start:
 01A0 2E0040            or    [I2CHW_bStatus],I2CHW_ERROR
 01A3 5100          mov   A, [I2CHW_bStatus]
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01A5 7F            ret
 01A6           
 01A6           
 01A6           ;-----------------------------------------------------------------------------
 01A6           ;  FUNCTION NAME: I2CHW_DoStart
 01A6           ;
 01A6           ;  DESCRIPTION:
 01A6           ;    Generates start condition and sends slave address.
 01A6           ;-----------------------------------------------------------------------------
 01A6           ;
 01A6           ;  ARGUMENTS:
 01A6           ;    A => Contains the slave address with the R/W bit.
 01A6           ;
 01A6           ;  RETURNS:
 01A6           ;    I2CHW_bSTatus - SLAVE_NAK bit indicates if the Slave responded.
 01A6           ;                          If this bit is set, the Slave did not Acknowledge
 01A6           ;
 01A6           ;  SIDE EFFECTS:
 01A6           ;    The A and X registers may be modified by this or future implementations
 01A6           ;    of this function.  The same is true for all RAM page pointer registers in
 01A6           ;    the Large Memory Model.  When necessary, it is the calling function's
 01A6           ;    responsibility to perserve their values across calls to fastcall16 
 01A6           ;    functions.
 01A6           ;          
 01A6           ;    Currently only the page pointer registers listed below are modified: 
 01A6           ;          CUR_PP
 01A6           ;
 01A6           ;  THEORY of OPERATION or PROCEDURE:
 01A6           ;   Writes the Address in Accumulator to the I2C_DR register and sets the
 01A6           ;         SendStart bit in the I2C_MSCR.
 01A6           ;
 01A6           ;-----------------------------------------------------------------------------
 01A6           
 01A6           I2CHW_DoStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_SlaveAddr
                   ENDIF
                ; Here we are not required to test for master operation since we are only attempting 
                ; to gain control of the bus by attempting to assert a Start.  It is the calling routine's
                ; responsibility to ensure that the bus is free.
                
 01A6 60D8          mov   reg[I2CHW_DR], A
 01A8 5300          mov   [I2CHW_SlaveAddr], A
 01AA           
 01AA           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x01
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_MSCR], I2CM_SNDSTRT   ; write data to reg[I2C_MSCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 01AA 62D901            mov  reg[I2CHW_MSCR], I2CM_SNDSTRT   ; write data to reg[I2C_MSCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                ;ENDIF
                
                ;WaitStrtByteCompl1:
                ;    mov   A,  reg[I2CHW_SCR]
                ;       tst       [I2CHW_bStatus],I2CHW_SLAVE_NAK
                ;       jnz   Error1
                ;   tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                         ; Test to see if Slave ACKed
                ;    jz    WaitStrtByteCompl1
                ;Error1:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01AD 7F            ret
 01AE           ;
 01AE           ;   DO NOT PLACE
 01AE           ;   .SECTION
 01AE           ;   .ENDSECTION
 01AE           ;   _fSendStart USES CODE BELOW
 01AE           ;
 01AE           ;-----------------------------------------------------------------------------
 01AE           ;  FUNCTION NAME: I2CHW_fWrite
 01AE           ;
 01AE           ;  DESCRIPTION:
 01AE           ;    Writes a byte to the I2C master bus.
 01AE           ;
 01AE           ;-----------------------------------------------------------------------------
 01AE           ;
 01AE           ;  ARGUMENTS:
 01AE           ;    A contains Data to be written to I2C slave.
 01AE           ;
 01AE           ;  RETURNS:
 01AE           ;   I2CHW_bStatus - If Master is not in control of bus, the ERROR flag is set.
 01AE           ;        If the Slave does not ACK then SLAVE_NAK, and ERROR flags are set
 01AE           ;
 01AE           ;  SIDE EFFECTS:
 01AE           ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 01AE           ;
 01AE           ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 01AE           ;
 01AE           ;  FUNCTION NAME: I2CHW_write
 01AE           ;
 01AE           ;  DESCRIPTION:
 01AE           ;    Writes a byte to the I2C master bus. Also used for sending the address.
 01AE           ;
 01AE           ;  ARGUMENTS:
 01AE           ;    Reg A contains data to be written to the bus (destroyed).
 01AE           ;
 01AE           ;  PROCEDURE:
 01AE           ;    This routine first disables the I2C interrupt.  Then it checks if the Master
 01AE           ;    is in control of the bus.  If not, sets the ERROR flag in bStatus and returns.
 01AE           ;        Then it writes the data to the Data register and enables the I2C_TX bit to
 01AE           ;        transmit the data.  It waits till the Byte Tx is complete.  It checks for the
 01AE           ;        Slave ACK or NAK condition.  If slave ACKed then it returns.  If slave NAKed,
 01AE           ;        then it sets the ERROR and SLAVE_NAK flags of bStatus and returns.     
 01AE           ;
 01AE           ;  RETURNS:
 01AE           ;   I2CHW_bStatus - If Master is not in control of bus, the ERROR flag is set.
 01AE           ;        If the Slave does not ACK then SLAVE_NAK, and ERROR flags are set
 01AE           ;    returns A=01 (non zero= TRUE) for success, A= 0 (false = 0) for failure
 01AE           ;    I2CHW_bStatus contains error flags
 01AE           ;
 01AE           ;  SIDE EFFECTS:
 01AE           ;    The A and X registers may be modified by this or future implementations
 01AE           ;    of this function.  The same is true for all RAM page pointer registers in
 01AE           ;    the Large Memory Model.  When necessary, it is the calling function's
 01AE           ;    responsibility to perserve their values across calls to fastcall16 
 01AE           ;    functions.
 01AE           ;          
 01AE           ;    Currently only the page pointer registers listed below are modified: 
 01AE           ;          CUR_PP
 01AE           ;
 01AE           ;   WARNING: This routine will explicitly disable the I2C interrupt.  
 01AE           ;
 01AE           ;-----------------------------------------------------------------------------
 01AE           I2CHW_fWrite:
 01AE           _I2CHW_fWrite:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_bStatus
                   ENDIF
                    ; disable the interrupt
                        ; *** NOT REENABLED ***
                        ;
                
 01AE 60D8          mov   reg[I2CHW_DR],A                                       ; Put data in Data Reg
 01B0 41DEFE        and   reg[I2CHW_INT_REG], ~I2CHW_INT_MASK              ; disable specified interrupt enable bit
 01B3 5DD9          mov   A,  reg[I2CHW_MSCR]                                   ; MSCR into A incase there is an error here
 01B5 2E0004        or    [I2CHW_bStatus], I2CHW_BUS_BUSY
 01B8 49D904        tst   reg[I2CHW_MSCR],I2CM_MASTEROP                         ; Do we have control of the bus?
 01BB A024              jz    Err_Exit_fWrite                                                                                             ; If Master not in control of the bus, set ERROR flag
 01BD                                                                                                                                                                             ;   and exit
 01BD           
 01BD           I2CHW_write:
 01BD           _I2CHW_write:
 01BD 550000        mov   [I2CHW_bStatus],0x00                                  ; Clear ACK flag
 01C0           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], I2C_TX    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 01C0 62D704            mov   reg[I2CHW_SCR], I2C_TX ; write data to reg[I2C_SCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_SCR], I2C_TX                               ; Transmit Data in Data Reg
                ;ENDIF
                
                
 01C3           WaitTXByteCompl:
 01C3 5DD7          mov   A, reg[I2CHW_SCR]
 01C5 550040        mov    [I2CHW_bStatus], I2CHW_ERROR
 01C8 49D720        tst   reg[I2CHW_SCR],I2C_STOP_ST                                                           ; Not precisely sure what happened but transaction is done
 01CB B014          jnz   Err_Exit_fWrite                  
 01CD 49D701        tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                  
 01D0 AFF2          jz    WaitTXByteCompl                                                                                                     ; Wait till Byte Completes
 01D2 550020        mov    [I2CHW_bStatus], I2CHW_SLAVE_NAK
 01D5 49D702        tst   reg[I2CHW_SCR], I2C_LST_BIT                                                  ; Test to see if Slave ACKed
 01D8 B007          jnz   Err_Exit_fWrite                                                                                       ; Report SLAVE_NAK error, if slave did not respond
 01DA 550000        mov   [I2CHW_bStatus], 0x0
 01DD 5000          mov   A, 0
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01DF 7F            ret
 01E0           
 01E0           Err_Exit_fWrite:
 01E0 5001          mov   A, 01
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01E2 7F            ret
 01E3           
 01E3           
 01E3           .ENDSECTION
 01E3           
 01E3           .SECTION
 01E3           ;-----------------------------------------------------------------------------
 01E3           ;  FUNCTION NAME: I2CHW_get_ack
 01E3           ;
 01E3           ;  DESCRIPTION:
 01E3           ;    Get slave acknowledge response. Used to poll for I2C_BYTE_COMPL and then test Ack (I2C_LST_BIT)
 01E3           ;
 01E3           ;-----------------------------------------------------------------------------
 01E3           ;
 01E3           ;  ARGUMENTS:
 01E3           ;
 01E3           ;  RETURNS:
 01E3           ;    Sets the SLAVE_NAK flag in the bStatus register if the Slave did not Acknowledge
 01E3           ;
 01E3           ;  SIDE EFFECTS:
 01E3           ;    The A and X registers may be modified by this or future implementations
 01E3           ;    of this function.  The same is true for all RAM page pointer registers in
 01E3           ;    the Large Memory Model.  When necessary, it is the calling function's
 01E3           ;    responsibility to perserve their values across calls to fastcall16 
 01E3           ;    functions.
 01E3           ;          
 01E3           ;    Currently only the page pointer registers listed below are modified: 
 01E3           ;          CUR_PP
 01E3           ;
 01E3           ;    Do the ack clock and check for Slave ACK
 01E3           ;
 01E3           ;-----------------------------------------------------------------------------
 01E3           I2CHW_get_ack:
 01E3           _I2CHW_get_ack:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_bStatus
                   ENDIF
 01E3 2600DF        and [I2CHW_bStatus], ~I2CHW_SLAVE_NAK
 01E6 49D701        tst reg[I2CHW_SCR], I2C_BYTE_COMPL
 01E9 BFF9          jnz I2CHW_get_ack
 01EB 49D702        tst reg[I2CHW_SCR], I2C_LST_BIT
 01EE B005          jnz notAcked
 01F0 550000        mov [I2CHW_bStatus], 0
 01F3 7F            ret
 01F4               
 01F4           notAcked:
 01F4 2E0020        or [I2CHW_bStatus], I2CHW_SLAVE_NAK
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01F7 7F            ret
 01F8           
 01F8           .ENDSECTION
 01F8           
 01F8           .SECTION
 01F8           
 01F8           ;-----------------------------------------------------------------------------
 01F8           ;  FUNCTION NAME: I2CHW_bRead
 01F8           ;
 01F8           ;  DESCRIPTION:
 01F8           ;    Reads 1 data byte from the I2C master bus.
 01F8           ;
 01F8           ;-----------------------------------------------------------------------------
 01F8           ;
 01F8           ;  ARGUMENTS:
 01F8           ;    Reg A Contains Ack or Nak information. If 0, the received byte is NAKed.
 01F8           ;        If Reg A contains 1, then the received byte is ACKed.    
 01F8           ;
 01F8           ;  RETURNS:
 01F8           ;    ret A contains returned data
 01F8           ;    Reg A contains 0 if there was an error 
 01F8           ;        I2CHW_bStatus contains the contains error information
 01F8           ;
 01F8           ;  SIDE EFFECTS:
 01F8           ;    The A and X registers may be modified by this or future implementations
 01F8           ;    of this function.  The same is true for all RAM page pointer registers in
 01F8           ;    the Large Memory Model.  When necessary, it is the calling function's
 01F8           ;    responsibility to perserve their values across calls to fastcall16 
 01F8           ;    functions.
 01F8           ;          
 01F8           ;    Currently only the page pointer registers listed below are modified: 
 01F8           ;          CUR_PP
 01F8           ;
 01F8           ;    The I2CHW interrupt should be disabled since this routine will poll the
 01F8           ;    reg[I2CHW_SCR] to determine when a byte is available
 01F8           ;
 01F8           ;   WARNING: This routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
 01F8           ;    flag is set to return.
 01F8           ;
 01F8           ;
 01F8           ;-----------------------------------------------------------------------------
 01F8           I2CHW_bRead:
 01F8           _I2CHW_bRead:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_bStatus
                   ENDIF
                    ; disable the interrupt
                    ; *** NOT REENABLED ***
                    ;
                
 01F8 41DEFE        and   reg[I2CHW_INT_REG], ~I2CHW_INT_MASK              ; disable specified interrupt enable bit
 01FB 49D904        tst   reg[I2CHW_MSCR], I2CM_MASTEROP                              ; Do we have control of the bus?
 01FE 550004        mov    [I2CHW_bStatus], I2CHW_BUS_BUSY
 0201 A028          jz    Err_Exit_bRead                                        ; Set Error Flag and Return
 0203 550000        mov   [I2CHW_bStatus],0x00                                  ; Clear Status
 0206           
 0206           ; Check for the special case of the first read after and address is sent
 0206 08            push  A                                                     ;preserve the information about wether to ACK or NAK this byte
 0207 5DD7          mov   A, reg[I2CHW_SCR]
 0209 49D708        tst   reg[I2CHW_SCR], I2C_ADDRIN
 020C A004          jz    WaitRXByteCompl                                       ;addr bit not set then this is a normal read
 020E           
 020E           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 020E 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_SCR], 0                                    ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                ;ENDIF
                                                                                ; through to I2CHW_put_ack.
                
                    ;must DROP through to send an Ack and another byte,
                    ;to stop reading we NAK the slave
 0211           WaitRXByteCompl:
 0211 49D701        tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                         ; Wait till Byte is read
 0214 AFFC          jz    WaitRXByteCompl
 0216           
 0216 18            pop   A                                                     ; Recover the saved ACK/NAK flag
 0217 21FF          and   A,0xFF                                                ; Is Ack flag set?
 0219 A00A          jz    exit_bRead_NOACK                                      ; Don't ACK
 021B           
 021B               ;now if the ACK flag was set, Ack the data which will release the bus and start the next byte in
 021B               ;otherwise do NOTHING to the SCR reg.  This will allow the calling routine to generate a repeat start
 021B               ;or a stop depending on it's preference.
 021B           
 021B 5DD8          mov   A, reg[I2CHW_DR]                                      ; Record data received
 021D               ;mov   [I2CHW_bData],A                                                                                     ; Write received data to bData
 021D           
 021D           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], I2C_ACKOUT    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 021D 62D710            mov   reg[I2CHW_SCR], I2C_ACKOUT ; write data to reg[I2C_SCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_SCR], I2C_ACKOUT                           ; Send Ack
                ;ENDIF
                
 0220 550000        mov   [I2CHW_bStatus],0x00                             ; No error bits set
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0223 7F            ret
 0224           
 0224           exit_bRead_NOACK:
 0224 5DD8          mov   A, reg[I2CHW_DR]                                      ; Record data received
 0226               ;mov   [I2CHW_bData],A                                                                                     ; Write received data to bData
 0226                   
 0226               ; send no Ack or Nak, the calling routine will have to decide to NAK or execute a repeat start.
 0226               ; sending nothing leaves the bus held in wait until a decision is made.
 0226 550000        mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0229 7F            ret
 022A           
 022A           
 022A           Err_Exit_bRead:
 022A 5000          mov   A, 00                                                  ;Data should be in A but something went wrong
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 022C 7F            ret
 022D           
 022D           .ENDSECTION
 022D           
 022D           
 022D           .SECTION
 022D           ;-----------------------------------------------------------------------------
 022D           ;  FUNCTION NAME: I2CHW_SendStop
 022D           ;
 022D           ;  DESCRIPTION:
 022D           ;    Assert stop condition.
 022D           ;
 022D           ;-----------------------------------------------------------------------------
 022D           ;
 022D           ;  ARGUMENTS: none
 022D           ;
 022D           ;  RETURNS: none
 022D           ;
 022D           ;  SIDE EFFECTS:
 022D           ;    The A and X registers may be modified by this or future implementations
 022D           ;    of this function.  The same is true for all RAM page pointer registers in
 022D           ;    the Large Memory Model.  When necessary, it is the calling function's
 022D           ;    responsibility to perserve their values across calls to fastcall16 
 022D           ;    functions.
 022D           ;          
 022D           ;  THEORY of OPERATION or PROCEDURE:
 022D           ;     Send stop by releasing SDA high while SCL high. 
 022D           ;         When in Master Read Mode, this is done by clearing the ACK bit to NAK a read 
 022D           ;            from the slave.
 022D           ;         In Master Write Mode this is done by clearing I2C_TX bit in the I2C_SCR register
 022D           ;     In either case this is a zero written to I2CHW_SCR register.
 022D           ;
 022D           ;-----------------------------------------------------------------------------
 022D            I2CHW_SendStop:
 022D           _I2CHW_SendStop:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 022D 49D904        tst   reg[I2CHW_MSCR], I2CM_MASTEROP                        ; Do we have control of the bus?
 0230 A004          jz    notBusMaster3                                                                                   ; If not nothing to do
 0232           
 0232           ; Clear ACK bit in SCR register to release the bus and to generate a Stop
 0232           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0232 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_SCR], 0                      
                ;ENDIF
                
 0235           notBusMaster3:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0235 7F            ret
 0236           .ENDSECTION
 0236           
 0236           
 0236           
 0236           
 0236           ; End of File I2CHW.asm
