;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: I2CHWCommon.asm
;;  Version: 1.90, Updated on 2012/9/21 at 11:59:4
;;  Generated by PSoC Designer 5.3.2710
;;
;;  DESCRIPTION: I2CHW Multi-Master User Module software implementation file
;;
;;  NOTE: User Module APIs conform to the fastcall convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API
;;        function returns. Even though these registers may be preserved now,
;;        there is no guarantee they will be preserved in future releases.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "memory.inc"
include "I2CHWCommon.inc"
include "I2CHWMMS.inc"
include "I2CHWMstr.inc"

;-----------------------------------------------
; include instance specific register definitions
;-----------------------------------------------

;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------
;-------------------------------------------------------------------
;  Declare the functions global for both assembler and C compiler.
;
;  Note that there are two names for each API. First name is
;  assembler reference. Name with underscore is name refence for
;  C compiler.  Calling function in C source code does not require
;  the underscore.
;-------------------------------------------------------------------

export    I2CHW_InitMasterWrite
export   _I2CHW_InitMasterWrite
export    I2CHW_InitMasterRamRead
export   _I2CHW_InitMasterRamRead
export    I2CHW_InitMasterFlashRead
export   _I2CHW_InitMasterFlashRead
export    I2CHW_bReadMasterStatus
export   _I2CHW_bReadMasterStatus
export    I2CHW_ClrMasterRdStatus
export   _I2CHW_ClrMasterRdStatus
export    I2CHW_ClrMasterWrStatus
export   _I2CHW_ClrMasterWrStatus
export    I2CHW_bReadBusStatus
export   _I2CHW_bReadBusStatus

IF I2CHW_SLAVE_OPTION

export    I2CHW_InitSlaveWrite
export   _I2CHW_InitSlaveWrite
export    I2CHW_InitSlaveRamRead
export   _I2CHW_InitSlaveRamRead
export    I2CHW_InitSlaveFlashRead
export   _I2CHW_InitSlaveFlashRead
export    I2CHW_bReadSlaveStatus
export   _I2CHW_bReadSlaveStatus
export    I2CHW_ClrSlaveRdStatus
export   _I2CHW_ClrSlaveRdStatus
export    I2CHW_ClrSlaveWrStatus
export   _I2CHW_ClrSlaveWrStatus

ENDIF

AREA UserModules (ROM, REL)

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: I2CHW_InitMasterWrite
;
;  DESCRIPTION:
;     Initializes a data buffer pointer for the Master to use to deposit data
;     Typically used when the MASTER READS data from a SLAVE
;     Function also zeroes the value of a count byte for the same buffer.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:  [SP-5]   -- count of bytes to write
;              [SP-4]   -- Hi order part of address Wrbuf
;              [SP-3]   -- Low order part of the address Wrbuf 
;
;  RETURNS:  none
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
;  THEORY of OPERATION or PROCEDURE:
;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
;     the accumulator.  X register is the low order pointer.
;     IF a one byte buffer is established, set a flag to NAK the first written data byte.
;

 I2CHW_InitMasterWrite:
_I2CHW_InitMasterWrite:

WrCnt:   equ -5
WrBufHi: equ -4
WrBufLo: equ -3

   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_PROLOGUE RAM_USE_CLASS_2
   push  X
   mov   X, SP
   dec   X                                                           ;set up the pointer for correct param access
   push  A
   mov   A, reg[I2CHW_INT_REG]
   push  A                                                           ;preserve flags prior to disabling int
   M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK

   RAM_SETPAGE_CUR >I2CHW_bStatus						                              ;Set the Page Pointer for LMM
   and    [I2CHW_MasterStatus], ~fMULTIMASTER_NAK_NEXT_WR                         ;reset the nak-next-written-byte flag.
IF SYSTEM_LARGE_MEMORY_MODEL
   mov   A, [X + WrBufHi]                                            ;move wrbuf addr to A
   mov   [pI2CHW_MasterWrite_BufHI], A
ENDIF
   mov   A, [X + WrBufLo]                                                      ;move wrbuf addr to A
   mov   [pI2CHW_MasterWrite_BufLO], A
   mov   A, [X + WrCnt]                                              ;move Write_count to A
   mov   [I2CHW_MasterWrite_Count], A
   cmp   A, 01                                                       ;if data buffer is one byte long or less
   jz    I2CHW_SetNak
   jc    I2CHW_SetNak
   and   [I2CHW_MasterStatus], ~0x70                                 ;clear the 0x10, 0x20 (Write status bits)
   jmp   I2Cs_1_ResetFlgs

I2CHW_SetNak:
   or    [I2CHW_MasterStatus], fMULTIMASTER_NAK_NEXT_WR                           ;set the nak-next-written-byte flag.
   and   [I2CHW_MasterStatus], ~0x70                                 ; clear the 0x10, 0x20 (Write status bits)
   jmp   I2Cs_1_ResetFlgs

I2Cs_1_ResetFlgs:
   pop A
   and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
   jz  . + 5
   M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
   pop A
    pop X

    RAM_EPILOGUE RAM_USE_CLASS_4
    RAM_EPILOGUE RAM_USE_CLASS_2
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: I2CHW_InitMasterRamRead
;
;  DESCRIPTION:
;     Initializes a data buffer pointer for the Master to use to retrieve data from,
;     and zeroes the value of a count byte for the same buffer.
;     Typically used when the MASTER WRITES data to a SLAVE
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:  [SP-5]  -- count of bytes to read
;              [SP-4]  -- Hi order part of addr to ReadBuf
;              [SP-3]  -- Low order part of the address to ReadBuf
;
;  RETURNS: none
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;

 I2CHW_InitMasterRamRead:
_I2CHW_InitMasterRamRead:

RdCnt:     equ   -5
RdBufHi:   equ   -4
RdBufLo:   equ   -3

   RAM_PROLOGUE RAM_USE_CLASS_2
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >I2CHW_MasterRead_Count
   push  X
   mov   X, SP
   dec   X                                                           ;set up the pointer for correct param access
   push  A
   mov   A, reg[I2CHW_INT_REG]
   push  A                                                           ;preserve flags prior to disabling int
   M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK

IF SYSTEM_LARGE_MEMORY_MODEL
   mov   A, [X + RdBufHi]                                            ;move wrbuf addr to A
   mov   [pI2CHW_MasterRead_BufHI], A
ENDIF
   mov   A, [X + RdBufLo]                                            ; move rdbuf addr to A
   mov   [pI2CHW_MasterRead_BufLO], A
   mov   A, [X + RdCnt]                                              ; move RamRead_count to A
   mov   [I2CHW_MasterRead_Count], A
   dec   [I2CHW_MasterRead_Count]                                        ; since we decrement through zero...
   and   [I2CHW_MasterStatus], ~0x8f                                 ; clear the lower 4 (read status bits) & fMULTIMASTER_NAK_NEXT_WR

   pop A
   and A, I2CHW_INT_MASK                                               ; Only enable if it was previously enabled
   jz  . + 5
   M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
   pop A
   pop X

   RAM_EPILOGUE RAM_USE_CLASS_4
   RAM_EPILOGUE RAM_USE_CLASS_2
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: I2CHW_InitMasterFlashRead
;
;  DESCRIPTION:
;     Initializes a flash data buffer pointer for the Master to use to retrieve
;     data from, and zeroes the value of a count byte for the same buffer.
;     Typically used to set up a buffer for the Master to READ to WRITE data to a SLAVE.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:  [SP-6]   -- Hi order part of flash Read count
;              [SP-5]   -- Low order part of flashRead counts
;              [SP-4]   -- Hi order part of the flash buf address
;              [SP-3]   -- Lo order part of flash buf address
;
;  RETURNS:	 None
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
 I2CHW_InitMasterFlashRead:
_I2CHW_InitMasterFlashRead:

FlRdCntHI:     equ   -6
FlRdCntLO:     equ   -5
FlBufAdrHI:    equ   -4
FlBufAdrLO:    equ   -3

IF I2CHW_READ_FLASH
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_PROLOGUE RAM_USE_CLASS_2
   RAM_SETPAGE_CUR >pI2CHW_MasterRead_BufLO   
   push  X
   mov   X, SP
   dec   X                                                           ;set up the pointer for correct param access
   push  A
   mov   A, reg[I2CHW_INT_REG]
   push  A                                                           ;preserve flags prior to disabling int
   M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK

   mov   A, [X + FlBufAdrLO]                                         ; move flrdbuf LOaddr to A
   mov   [pI2CHW_MasterRead_BufLO], A
   mov   A, [X + FlBufAdrHI]                                         ; move flrdbuf HIaddr to A
   mov   [pI2CHW_MasterRead_BufHI], A
   mov   A, [X + FlRdCntLO]                                          ; move flrdbuf LOcount to A
   mov   [I2CHW_MasterRead_Count], A
   mov   A, [X + FlRdCntHI]                                          ; move flrdbuf HIcount to A
   mov   [I2CHW_MasterRead_CountHI], A

   dec   [I2CHW_MasterRead_Count]                                        ; since this will count throu zero
   jnc    . + 4                                                                               ; only Read_CountHI if Read_Count rolled to 0xff
   dec   [I2CHW_MasterRead_CountHI]

   and   [I2CHW_MasterStatus], ~0x87                                 ; clear the lower 3 (read status bits)& fMULTIMASTER_NAK_NEXT_WR
   or    [I2CHW_MasterStatus],I2CHW_READFLASH                        ; set the flash status bit

   pop A
   and A, I2CHW_INT_MASK                                               ; Only enable if it was previously enabled
   jz  . + 5
   M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
   pop A
   pop X
   RAM_EPILOGUE RAM_USE_CLASS_2
   RAM_EPILOGUE RAM_USE_CLASS_4
ENDIF
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: I2CHW_bReadBusStatus
;
;  DESCRIPTION:
;     Returns the Status bits in the bStatus Register
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;
;  RETURNS:
;     BYTE  bStatus -  Bus status data.  Use the following defined bits
;     returned in A.
;       I2CHW_RepStart:                     equ  0x01
;       I2CHW_NoStop:                       equ  0x02
;       I2CHW_BUS_BUSY:                     equ  0x04
;       I2CHW_LOST_ARB:                     equ  0x08
;       I2CHW_BUS_ERROR:                    equ  0x10
;       I2CHW_SLAVE_NAK:                    equ  0x20
;       I2CHW_ERROR                         equ  0x40
;       I2CHW_ISR_ACTIVE:                   equ  0x80
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;  THEORY of OPERATION or PROCEDURE:
;     Read the Bus Status register.
;

 I2CHW_bReadBusStatus:
_I2CHW_bReadBusStatus:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >I2CHW_bStatus				                      ;Set the Page Pointer for LMM
   mov   A, [I2CHW_bStatus]                      ;return the status in A
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: I2CHW_ReadMasterStatus
;
;  DESCRIPTION:
;     Returns the Status bits in the MasterStatus Register
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;
;  RETURNS:
;     BYTE  MasterStatus -  Master status data.  Use the following defined bits
;     returned in A.
;         I2CHW_RD_NOERR:                   equ 1
;         I2CHW_RD_OVERFLOW:                equ 2
;         I2CHW_RD_INCOMPLETE:              equ 4
;         I2CHW_READFLASH:                  equ 8
;         I2CHW_WR_NOERR:                   equ 10h
;         I2CHW_WR_OVERFLOW:                equ 20h
;         I2CHW_WR_COMPLETE:                equ 40h
;         I2CHW_ISR_ACTIVE:                 equ 80h
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;  THEORY of OPERATION or PROCEDURE:
;     Read the status and control register.
;

 I2CHW_bReadMasterStatus:
_I2CHW_bReadMasterStatus:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >I2CHW_bStatus				                      ;Set the Page Pointer for LMM
   mov   A, [I2CHW_MasterStatus]                                     ;return the status in A
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

.ENDSECTION


.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: I2CHW_ClrMasterRdStatus
;
;  DESCRIPTION:
;     Clears the Read Status bits in the MasterStatus Register.
;     Does not affect the RAM/FLASH Read bit
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: none
;
;  RETURNS: none
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
 I2CHW_ClrMasterRdStatus:
_I2CHW_ClrMasterRdStatus:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >I2CHW_MasterStatus				                 ;Set the Page Pointer for LMM
   and   [I2CHW_MasterStatus], ~0x87                                 ; clear the lower 3 (read status bits) & fMULTIMASTER_NAK_NEXT_WR
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: I2CHW_ClrMasterWrStatus
;
;  DESCRIPTION:
;     Clears the Write Status bits in the MasterStatus Register.
;     Does not affect the RAM/FLASH Read bit
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: none
;
;  RETURNS: none
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
 I2CHW_ClrMasterWrStatus:
_I2CHW_ClrMasterWrStatus:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >I2CHW_MasterStatus				                 ;Set the Page Pointer for LMM
   and   [I2CHW_MasterStatus], ~0x70                                 ; clear bits 10,20 (write status bits)
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

.ENDSECTION


IF I2CHW_SLAVE_OPTION



.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: I2CHW_InitSlaveWrite
;
;  DESCRIPTION:
;     Initializes a data buffer pointer for the Slave to use to deposit data, and
;     zeroes the value of a count byte for the same buffer.
;     Typically used to initialize a buffer to deposit data if the MASTER is 
;     ADDRESSED AS A SLAVE.  
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:  [SP-5]   -- count of bytes to write
;              [SP-4]   -- Hi order part of address Wrbuf
;              [SP-3]   -- Low order part of the address Wrbuf 
;
;  RETURNS:  none
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;    
;     IF a one byte buffer is established, set a flag to NAK the first written data byte.
;

 I2CHW_InitSlaveWrite:
_I2CHW_InitSlaveWrite:

SlWrCnt:   equ -5
SlWrBufHi: equ -4
SlWrBufLo: equ -3

   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_PROLOGUE RAM_USE_CLASS_2
   push  X
   mov   X, SP
   dec   X                                                           ;set up the pointer for correct param access
   push  A
   mov   A, reg[I2CHW_INT_REG]
   push  A                                                             ;preserve flags prior to disabling int
   M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK

   RAM_SETPAGE_CUR >I2CHW_bStatus						                              ;Set the Page Pointer for LMM
   and    [I2CHW_SlaveStatus], ~fMULTIMASTER_NAK_NEXT_WR             ;reset the nak-next-written-byte flag.
IF SYSTEM_LARGE_MEMORY_MODEL
   mov   A, [X + SlWrBufHi]                                          ;move wrbuf addr to A
   mov   [pI2CHW_SlaveWrite_BufHI], A
ENDIF
   mov   A, [X + SlWrBufLo]                                          ;move wrbuf addr to A
   mov   [pI2CHW_SlaveWrite_BufLO], A
   mov   A, [X + SlWrCnt]                                              ;move A to Write_count
   mov   [I2CHW_SlaveWrite_Count], A
   cmp   A, 01                                                         ;if data buffer is one byte long or less
   jz    I2CHW_SetNak1
   jc    I2CHW_SetNak1
   and   [I2CHW_SlaveStatus], ~0x70                                  ;clear the 0x10, 0x20 (Write status bits)
   jmp   I2Cs_1_ResetFlgs

I2CHW_SetNak1:
   or    [I2CHW_SlaveStatus], fMULTIMASTER_NAK_NEXT_WR               ;set the nak-next-written-byte flag.
   and   [I2CHW_SlaveStatus], ~0x70                                  ; clear the 0x10, 0x20 (Write status bits)
   jmp   I2Cs_1_ResetFlgs1

I2Cs_1_ResetFlgs1:
   pop A
   and A, I2CHW_INT_MASK                                                 ; Only enable if it was previously enabled
   jz  . + 5
   M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
   pop A
   pop X
   RAM_EPILOGUE RAM_USE_CLASS_4
   RAM_EPILOGUE RAM_USE_CLASS_2
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: I2CHW_InitSlaveRamRead
;
;  DESCRIPTION:
;     Initializes a data buffer pointer for the Slave to use to retrieve data from,
;     and zeroes the value of a count byte for the same buffer.
;     Typically used to set up a buffer to pull RAM data from if the MASTER is ADDRESSED
;     AS A SLAVE.
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:  [SP-5]  -- count of bytes to read
;              [SP-4]  -- Hi order part of addr to ReadBuf
;              [SP-3]  -- Low order part of the address to ReadBuf
;
;  RETURNS: none
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
 I2CHW_InitSlaveRamRead:
_I2CHW_InitSlaveRamRead:

SlRdCnt:     equ   -5
SlRdBufHi:   equ   -4
SlRdBufLo:   equ   -3

   RAM_PROLOGUE RAM_USE_CLASS_2
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >I2CHW_SlaveRead_Count
   push  X
   mov   X, SP
   dec   X                                                           ;set up the pointer for correct param access
   push  A
   mov   A, reg[I2CHW_INT_REG]
   push  A                                                           ;preserve flags prior to disabling int
   M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK

IF SYSTEM_LARGE_MEMORY_MODEL
   mov   A, [X + SlRdBufHi]                                          ;move wrbuf addr to A
   mov   [pI2CHW_SlaveRead_BufHI], A
ENDIF
   mov   A, [X + SlRdBufLo]                                            ; move rdbuf addr to A
   mov   [pI2CHW_SlaveRead_BufLO], A
   mov   A, [X + RdCnt]                                              ; move RamRead_count to A
   mov   [I2CHW_SlaveRead_Count], A
   dec   [I2CHW_SlaveRead_Count]                                     ; since we decrement through zero...
   and   [I2CHW_SlaveStatus], ~0x0f                                  ; clear the lower 4 (read status bits)

   pop A
   and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
   jz  . + 5
   M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
   pop A
   pop X

   RAM_EPILOGUE RAM_USE_CLASS_4
   RAM_EPILOGUE RAM_USE_CLASS_2
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: I2CHW_InitSlaveFlashRead
;
;  DESCRIPTION:
;     Initializes a flash data buffer pointer for the Slave to use to retrieve
;     data from, and zeroes the value of a count byte for the same buffer.
;     Typically used to set up a FLASH buffer to pull data from if the MASTER is 
;     ADDRESSED AS A SLAVE
; 
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:  [SP-6]   -- Hi order part of flash Read count
;              [SP-5]   -- Low order part of flashRead counts
;              [SP-4]   -- Hi order part of the flash buf address
;              [SP-3]   -- Lo order part of flash buf address
;
;  RETURNS:
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;    Currently only the page pointer registers listed below are modified: 
;          CUR_PP
;
;     A user module parameter is used to conserve code
;     if flash buffers are un-needed.  The API call is left defined and capable of returning in
;     either case
;
 I2CHW_InitSlaveFlashRead:
_I2CHW_InitSlaveFlashRead:

SlFlRdCntHI:     equ   -6
SlFlRdCntLO:     equ   -5
SlFlBufAdrHI:    equ   -4
SlFlBufAdrLO:    equ   -3

IF I2CHW_READ_FLASH
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_PROLOGUE RAM_USE_CLASS_2
   RAM_SETPAGE_CUR >pI2CHW_SlaveRead_BufLO   
   push  X
   mov   X, SP
   dec   X                                                           ;set up the pointer for correct param access
   push  A
   mov   A, reg[I2CHW_INT_REG]
   push  A                                                           ;preserve flags prior to disabling int
   M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK

   mov   A, [X + SlFlBufAdrLO]                                       ; move flrdbuf LOaddr to A
   mov   [pI2CHW_SlaveRead_BufLO], A
   mov   A, [X + SlFlBufAdrHI]                                       ; move flrdbuf HIaddr to A
   mov   [pI2CHW_SlaveRead_BufHI], A
   mov   A, [X + SlFlRdCntLO]                                        ; move flrdbuf LOcount to A
   mov   [I2CHW_SlaveRead_Count], A
   mov   A, [X + SlFlRdCntHI]                                        ; move flrdbuf HIcount to A
   mov   [I2CHW_SlaveRead_CountHI], A

   dec   [I2CHW_SlaveRead_Count]                                     ; since this will count throu zero
   jnc    . + 4                                                                               ; only Read_CountHI if Read_Count rolled to 0xff
   dec   [I2CHW_SlaveRead_CountHI]

   and   [I2CHW_SlaveStatus], ~0x07                                  ; clear the lower 3 (read status bits)
   or    [I2CHW_SlaveStatus],I2CHW_READFLASH                         ; set the flash status bit

   pop A
   and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
   jz  . + 5
   M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
   pop A
	pop X
    RAM_EPILOGUE RAM_USE_CLASS_2
	RAM_EPILOGUE RAM_USE_CLASS_4
ENDIF
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: I2CHW_bReadSlaveStatus
;
;  DESCRIPTION:
;     Returns the Status bits in the SlaveStatus Register
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:
;
;  RETURNS:
;     BYTE  SlaveStatus -  Slave status data.  Use the following defined bits
;     returned in A.
;         I2CHW_RD_NOERR:                   equ 1
;         I2CHW_RD_OVERFLOW:                equ 2
;         I2CHW_RD_INCOMPLETE:              equ 4
;         I2CHW_READFLASH:                  equ 8
;         I2CHW_WR_NOERR:                   equ 10h
;         I2CHW_WR_OVERFLOW:                equ 20h
;         I2CHW_WR_COMPLETE:                equ 40h
;         I2CHW_ISR_ACTIVE:                 equ 80h
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
;  THEORY of OPERATION or PROCEDURE:
;     Read the Slave Status and control register.
;
 I2CHW_bReadSlaveStatus:
_I2CHW_bReadSlaveStatus:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >I2CHW_SlaveStatus				                  ;Set the Page Pointer for LMM
   mov   A, [I2CHW_SlaveStatus]                                     ;return the status in A
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: I2CHW_ClrSlaveRdStatus
;
;  DESCRIPTION:
;     Clears the Read Status bits in the SlaveStatus Register.
;     Does not affect the RAM/FLASH Read bit
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: none
;
;  RETURNS: none
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 I2CHW_ClrSlaveRdStatus:
_I2CHW_ClrSlaveRdStatus:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >I2CHW_SlaveStatus				                  ;Set the Page Pointer for LMM
   and   [I2CHW_SlaveStatus], ~0x07                                 ; clear the lower 3 (read status bits)
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: I2CHW_ClrSlaveWrStatus
;
;  DESCRIPTION:
;     Clears the Write Status bits in the SlaveStatus Register.
;     Does not affect the RAM/FLASH Read bit
;
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: none
;
;  RETURNS: none
;
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 I2CHW_ClrSlaveWrStatus:
_I2CHW_ClrSlaveWrStatus:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >I2CHW_SlaveStatus				                  ;Set the Page Pointer for LMM
   and   [I2CHW_SlaveStatus], ~0x70                                 ; clear bits 10,20 (write status bits)
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret

.ENDSECTION

ENDIF

; End of File I2CHWCommon.asm
