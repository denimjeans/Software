//*****************************************************************************
//*****************************************************************************
//  FILENAME: I2CHWMMS.h
//   Version: 1.90, Updated on 2012/9/21 at 11:59:4
//  Generated by PSoC Designer 5.3.2710
//
//  DESCRIPTION: MultiMasterSlave User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************

#ifndef I2CHW_MMS_INCLUDE
#define I2CHW_MMS_INCLUDE
#endif

#include <m8c.h>

#pragma fastcall16  I2CHW_Poll


// Create pragmas to support proper argument and return value passing
#pragma fastcall16  I2CHW_InitMasterWrite
#pragma fastcall16  I2CHW_InitMasterRamRead
#pragma fastcall16  I2CHW_InitMasterFlashRead
#pragma fastcall16  I2CHW_bReadMasterStatus
#pragma fastcall16  I2CHW_ClrMasterRdStatus
#pragma fastcall16  I2CHW_ClrMasterWrStatus
#pragma fastcall16  I2CHW_bReadBusStatus

// These functions will be used only if Slave option is enabled
#pragma fastcall16  I2CHW_InitSlaveWrite
#pragma fastcall16  I2CHW_InitSlaveRamRead
#pragma fastcall16  I2CHW_InitSlaveFlashRead
#pragma fastcall16  I2CHW_bReadSlaveStatus
#pragma fastcall16  I2CHW_ClrSlaveRdStatus
#pragma fastcall16  I2CHW_ClrSlaveWrStatus


//-------------------------------------------------
// Prototypes of the I2CHW API.
//-------------------------------------------------
extern void  I2CHW_InitMasterWrite(BYTE * pI2CHW_WriteBuf, BYTE  I2CHW_Write_Count);   //proxy class 1
extern void  I2CHW_InitMasterRamRead(BYTE * pI2CHW_ReadBuf, BYTE  I2CHW_Read_Count);   //proxy class 1
extern void  I2CHW_InitMasterFlashRead(const BYTE * pI2CHW_flashaddr,  unsigned int I2CHW_Read_CountHI);
extern BYTE  I2CHW_bReadMasterStatus(void);
extern void  I2CHW_ClrMasterRdStatus(void);
extern void  I2CHW_ClrMasterWrStatus(void);
extern BYTE  I2CHW_bReadBusStatus(void);

extern void  I2CHW_InitSlaveWrite(BYTE * pI2CHW_WriteBuf, BYTE  I2CHW_Write_Count);
extern void  I2CHW_InitSlaveRamRead(BYTE * pI2CHW_ReadBuf, BYTE  I2CHW_Read_Count);
extern void  I2CHW_InitSlaveFlashRead(const BYTE * pI2CHW_flashaddr,  unsigned int I2CHW_Read_CountHI);
extern BYTE  I2CHW_bReadSlaveStatus(void);
extern void  I2CHW_ClrSlaveRdStatus(void);
extern void  I2CHW_ClrSlaveWrStatus(void);

extern void I2CHW_Poll(void);
//-------------------------------------------------
// Status variables for I2CHW API's.
//-------------------------------------------------

#define I2CHW_SLAVE_ADDR                    0x20     //     Permanent Slave Address

#define I2CHW_READ_BUFTYPE                   0x0
#define I2CHW_READ_FLASH                     I2CHW_READ_BUFTYPE & 0x01

#define I2CHW_SLAVE_OPTION

//
//export only the count values used in the i/o processing routine
//
extern unsigned char     I2CHW_MasterWrite_Count;

#if (I2CHW_READ_BUFTYPE)
extern unsigned int    I2CHW_MasterRead_CountHI;

#endif
extern unsigned char    I2CHW_MasterRead_Count;

#ifdef I2CHW_SLAVE_OPTION


extern unsigned char  I2CHW_SlaveWrite_Count;

extern unsigned char  I2CHW_SlaveRead_CountHI;
extern unsigned char  I2CHW_SlaveRead_Count;

#endif


// 
// The following defines are actually provided in I2CHW_RSRCInits.h
// These definitions are provided here for reference purposes.
//
//  Status Bit definitions:
// I2CHW_MasterStatus
// I2CHW_SlaveStatus 
// I2CHW_RsrcStatus
//
//#define  I2CHW_RD_NOERR                      0x1      //read completed without errors
//#define  I2CHW_RD_OVERFLOW                   0x2      //master read more bytes than were contained in read buffer
//#define  I2CHW_RD_COMPLETE                   0x4      //last read transaction is complete
//#define  I2CHW_READFLASH                     0x8      //set- next read will use flash read buffer, clear- next read will use ram read buffer
//#define  I2CHW_WR_NOERR                      0x10     //write completed without errors
//#define  I2CHW_WR_OVERFLOW                   0x20     //received bytes exceeded write buffer length
//#define  I2CHW_WR_COMPLETE                   0x40     //indicates eithe a stop or new addr was rec'd after a write to slave.
//#define  I2CHW_ISR_NEW_ADDR                  0x40     //New address received (can infer that previous transaction is complete)
//#define  I2CHW_ISR_ACTIVE                    0x80     //ISR for I2C is active

//
// Flags in I2CHW_1_bStatus Register (internal bus status) see I2CHW_MMS.inc for definitions
//
// CAUTION CAUTION CAUTION CAUTION CAUTION CAUTION CAUTION CAUTION CAUTION CAUTION CAUTION CAUTION
// 
// DO NOT USE THESE BITS AS DEFINITIONS FOR CHECKING STATUS AND CONTROL VARIABLES OF THE I2C STATE MACHINE
// THOSE DEFINITIONS ARE CONTAINED IN FILE I2CHW_COMMON.INC THESE ARE REPORTING STATUS VARIABLES 
// NOT STATUS/CONTROL BITS
// Status bits for I2CHW_bStatus
//
//reserved bit 0                          equ  0x01  ; Reserved for transfer options  CompleteXfer/RepStart/NoStop
//reserved bit 1						                 equ  0x02  ; Reserved for transfer options, CompleteXfer/RepStart/NoStop

#define I2CHW_BUS_BUSY                        0x04  //; Set when the bus is busy
#define I2CHW_LOST_ARB                        0x08  //; Set when the master has lost arbitration
#define I2CHW_BUS_ERROR                       0x10  //; Set when a bus error has occurred
#define I2CHW_SLAVE_NAK                       0x20  //; Set when a slave has failed to respond
#define I2CHW_ERROR                           0x40  //; Set when a requested operation failed.
#define I2CHW_ISR_ACTIVE                      0x80  //; Set when ISR is active and I2C operation
//                                                             //;  is in progress


//Status bytes for High level commands 
//extern char I2CHW_bData;
extern char I2CHW_bStatus;
extern char I2CHW_MasterStatus;
extern char I2CHW_SlaveStatus;



// end of file I2CHWMMS.h

