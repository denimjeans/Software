//*****************************************************************************
//*****************************************************************************
//  FILENAME: EzADC.h
//  Version: 1.00, Updated on 2012/9/21 at 11:59:1
//	Generated by PSoC Designer 5.3.2710
//
//  DESCRIPTION:  C declarations for the EzADC User Module with
//                a 1st-order modulator.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef EzADC_INCLUDE
#define EzADC_INCLUDE

#include <m8c.h>

#pragma fastcall16 EzADC_Start
#pragma fastcall16 EzADC_SetPower
#pragma fastcall16 EzADC_Stop
#pragma fastcall16 EzADC_GetSamples
#pragma fastcall16 EzADC_StopADC
#pragma fastcall16 EzADC_fIsDataAvailable
#pragma fastcall16 EzADC_iGetDataClearFlag
#pragma fastcall16 EzADC_SetBufferGain
#pragma fastcall16 EzADC_SetReference

//-------------------------------------------------
// Prototypes of the EzADC API.
//-------------------------------------------------
extern void  EzADC_Start(BYTE bPower);
extern void  EzADC_SetPower(BYTE bPower);
extern void  EzADC_Stop(void);
extern void  EzADC_GetSamples(BYTE bNumSamples);
extern void  EzADC_StopADC(void);
extern BYTE  EzADC_fIsDataAvailable(void);
extern INT   EzADC_iGetDataClearFlag(void);
extern void  EzADC_SetBufferGain(BYTE bGainSetting);
extern void  EzADC_SetReference(BYTE bReferenceSetting);

//-------------------------------------------------
// Defines for EzADC API's.
//-------------------------------------------------
#define EzADC_OFF         0
#define EzADC_LOWPOWER    1
#define EzADC_MEDPOWER    2
#define EzADC_HIGHPOWER   3

#define EzADC_G48_0    0x0C
#define EzADC_G24_0    0x1C
#define EzADC_G16_0    0x08
#define EzADC_G8_00    0x18
#define EzADC_G5_33    0x28
#define EzADC_G4_00    0x38
#define EzADC_G3_20    0x48
#define EzADC_G2_67    0x58
#define EzADC_G2_27    0x68
#define EzADC_G2_00    0x78
#define EzADC_G1_78    0x88
#define EzADC_G1_60    0x98
#define EzADC_G1_46    0xA8
#define EzADC_G1_33    0xB8
#define EzADC_G1_23    0xC8
#define EzADC_G1_14    0xD8
#define EzADC_G1_06    0xE8
#define EzADC_G1_00    0xF8

#define EzADC_REF_VSS  0x10
#define EzADC_REF_AGND 0x01

#define EzADC_OFFSET_COMPENSATION:                equ 0
#define EzADC_OFFSET_COMPENSATION_FREQUENCY:      equ 0x7f
#define EzADC_USER_DEF_INPUT_ADC:                 equ 0

//-------------------------------------------------
// Hardware Register Definitions
//-------------------------------------------------
#pragma ioport  EzADC_PWMdr0:   0x034                 //Period reg
BYTE            EzADC_PWMdr0;
#pragma ioport  EzADC_PWMdr1:   0x035                 //1_ADDRh   ; Down count reg
BYTE            EzADC_PWMdr1;               
#pragma ioport  EzADC_PWMdr2:   0x036                 //Compare reg
BYTE            EzADC_PWMdr2;
#pragma ioport  EzADC_PWMcr0:   0x037                 //Control reg
BYTE            EzADC_PWMcr0;
#pragma ioport  EzADC_PWMfn:    0x134                  //Function reg
BYTE            EzADC_PWMfn;
#pragma ioport  EzADC_PWMsl:    0x135                  //Input select reg
BYTE            EzADC_PWMsl;
#pragma ioport  EzADC_PWMos:    0x136                  //Output select reg
BYTE            EzADC_PWMos;
#pragma ioport  EzADC_AtoDcr0:  0x080                //SC Block Control Reg 0
BYTE            EzADC_AtoDcr0;
#pragma ioport  EzADC_AtoDcr1:  0x081                //SC Block Control Reg 1
BYTE            EzADC_AtoDcr1;
#pragma ioport  EzADC_AtoDcr2:  0x082                //SC Block Control Reg 2
BYTE            EzADC_AtoDcr2;
#pragma ioport  EzADC_AtoDcr3:  0x083                //SC Block Control Reg 3
BYTE            EzADC_AtoDcr3;
#pragma ioport  EzADC_GAINcr0:  0x071                //CT Block Control Reg 0
BYTE            EzADC_GAINcr0;
#pragma ioport  EzADC_GAINcr1:  0x072                //CT Block Control Reg 1
BYTE            EzADC_GAINcr1;
#pragma ioport  EzADC_GAINcr2:  0x073                //CT Block Control Reg 2
BYTE            EzADC_GAINcr2;
#pragma ioport  EzADC_GAINcr3:  0x070                //CT Block Control Reg 3
BYTE            EzADC_GAINcr3;
#pragma ioport  EzADC_CNTdr0:   0x030                 //Period reg
BYTE            EzADC_CNTdr0;
#pragma ioport  EzADC_CNTdr1:   0x031                 //1_ADDRh   ; Down count reg
BYTE            EzADC_CNTdr1;               
#pragma ioport  EzADC_CNTdr2:   0x032                 //Compare reg
BYTE            EzADC_CNTdr2;
#pragma ioport  EzADC_CNTcr0:   0x033                 //Control reg
BYTE            EzADC_CNTcr0;
#pragma ioport  EzADC_CNTfn:    0x130                  //Function reg
BYTE            EzADC_CNTfn;
#pragma ioport  EzADC_CNTsl:    0x131                  //Input select reg
BYTE            EzADC_CNTsl;
#pragma ioport  EzADC_CNTos:    0x132                  //Output select reg
BYTE            EzADC_CNTos;

#endif
// end of file EzADC.h
