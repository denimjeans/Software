;;*****************************************************************************
;;*****************************************************************************
;;  FILENAME: EzADC.asm
;;   Version: 1.00, Updated on 2012/9/21 at 11:59:1
;;  Generated by PSoC Designer 5.3.2710
;;
;;  DESCRIPTION: Assembler source for the EzADC A/D Converter
;;               User Module with 1st-order modulator.
;;
;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
;;        arguments and observe the associated "Registers are volatile" policy.
;;        This means it is the caller's responsibility to preserve any values
;;        in the X and A registers that are still needed after the API
;;        function returns. Even though these registers may be preserved now,
;;        there is no guarantee they will be preserved in future releases.
;;-----------------------------------------------------------------------------
;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
;;*****************************************************************************
;;*****************************************************************************

include "m8c.inc"
include "memory.inc"
include "EzADC.inc"


;-----------------------------------------------
;  Global Symbols
;-----------------------------------------------
export  EzADC_Start
export _EzADC_Start
export  EzADC_SetPower
export _EzADC_SetPower
export  EzADC_Stop
export _EzADC_Stop
export  EzADC_GetSamples
export _EzADC_GetSamples
export  EzADC_StopADC
export _EzADC_StopADC
export  EzADC_fIsDataAvailable
export _EzADC_fIsDataAvailable
export  EzADC_iGetDataClearFlag
export _EzADC_iGetDataClearFlag
export  EzADC_SetBufferGain
export _EzADC_SetBufferGain
export  EzADC_SetReference
export _EzADC_SetReference
export  EzADC_RestoreInputADC
export _EzADC_RestoreInputADC
export  EzADC_SetInputADCToAGND
export _EzADC_SetInputADCToAGND

AREA bss (RAM,REL)

;-----------------------------------------------
;  Constant Definitions
;-----------------------------------------------

EzADC_POWERMASK:         equ 03h
EzADC_GAINMASK:          equ f8h
EzADC_HIGHGAIN:          equ 04h
EzADC_HIGHGAINMASK:      equ 18h
EzADC_EXGAIN:            equ 01h
EzADC_REFGAINMASK:       equ 03h
EzADC_STARTCNTMASK:      equ 01h
EzADC_ANALOGBUSMASK:     equ 80h
EzADC_TESTMUXMASK:       equ 1Ch
EzADC_TESTMUXENABLEAGND: equ 14h

;-----------------------------------------------
; Variable Allocation
;-----------------------------------------------

AREA UserModules (ROM, REL)

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: EzADC_Start
;
;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
;               and starts the PWM and CNT
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    The A register contains the power setting.
;  RETURNS:      Nothing.
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 EzADC_Start:
_EzADC_Start:
   RAM_PROLOGUE RAM_USE_CLASS_1
   or    reg[DEC_CR1],c0h
   call  EzADC_SetPower
   EzADC_RESET_INTEGRATOR_M
   mov   reg[EzADC_PWMdr1],ffh
    or    reg[EzADC_CNTcr0], EzADC_STARTCNTMASK      ; start CNT
    or    reg[EzADC_PWMcr0], EzADC_STARTCNTMASK      ; start PWM
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret
.ENDSECTION

   
.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: EzADC_SetPower
;
;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    The A register contains the power setting.
;  RETURNS:      Nothing.
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 EzADC_SetPower:
_EzADC_SetPower:
   RAM_PROLOGUE RAM_USE_CLASS_2
   mov  X,SP                                     ; Set up Stack frame
    and   A, EzADC_POWERMASK                     ; Ensure value is legal
   push A
   mov  A,reg[EzADC_AtoDcr3]                     ; First SC block:
    and   A, ~EzADC_POWERMASK                    ;   clear power bits to zero
   or   A,[ X ]                                  ;   establish new value
   mov  reg[EzADC_AtoDcr3],A                     ;   change the actual setting
   mov  A,reg[EzADC_GAINcr2]                     ; Second SC block:
    and   A, ~EzADC_POWERMASK                    ;   clear power bits to zero
   or   A,[ X ]                                  ;   establish new value
   mov  reg[EzADC_GAINcr2],A                     ;   change the actual setting
IF EzADC_TEST_MUX_ENABLE
    mov   A, reg[EzADC_GAINcr1]
    and   A, ~EzADC_ANALOGBUSMASK
    mov   reg[EzADC_GAINcr1], A
    mov   A, reg[EzADC_GAINcr2]
    and   A, ~EzADC_TESTMUXMASK
    or    A, EzADC_TESTMUXENABLEAGND
    mov   reg[EzADC_GAINcr2], A
ENDIF 
   pop  A
   RAM_EPILOGUE RAM_USE_CLASS_2
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: EzADC_Stop
;
;  DESCRIPTION:   Removes power from the module's analog PSoc block.
;                 and turns off PWM
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:     None.
;  RETURNS:       Nothing.
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 EzADC_Stop:
_EzADC_Stop:
   RAM_PROLOGUE RAM_USE_CLASS_1
   EzADC_STOPADC_M
   and  reg[EzADC_AtoDcr3], ~EzADC_POWERMASK
   and  reg[EzADC_GAINcr3], ~EzADC_POWERMASK
   and  reg[EzADC_CNTcr0], ~EzADC_STARTCNTMASK   ; stop CNT
   and  reg[EzADC_PWMcr0], ~EzADC_STARTCNTMASK   ; stop PWM
   RAM_EPILOGUE RAM_USE_CLASS_1
   ret
.ENDSECTION


.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: EzADC_GetSamples
;
;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    A register contain number of samples
;  RETURNS:      Nothing.
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
 EzADC_GetSamples:
_EzADC_GetSamples:
   RAM_PROLOGUE RAM_USE_CLASS_4
   RAM_SETPAGE_CUR >EzADC_fMode
   EzADC_ENABLE_INTEGRATOR_M
   mov [EzADC_fMode],0
   mov [EzADC_bState],0
   mov [EzADC_bNumSamples],A
   mov A, reg[EzADC_PWMdr2]
   jnz  .SkipPulseWrite
   mov reg[EzADC_PWMdr2], 1
.SkipPulseWrite:
IF EzADC_OFFSET_COMPENSATION  
   call EzADC_SetInputADCToAGND 
ENDIF
   EzADC_STARTADC_M  ;enable interrupt 
   RAM_EPILOGUE RAM_USE_CLASS_4 
   ret
.ENDSECTION


.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: EzADC_StopADC
;
;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
;               is disabled but the PWM output is still active.
;               Integrator is reset
;-----------------------------------------------------------------------------
;
;  ARGUMENTS:    None.
;  RETURNS:      Nothing.
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 EzADC_StopADC:
_EzADC_StopADC:
   RAM_PROLOGUE RAM_USE_CLASS_1
   EzADC_STOPADC_M
   EzADC_RESET_INTEGRATOR_M
   RAM_EPILOGUE RAM_USE_CLASS_1 
 ret
.ENDSECTION


.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: EzADC_fIsDataAvailable
;
;  DESCRIPTION: Returns the status of the A/D Data
;-----------------------------------------------------------------------------
;  ARGUMENTS:    None.
;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
 EzADC_fIsDataAvailable:
_EzADC_fIsDataAvailable:
   RAM_PROLOGUE RAM_USE_CLASS_4
   EzADC_fIsDataAvailable_M   
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION


.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME:  EzADC_iClearFlagGetData
;                  EzADC_wClearFlagGetData
;
;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
;                  Flag is checked after trandfer to insure valid data.
;                  available. Also clears the DATA_READY flag. 
;-----------------------------------------------------------------------------
;  ARGUMENTS:    None.
;  RETURNS:      fastcall int iResult returned in the X and A register
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;          
 EzADC_iGetDataClearFlag:
_EzADC_iGetDataClearFlag:
   RAM_PROLOGUE RAM_USE_CLASS_4
   EzADC_iClearFlagGetData_M   
   RAM_EPILOGUE RAM_USE_CLASS_4
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: EzADC_SetBufferGain
;
;  DESCRIPTION:
;     This function sets the Gain/Atten of the amplifier.  Valid gain settings
;    are defined in the .inc file.
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: A  Contains gain settings.
;    Gain values shown are for example. (See .inc file for gain equates)
;  RETURNS:  NA
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  The same is true for all RAM page pointer registers in
;    the Large Memory Model.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 EzADC_SetBufferGain:
_EzADC_SetBufferGain:
   RAM_PROLOGUE RAM_USE_CLASS_2
   and   A, EzADC_GAINMASK                                 ; mask A to protect unchanged bits
   mov  X, SP                                              ; define temp store location
   push A                                                  ; put gain value in temp store
   mov  A, reg[EzADC_GAINcr0]                              ; read mux settings
    and   A, ~EzADC_GAINMASK                               ; clear gain bits in A
    tst   [X], EzADC_HIGHGAIN                              ; See if High Gain is set
   jnz  .SETHIGHGAIN
    and   reg[EzADC_GAINcr3], ~EzADC_EXGAIN                ; Clear High Gain bit.
   or   A, [X]                                             ; combine gain value with balance of reg.
   mov  reg[EzADC_GAINcr0], A                              ; move complete value back to register
   pop  A
   RAM_EPILOGUE RAM_USE_CLASS_2
   ret

.SETHIGHGAIN:
   and   [X], EzADC_HIGHGAINMASK                           ; Make sure we have a valid high gain
   or   A, [X]                                             ; combine gain value with balance of reg.
   mov  reg[EzADC_GAINcr0], A                              ; move complete value back to register
   or    reg[EzADC_GAINcr3], EzADC_EXGAIN                  ; Set High Gain bit.
   pop  A
   RAM_EPILOGUE RAM_USE_CLASS_2
   ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: EzADC_SetReference
;
;  DESCRIPTION: Set the Analog Reference for Analog CT block
;-----------------------------------------------------------------------------
;
;  ARGUMENTS: A  Contains Reference settings.
;  RETURNS:   Nothing
;  SIDE EFFECTS:
;    The A and X registers may be modified by this or future implementations
;    of this function.  When necessary, it is the calling function's
;    responsibility to perserve their values across calls to fastcall16 
;    functions.
;
 EzADC_SetReference:
_EzADC_SetReference:
    RAM_PROLOGUE RAM_USE_CLASS_2
    and  A, EzADC_REFGAINMASK                              ; mask A to protect unchanged bits
    mov  X, SP                                             ; define temp store location
    push A                                                 ; put Reference value in temp store
    mov  A, reg[EzADC_GAINcr0]                             ; read Mux settings
    and  A, ~EzADC_REFGAINMASK                             ; clear Reference bits in A
    or   A, [X]                                  ; combine Reference value with balance of reg
    mov  reg[EzADC_GAINcr0], A                             ; move complete value back to register
    pop  A
    RAM_PROLOGUE RAM_USE_CLASS_2
    ret
.ENDSECTION

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: _EzADC_SetInputADCToAGND
;
;  DESCRIPTION: set PGA reference to AGND, connect the PGA input to AGND
;-----------------------------------------------------------------------------
 EzADC_SetInputADCToAGND:
_EzADC_SetInputADCToAGND:
    RAM_PROLOGUE RAM_USE_CLASS_4
IF EzADC_OC_CNT_SIZE_IS_TWO_BYTE
    mov [EzADC_iOffsetCompensationCounter+LowByte],<EzADC_OFFSET_COMPENSATION_FREQUENCY  ; Set Offset Compensation counter (low byte) 
    mov [EzADC_iOffsetCompensationCounter+HighByte],>EzADC_OFFSET_COMPENSATION_FREQUENCY  ; Set Offset Compensation counter (high byte)
ELSE
    mov [EzADC_iOffsetCompensationCounter],EzADC_OFFSET_COMPENSATION_FREQUENCY  ; Set Offset Compensation counter 
ENDIF    
    mov  A, reg[EzADC_GAINcr0]                              ; read mux settings
    and  A, ~3                                              ; clear reference bits in A
    or   A, 1                                               ; combine reference value with balance of reg
    mov  reg[EzADC_GAINcr0], A                              ; move complete value back to register
    mov  A, reg[EzADC_GAINcr1]                              ; read mux settings
    and  A, ~7                                              ; clear PMux bits in A
    or   A, 3                                               ; combine PMux value with balance of reg
    mov  reg[EzADC_GAINcr1], A                              ; move complete value back to register
    ret
    RAM_EPILOGUE RAM_USE_CLASS_4
.ENDSECTION   

.SECTION
;-----------------------------------------------------------------------------
;  FUNCTION NAME: _EzADC_RestoreInputADC
;
;  DESCRIPTION: Input PGA and PGA reference restored by user definition settings
;-----------------------------------------------------------------------------
 EzADC_RestoreInputADC:
_EzADC_RestoreInputADC:
    RAM_PROLOGUE RAM_USE_CLASS_2
    mov  A, reg[EzADC_GAINcr0]                              ; read mux settings
    and  A, ~3                                              ; clear reference bits in A
    or   A, (2>>EzADC_SIGNED_DATA)                          ; combine reference value with balance of reg
    mov  reg[EzADC_GAINcr0], A                              ; move complete value back to register
    mov  A, reg[EzADC_GAINcr1]                              ; read mux settings
    and  A, ~7                                              ; clear PMux bits in A
    or   A, EzADC_USER_DEF_INPUT_ADC                        ; combine PMux value with balance of reg
    mov  reg[EzADC_GAINcr1], A                              ; move complete value back to register
    RAM_PROLOGUE RAM_USE_CLASS_2
    ret
.ENDSECTION 

; End of File EzADC.asm
