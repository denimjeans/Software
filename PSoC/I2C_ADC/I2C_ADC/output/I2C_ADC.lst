FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.3.2710
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 07 E5 LJMP  _ADCINC_ADConversion_ISR(0149)     ljmp	_ADCINC_ADConversion_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0161)     // call	void_handler
002C: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 06 8E LJMP  _EzI2Cs_ISR        (0213)     ljmp	_EzI2Cs_ISR
0063: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
007E: 43 FE 04 OR    REG[0xFE],0x4      (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
                                        (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [Adresse+225],0x0  (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [Adresse+226],0x0  (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
008F: 62 E0 9A MOV   REG[0xE0],0x9A     (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
0097: 43 E0 40 OR    REG[0xE0],0x40     (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
009A: 62 E2 00 MOV   REG[0xE2],0x0      (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
009D: 49 DA 40 TST   REG[0xDA],0x40     (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
00A0: AF FC    JZ    0x009D             (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
                                        (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
00A2: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
00A5: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
00A8: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00AB: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00AE: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00B1: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00B3: 4E       SWAP  SP,A               (0410)     swap  A, SP
00B4: 62 D3 07 MOV   REG[0xD3],0x7      
00B7: 62 D0 00 MOV   REG[0xD0],0x0      
00BA: 62 D5 00 MOV   REG[0xD5],0x0      
00BD: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00C0: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00C2: 7C 03 54 LCALL 0x0354             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00C5: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00C8: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00CA: 57 4D    MOV   X,0x4D             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00CC: 08       PUSH  A                  (0486)     push  A
00CD: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00CE: 53 16    MOV   [__r0],A           (0488)     mov   [__r0], A
00D0: 18       POP   A                  (0489)     pop   A
00D1: 75       INC   X                  (0490)     inc   X
00D2: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00D4: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00D5: 4B       SWAP  A,X                (0493)     swap  A, X
00D6: 51 16    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00D8: 80 04    JMP   0x00DD             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00DA: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00DB: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00DD: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00E0: 08       PUSH  A                  (0521)     push  A
00E1: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00E2: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00E4: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00E5: A0 4B    JZ    0x0131             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00E7: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00E8: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00E9: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00EB: 08       PUSH  A                  (0529)     push  A
00EC: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00ED: 53 16    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00EF: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00F0: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00F1: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00F3: 08       PUSH  A                  (0535)     push  A
00F4: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00F5: A0 1C    JZ    0x0112             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00F7: 53 15    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00F9: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00FA: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00FB: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00FD: 08       PUSH  A                  (0549)     push  A
00FE: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00FF: 3F 16    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
0101: 47 16 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
0104: B0 06    JNZ   0x010B             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
0106: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0108: 74       INC   A                  (0555)     inc   A
0109: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
010B: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
010C: 7A 15    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
010E: BF EB    JNZ   0x00FA             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0110: 8F C9    JMP   0x00DA             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0112: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0113: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0114: 09 00    ADC   A,0x0              (0566)     adc   A, 0
0116: 08       PUSH  A                  (0567)     push  A
0117: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
0118: 53 15    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
011A: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
011C: 3F 16    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
011E: 47 16 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0121: B0 08    JNZ   0x012A             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0123: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0125: 74       INC   A                  (0580)     inc   A
0126: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
0128: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
012A: 7A 15    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
012C: BF EF    JNZ   0x011C             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
012E: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
012F: 8F AA    JMP   0x00DA             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0131: 18       POP   A                  (0590)     pop   A                            ; balance stack
0132: 71 10    OR    F,0x10             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
0134: 43 E3 20 OR    REG[0xE3],0x20     (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
0137: 70 EF    AND   F,0xEF             
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
0139: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
013C: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
013E: 62 E0 83 MOV   REG[0xE0],0x83     (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0141: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0144: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0146: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
0149: 7C 08 F4 LCALL __UserModules_end|__text_start|_main|_main(0674)     lcall _main                    ; call main
                                        (0675) .Exit:
014C: 8F FF    JMP   0x014C             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
014E: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0150: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.3.2710
024F: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_i2c_slave_Bank1
                                        (0006) export LoadConfigTBL_i2c_slave_Bank0
                                        (0007) export LoadConfigTBL_i2c_slave_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_i2c_slave_Bank0:
                                        (0010) ;  Instance name ADCINC, User Module ADCINC
                                        (0011) ;       Instance name ADCINC, Block Name ADC(ASC10)
                                        (0012) 	db		80h, 90h		;ADCINC_AtoDcr0(ASC10CR0)
                                        (0013) 	db		81h, 00h		;ADCINC_AtoDcr1(ASC10CR1)
                                        (0014) 	db		82h, 60h		;ADCINC_AtoDcr2(ASC10CR2)
                                        (0015) 	db		83h, f0h		;ADCINC_AtoDcr3(ASC10CR3)
                                        (0016) ;       Instance name ADCINC, Block Name PWM(DBB00)
                                        (0017) 	db		23h, 00h		;ADCINC_PWMcr0(DBB00CR0)
                                        (0018) 	db		21h, 00h		;ADCINC_PWMdr1(DBB00DR1)
                                        (0019) 	db		22h, 01h		;ADCINC_PWMdr2(DBB00DR2)
                                        (0020) ;  Instance name EzI2Cs, User Module EzI2Cs
                                        (0021) ;  Instance name LCD, User Module LCD
                                        (0022) ;  Instance name PGA, User Module PGA
                                        (0023) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0024) 	db		71h, feh		;PGA_GAIN_CR0(ACB00CR0)
                                        (0025) 	db		72h, 21h		;PGA_GAIN_CR1(ACB00CR1)
                                        (0026) 	db		73h, 20h		;PGA_GAIN_CR2(ACB00CR2)
                                        (0027) 	db		70h, 00h		;PGA_GAIN_CR3(ACB00CR3)
                                        (0028) ;  Global Register values Bank 0
                                        (0029) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0030) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0031) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0032) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0033) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0034) 	db		e7h, 42h		; DecimatorControl_1 register (DEC_CR1)
                                        (0035) 	db		d6h, 04h		; I2CConfig register (I2C_CFG)
                                        (0036) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0037) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0038) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0039) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0040) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0041) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0042) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0043) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0044) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0045) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0046) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0047) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0048) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0049) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0050) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0051) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0052) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0053) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0054) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0055) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0056) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0057) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0058) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0059) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0060) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0061) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0062) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0063) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0064) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0065) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0066) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0067) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0068) 	db		ffh
                                        (0069) LoadConfigTBL_i2c_slave_Bank1:
                                        (0070) ;  Instance name ADCINC, User Module ADCINC
                                        (0071) ;       Instance name ADCINC, Block Name ADC(ASC10)
                                        (0072) ;       Instance name ADCINC, Block Name PWM(DBB00)
                                        (0073) 	db		20h, 31h		;ADCINC_PWMfn(DBB00FN)
                                        (0074) 	db		21h, 15h		;ADCINC_PWMsl(DBB00IN)
                                        (0075) 	db		22h, 40h		;ADCINC_PWMos(DBB00OU)
                                        (0076) ;  Instance name EzI2Cs, User Module EzI2Cs
                                        (0077) ;  Instance name LCD, User Module LCD
                                        (0078) ;  Instance name PGA, User Module PGA
                                        (0079) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0080) ;  Global Register values Bank 1
                                        (0081) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0082) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0083) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0084) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0085) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0086) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0087) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0088) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0089) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0090) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0091) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0092) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0093) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0094) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0095) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0096) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0097) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0098) 	db		e7h, 48h		; Type2Decimator_Control register (DEC_CR2)
                                        (0099) 	db		ffh
                                        (0100) AREA psoc_config(rom, rel)
                                        (0101) LoadConfigTBL_i2c_slave_Ordered:
                                        (0102) ;  Ordered Global Register values
                                        (0103) 	M8C_SetBank0
0251: 62 00 00 MOV   REG[0x0],0x0       (0104) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0254: 71 10    OR    F,0x10             
                                        (0105) 	M8C_SetBank1
0256: 62 00 00 MOV   REG[0x0],0x0       (0106) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0259: 62 01 FF MOV   REG[0x1],0xFF      (0107) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
025C: 70 EF    AND   F,0xEF             
                                        (0108) 	M8C_SetBank0
025E: 62 03 FF MOV   REG[0x3],0xFF      (0109) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0261: 62 02 00 MOV   REG[0x2],0x0       (0110) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0264: 71 10    OR    F,0x10             
                                        (0111) 	M8C_SetBank1
0266: 62 02 00 MOV   REG[0x2],0x0       (0112) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0269: 62 03 00 MOV   REG[0x3],0x0       (0113) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
026C: 70 EF    AND   F,0xEF             
                                        (0114) 	M8C_SetBank0
026E: 62 01 00 MOV   REG[0x1],0x0       (0115) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0271: 62 04 A0 MOV   REG[0x4],0xA0      (0116) 	mov	reg[04h], a0h		; Port_1_Data register (PRT1DR)
0274: 71 10    OR    F,0x10             
                                        (0117) 	M8C_SetBank1
0276: 62 04 A0 MOV   REG[0x4],0xA0      (0118) 	mov	reg[04h], a0h		; Port_1_DriveMode_0 register (PRT1DM0)
0279: 62 05 FF MOV   REG[0x5],0xFF      (0119) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
027C: 70 EF    AND   F,0xEF             
                                        (0120) 	M8C_SetBank0
027E: 62 07 FC MOV   REG[0x7],0xFC      (0121) 	mov	reg[07h], fch		; Port_1_DriveMode_2 register (PRT1DM2)
0281: 62 06 00 MOV   REG[0x6],0x0       (0122) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0284: 71 10    OR    F,0x10             
                                        (0123) 	M8C_SetBank1
0286: 62 06 00 MOV   REG[0x6],0x0       (0124) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0289: 62 07 00 MOV   REG[0x7],0x0       (0125) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
028C: 70 EF    AND   F,0xEF             
                                        (0126) 	M8C_SetBank0
028E: 62 05 00 MOV   REG[0x5],0x0       (0127) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0291: 62 08 00 MOV   REG[0x8],0x0       (0128) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0294: 71 10    OR    F,0x10             
                                        (0129) 	M8C_SetBank1
0296: 62 08 7F MOV   REG[0x8],0x7F      (0130) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0299: 62 09 80 MOV   REG[0x9],0x80      (0131) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
029C: 70 EF    AND   F,0xEF             
                                        (0132) 	M8C_SetBank0
029E: 62 0B 80 MOV   REG[0xB],0x80      (0133) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
02A1: 62 0A 00 MOV   REG[0xA],0x0       (0134) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
02A4: 71 10    OR    F,0x10             
                                        (0135) 	M8C_SetBank1
02A6: 62 0A 00 MOV   REG[0xA],0x0       (0136) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
02A9: 62 0B 00 MOV   REG[0xB],0x0       (0137) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
02AC: 70 EF    AND   F,0xEF             
                                        (0138) 	M8C_SetBank0
02AE: 62 09 00 MOV   REG[0x9],0x0       (0139) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
02B1: 62 0C 00 MOV   REG[0xC],0x0       (0140) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
02B4: 71 10    OR    F,0x10             
                                        (0141) 	M8C_SetBank1
02B6: 62 0C 00 MOV   REG[0xC],0x0       (0142) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
02B9: 62 0D 00 MOV   REG[0xD],0x0       (0143) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
02BC: 70 EF    AND   F,0xEF             
                                        (0144) 	M8C_SetBank0
02BE: 62 0F 00 MOV   REG[0xF],0x0       (0145) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02C1: 62 0E 00 MOV   REG[0xE],0x0       (0146) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02C4: 71 10    OR    F,0x10             
                                        (0147) 	M8C_SetBank1
02C6: 62 0E 00 MOV   REG[0xE],0x0       (0148) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02C9: 62 0F 00 MOV   REG[0xF],0x0       (0149) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02CC: 70 EF    AND   F,0xEF             
                                        (0150) 	M8C_SetBank0
02CE: 62 0D 00 MOV   REG[0xD],0x0       (0151) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02D1: 62 10 00 MOV   REG[0x10],0x0      (0152) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02D4: 71 10    OR    F,0x10             
                                        (0153) 	M8C_SetBank1
02D6: 62 10 00 MOV   REG[0x10],0x0      (0154) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02D9: 62 11 00 MOV   REG[0x11],0x0      (0155) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02DC: 70 EF    AND   F,0xEF             
                                        (0156) 	M8C_SetBank0
02DE: 62 13 00 MOV   REG[0x13],0x0      (0157) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02E1: 62 12 00 MOV   REG[0x12],0x0      (0158) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02E4: 71 10    OR    F,0x10             
                                        (0159) 	M8C_SetBank1
02E6: 62 12 00 MOV   REG[0x12],0x0      (0160) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02E9: 62 13 00 MOV   REG[0x13],0x0      (0161) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02EC: 70 EF    AND   F,0xEF             
                                        (0162) 	M8C_SetBank0
02EE: 62 11 00 MOV   REG[0x11],0x0      (0163) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02F1: 62 14 00 MOV   REG[0x14],0x0      (0164) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02F4: 71 10    OR    F,0x10             
                                        (0165) 	M8C_SetBank1
02F6: 62 14 00 MOV   REG[0x14],0x0      (0166) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02F9: 62 15 00 MOV   REG[0x15],0x0      (0167) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02FC: 70 EF    AND   F,0xEF             
                                        (0168) 	M8C_SetBank0
02FE: 62 17 00 MOV   REG[0x17],0x0      (0169) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0301: 62 16 00 MOV   REG[0x16],0x0      (0170) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0304: 71 10    OR    F,0x10             
                                        (0171) 	M8C_SetBank1
0306: 62 16 00 MOV   REG[0x16],0x0      (0172) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0309: 62 17 00 MOV   REG[0x17],0x0      (0173) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
030C: 70 EF    AND   F,0xEF             
                                        (0174) 	M8C_SetBank0
030E: 62 15 00 MOV   REG[0x15],0x0      (0175) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0311: 62 18 00 MOV   REG[0x18],0x0      (0176) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
0314: 71 10    OR    F,0x10             
                                        (0177) 	M8C_SetBank1
0316: 62 18 00 MOV   REG[0x18],0x0      (0178) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0319: 62 19 00 MOV   REG[0x19],0x0      (0179) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
031C: 70 EF    AND   F,0xEF             
                                        (0180) 	M8C_SetBank0
031E: 62 1B 00 MOV   REG[0x1B],0x0      (0181) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0321: 62 1A 00 MOV   REG[0x1A],0x0      (0182) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0324: 71 10    OR    F,0x10             
                                        (0183) 	M8C_SetBank1
0326: 62 1A 00 MOV   REG[0x1A],0x0      (0184) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0329: 62 1B 00 MOV   REG[0x1B],0x0      (0185) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
032C: 70 EF    AND   F,0xEF             
                                        (0186) 	M8C_SetBank0
032E: 62 19 00 MOV   REG[0x19],0x0      (0187) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0331: 62 1C 00 MOV   REG[0x1C],0x0      (0188) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0334: 71 10    OR    F,0x10             
                                        (0189) 	M8C_SetBank1
0336: 62 1C 00 MOV   REG[0x1C],0x0      (0190) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0339: 62 1D 00 MOV   REG[0x1D],0x0      (0191) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
033C: 70 EF    AND   F,0xEF             
                                        (0192) 	M8C_SetBank0
033E: 62 1F 00 MOV   REG[0x1F],0x0      (0193) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0341: 62 1E 00 MOV   REG[0x1E],0x0      (0194) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0344: 71 10    OR    F,0x10             
                                        (0195) 	M8C_SetBank1
0346: 62 1E 00 MOV   REG[0x1E],0x0      (0196) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0349: 62 1F 00 MOV   REG[0x1F],0x0      (0197) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
034C: 70 EF    AND   F,0xEF             
                                        (0198) 	M8C_SetBank0
034E: 62 1D 00 MOV   REG[0x1D],0x0      (0199) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0351: 70 EF    AND   F,0xEF             
                                        (0200) 	M8C_SetBank0
0353: 7F       RET                      (0201) 	ret
                                        (0202) 
                                        (0203) 
                                        (0204) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.3.2710
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_i2c_slave
                                        (0026) export _LoadConfig_i2c_slave
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
0354: 55 00 00 MOV   [0x0],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
0357: 55 01 7F MOV   [0x1],0x7F         (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
035A: 55 02 80 MOV   [0x2],0x80         (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
035D: 7C 03 64 LCALL 0x0364             (0069) 	lcall	LoadConfig_i2c_slave
0360: 7C 02 4F LCALL 0x024F             (0070) 	lcall	LoadConfigTBL_i2c_slave_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
0363: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration i2c_slave
                                        (0078) ;
                                        (0079) ;    Load configuration registers for i2c_slave.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_i2c_slave:
                                        (0096)  LoadConfig_i2c_slave:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
0364: 10       PUSH  X                  (0099) 	push	x
0365: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
0367: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
0369: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
036A: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_i2c_slave_Bank0
036C: 57 BD    MOV   X,0xBD             (0105)     mov     X, <LoadConfigTBL_i2c_slave_Bank0
036E: 7C 03 7F LCALL 0x037F             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
0371: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
0373: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
0374: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_i2c_slave_Bank1
0376: 57 22    MOV   X,0x22             (0112)     mov     X, <LoadConfigTBL_i2c_slave_Bank1
0378: 7C 03 7F LCALL 0x037F             (0113)     lcall   LoadConfig              ; Load the bank 1 values
037B: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
037D: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
037E: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
037F: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
0381: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
0382: 08       PUSH  A                  (0143)     push    A
0383: 4F       MOV   X,SP               (0144)     mov     X, SP
0384: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
0387: D0 04    JNC   0x038C             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0389: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
038C: 18       POP   A                  (0149)     pop     A
038D: 20       POP   X                  (0150)     pop     X
038E: 70 EF    AND   F,0xEF             
0390: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0393: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
0394: 08       PUSH  A                  (0156)     push    A
0395: 28       ROMX                     (0157)     romx                            ; Load register address from table
0396: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
0398: A0 1F    JZ    0x03B8             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
039A: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
039B: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
039E: A0 03    JZ    0x03A2             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03A0: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
03A2: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
03A4: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
03A5: 20       POP   X                  (0167)     pop     X
03A6: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
03A7: 09 00    ADC   A,0x0              (0169)     adc     A, 0
03A9: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
03AA: 08       PUSH  A                  (0171)     push    A
03AB: 28       ROMX                     (0172)     romx                            ; load config data from the table
03AC: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
03AD: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
03AF: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
03B1: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
03B2: 20       POP   X                  (0177)     pop     X
03B3: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
03B4: 09 00    ADC   A,0x0              (0179)     adc     A, 0
03B6: 8F D7    JMP   0x038E             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
03B8: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
03BA: 70 3F    AND   F,0x3F             
03BC: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
03BE: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\pga.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2012/9/21 at 11:59:15
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_Start
                                        (0060) export _PGA_Start
                                        (0061) export  PGA_SetPower
                                        (0062) export _PGA_SetPower
                                        (0063) 
                                        (0064) export  PGA_SetGain
                                        (0065) export _PGA_SetGain
                                        (0066) 
                                        (0067) export  PGA_Stop
                                        (0068) export _PGA_Stop
                                        (0069) 
                                        (0070) IF (PGA_AGNDBUFAPI)
                                        (0071) export  PGA_EnableAGNDBuffer
                                        (0072) export _PGA_EnableAGNDBuffer
                                        (0073) export  PGA_DisableAGNDBuffer
                                        (0074) export _PGA_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_Start
                                        (0092) ;  FUNCTION NAME: PGA_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_Start:
                                        (0111) _PGA_Start:
                                        (0112)  PGA_SetPower:
                                        (0113) _PGA_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
03BF: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
03C1: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
03C2: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
03C3: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_GAIN_CR2]                               ; read power value
03C5: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
03C7: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
03C9: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_GAIN_CR2], A                          ; move complete value back to register
03CB: 18       POP   A                  (0124)    pop  A
03CC: 70 3F    AND   F,0x3F             
03CE: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
03D0: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_SetGain:
                                        (0154) _PGA_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
03D1: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
03D3: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
03D4: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
03D5: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_GAIN_CR0]                               ; read mux settings
03D7: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
03D9: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
03DC: B0 0E    JNZ   0x03EB             (0164)    jnz  .SETHIGHGAIN
03DE: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_GAIN_CR3],~EXGAIN                          ; Clear High Gain bit.
03E1: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
03E3: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
03E5: 18       POP   A                  (0168)    pop  A
03E6: 70 3F    AND   F,0x3F             
03E8: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
03EA: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
03EB: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
03EE: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
03F0: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
03F2: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_GAIN_CR3], EXGAIN                          ; Set High Gain bit.
03F5: 18       POP   A                  (0177)    pop  A
03F6: 70 3F    AND   F,0x3F             
03F8: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
03FA: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_Stop:
                                        (0203) _PGA_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
03FB: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
03FE: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_EnableAGNDBuffer:
                                        (0233) _PGA_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_DisableAGNDBuffer:
                                        (0261) _PGA_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2012/9/21 at 11:59:10
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    90h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D0h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
03FF: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0400: 10       PUSH  X                  (0209)     push  X
0401: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0402: B0 04    JNZ   0x0407             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0404: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0405: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0406: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0407: 90 44    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
0409: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
040A: 18       POP   A                  (0220)     pop   A
040B: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
040C: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
040E: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
040F: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0421: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0422: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0423: 67       ASR   A                  (0262)     asr   A
0424: 67       ASR   A                  (0263)     asr   A
0425: 67       ASR   A                  (0264)     asr   A
0426: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0428: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
042A: 90 21    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
042C: 18       POP   A                  (0268)     pop   A                            ; Restore value
042D: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
042F: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0431: 90 1A    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0433: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0434: 4B       SWAP  A,X                (0305)     swap  A,X
0435: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0437: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0438: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
043A: 7F       RET                      (0310)     ret
043B: 70 BF    AND   F,0xBF             
043D: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
043F: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0441: A0 06    JZ    0x0448             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0443: 90 08    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
0445: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0446: 8F F8    JMP   0x043F             (0351)     jmp   .Loop_PrString               ; Go get next character
0448: 70 3F    AND   F,0x3F             
044A: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
044C: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
044D: 90 65    CALL  0x04B4             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
044F: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0450: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0451: 67       ASR   A                  (0390)     asr   A
0452: 67       ASR   A                  (0391)     asr   A
0453: 67       ASR   A                  (0392)     asr   A
0454: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0456: 90 3B    CALL  0x0493             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0458: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0459: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
045B: 40       NOP                      (0397)     nop
045C: 40       NOP                      (0398)     nop
045D: 40       NOP                      (0399)     nop
045E: 90 33    CALL  0x0493             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0460: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0461: 90 51    CALL  0x04B4             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0463: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0464: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0465: 67       ASR   A                  (0436)     asr   A
0466: 67       ASR   A                  (0437)     asr   A
0467: 67       ASR   A                  (0438)     asr   A
0468: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
046A: 90 09    CALL  0x0475             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
046C: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
046D: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
046F: 40       NOP                      (0443)     nop
0470: 40       NOP                      (0444)     nop
0471: 40       NOP                      (0445)     nop
0472: 90 01    CALL  0x0475             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0474: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0475: 08       PUSH  A                  (0477)     push  A
0476: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0479: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
047C: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
047E: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0480: 18       POP   A                  (0483)     pop   A
0481: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0483: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0485: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0487: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0489: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
048B: 40       NOP                      (0489)     nop
048C: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
048E: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0490: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0492: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0493: 08       PUSH  A                  (0523)     push  A
0494: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0497: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
049A: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
049D: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
049F: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
04A1: 18       POP   A                  (0530)     pop   A
04A2: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
04A4: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
04A6: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
04A8: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
04AA: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
04AC: 40       NOP                      (0536)     NOP
04AD: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
04AF: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
04B1: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
04B3: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
04B4: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
04B5: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
04B8: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
04BB: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
04BD: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
04BF: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
04C2: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
04C4: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
04C6: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
04C8: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
04CA: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
04CD: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
04CF: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
04D1: 40       NOP                      (0586)     NOP
                                        (0587) 
04D2: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
04D3: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
04D5: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
04D8: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
04DA: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
04DC: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
04DD: 40       NOP                      (0597)     nop
04DE: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
04E0: 08       PUSH  A                  (0610)     push  A
04E1: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
04E4: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
04E6: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
04E8: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
04E9: 40       NOP                      (0616)     nop                                    ; fastest PSoC
04EA: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
04EB: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
04EE: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
04F0: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
04F2: 40       NOP                      (0623)     nop
04F3: 40       NOP                      (0624)     nop
                                        (0625) 
04F4: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
04F7: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
04F9: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
04FB: 18       POP   A                  (0630)     pop   A
04FC: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
04FE: A0 04    JZ    0x0503             (0633)     jz    .UNLOCK
0500: 79       DEC   X                  (0634)     dec   X
0501: BF D3    JNZ   0x04D5             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0503: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0504: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0507: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0509: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
050B: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
050D: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
050F: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0510: 7F       RET                      (0646)     ret
0511: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0514: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0517: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
051A: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
051D: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
051F: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0521: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0523: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0525: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0527: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0529: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
052B: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
052D: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
052F: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0531: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0533: 9F 40    CALL  0x0475             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0535: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0537: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0539: 50 03    MOV   A,0x3              (0707)     mov   A,03h
053B: 9F 38    CALL  0x0475             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
053D: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
053F: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0541: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0543: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0545: 9F 2E    CALL  0x0475             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0547: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0549: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
054B: 50 02    MOV   A,0x2              (0720)     mov   A,02h
054D: 9F 26    CALL  0x0475             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
054F: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0551: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0553: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0555: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
0557: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0559: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
055B: 50 01    MOV   A,0x1              (0731)     mov   A,01h
055D: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
055F: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0561: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0563: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0565: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0567: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0569: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
056B: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
056D: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
056F: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0571: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0573: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0575: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0577: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0579: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
057B: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
057D: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
057F: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0584: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0586: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0587: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0589: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
058A: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
058C: 20       POP   X                  (0795)     pop   X
                                        (0796) 
058D: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
058F: 70 3F    AND   F,0x3F             
0591: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0593: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0594: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0596: 78       DEC   A                  (0828)     dec   A
0597: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0599: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
05A2: 08       PUSH  A                  (0871)     push  A
05A3: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
05A5: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
05A7: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
05A9: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
05AB: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
05AD: D0 06    JNC   0x05B4             (0877)     jnc   .Delay50u_End
05AF: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
05B1: 78       DEC   A                  (0880)     dec   A                              ; [4]
05B2: BF FE    JNZ   0x05B1             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
05B4: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
05B5: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
05B6: 4F       MOV   X,SP               (1015)     mov   X, SP
05B7: 10       PUSH  X                  (1016)     push  X
05B8: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
05BA: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
05BC: 70 3F    AND   F,0x3F             
05BE: 71 C0    OR    F,0xC0             
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
05C0: 9F C2    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
05C2: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
05C3: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
05C6: B0 05    JNZ   0x05CC             (1026)     jnz   .LCD_CHECK1
05C8: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
05CA: 80 11    JMP   0x05DC             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
05CC: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
05CF: D0 07    JNC   0x05D7             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
05D1: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
05D3: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
05D5: 80 06    JMP   0x05DC             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
05D7: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
05D9: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
05DC: 9E 6F    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
05DE: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
05E0: BF E2    JNZ   0x05C3             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
05E2: 70 3F    AND   F,0x3F             
05E4: 71 C0    OR    F,0xC0             
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
05E6: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
05E7: 4F       MOV   X,SP               (1168)     mov   X, SP
05E8: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
05EA: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
05EC: 08       PUSH  A                  (1172)     push  A
05ED: FF 91    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
05EF: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
05F1: 9E 6E    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
05F3: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
05F6: B0 05    JNZ   0x05FC             (1177)     jnz   .VBG_NZ_SEG
05F8: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
05FA: 80 13    JMP   0x060E             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
05FC: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
05FF: D0 09    JNC   0x0609             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0601: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
0603: 78       DEC   A                  (1185)     dec   A
0604: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
0607: 80 06    JMP   0x060E             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0609: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
060C: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
060E: 9E 3D    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(1194)     call  LCD_WriteData                ; Write value
0610: 18       POP   A                  (1195)     pop   A
0611: 78       DEC   A                  (1196)     dec   A
0612: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0614: BF D7    JNZ   0x05EC             (1198)     jnz   .VBG_LOOP
0616: 70 3F    AND   F,0x3F             
0618: 71 C0    OR    F,0xC0             
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
061A: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
061B: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
061C: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
061D: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
061E: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0620: 9E 3F    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
0622: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0625: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0628: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
062A: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
062C: D0 05    JNC   0x0632             (1251)     jnc   .VBG_SOLID
062E: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0630: 80 03    JMP   0x0634             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0632: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0634: 9E 17    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(1257)     call  LCD_WriteData                ; character data
0636: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0638: BF EF    JNZ   0x0628             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
063A: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
063C: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
063F: BF E5    JNZ   0x0625             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0641: 18       POP   A                  (1264)     pop  A
0642: 18       POP   A                  (1265)     pop  A
0643: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0645: 9E 1A    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
0647: 70 3F    AND   F,0x3F             
0649: 71 C0    OR    F,0xC0             
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
064B: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
065A: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
065B: 38 03    ADD   SP,0x3             (1320)     add   SP,3
065D: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
065F: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0661: 9D FE    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0663: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0666: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0669: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
066B: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
066E: B0 05    JNZ   0x0674             (1332)     jnz   .BG_OTHER
0670: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0672: 80 03    JMP   0x0676             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0674: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0676: 9D D5    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data|LCD_WriteData(1338)     call  LCD_WriteData
0678: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
067A: BF EE    JNZ   0x0669             (1340)     jnz   .BG_Loop2
067C: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
067E: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0681: BF E4    JNZ   0x0666             (1343)     jnz   .BG_Loop1
                                        (1344) 
0683: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0685: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0687: 9D D8    CALL  _LCD_Control       (1347)     call  LCD_Control
0689: 70 3F    AND   F,0x3F             
068B: 71 C0    OR    F,0xC0             
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
068D: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\ezi2csint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: EzI2CsINT.asm
                                        (0004) ;;  Version: 1.30, Updated on 2012/9/21 at 11:59:1
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CFXM (Slave) Interrupt Service Routine
                                        (0008) ;;  
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) include "EzI2Cs.inc"
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) 
                                        (0019) 
                                        (0020) ;-----------------------------------------------
                                        (0021) ;  Global Symbols
                                        (0022) ;-----------------------------------------------
                                        (0023) 
                                        (0024) export    EzI2Cs_varPage      
                                        (0025) export   _EzI2Cs_varPage      
                                        (0026) 
                                        (0027) export    EzI2Cs_bState  
                                        (0028) export   _EzI2Cs_bState
                                        (0029) 
                                        (0030) export    EzI2Cs_bRAM_RWoffset
                                        (0031) export   _EzI2Cs_bRAM_RWoffset
                                        (0032) 
                                        (0033) export    EzI2Cs_bRAM_RWcntr
                                        (0034) export   _EzI2Cs_bRAM_RWcntr
                                        (0035) 
                                        (0036) export   _EzI2Cs_pRAM_Buf_Addr_LSB
                                        (0037) export    EzI2Cs_pRAM_Buf_Addr_LSB
                                        (0038) 
                                        (0039) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0040) export   _EzI2Cs_pRAM_Buf_Addr_MSB
                                        (0041) export    EzI2Cs_pRAM_Buf_Addr_MSB
                                        (0042) ENDIF
                                        (0043) 
                                        (0044) export   _EzI2Cs_bRAM_Buf_Size                                
                                        (0045) export    EzI2Cs_bRAM_Buf_Size    
                                        (0046) 
                                        (0047) export   _EzI2Cs_bRAM_Buf_WSize               
                                        (0048) export    EzI2Cs_bRAM_Buf_WSize  
                                        (0049) 
                                        (0050) IF (EzI2Cs_ROM_ENABLE)
                                        (0051) export    EzI2Cs_bROM_RWoffset
                                        (0052) export   _EzI2Cs_bROM_RWoffset
                                        (0053) 
                                        (0054) export    EzI2Cs_bROM_RWcntr   
                                        (0055) export   _EzI2Cs_bROM_RWcntr   
                                        (0056) 
                                        (0057) export   _EzI2Cs_pROM_Buf_Addr_LSB
                                        (0058) export    EzI2Cs_pROM_Buf_Addr_LSB
                                        (0059) export   _EzI2Cs_pROM_Buf_Addr_MSB
                                        (0060) export    EzI2Cs_pROM_Buf_Addr_MSB
                                        (0061) 
                                        (0062) export   _EzI2Cs_bROM_Buf_Size                           
                                        (0063) export    EzI2Cs_bROM_Buf_Size
                                        (0064) 
                                        (0065) ENDIF
                                        (0066) 
                                        (0067) export    EzI2Cs_bBusy_Flag  
                                        (0068) export   _EzI2Cs_bBusy_Flag
                                        (0069) 
                                        (0070) AREA InterruptRAM (RAM, REL, CON)
                                        (0071) 
                                        (0072) ;-----------------------------------------------
                                        (0073) ; Variable Allocation
                                        (0074) ;-----------------------------------------------
                                        (0075) 
                                        (0076) 
                                        (0077) ;; Exported variables
                                        (0078)  _EzI2Cs_varPage:                                  ; This points to the variable page
                                        (0079)   EzI2Cs_varPage:          
                                        (0080) 
                                        (0081)  _EzI2Cs_bState:
                                        (0082)   EzI2Cs_bState:                             blk 1
                                        (0083) 
                                        (0084) ;; RAM space variables
                                        (0085)  _EzI2Cs_bRAM_RWoffset:                            ; RAM address counter.  This is reset each time
                                        (0086)   EzI2Cs_bRAM_RWoffset:                      blk 1 ; a read or write is initiated.
                                        (0087) 
                                        (0088)  _EzI2Cs_bRAM_RWcntr:                              ; RAM Read/Write counter.  Keeps track of offset 
                                        (0089)   EzI2Cs_bRAM_RWcntr:                        blk 1 ; during a read or write operation.  Reset to
                                        (0090)                                                       ; _bRAM_RWoffset at start of R/W command.
                                        (0091) 
                                        (0092) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0093)  _EzI2Cs_pRAM_Buf_Addr_MSB:                        ; Base address (MSB) to RAM buffer.  
                                        (0094)   EzI2Cs_pRAM_Buf_Addr_MSB:                  blk 1 ; 
                                        (0095) ENDIF
                                        (0096) 
                                        (0097)  _EzI2Cs_pRAM_Buf_Addr_LSB:                        ; Base address (LSB) to RAM buffer.  
                                        (0098)   EzI2Cs_pRAM_Buf_Addr_LSB:                  blk 1 ; 
                                        (0099) 
                                        (0100)  _EzI2Cs_bRAM_Buf_Size:                            ; Size of RAM buffer.   
                                        (0101)   EzI2Cs_bRAM_Buf_Size:                      blk 1 ; 
                                        (0102) 
                                        (0103)  _EzI2Cs_bRAM_Buf_WSize:                           ; Portion of the RAM buffer size that is writable.
                                        (0104)   EzI2Cs_bRAM_Buf_WSize:                     blk 1 ; 
                                        (0105) 
                                        (0106) ;; ROM space variables
                                        (0107) IF (EzI2Cs_ROM_ENABLE)
                                        (0108)  _EzI2Cs_bROM_RWoffset:                            ; ROM address counter.  This is reset each time
                                        (0109)   EzI2Cs_bROM_RWoffset:                      blk 1 ; a read is initiated
                                        (0110) 
                                        (0111)  _EzI2Cs_bROM_RWcntr:                              ; ROM read counter. Keeps track of offset 
                                        (0112)   EzI2Cs_bROM_RWcntr:                        blk 1 ; during a read operation.  Reset to
                                        (0113)                                                       ; _bRAM_RWoffset at start of command.
                                        (0114) 
                                        (0115)  _EzI2Cs_pROM_Buf_Addr_MSB:                        ; ROM address (MSB) counter. (Relative to buffer)  This
                                        (0116)   EzI2Cs_pROM_Buf_Addr_MSB:                  blk 1 ; counter is reset each time a read is initiated.
                                        (0117) 
                                        (0118)  _EzI2Cs_pROM_Buf_Addr_LSB:                        ; ROM address (MSB) counter. (Relative to buffer)  This
                                        (0119)   EzI2Cs_pROM_Buf_Addr_LSB:                  blk 1 ; counter is reset each time a read is initiated.
                                        (0120) 
                                        (0121)  _EzI2Cs_bROM_Buf_Size:                            ; Size of RAM buffer.                            
                                        (0122)   EzI2Cs_bROM_Buf_Size:                      blk 1 ; 
                                        (0123) 
                                        (0124) ENDIF
                                        (0125) 
                                        (0126) IF (EzI2Cs_AUTO_ADDR_CHECK^1)
                                        (0127) IF (EzI2Cs_DYNAMIC_ADDR) 
                                        (0128) 
                                        (0129) export    EzI2Cs_bAddr
                                        (0130) export   _EzI2Cs_bAddr 
                                        (0131) 
                                        (0132)  _EzI2Cs_bAddr:
                                        (0133)   EzI2Cs_bAddr:                              blk 1
                                        (0134) ENDIF
                                        (0135) ENDIF
                                        (0136) 
                                        (0137)  _EzI2Cs_bBusy_Flag:
                                        (0138)   EzI2Cs_bBusy_Flag:                         blk 1
                                        (0139) 
                                        (0140) ;-----------------------------------------------
                                        (0141) ;  EQUATES and TABLES
                                        (0142) ;-----------------------------------------------
                                        (0143) 
                                        (0144) ;; Bit definitions for EzI2Cs_bState
                                        (0145) STATE_IDLE:         equ  0x00      ; Wait for Correct Address
                                        (0146) STATE_WR_RAM_ADDR:  equ  0x02      ; Wait for Secondary address on write
                                        (0147) STATE_WR_RAM:       equ  0x04      ; Write RAM Data
                                        (0148) STATE_RD_RAM:       equ  0x06      ; Read RAM Data
                                        (0149) 
                                        (0150) STATE_WR_ROM_ADDR:  equ  0x08      ; Wait for Secondary address on write
                                        (0151) STATE_RD_ROM:       equ  0x0A      ; Read ROM Data
                                        (0152) 
                                        (0153) STATE_WR_ROM:       equ  0x0C      ; Write ROM (Not supported at this time)
                                        (0154) STATE_RESET:        equ  0x0E      ; Reset state machine
                                        (0155) 
                                        (0156) STATE_MASK:         equ  0x0E
                                        (0157) STATE_MASK2:        equ  0x0F      ; State Mask
                                        (0158) 
                                        (0159) ALT_MODE_FLAG:      equ  0x40      ; Reserved
                                        (0160) 
                                        (0161) 
                                        (0162) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0163) ;---------------------------------------------------
                                        (0164) ; Insert your custom declarations below this banner
                                        (0165) ;---------------------------------------------------
                                        (0166) 
                                        (0167) ;------------------------
                                        (0168) ;  Constant Definitions
                                        (0169) ;------------------------
                                        (0170) 
                                        (0171) 
                                        (0172) ;------------------------
                                        (0173) ; Variable Allocation
                                        (0174) ;------------------------
                                        (0175) 
                                        (0176) 
                                        (0177) ;---------------------------------------------------
                                        (0178) ; Insert your custom declarations above this banner
                                        (0179) ;---------------------------------------------------
                                        (0180) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0181) 
                                        (0182) 
                                        (0183) 
                                        (0184) 
                                        (0185) AREA UserModules (ROM, REL, CON)
                                        (0186) 
                                        (0187) export _EzI2Cs_ISR
                                        (0188) ;;****************************************************
                                        (0189) ;; I2C_ISR  main entry point from vector 60h
                                        (0190) ;;
                                        (0191) ;;****************************************************
                                        (0192) 
                                        (0193)  EzI2Cs_ISR:
                                        (0194) _EzI2Cs_ISR:
                                        (0195) 
068E: 08       PUSH  A                  (0196)     push A
068F: 10       PUSH  X                  (0197)     push X
0690: 70 3F    AND   F,0x3F             
0692: 71 80    OR    F,0x80             
0694: 5D D3    MOV   A,REG[0xD3]        
0696: 08       PUSH  A                  
0697: 5D D0    MOV   A,REG[0xD0]        
0699: 08       PUSH  A                  
069A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0198)     
                                        (0199)     ;@PSoC_UserCode_ISR_START@ (Do not change this line.)
                                        (0200)     ;---------------------------------------------------
                                        (0201)     ; Insert your custom code below this banner
                                        (0202)     ;---------------------------------------------------
                                        (0203) 
                                        (0204)     ;---------------------------------------------------
                                        (0205)     ; Insert your custom code above this banner
                                        (0206)     ;---------------------------------------------------
                                        (0207)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0208) 
                                        (0209) ;; The folling conditional code is only valid when using the
                                        (0210) ;; large memory model.
                                        (0211) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0212)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_2              ; Set Page Mode
                                        (0213)    REG_PRESERVE IDX_PP                             ; Save Index Page Pointer
                                        (0214)    REG_PRESERVE CUR_PP                             ; Save Current Page Pointer
                                        (0215)    RAM_SETPAGE_CUR  >EzI2Cs_varPage      ; Set the current page mode Pointer
069D: 51 06    MOV   A,[0x6]            (0216)    mov   A, [EzI2Cs_pRAM_Buf_Addr_MSB]   ; Set Index page mode pointer
069F: 60 D3    MOV   REG[0xD3],A        
                                        (0217)    RAM_SETPAGE_IDX A
                                        (0218) ENDIF
                                        (0219) 
06A1: 2E 03 80 OR    [0x3],0x80         (0220)     or   [EzI2Cs_bState],EzI2Cs_ANY_ACTIVITY                         ; Set Activity flag
06A4: 49 D7 08 TST   REG[0xD7],0x8      (0221)     tst  reg[EzI2Cs_SCR_REG],EzI2Cs_SCR_ADDRESS                      ; Check for address
06A7: A0 09    JZ    0x06B1             (0222)     jz   .I2C_CHECK_STOP                                             ; Go to check for Stop condition if no Address
06A9: 26 03 F0 AND   [0x3],0xF0         (0223)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bits.                       
06AC: 2E 03 00 OR    [0x3],0x0          (0224)     or   [EzI2Cs_bState],STATE_IDLE                                  ; Address flag set, change to IDLE state
06AF: 80 08    JMP   0x06B8             (0225)     jmp  .I2C_DO_STATE_MACHINE
                                        (0226) .I2C_CHECK_STOP:
                                        (0227)     ; Check for Stop condition here.  If a stop condition
                                        (0228)     ; exists, reset state machine to idle.
06B1: 49 D7 20 TST   REG[0xD7],0x20     (0229)     tst reg[EzI2Cs_SCR_REG],EzI2Cs_SCR_STOP_STATUS                   ; Check for Stop condition
06B4: A0 03    JZ    0x06B8             (0230)     jz .I2C_DO_STATE_MACHINE                                            ; No Stop condition - do I2C state mashine
                                        (0231)     ; Following line was commented due to CDT#60202.
                                        (0232)     ; The stop bit is cleared by SetEzI2Cs_SCR macro, so the functionality related to EzI2Cs_bBusy_Flag is preserved.
                                        (0233)     ; and reg[EzI2Cs_SCR_REG],~EzI2Cs_SCR_STOP_STATUS                ; Clear Stop bit
06B6: 80 A8    JMP   0x075F             (0234)     jmp  I2C_STATE_RESET
                                        (0235) .I2C_DO_STATE_MACHINE:
06B8: 51 03    MOV   A,[0x3]            (0236)     mov  A,[EzI2Cs_bState]    ; Get State
06BA: 21 0E    AND   A,0xE              (0237)     and  A,STATE_MASK                   ; Mask off invalid states
06BC: E0 01    JACC  0x06BE             (0238)     jacc I2C_STATE_JUMP_TABLE
                                        (0239) 
                                        (0240) I2C_STATE_JUMP_TABLE:
06BE: 80 11    JMP   0x06D0             (0241)     jmp  I2C_STATE_IDLE                 ; Idle state
06C0: 80 67    JMP   0x0728             (0242)     jmp  I2C_STATE_WR_RAM_ADDR              ; Wait for Address write state
06C2: 80 79    JMP   0x073C             (0243)     jmp  I2C_STATE_WR_RAM               ; 
06C4: 80 47    JMP   0x070C             (0244)     jmp  I2C_STATE_RD_RAM
                                        (0245) IF (EzI2Cs_ROM_ENABLE)        ; Only valid if ROM enabled
                                        (0246)     jmp  I2C_STATE_WR_ROM_ADDR
                                        (0247)     jmp  I2C_STATE_RD_ROM
                                        (0248)     jmp  I2C_STATE_WR_ROM
                                        (0249) ELSE
06C6: 80 98    JMP   0x075F             (0250)     jmp  I2C_STATE_RESET
06C8: 80 96    JMP   0x075F             (0251)     jmp  I2C_STATE_RESET
06CA: 80 94    JMP   0x075F             (0252)     jmp  I2C_STATE_RESET
                                        (0253) ENDIF
06CC: 80 92    JMP   0x075F             (0254)     jmp  I2C_STATE_RESET
                                        (0255) 
06CE: 80 99    JMP   0x0768             (0256)     jmp  EzI2Cs_ISR_END
                                        (0257) 
                                        (0258) 
                                        (0259)     ;            *** I2C Idle state ***
                                        (0260)     ;
                                        (0261)     ;   Sit idle until a start with address is issued.
                                        (0262)     ;   Check to see if there is an address match
                                        (0263)     ;     If address match, ACK the bus and determine next state
                                        (0264)     ;     Else NAK the transfer and return to idle state.
                                        (0265)     ;   Also check stop for condition.IF (EzI2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0266)     ;
                                        (0267) I2C_STATE_IDLE:                 ; Idle state
                                        (0268) 
                                        (0269) IF (EzI2Cs_AUTO_ADDR_CHECK^1)   ;; for CY8C28X45 chip: skip address comparison and NACK sending stage-hardware will do this for us  if AutoAddressCompare feature is enabled.
                                        (0270)                                           ;; The code in this pre-compiler directive will be executed for all chips except CY8C28X45.
                                        (0271) IF (EzI2Cs_DYNAMIC_ADDR)  ;; DYNAMIC ADDRESS
                                        (0272)     mov  A,reg[EzI2Cs_DR_REG]                                        ; Get transmitted address
                                        (0273)     and  A,EzI2Cs_ADDR_MASK                                          ; Mask off alt address bit and R/W bit
                                        (0274)     cmp  A,[EzI2Cs_bAddr]                                            ; Check for proper Address
                                        (0275)     jz   .CHK_ADDR_MODE 
                                        (0276)     SetEzI2Cs_SCR ( EzI2Cs_SCR_NAK )                                 ; NAK Address 
                                        (0277)     jmp  EzI2Cs_ISR_END                                              ; Not valid Address, leave
                                        (0278) 
                                        (0279) ELSE    ;; STATIC ADDRESS
06D0: 5D D8    MOV   A,REG[0xD8]        (0280)     mov  A,reg[EzI2Cs_DR_REG]                                        ; Get transmitted address
06D2: 21 FE    AND   A,0xFE             (0281)     and  A,EzI2Cs_ADDR_MASK                                          ; Mask off alt address bit and R/W bit
06D4: 39 80    CMP   A,0x80             (0282)     cmp  A,EzI2Cs_SLAVE_ADDR                                         ; Check for proper Address
06D6: A0 06    JZ    0x06DD             (0283)     jz   .CHK_ADDR_MODE 
06D8: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0284)     SetEzI2Cs_SCR ( EzI2Cs_SCR_NAK )                                 ; NAK Address 
06DB: 80 8C    JMP   0x0768             (0285)     jmp  EzI2Cs_ISR_END                                              ; Not valid Address, leave
                                        (0286) ENDIF
                                        (0287) ENDIF
                                        (0288) 
                                        (0289) .CHK_ADDR_MODE:   ; A proper address has been detected, now determine what mode, R/W alt_addr?? 
                                        (0290) IF (EzI2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0291)     tst  reg[EzI2Cs_DR_REG],EzI2Cs_ALT_ADDR_BIT                      ; Check for Alt address
                                        (0292)     jnz  SERVICE_ROM_ADDR
                                        (0293) ENDIF
                                        (0294) 
                                        (0295) .STANDARD_ADDR:
06DD: 49 D8 01 TST   REG[0xD8],0x1      (0296)     tst  reg[EzI2Cs_DR_REG],EzI2Cs_RD_FLAG                           ; Check for a Read operation
06E0: B0 0F    JNZ   0x06F0             (0297)     jnz  .PREPARE_FOR_RAM_READ
                                        (0298) 
06E2: 55 0A 02 MOV   [0xA],0x2          (0299)     mov [EzI2Cs_bBusy_Flag], EzI2Cs_I2C_BUSY_RAM_WRITE               ; Write transaction in process - set Busy flag to WRITE
                                        (0300) 
                                        (0301)     ; Prepare for RAM Write Address operation
06E5: 26 03 F0 AND   [0x3],0xF0         (0302)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
06E8: 2E 03 02 OR    [0x3],0x2          (0303)     or   [EzI2Cs_bState],STATE_WR_RAM_ADDR                           ; Set state machine to do RAM Write
06EB: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0304)     SetEzI2Cs_SCR ( EzI2Cs_SCR_ACK )                                 ; ACK Address 
06EE: 80 79    JMP   0x0768             (0305)     jmp  EzI2Cs_ISR_END                                     ; Base address to RAM buffer.  
                                        (0306) 
                                        (0307) .PREPARE_FOR_RAM_READ:
06F0: 55 0A 01 MOV   [0xA],0x1          (0308)     mov [EzI2Cs_bBusy_Flag], EzI2Cs_I2C_BUSY_RAM_READ                ; Possible read transaction in process - set Busy flag to READ
                                        (0309) 
06F3: 26 03 F0 AND   [0x3],0xF0         (0310)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
06F6: 2E 03 06 OR    [0x3],0x6          (0311)     or   [EzI2Cs_bState],STATE_RD_RAM                                ; Set state machine to do RAM Read 
06F9: 5F 05 04 MOV   [0x5],[0x4]        (0312)     mov  [EzI2Cs_bRAM_RWcntr],[EzI2Cs_bRAM_RWoffset]                 ; Reset address counter to start of Offset
06FC: 51 07    MOV   A,[0x7]            (0313)     mov  A,[EzI2Cs_pRAM_Buf_Addr_LSB]                                ; Get base address
06FE: 02 05    ADD   A,[0x5]            (0314)     add  A,[EzI2Cs_bRAM_RWcntr]                                      ; Set Offset and add to base address      
0700: 5C       MOV   X,A                (0315)     mov  X,A                                                         ; Put offset in X
0701: 52 00    MOV   A,[X+0]            (0316)     mov  A,[X]                                                       ; Get first byte to transmit
0703: 60 D8    MOV   REG[0xD8],A        (0317)     mov  reg[EzI2Cs_DR_REG],A                               ; Base address to RAM buffer.  
0705: 76 05    INC   [0x5]              (0318)     inc  [EzI2Cs_bRAM_RWcntr]                                        ; Increment RAM buffer counter to next location.
0707: 62 D7 14 MOV   REG[0xD7],0x14     
                                        (0319) 
                                        (0320)                                                                      ; ACK command and transmit first byte.
                                        (0321)     SetEzI2Cs_SCR (EzI2Cs_SCR_ACK|EzI2Cs_SCR_TRANSMIT)   
070A: 80 5D    JMP   0x0768             (0322)     jmp  EzI2Cs_ISR_END
                                        (0323) 
                                        (0324)     ;            *** I2C Read RAM state ***
                                        (0325)     ;
                                        (0326) I2C_STATE_RD_RAM:
                                        (0327)     ;@PSoC_UserCode_RAM_RD@ (Do not change this line.)
                                        (0328)     ;---------------------------------------------------
                                        (0329)     ; Insert your custom code below this banner
                                        (0330)     ;---------------------------------------------------
                                        (0331)     
                                        (0332)     ;---------------------------------------------------
                                        (0333)     ; Insert your custom code above this banner
                                        (0334)     ;---------------------------------------------------
                                        (0335)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0336)     
070C: 51 08    MOV   A,[0x8]            (0337)     mov  A,[EzI2Cs_bRAM_Buf_Size]
070E: 78       DEC   A                  (0338)     dec  A
070F: 3A 05    CMP   A,[0x5]            (0339)     cmp  A,[EzI2Cs_bRAM_RWcntr]                                      ; Check to see if out of range.
0711: C0 0F    JC    0x0721             (0340)     jc   .I2C_TRANSMIT_DATA  ; WARNING!! Bogas data will be transmitted if out of range.   
                                        (0341) 
0713: 51 07    MOV   A,[0x7]            (0342)     mov  A,[EzI2Cs_pRAM_Buf_Addr_LSB]                                ; Get base address
0715: 02 05    ADD   A,[0x5]            (0343)     add  A,[EzI2Cs_bRAM_RWcntr]                                      ; Set Offset and add to base address      
0717: 5C       MOV   X,A                (0344)     mov  X,A                                                         ; Put offset in X
0718: 52 00    MOV   A,[X+0]            (0345)     mov  A,[X]                                                       ; Get first byte to transmit
071A: 60 D8    MOV   REG[0xD8],A        (0346)     mov  reg[EzI2Cs_DR_REG],A                                        ; Write data to transmit register
071C: 76 05    INC   [0x5]              (0347)     inc  [EzI2Cs_bRAM_RWcntr]                                        ; Increment RAM buffer counter to next location.
071E: 2E 03 20 OR    [0x3],0x20         (0348)     or   [EzI2Cs_bState],EzI2Cs_READ_ACTIVITY                        ; Set Read Activity flag
                                        (0349) 
                                        (0350) 
                                        (0351) .I2C_TRANSMIT_DATA:     
0721: 60 D8    MOV   REG[0xD8],A        (0352)     mov  reg[EzI2Cs_DR_REG],A                                        ; Write data to transmit register
0723: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0353)     SetEzI2Cs_SCR ( EzI2Cs_SCR_TRANSMIT )                            ; ACK command and transmit first byte. 
0726: 80 41    JMP   0x0768             (0354)     jmp  EzI2Cs_ISR_END
                                        (0355) 
                                        (0356) 
                                        (0357)     ;            *** I2C Write RAM Address state ***
                                        (0358)     ;
                                        (0359)     ;  During this state, the RAM address offset is set.
                                        (0360) I2C_STATE_WR_RAM_ADDR:              ; Wait for Address write state
0728: 5D D8    MOV   A,REG[0xD8]        (0361)     mov  A,reg[EzI2Cs_DR_REG]                                        ; Get transmitted Address offset
072A: 3A 08    CMP   A,[0x8]            (0362)     cmp  A,[EzI2Cs_bRAM_Buf_Size]                                    ; Check if out of range.
072C: D0 2D    JNC   0x075A             (0363)     jnc  I2C_NAK_DATA                                                ; If out of range NAK address
072E: A0 2B    JZ    0x075A             (0364)     jz   I2C_NAK_DATA
                                        (0365) 
                                        (0366)     ; Address in range
0730: 53 05    MOV   [0x5],A            (0367)     mov  [EzI2Cs_bRAM_RWcntr],A                                      ; Reset address counter with new value
0732: 53 04    MOV   [0x4],A            (0368)     mov  [EzI2Cs_bRAM_RWoffset],A                                    ; Set offset with new value.
0734: 26 03 F0 AND   [0x3],0xF0         (0369)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
0737: 2E 03 04 OR    [0x3],0x4          (0370)     or   [EzI2Cs_bState],STATE_WR_RAM                                ; Set state machine to do RAM Write
073A: 80 1A    JMP   0x0755             (0371)     jmp  I2C_ACK_DATA                         ; ACK the data
                                        (0372) 
                                        (0373) 
                                        (0374)     ;            *** I2C Write RAM state
                                        (0375) I2C_STATE_WR_RAM:  
                                        (0376)     ;@PSoC_UserCode_RAM_WR@ (Do not change this line.)
                                        (0377)     ;---------------------------------------------------
                                        (0378)     ; Insert your custom code below this banner
                                        (0379)     ;---------------------------------------------------
                                        (0380)     
                                        (0381)     ;---------------------------------------------------
                                        (0382)     ; Insert your custom code above this banner
                                        (0383)     ;---------------------------------------------------
                                        (0384)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0385)     
073C: 51 09    MOV   A,[0x9]            (0386)     mov  A,[EzI2Cs_bRAM_Buf_WSize]                                   ; Get buffer size to make sure we
073E: A0 1B    JZ    0x075A             (0387)     jz   I2C_NAK_DATA                                                ; If RAM WSize is zero, do not allow write.
0740: 78       DEC   A                  (0388)     dec  A                                                           ; are in a valid area.
0741: 3A 05    CMP   A,[0x5]            (0389)     cmp  A,[EzI2Cs_bRAM_RWcntr]                                      ; Check to see if out of range.
0743: C0 16    JC    0x075A             (0390)     jc   I2C_NAK_DATA                                                ; If out of range NAK address
                                        (0391) 
0745: 51 07    MOV   A,[0x7]            (0392)     mov  A,[EzI2Cs_pRAM_Buf_Addr_LSB]                                ; Get base address
0747: 02 05    ADD   A,[0x5]            (0393)     add  A,[EzI2Cs_bRAM_RWcntr]                                      ; Set Offset and add to base address      
0749: 5C       MOV   X,A                (0394)     mov  X,A                                                         ; Put offset in X
                                        (0395) 
074A: 5D D8    MOV   A,REG[0xD8]        (0396)     mov  A,reg[EzI2Cs_DR_REG]                                        ; Read data to be written
074C: 54 00    MOV   [X+0],A            (0397)     mov  [X],A                                                       ; Store data in Buffer
074E: 2E 03 10 OR    [0x3],0x10         (0398)     or   [EzI2Cs_bState],EzI2Cs_WRITE_ACTIVITY                       ; Set Write Activity flag
0751: 76 05    INC   [0x5]              (0399)     inc  [EzI2Cs_bRAM_RWcntr]                                        ; Advance pointer to next location
0753: 80 01    JMP   0x0755             (0400)     jmp  I2C_ACK_DATA                         ; ACK the data
0755: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0401) 
                                        (0402)     
                                        (0403)     
                                        (0404) IF (EzI2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0405) 
                                        (0406) SERVICE_ROM_ADDR:  ; At this time only ROM Read is supported.  
                                        (0407)     tst  reg[EzI2Cs_DR_REG],EzI2Cs_RD_FLAG                           ; Check for a Read operation
                                        (0408)     jnz  PREPARE_FOR_ROM_READ
                                        (0409) 
                                        (0410)     mov [EzI2Cs_bBusy_Flag], EzI2Cs_I2C_BUSY_ROM_WRITE               ; Write transaction in process - set Busy flag to WRITE
                                        (0411)     
                                        (0412)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
                                        (0413)     or   [EzI2Cs_bState],STATE_WR_ROM_ADDR                           ; Set state machine to do ROM ADDR Write
                                        (0414)     SetEzI2Cs_SCR ( EzI2Cs_SCR_ACK )                                 ; ACK Address 
                                        (0415)     jmp  EzI2Cs_ISR_END                                    ; Base address to RAM buffer.  
                                        (0416) 
                                        (0417)     ; Prepare for Write ROM Address.              
                                        (0418) I2C_STATE_WR_ROM_ADDR:
                                        (0419)     mov  A,reg[EzI2Cs_DR_REG]                                        ; Get transmitted Address offset
                                        (0420)     cmp  A,[EzI2Cs_bROM_Buf_Size]                                    ; Check if out of range.
                                        (0421)     jnc  I2C_NAK_DATA                                                ; If out of range NAK address
                                        (0422)     jz   I2C_NAK_DATA
                                        (0423) 
                                        (0424)     mov  [EzI2Cs_bROM_RWcntr],A                                      ; Reset address counter with new value
                                        (0425)     mov  [EzI2Cs_bROM_RWoffset],A                                    ; Set offset with new value.
                                        (0426)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
                                        (0427)     or   [EzI2Cs_bState],STATE_WR_ROM                                ; Set state machine to do ROM Write
                                        (0428)     jmp  I2C_ACK_DATA
                                        (0429) 
                                        (0430) I2C_STATE_WR_ROM:  // Flash command interpreter
                                        (0431)    ;@PSoC_UserCode_ROM_WR@ (Do not change this line.)
                                        (0432)    ;---------------------------------------------------
                                        (0433)    ; Insert your custom code below this banner
                                        (0434)    ;---------------------------------------------------
                                        (0435) 
                                        (0436)    ;---------------------------------------------------
                                        (0437)    ; Insert your custom code above this banner
                                        (0438)    ;---------------------------------------------------
                                        (0439)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0440) 
                                        (0441)     jnc  I2C_NAK_DATA                                                ; Write to ROM not supported.
                                        (0442) 
                                        (0443) PREPARE_FOR_ROM_READ:
                                        (0444)     mov [EzI2Cs_bBusy_Flag], EzI2Cs_I2C_BUSY_ROM_READ                ; Possible read transaction in process - set Busy flag to READ
                                        (0445)     
                                        (0446)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
                                        (0447)     or   [EzI2Cs_bState],STATE_RD_ROM                                ; Set state machine to do ROM Read 
                                        (0448)     mov  [EzI2Cs_bROM_RWcntr],[EzI2Cs_bROM_RWoffset]                 ; Reset address counter to start of Offset
                                        (0449)     mov  X,[EzI2Cs_pROM_Buf_Addr_MSB]                                ; Get MSB of ROM address in X
                                        (0450)     mov  A,[EzI2Cs_pROM_Buf_Addr_LSB]                                ; Get LSB of ROM base address
                                        (0451)     add  A,[EzI2Cs_bROM_RWcntr]                                      ; Set Offset and add to base address      
                                        (0452)     jnc  .GET_ROM_VALUE
                                        (0453)     inc  X    ; Inc the MSB
                                        (0454) .GET_ROM_VALUE:
                                        (0455)     swap A,X  ; Place MSB of ROM address in A, and LSB in X for ROMX
                                        (0456)     romx      ; Get Rom value in A
                                        (0457) 
                                        (0458)     mov  reg[EzI2Cs_DR_REG],A                              ; Base address to RAM buffer.  
                                        (0459)     inc  [EzI2Cs_bROM_RWcntr]                                        ; Increment RAM buffer counter to next location.
                                        (0460) 
                                        (0461)                                                                      ; ACK command and transmit first byte.
                                        (0462)     SetEzI2Cs_SCR  (EzI2Cs_SCR_ACK|EzI2Cs_SCR_TRANSMIT)   
                                        (0463)     jmp  EzI2Cs_ISR_END
                                        (0464) 
                                        (0465) 
                                        (0466) I2C_STATE_RD_ROM:
                                        (0467)     ;@PSoC_UserCode_ROM_RD@ (Do not change this line.)
                                        (0468)     ;---------------------------------------------------
                                        (0469)     ; Insert your custom code below this banner
                                        (0470)     ;---------------------------------------------------
                                        (0471) 
                                        (0472)     ;---------------------------------------------------
                                        (0473)     ; Insert your custom code above this banner
                                        (0474)     ;---------------------------------------------------
                                        (0475)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0476) 
                                        (0477)     mov  A,[EzI2Cs_bROM_Buf_Size]
                                        (0478)     dec  A
                                        (0479)     cmp  A,[EzI2Cs_bROM_RWcntr]                                      ; Check to see if out of range.
                                        (0480)     jc   .I2C_TRANSMIT_ROM_DATA  ; WARNING!! Bogas data will be transmitted if out of range.   
                                        (0481) 
                                        (0482)     mov  X,[EzI2Cs_pROM_Buf_Addr_MSB]                                ; Get MSB of ROM address in X
                                        (0483)     mov  A,[EzI2Cs_pROM_Buf_Addr_LSB]                                ; Get LSB of ROM base address
                                        (0484)     add  A,[EzI2Cs_bROM_RWcntr]                                      ; Set Offset and add to base address      
                                        (0485)     jnc  .GET_ROM_VALUE
                                        (0486)     inc  X    ; Inc the MSB
                                        (0487) .GET_ROM_VALUE:
                                        (0488)     swap A,X  ; Place MSB of ROM address in A, and LSB in X for ROMX
                                        (0489)     romx      ; Get Rom value in A
                                        (0490)     mov  reg[EzI2Cs_DR_REG],A                              ; Base address to RAM buffer.  
                                        (0491)     inc  [EzI2Cs_bROM_RWcntr]                                        ; Increment RAM buffer counter to next location.
                                        (0492) 
                                        (0493) .I2C_TRANSMIT_ROM_DATA:     
                                        (0494)     mov  reg[EzI2Cs_DR_REG],A                                        ; Write data to transmit register
                                        (0495)     SetEzI2Cs_SCR  (EzI2Cs_SCR_TRANSMIT)                             ; ACK command and transmit first byte. 
                                        (0496)     jmp  EzI2Cs_ISR_END
                                        (0497) 
                                        (0498) ENDIF
                                        (0499) 
                                        (0500) ;; Generic handlers
                                        (0501) 
                                        (0502) I2C_ACK_DATA:
                                        (0503)     SetEzI2Cs_SCR ( EzI2Cs_SCR_ACK )                                 ; ACK Data
0758: 80 0F    JMP   0x0768             (0504)     jmp  EzI2Cs_ISR_END
075A: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0505) 
                                        (0506) I2C_NAK_DATA:   ;; NAK data and return  !!WARNING, NOT SURE IF THIS WILL WORK
                                        (0507)     SetEzI2Cs_SCR ( EzI2Cs_SCR_NAK )                                 ;  NAK Data
075D: 80 0A    JMP   0x0768             (0508)     jmp  EzI2Cs_ISR_END
                                        (0509) 
                                        (0510) I2C_STATE_RESET:
                                        (0511)     ;@PSoC_UserCode_I2C_RST_Start@ (Do not change this line.)
                                        (0512)     ;---------------------------------------------------
                                        (0513)     ; Insert your custom code below this banner
                                        (0514)     ;---------------------------------------------------
                                        (0515) 
                                        (0516)     ;---------------------------------------------------
                                        (0517)     ; Insert your custom code above this banner
                                        (0518)     ;---------------------------------------------------
                                        (0519)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0520) 
075F: 26 03 F0 AND   [0x3],0xF0         (0521)     and  [EzI2Cs_bState],~STATE_MASK2                                ; Clear State bit.                       
0762: 2E 03 00 OR    [0x3],0x0          (0522)     or   [EzI2Cs_bState], STATE_IDLE    ; Reset State
0765: 55 0A 00 MOV   [0xA],0x0          (0523)     mov [EzI2Cs_bBusy_Flag],EzI2Cs_I2C_FREE                          ; Clear Busy flag
0768: 18       POP   A                  
0769: 60 D0    MOV   REG[0xD0],A        
076B: 18       POP   A                  
076C: 60 D3    MOV   REG[0xD3],A        
                                        (0524)     ; Reset pointer buffers as well
                                        (0525)     ;@PSoC_UserCode_I2C_RST_End@ (Do not change this line.)
                                        (0526)     ;---------------------------------------------------
                                        (0527)     ; Insert your custom code below this banner
                                        (0528)     ;---------------------------------------------------
                                        (0529) 
                                        (0530)     ;---------------------------------------------------
                                        (0531)     ; Insert your custom code above this banner
                                        (0532)     ;---------------------------------------------------
                                        (0533)     ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0534) 
                                        (0535) EzI2Cs_ISR_END:
                                        (0536) 
                                        (0537) ; This conditional code is only used when using the large memory model.
                                        (0538) IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0539)    REG_RESTORE CUR_PP           ; Restore Current Page Pointer
                                        (0540)    REG_RESTORE IDX_PP           ; Restore Index Page Pointer
                                        (0541) ENDIF
076E: 20       POP   X                  (0542)     pop  X
076F: 18       POP   A                  (0543)     pop  A
                                        (0544) 
0770: 7E       RETI                     (0545)     reti
FILE: lib\ezi2cs.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0771: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: EzI2Cs.asm
0774: 71 10    OR    F,0x10             
                                        (0004) ;;  Version: 1.30, Updated on 2012/9/21 at 11:59:1
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: EzI2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "EzI2Cs.inc"
                                        (0025) include "PSoCGPIOINT.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ; include instance specific register definitions
                                        (0029) ;-----------------------------------------------
                                        (0030) 
                                        (0031) ;-----------------------------------------------
                                        (0032) ;  Global Symbols
                                        (0033) ;-----------------------------------------------
                                        (0034) ;-------------------------------------------------------------------
                                        (0035) ;  Declare the functions global for both assembler and C compiler.
                                        (0036) ;
                                        (0037) ;  Note that there are two names for each API. First name is
                                        (0038) ;  assembler reference. Name with underscore is name refence for
                                        (0039) ;  C compiler.  Calling function in C source code does not require
                                        (0040) ;  the underscore.
                                        (0041) ;-------------------------------------------------------------------
                                        (0042) 
                                        (0043) export    EzI2Cs_EnableInt
                                        (0044) export   _EzI2Cs_EnableInt
                                        (0045) export    EzI2Cs_ResumeInt
                                        (0046) export   _EzI2Cs_ResumeInt
                                        (0047) export    EzI2Cs_Start
                                        (0048) export   _EzI2Cs_Start
                                        (0049) 
                                        (0050) export    EzI2Cs_DisableInt
                                        (0051) export   _EzI2Cs_DisableInt
                                        (0052) export    EzI2Cs_Stop
                                        (0053) export   _EzI2Cs_Stop
                                        (0054) export    EzI2Cs_DisableSlave
                                        (0055) export   _EzI2Cs_DisableSlave
                                        (0056) export    EzI2Cs_SetRamBuffer
                                        (0057) export   _EzI2Cs_SetRamBuffer
                                        (0058) export    EzI2Cs_GetAddr
                                        (0059) export   _EzI2Cs_GetAddr
                                        (0060) export    EzI2Cs_GetActivity
                                        (0061) export   _EzI2Cs_GetActivity
                                        (0062) 
                                        (0063) 
                                        (0064) IF (EzI2Cs_DYNAMIC_ADDR | EzI2Cs_AUTO_ADDR_CHECK) ;; Enable this function if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0065) export    EzI2Cs_SetAddr
                                        (0066) export   _EzI2Cs_SetAddr
                                        (0067) ENDIF
                                        (0068) 
                                        (0069) IF (EzI2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0070) export    EzI2Cs_SetRomBuffer
                                        (0071) export   _EzI2Cs_SetRomBuffer
                                        (0072) ENDIF
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL, CON)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: EzI2Cs_Start
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;   Initialize the EzI2Cs I2C bus interface.
                                        (0084) ;
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;
                                        (0087) ;  ARGUMENTS:
                                        (0088) ;
                                        (0089) ;  RETURNS: none
                                        (0090) ;
                                        (0091) ;  SIDE EFFECTS:
                                        (0092) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0093) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0094) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0095) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0096) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0097) ;          
                                        (0098) ;    Page Pointer Registers Modified: 
                                        (0099) ;          CUR_PP
                                        (0100) ;
                                        (0101) ;  THEORY of OPERATION or PROCEDURE:
                                        (0102) ;
                                        (0103) 
                                        (0104)  EzI2Cs_Start:
                                        (0105) _EzI2Cs_Start:
                                        (0106) 
                                        (0107)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0108)    RAM_SETPAGE_CUR >EzI2Cs_varPage
                                        (0109)    
                                        (0110) IF (EzI2Cs_DYNAMIC_ADDR)  ;; DYNAMIC ADDRESS
                                        (0111) IF (EzI2Cs_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the EzI2Cs_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0112)    mov  [EzI2Cs_bAddr],EzI2Cs_SLAVE_ADDR
                                        (0113) ENDIF   
                                        (0114) ENDIF
                                        (0115) 
                                        (0116)    M8C_SetBank1 ;The SDA and SCL pins are setting to Hi-z drive mode
0776: 41 04 5F AND   REG[0x4],0x5F      (0117)    and reg[EzI2CsSDA_DriveMode_0_ADDR],~(EzI2CsSDA_MASK|EzI2CsSCL_MASK)
0779: 43 05 A0 OR    REG[0x5],0xA0      (0118)    or  reg[EzI2CsSDA_DriveMode_1_ADDR], (EzI2CsSDA_MASK|EzI2CsSCL_MASK)
077C: 70 EF    AND   F,0xEF             
                                        (0119)    M8C_SetBank0
077E: 43 07 A0 OR    REG[0x7],0xA0      (0120)    or  reg[EzI2CsSDA_DriveMode_2_ADDR], (EzI2CsSDA_MASK|EzI2CsSCL_MASK)
                                        (0121) 
0781: 55 03 00 MOV   [0x3],0x0          (0122)    mov  [EzI2Cs_bState],0x00    ;; Make sure state machine is initialized
0784: 55 0A 00 MOV   [0xA],0x0          (0123)    mov [EzI2Cs_bBusy_Flag],EzI2Cs_I2C_FREE ;; Clear Busy flag
                                        (0124) 
0787: 90 29    CALL  _EzI2Cs_EnableInt  (0125)    call EzI2Cs_EnableInt
0789: 90 2E    CALL  0x07B9             (0126)    call EzI2Cs_EnableSlave
                                        (0127) 
078B: 40       NOP                      (0128)    nop
078C: 40       NOP                      (0129)    nop
078D: 40       NOP                      (0130)    nop
078E: 40       NOP                      (0131)    nop
078F: 40       NOP                      (0132)    nop
                                        (0133)    
0790: 50 00    MOV   A,0x0              (0134)    mov A, 0
0792: 53 04    MOV   [0x4],A            (0135)    mov [EzI2Cs_bRAM_RWoffset], A
0794: 71 10    OR    F,0x10             
                                        (0136) IF (EzI2Cs_ROM_ENABLE)
                                        (0137)    mov [EzI2Cs_bROM_RWoffset], A
                                        (0138) ENDIF
                                        (0139)    
                                        (0140)    M8C_SetBank1 ;The SDA and SCL pins are restored to Open Drain Low drive mode
0796: 43 04 A0 OR    REG[0x4],0xA0      (0141)    or reg[EzI2CsSDA_DriveMode_0_ADDR], (EzI2CsSDA_MASK|EzI2CsSCL_MASK)
0799: 43 05 A0 OR    REG[0x5],0xA0      (0142)    or reg[EzI2CsSDA_DriveMode_1_ADDR], (EzI2CsSDA_MASK|EzI2CsSCL_MASK)
079C: 70 EF    AND   F,0xEF             
                                        (0143)    M8C_SetBank0
079E: 43 07 A0 OR    REG[0x7],0xA0      (0144)    or reg[EzI2CsSDA_DriveMode_2_ADDR], (EzI2CsSDA_MASK|EzI2CsSCL_MASK)
                                        (0145) 
                                        (0146)    RAM_EPILOGUE RAM_USE_CLASS_4
07A1: 7F       RET                      (0147)    ret
07A2: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0148) 
                                        (0149) .ENDSECTION
                                        (0150) 
                                        (0151) IF (EzI2Cs_DYNAMIC_ADDR | EzI2Cs_AUTO_ADDR_CHECK) ;; Enable this function if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0152) .SECTION
                                        (0153) ;-----------------------------------------------------------------------------
                                        (0154) ;  FUNCTION NAME: EzI2Cs_SetAddr(BYTE bAddr)
                                        (0155) ;
                                        (0156) ;  DESCRIPTION:
                                        (0157) ;   Set the I2C slave address for the EzI2Cs I2C bus interface.
                                        (0158) ;
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;
                                        (0161) ;  ARGUMENTS:
                                        (0162) ;      A =>  Slave address
                                        (0163) ;
                                        (0164) ;  RETURNS: none
                                        (0165) ;
                                        (0166) ;  SIDE EFFECTS;    
                                        (0167) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0168) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0169) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0170) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0171) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0172) ;          
                                        (0173) ;    Page Pointer Registers Modified: 
                                        (0174) ;          CUR_PP
                                        (0175) ;
                                        (0176) ;  THEORY of OPERATION or PROCEDURE:
                                        (0177) ;
                                        (0178) 
                                        (0179)  EzI2Cs_SetAddr:
                                        (0180) _EzI2Cs_SetAddr:
                                        (0181)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0182) IF (EzI2Cs_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the EzI2Cs_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0183)    RAM_SETPAGE_CUR >EzI2Cs_bAddr
                                        (0184)    asl   A
                                        (0185)    mov   [EzI2Cs_bAddr],A
                                        (0186) ELSE                          ;; write to the ADDR register instead
                                        (0187)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0188)    and  A, ~EzI2Cs_HW_ADDR_MASK	; verify address value
                                        (0189)    mov  X, SP
                                        (0190)    push A                                   ; store address value
                                        (0191)    M8C_SetBank1               ;; Set Bank 1
                                        (0192)    mov  A, reg[EzI2Cs_ADDR_REG]   ; get value from address register
                                        (0193)    and  A, EzI2Cs_HW_ADDR_MASK    ; define highest bit
                                        (0194)    or   A, [X]                              ; form address value 	
                                        (0195)    mov  reg[EzI2Cs_ADDR_REG], A   ; set new address value to register
                                        (0196)    M8C_SetBank0               ;; Set Bank 0
                                        (0197)    pop  A
                                        (0198)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0199) ENDIF
                                        (0200)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0201)    ret
                                        (0202) 
                                        (0203) .ENDSECTION
                                        (0204) ENDIF
                                        (0205) 
                                        (0206) .SECTION
                                        (0207) ;-----------------------------------------------------------------------------
                                        (0208) ;  FUNCTION NAME:BYTE EzI2Cs_GetActivity(void)
                                        (0209) ;
                                        (0210) ;  DESCRIPTION:
                                        (0211) ;    Return a non-zero value if the I2C hardware has seen activity on the bus.
                                        (0212) ;    The activity flag will be cleared if set when calling this function.
                                        (0213) ;
                                        (0214) ;-----------------------------------------------------------------------------
                                        (0215) ;
                                        (0216) ;  ARGUMENTS:  none
                                        (0217) ;
                                        (0218) ;  RETURNS: 
                                        (0219) ;    BYTE  non-zero = Activity
                                        (0220) ;          zero     = No Activity
                                        (0221) ;
                                        (0222) ;  SIDE EFFECTS;    
                                        (0223) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0224) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0225) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0226) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0227) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0228) ;          
                                        (0229) ;    Page Pointer Registers Modified: 
                                        (0230) ;          CUR_PP
                                        (0231) ;
                                        (0232) ;  THEORY of OPERATION or PROCEDURE:
                                        (0233) ;
                                        (0234) 
                                        (0235)  EzI2Cs_GetActivity:
                                        (0236) _EzI2Cs_GetActivity:
                                        (0237)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0238)    RAM_SETPAGE_CUR >EzI2Cs_bState
07A5: 51 03    MOV   A,[0x3]            (0239)    mov   A,[EzI2Cs_bState]
07A7: 21 B0    AND   A,0xB0             (0240)    and   A,EzI2Cs_ACTIVITY_MASK         ; Mask off activity bits
07A9: 26 03 4F AND   [0x3],0x4F         (0241)    and   [EzI2Cs_bState],~EzI2Cs_ACTIVITY_MASK ; Clear system activity bits
                                        (0242) 
                                        (0243) EzI2Cs_GetActivity_End:
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_4
07AC: 7F       RET                      (0245)    ret
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) .SECTION
                                        (0250) ;-----------------------------------------------------------------------------
                                        (0251) ;  FUNCTION NAME: BYTE EzI2Cs_GetAddr(Void)
                                        (0252) ;
                                        (0253) ;  DESCRIPTION:
                                        (0254) ;   Get the I2C slave address for the EzI2Cs I2C bus interface.
                                        (0255) ;
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS: none
                                        (0259) ;
                                        (0260) ;  RETURNS: none
                                        (0261) ;
                                        (0262) ;  SIDE EFFECTS;    
                                        (0263) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0264) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0265) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0266) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0267) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0268) ;          
                                        (0269) ;    Page Pointer Registers Modified: 
                                        (0270) ;          CUR_PP
                                        (0271) ;
                                        (0272) ;
                                        (0273) ;  THEORY of OPERATION or PROCEDURE:
                                        (0274) ;
                                        (0275) 
                                        (0276)  EzI2Cs_GetAddr:
                                        (0277) _EzI2Cs_GetAddr:
                                        (0278) 
                                        (0279) IF (EzI2Cs_DYNAMIC_ADDR | EzI2Cs_AUTO_ADDR_CHECK) ;; if Address is Dynamic or the AUTO_ADDR_CHECK is enabled
                                        (0280)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0281) IF (EzI2Cs_AUTO_ADDR_CHECK^1) ;; for CY8C28X45 chip: do not touch the EzI2Cs_bAddr variable if AutoAddressCompare feature is enabled.
                                        (0282)    RAM_SETPAGE_CUR >EzI2Cs_bAddr
                                        (0283)    mov   A,[EzI2Cs_bAddr]
                                        (0284)    asr   A                          ; Shift Addr to right to drop RW bit.
                                        (0285) ELSE                          ;; read the address from ADDR register instead
                                        (0286)    M8C_SetBank1               ;; Set Bank 1 
                                        (0287)    mov A, reg[EzI2Cs_ADDR_REG]
                                        (0288)    M8C_SetBank0               ;; Set Bank 0
                                        (0289) ENDIF
                                        (0290)    and   A, 0x7f              ; Mask off bogus MSb
                                        (0291)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0292) ELSE
07AD: 50 40    MOV   A,0x40             (0293)    mov   A,0x40            
                                        (0294) ENDIF
07AF: 7F       RET                      (0295)    ret
                                        (0296) 
                                        (0297) .ENDSECTION
                                        (0298) 
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: EzI2Cs_EnableInt
                                        (0304) ;  FUNCTION NAME: EzI2Cs_ResumeInt
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0307) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0308) ;	  EzI2Cs_ResumeInt performs the enable int function without fist clearing
                                        (0309) ;     pending interrupts.
                                        (0310) ;-----------------------------------------------------------------------------
                                        (0311) ;
                                        (0312) ;  ARGUMENTS: none
                                        (0313) ;
                                        (0314) ;  RETURNS: none
                                        (0315) ;
                                        (0316) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0317) ;
                                        (0318) ;  THEORY of OPERATION or PROCEDURE:
                                        (0319) ;
                                        (0320)  EzI2Cs_ResumeInt:
                                        (0321) _EzI2Cs_ResumeInt:
                                        (0322)    RAM_PROLOGUE RAM_USE_CLASS_1
07B0: 80 04    JMP   0x07B5             (0323)    jmp   ResumeEntry
                                        (0324) 
                                        (0325)  EzI2Cs_EnableInt:
                                        (0326) _EzI2Cs_EnableInt:
                                        (0327)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0328)    ;first clear any pending interrupts
07B2: 41 DD FE AND   REG[0xDD],0xFE     (0329)    and   reg[INT_CLR3], ~EzI2Cs_INT_MASK   
07B5: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0330) ResumeEntry:
                                        (0331)    M8C_EnableIntMask EzI2Cs_INT_REG, EzI2Cs_INT_MASK
                                        (0332)    RAM_EPILOGUE RAM_USE_CLASS_1
07B8: 7F       RET                      (0333)    ret
                                        (0334) 
                                        (0335) .ENDSECTION
                                        (0336) 
                                        (0337) .SECTION
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;  FUNCTION NAME: EzI2Cs_EnableSlave
                                        (0340) ;
                                        (0341) ;  DESCRIPTION:
                                        (0342) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0343) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0344) ;
                                        (0345) ;-----------------------------------------------------------------------------
                                        (0346) ;
                                        (0347) ;  ARGUMENTS: none
                                        (0348) ;
                                        (0349) ;  RETURNS: none
                                        (0350) ;
                                        (0351) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0352) ;
                                        (0353) ;  THEORY of OPERATION or PROCEDURE:
                                        (0354) ;
                                        (0355) 
                                        (0356)  EzI2Cs_EnableSlave:
                                        (0357) _EzI2Cs_EnableSlave:
                                        (0358) 
                                        (0359)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0360)     
                                        (0361)     IF (EzI2Cs_CY8C27XXXA_ID) ;; Enable this code if we have CY8C27XXXA chip ID
                                        (0362)     ; Save original CPU clock speed
                                        (0363)     M8C_SetBank1          ; Set Bank 1 
                                        (0364)     mov  A,reg[OSC_CR0]   ; Get current configuration of OSC_CR0 (Bank 1)
                                        (0365)     push A                ; Save OSC_CR0 configuration
                                        (0366)     and  A,0xF8           ; Mask off CPU speed
                                        (0367)     or   A,0x05           ; Set clock to 750KHz
                                        (0368)     mov  reg[OSC_CR0],A   ; Write new value to OSC_CR0 (Bank 1)
                                        (0369)     M8C_SetBank0          ; Back to Bank 0
                                        (0370)     ENDIF 
                                        (0371)     ; Enable I2C Slave
                                        (0372)     IF(EzI2Cs_USED_I2C_BLOCK)
                                        (0373)     M8C_SetBank1
                                        (0374)     or   reg[EzI2Cs_CFG_REG],(EzI2Cs_CFG_Slave_EN | EzI2Cs_CFG_BUS_ERROR_IE | EzI2Cs_CFG_STOP_IE)
                                        (0375)     M8C_SetBank0
                                        (0376)     ELSE
07B9: 43 D6 31 OR    REG[0xD6],0x31     (0377)     or   reg[EzI2Cs_CFG_REG],(EzI2Cs_CFG_Slave_EN | EzI2Cs_CFG_BUS_ERROR_IE | EzI2Cs_CFG_STOP_IE)
                                        (0378)     ENDIF
                                        (0379)     IF (EzI2Cs_CY8C27XXXA_ID) ;; Enable this code if we have CY8C27XXXA chip ID    
                                        (0380)     ; Restore original CPU clock speed
                                        (0381)     pop  A
                                        (0382)     M8C_SetBank1          ; Set Bank 1
                                        (0383)     mov  reg[OSC_CR0],A   ; Restore
                                        (0384)     M8C_SetBank0          ; Back to Bank 0
                                        (0385)     ENDIF    
                                        (0386)     RAM_EPILOGUE RAM_USE_CLASS_1
07BC: 7F       RET                      (0387)     ret
07BD: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0388) 
                                        (0389) .ENDSECTION
                                        (0390) 
                                        (0391) .SECTION
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;  FUNCTION NAME: EzI2Cs_DisableInt
                                        (0394) ;  FUNCTION NAME: EzI2Cs_Stop
                                        (0395) ;
                                        (0396) ;  DESCRIPTION:
                                        (0397) ;     Disables EzI2Cs slave by disabling SDA interrupt
                                        (0398) ;
                                        (0399) ;-----------------------------------------------------------------------------
                                        (0400) ;
                                        (0401) ;  ARGUMENTS: none
                                        (0402) ;
                                        (0403) ;  RETURNS: none
                                        (0404) ;
                                        (0405) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0406) ;
                                        (0407) ;  THEORY of OPERATION or PROCEDURE:
                                        (0408) ;
                                        (0409) 
                                        (0410)  EzI2Cs_Stop:
                                        (0411) _EzI2Cs_Stop:
                                        (0412)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0413) 
                                        (0414)    M8C_DisableIntMask EzI2Cs_INT_REG, EzI2Cs_INT_MASK
                                        (0415)    IF(EzI2Cs_USED_I2C_BLOCK)
                                        (0416)    M8C_SetBank1
                                        (0417)    and  reg[EzI2Cs_CFG_REG],~EzI2Cs_CFG_Slave_EN
                                        (0418)    M8C_SetBank0
                                        (0419)    ELSE
07C0: 41 D6 FE AND   REG[0xD6],0xFE     (0420)    and  reg[EzI2Cs_CFG_REG],~EzI2Cs_CFG_Slave_EN
                                        (0421)    ENDIF
                                        (0422)    RAM_EPILOGUE RAM_USE_CLASS_1
07C3: 7F       RET                      (0423)    ret
07C4: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0424) 
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) 
                                        (0429) .SECTION
                                        (0430) ;-----------------------------------------------------------------------------
                                        (0431) ;  FUNCTION NAME: EzI2Cs_DisableInt
                                        (0432) ;  FUNCTION NAME: EzI2Cs_Stop
                                        (0433) ;
                                        (0434) ;  DESCRIPTION:
                                        (0435) ;     Disables EzI2Cs slave by disabling SDA interrupt
                                        (0436) ;
                                        (0437) ;-----------------------------------------------------------------------------
                                        (0438) ;
                                        (0439) ;  ARGUMENTS: none
                                        (0440) ;
                                        (0441) ;  RETURNS: none
                                        (0442) ;
                                        (0443) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0444) ;
                                        (0445) ;  THEORY of OPERATION or PROCEDURE:
                                        (0446) ;
                                        (0447) 
                                        (0448)  EzI2Cs_DisableInt:
                                        (0449) _EzI2Cs_DisableInt:
                                        (0450)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0451)    M8C_DisableIntMask EzI2Cs_INT_REG, EzI2Cs_INT_MASK
                                        (0452)    RAM_EPILOGUE RAM_USE_CLASS_1
07C7: 7F       RET                      (0453)    ret
                                        (0454) 
                                        (0455) .ENDSECTION
                                        (0456) 
                                        (0457) .SECTION
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;  FUNCTION NAME: EzI2Cs_DisableSlave
                                        (0460) ;
                                        (0461) ;  DESCRIPTION:
                                        (0462) ;     Disables EzI2Cs slave by disabling SDA interrupt
                                        (0463) ;
                                        (0464) ;-----------------------------------------------------------------------------
                                        (0465) ;
                                        (0466) ;  ARGUMENTS: none
                                        (0467) ;
                                        (0468) ;  RETURNS: none
                                        (0469) ;
                                        (0470) ;  SIDE EFFECTS: REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0471) ;
                                        (0472) ;  THEORY of OPERATION or PROCEDURE:
                                        (0473) ;
                                        (0474) 
                                        (0475)  EzI2Cs_DisableSlave:
                                        (0476) _EzI2Cs_DisableSlave:
                                        (0477)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0478)    IF(EzI2Cs_USED_I2C_BLOCK)
                                        (0479)    M8C_SetBank1
                                        (0480)    and  reg[EzI2Cs_CFG_REG],~EzI2Cs_CFG_Slave_EN
                                        (0481)    M8C_SetBank0
                                        (0482)    ELSE
07C8: 41 D6 FE AND   REG[0xD6],0xFE     (0483)    and  reg[EzI2Cs_CFG_REG],~EzI2Cs_CFG_Slave_EN
                                        (0484)    ENDIF
                                        (0485)    RAM_EPILOGUE RAM_USE_CLASS_1
07CB: 7F       RET                      (0486)    ret
07CC: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0487) 
                                        (0488) .ENDSECTION
                                        (0489) 
                                        (0490) .SECTION
                                        (0491) ;-----------------------------------------------------------------------------
                                        (0492) ;  FUNCTION NAME: 
                                        (0493) ;          void EzI2Cs_SetRamBuffer(BYTE bSize, BYTE bRWboundry, BYTE * pAddr)
                                        (0494) ;
                                        (0495) ;  DESCRIPTION:
                                        (0496) ;     Sets the location and size of the I2C RAM buffer.          
                                        (0497) ;
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;
                                        (0500) ;  ARGUMENTS: 
                                        (0501) ;     [SP-3] =>  Size of data structure
                                        (0502) ;     [SP-4] =>  R/W boundary of (Must be less than or equal to size.)
                                        (0503) ;     [SP-5] =>  LSB of data pointer
                                        (0504) ;     [SP-6] =>  MSB of data pointer (Only used for large memory model)
                                        (0505) ;
                                        (0506) ;  RETURNS: none
                                        (0507) ;
                                        (0508) ;  SIDE EFFECTS;    
                                        (0509) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0510) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0511) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0512) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0513) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0514) ;          
                                        (0515) ;    Page Pointer Registers Modified: 
                                        (0516) ;          CUR_PP
                                        (0517) ;
                                        (0518) ;  THEORY of OPERATION or PROCEDURE:
                                        (0519) ;
                                        (0520) 
                                        (0521) ; Stack offset constants
                                        (0522) RAMBUF_SIZE:   equ  -3   ; Stack position for data structure size.
                                        (0523) RW_SIZE:       equ  -4   ; Stack position for R/W area size.       
                                        (0524) RAMPTR_LSB:    equ  -5   ; Stack position for RAM pointer LSB.   
                                        (0525) RAMPTR_MSB:    equ  -6   ; Stack position for RAM pointer MSB.   
                                        (0526) 
                                        (0527)  EzI2Cs_SetRamBuffer:
                                        (0528) _EzI2Cs_SetRamBuffer:
                                        (0529) 
                                        (0530)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0531)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0532)     RAM_SETPAGE_CUR >EzI2Cs_bRAM_Buf_Size    ; Set page to global var page.
                                        (0533)                                                         ; All these globals should be
                                        (0534)                                                         ; on the same page.          
07CF: 4F       MOV   X,SP               (0535)     mov   X,SP
07D0: 52 FD    MOV   A,[X-3]            (0536)     mov   A,[X+RAMBUF_SIZE]
07D2: 53 08    MOV   [0x8],A            (0537)     mov   [EzI2Cs_bRAM_Buf_Size],A           ; Store the buffer size
                                        (0538) 
07D4: 52 FC    MOV   A,[X-4]            (0539)     mov   A,[X+RW_SIZE]                            ; Store R/W boundary             
07D6: 53 09    MOV   [0x9],A            (0540)     mov   [EzI2Cs_bRAM_Buf_WSize],A          ; 
                                        (0541)     
07D8: 52 FB    MOV   A,[X-5]            (0542)     mov   A,[X+RAMPTR_LSB]                         ; Store only LSB of data pointer
07DA: 53 07    MOV   [0x7],A            (0543)     mov   [EzI2Cs_pRAM_Buf_Addr_LSB],A       ; 
                                        (0544) 
                                        (0545) IF (SYSTEM_LARGE_MEMORY_MODEL)                             ; Only worry about the address MSB
                                        (0546)                                                            ; if in the large memory Model
07DC: 52 FA    MOV   A,[X-6]            (0547)     mov   A,[X+RAMPTR_MSB]                         ; Store only MSB of data pointer
07DE: 53 06    MOV   [0x6],A            (0548)     mov   [EzI2Cs_pRAM_Buf_Addr_MSB],A       ; 
07E0: 70 3F    AND   F,0x3F             
07E2: 71 C0    OR    F,0xC0             
                                        (0549) ENDIF
                                        (0550) 
                                        (0551)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0552)     RAM_EPILOGUE RAM_USE_CLASS_4
07E4: 7F       RET                      (0553)     ret
                                        (0554) 
                                        (0555) .ENDSECTION
                                        (0556) 
                                        (0557) IF (EzI2Cs_ROM_ENABLE)  ;; Enable only if alternate ROM Address is Enabled
                                        (0558) .SECTION
                                        (0559) ;-----------------------------------------------------------------------------
                                        (0560) ;  FUNCTION NAME: 
                                        (0561) ;          void EzI2Cs_SetRomBuffer(BYTE bSize, BYTE * pAddr)
                                        (0562) ;
                                        (0563) ;  DESCRIPTION:
                                        (0564) ;     Sets the location and size of the I2C ROM buffer.          
                                        (0565) ;
                                        (0566) ;-----------------------------------------------------------------------------
                                        (0567) ;
                                        (0568) ;  ARGUMENTS: 
                                        (0569) ;     [SP-3] =>  Size of data const data structure
                                        (0570) ;     [SP-4] =>  LSB of data pointer
                                        (0571) ;     [SP-5] =>  MSB of data pointer (Only used for large memory model)
                                        (0572) ;
                                        (0573) ;  RETURNS: none
                                        (0574) ;
                                        (0575) ;  SIDE EFFECTS;    
                                        (0576) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0577) ;    IN THE LARGE MEMORY MODEL CURRENTLY ONLY THE PAGE POINTER 
                                        (0578) ;    REGISTERS LISTED BELOW ARE MODIFIED.  THIS DOES NOT GUARANTEE 
                                        (0579) ;    THAT IN FUTURE IMPLEMENTATIONS OF THIS FUNCTION OTHER PAGE POINTER 
                                        (0580) ;    REGISTERS WILL NOT BE MODIFIED.
                                        (0581) ;          
                                        (0582) ;    Page Pointer Registers Modified: 
                                        (0583) ;          CUR_PP
                                        (0584) ;
                                        (0585) ;  THEORY of OPERATION or PROCEDURE:
                                        (0586) ;
                                        (0587) 
                                        (0588) ; Stack offset constants
                                        (0589) ROMBUF_SIZE:   equ  -3   ; Stack position for data structure size.
                                        (0590) ROMPTR_LSB:    equ  -4   ; Stack position for ROM pointer LSB.   
                                        (0591) ROMPTR_MSB:    equ  -5   ; Stack position for ROM pointer MSB.   
                                        (0592) 
                                        (0593)  EzI2Cs_SetRomBuffer:
                                        (0594) _EzI2Cs_SetRomBuffer:
                                        (0595) 
                                        (0596)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0597)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0598)     RAM_SETPAGE_CUR >EzI2Cs_bROM_Buf_Size    ; Set page to global var page.
                                        (0599)                                                         ; All these globals should be
                                        (0600)                                                         ; on the same page.          
                                        (0601)     mov   X,SP
                                        (0602)     mov   A,[X+ROMBUF_SIZE]
                                        (0603)     mov   [EzI2Cs_bROM_Buf_Size],A           ; Store the buffer size
                                        (0604) 
                                        (0605)     mov   A,[X+ROMPTR_LSB]                         ; Store LSB of data pointer
                                        (0606)     mov   [EzI2Cs_pROM_Buf_Addr_LSB],A       ; 
                                        (0607)     mov   A,[X+ROMPTR_MSB]                         ; Store MSB of data pointer
                                        (0608)     mov   [EzI2Cs_pROM_Buf_Addr_MSB],A       ; 
                                        (0609)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0610)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0611)     ret
                                        (0612) 
                                        (0613) .ENDSECTION
                                        (0614) ENDIF
                                        (0615) 
                                        (0616) ; End of File EzI2Cs.asm
FILE: lib\adcincint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINCINT.asm
                                        (0004) ;;  Version: 1.20, Updated on 2012/9/21 at 11:56:47
                                        (0005) ;;
                                        (0006) ;;  DESCRIPTION: Assembler interrupt service routine for the ADCINC
                                        (0007) ;;               A/D Converter User Module. This code works for both the
                                        (0008) ;;               first and second-order modulator topologies.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "ADCINC.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export _ADCINC_ADConversion_ISR
                                        (0024) 
                                        (0025) export _ADCINC_iResult
                                        (0026) export  ADCINC_iResult
                                        (0027) export _ADCINC_fStatus
                                        (0028) export  ADCINC_fStatus
                                        (0029) export _ADCINC_bState
                                        (0030) export  ADCINC_bState
                                        (0031) export _ADCINC_fMode
                                        (0032) export  ADCINC_fMode
                                        (0033) export _ADCINC_bNumSamples
                                        (0034) export  ADCINC_bNumSamples
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM,REL)
                                        (0040)  ADCINC_iResult:
                                        (0041) _ADCINC_iResult:                           BLK  2 ;Calculated answer
                                        (0042)   iTemp:                                   BLK  2 ;internal temp storage
                                        (0043)  ADCINC_fStatus:
                                        (0044) _ADCINC_fStatus:                           BLK  1 ;ADC Status
                                        (0045)  ADCINC_bState:
                                        (0046) _ADCINC_bState:                            BLK  1 ;State value of ADC count
                                        (0047)  ADCINC_fMode:
                                        (0048) _ADCINC_fMode:                             BLK  1 ;Integrate and reset mode.
                                        (0049)  ADCINC_bNumSamples:
                                        (0050) _ADCINC_bNumSamples:                       BLK  1 ;Number of samples to take.
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0057) ;---------------------------------------------------
                                        (0058) ; Insert your custom declarations below this banner
                                        (0059) ;---------------------------------------------------
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _ADCINC_ADConversion_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION: Perform final filter operations to produce output samples.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;    The decimation rate is established by the PWM interrupt. Four timer
                                        (0087) ;    clocks elapse for each modulator output (decimator input) since the
                                        (0088) ;    phi1/phi2 generator divides by 4. This means the timer period and thus
                                        (0089) ;    it's interrupt must equal 4 times the actual decimation rate.  The
                                        (0090) ;    decimator is ru  for 2^(#bits-6).
                                        (0091) ;
                                        (0092) _ADCINC_ADConversion_ISR:
07E5: 7A 10    DEC   [0x10]             (0093)     dec  [ADCINC_bState]
                                        (0094) if1:
07E7: C0 02    JC    0x07EA             (0095)     jc endif1 ; no underflow
07E9: 7E       RETI                     (0096)     reti
                                        (0097) endif1:
07EA: 3C 11 00 CMP   [0x11],0x0         (0098)     cmp [ADCINC_fMode],0
                                        (0099) if2: 
07ED: B0 12    JNZ   0x0800             (0100)     jnz endif2  ;leaving reset mode
07EF: 08       PUSH  A                  (0101)     push A                            ;read decimator
07F0: 5D E5    MOV   A,REG[0xE5]        (0102)     mov  A, reg[DEC_DL]
07F2: 53 0E    MOV   [0xE],A            (0103)     mov  [iTemp + LowByte],A
07F4: 5D E4    MOV   A,REG[0xE4]        (0104)     mov  A, reg[DEC_DH]
07F6: 53 0D    MOV   [0xD],A            (0105)     mov  [iTemp + HighByte], A
07F8: 18       POP   A                  (0106)     pop A
07F9: 55 11 01 MOV   [0x11],0x1         (0107)     mov [ADCINC_fMode],1
07FC: 55 10 FF MOV   [0x10],0xFF        (0108)     mov [ADCINC_bState],((1<<(ADCINC_bNUMBITS- 6))-1)
07FF: 7E       RETI                     (0109)     reti
0800: 43 82 20 OR    REG[0x82],0x20     
0803: 43 83 10 OR    REG[0x83],0x10     
                                        (0110) endif2:
                                        (0111)     ;This code runs at end of integrate
                                        (0112)     ADCINC_RESET_INTEGRATOR_M
0806: 08       PUSH  A                  (0113)     push A
0807: 5D E5    MOV   A,REG[0xE5]        (0114)     mov  A, reg[DEC_DL]
0809: 12 0E    SUB   A,[0xE]            (0115)     sub  A,[iTemp + LowByte]
080B: 53 0E    MOV   [0xE],A            (0116)     mov  [iTemp +LowByte],A
080D: 5D E4    MOV   A,REG[0xE4]        (0117)     mov  A, reg[DEC_DH]
080F: 1A 0D    SBB   A,[0xD]            (0118)     sbb  A,[iTemp + HighByte]
                                        (0119) 
                                        (0120)        ;check for overflow
                                        (0121) IF     ADCINC_8_OR_MORE_BITS
0811: 39 40    CMP   A,0x40             (0122)     cmp A,(1<<(ADCINC_bNUMBITS - 8))
                                        (0123) if3: 
0813: B0 05    JNZ   0x0819             (0124)     jnz endif3 ;overflow
0815: 78       DEC   A                  (0125)     dec A
0816: 55 0E FF MOV   [0xE],0xFF         (0126)     mov [iTemp + LowByte],ffh
                                        (0127) endif3:
                                        (0128) ELSE
                                        (0129)     cmp [iTemp + LowByte],(1<<(ADCINC_bNUMBITS))
                                        (0130) if4: 
                                        (0131)     jnz endif4 ;overflow
                                        (0132)     dec [iTemp + LowByte]
                                        (0133) endif4:
                                        (0134) ENDIF
                                        (0135) IF ADCINC_SIGNED_DATA
                                        (0136) IF ADCINC_9_OR_MORE_BITS
                                        (0137)     sub A,(1<<(ADCINC_bNUMBITS - 9))
                                        (0138) ELSE
                                        (0139)     sub [iTemp +LowByte],(1<<(ADCINC_bNUMBITS - 1))
                                        (0140)     sbb A,0
                                        (0141) ENDIF
                                        (0142) ENDIF
0819: 5F 0C 0E MOV   [0xC],[0xE]        (0143)     mov  [ADCINC_iResult + LowByte],[iTemp +LowByte]
081C: 53 0B    MOV   [0xB],A            (0144)     mov  [ADCINC_iResult + HighByte],A
081E: 55 0F 01 MOV   [0xF],0x1          (0145)     mov  [ADCINC_fStatus],1
                                        (0146) ConversionReady:
                                        (0147)     ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0148)     ;---------------------------------------------------
                                        (0149)     ; Insert your custom code below this banner
                                        (0150)     ;---------------------------------------------------
                                        (0151)     ;  Sample data is now in iResult
                                        (0152)     ;
                                        (0153)     ;  NOTE: This interrupt service routine has already
                                        (0154)     ;  preserved the values of the A CPU register. If
                                        (0155)     ;  you need to use the X register you must preserve
                                        (0156)     ;  its value and restore it before the return from
                                        (0157)     ;  interrupt.
                                        (0158)     ;---------------------------------------------------
                                        (0159)     ; Insert your custom code above this banner
                                        (0160)     ;---------------------------------------------------
                                        (0161)     ;@PSoC_UserCode_END@ (Do not change this line.)
0821: 18       POP   A                  (0162)     pop A
0822: 3C 12 00 CMP   [0x12],0x0         (0163)     cmp [ADCINC_bNumSamples],0
                                        (0164) if5: 
0825: B0 0E    JNZ   0x0834             (0165)     jnz endif5 ; Number of samples is zero
0827: 55 11 00 MOV   [0x11],0x0         (0166)     mov [ADCINC_fMode],0
082A: 55 10 00 MOV   [0x10],0x0         (0167)     mov [ADCINC_bState],0
082D: 41 83 EF AND   REG[0x83],0xEF     
0830: 41 82 DF AND   REG[0x82],0xDF     
                                        (0168)     ADCINC_ENABLE_INTEGRATOR_M
0833: 7E       RETI                     (0169)     reti       
                                        (0170) endif5:
0834: 7A 12    DEC   [0x12]             (0171)     dec [ADCINC_bNumSamples]
                                        (0172) if6:
0836: A0 0E    JZ    0x0845             (0173)     jz endif6  ; count not zero
0838: 55 11 00 MOV   [0x11],0x0         (0174)     mov [ADCINC_fMode],0
083B: 55 10 00 MOV   [0x10],0x0         (0175)     mov [ADCINC_bState],0
083E: 41 83 EF AND   REG[0x83],0xEF     
0841: 41 82 DF AND   REG[0x82],0xDF     
                                        (0176)     ADCINC_ENABLE_INTEGRATOR_M
0844: 7E       RETI                     (0177)     reti       
0845: 71 10    OR    F,0x10             
                                        (0178) endif6:
                                        (0179)     ;All samples done
                                        (0180)     M8C_SetBank1
0847: 41 E7 3F AND   REG[0xE7],0x3F     (0181)     and reg[E7h], 3Fh            ; if we are in 29xxx or 24x94   
084A: 43 E7 80 OR    REG[0xE7],0x80     (0182)     or  reg[E7h], 80h            ; then set to incremental Mode
084D: 70 EF    AND   F,0xEF             
084F: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0183)     M8C_SetBank0
                                        (0184)     ADCINC_STOPADC_M
0852: 7E       RETI                     (0185)  reti 
FILE: lib\adcinc.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINC.asm
                                        (0004) ;;   Version: 1.20, Updated on 2012/9/21 at 11:56:47
                                        (0005) ;;  Generated by PSoC Designer 5.3.2710
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the ADCINC A/D Converter
                                        (0008) ;;               User Module with 1st-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        function returns. Even though these registers may be preserved now,
                                        (0015) ;;        there is no guarantee they will be preserved in future releases.
                                        (0016) ;;-----------------------------------------------------------------------------
                                        (0017) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0018) ;;*****************************************************************************
                                        (0019) ;;*****************************************************************************
                                        (0020) 
                                        (0021) include "m8c.inc"
                                        (0022) include "memory.inc"
                                        (0023) 
                                        (0024) include "ADCINC.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  ADCINC_Start
                                        (0031) export _ADCINC_Start
                                        (0032) export  ADCINC_SetPower
                                        (0033) export _ADCINC_SetPower
                                        (0034) export  ADCINC_Stop
                                        (0035) export _ADCINC_Stop
                                        (0036) export  ADCINC_GetSamples
                                        (0037) export _ADCINC_GetSamples
                                        (0038) export  ADCINC_StopADC
                                        (0039) export _ADCINC_StopADC
                                        (0040) export  ADCINC_fIsDataAvailable
                                        (0041) export _ADCINC_fIsDataAvailable
                                        (0042) export  ADCINC_iClearFlagGetData
                                        (0043) export _ADCINC_iClearFlagGetData
                                        (0044) export  ADCINC_wClearFlagGetData
                                        (0045) export _ADCINC_wClearFlagGetData
                                        (0046) export  ADCINC_cClearFlagGetData
                                        (0047) export _ADCINC_cClearFlagGetData
                                        (0048) export  ADCINC_bClearFlagGetData
                                        (0049) export _ADCINC_bClearFlagGetData
                                        (0050) export  ADCINC_iGetData
                                        (0051) export _ADCINC_iGetData
                                        (0052) export  ADCINC_wGetData
                                        (0053) export _ADCINC_wGetData
                                        (0054) export  ADCINC_bGetData
                                        (0055) export _ADCINC_bGetData
                                        (0056) export  ADCINC_cGetData
                                        (0057) export _ADCINC_cGetData
                                        (0058) export  ADCINC_fClearFlag
                                        (0059) export _ADCINC_fClearFlag
                                        (0060) export  ADCINC_WritePulseWidth
                                        (0061) export _ADCINC_WritePulseWidth
                                        (0062) 
                                        (0063) 
                                        (0064) AREA bss (RAM,REL)
                                        (0065) 
                                        (0066) ;-----------------------------------------------
                                        (0067) ;  Constant Definitions
                                        (0068) ;-----------------------------------------------
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: ADCINC_Start
                                        (0080) ;
                                        (0081) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0082) ;               and starts the PWM
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0086) ;  RETURNS:      Nothing.
                                        (0087) ;  SIDE EFFECTS:
                                        (0088) ;    The A and X registers may be modified by this or future implementations
                                        (0089) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0090) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0091) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0092) ;    functions.
                                        (0093) ;
                                        (0094)  ADCINC_Start:
                                        (0095) _ADCINC_Start:
                                        (0096)    RAM_PROLOGUE RAM_USE_CLASS_1
0853: 90 0D    CALL  _ADCINC_SetPower   (0097)    call  ADCINC_SetPower
0855: 43 82 20 OR    REG[0x82],0x20     
0858: 43 83 10 OR    REG[0x83],0x10     
                                        (0098)    ADCINC_RESET_INTEGRATOR_M
085B: 62 21 FF MOV   REG[0x21],0xFF     (0099)    mov   reg[ADCINC_PWMdr1],ffh
085E: 43 23 01 OR    REG[0x23],0x1      (0100)    or    reg[ADCINC_PWMcr0],01h                      ; start PWM
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0861: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105)    
                                        (0106) .SECTION
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: ADCINC_SetPower
                                        (0109) ;
                                        (0110) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0111) ;-----------------------------------------------------------------------------
                                        (0112) ;
                                        (0113) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0114) ;  RETURNS:      Nothing.
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;    The A and X registers may be modified by this or future implementations
                                        (0117) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0118) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0119) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0120) ;    functions.
                                        (0121) ;
                                        (0122)  ADCINC_SetPower:
                                        (0123) _ADCINC_SetPower:
                                        (0124)    RAM_PROLOGUE RAM_USE_CLASS_2
0862: 4F       MOV   X,SP               (0125)    mov  X,SP                                     ; Set up Stack frame
0863: 21 03    AND   A,0x3              (0126)    and  A,03h                                    ; Ensure value is legal
0865: 08       PUSH  A                  (0127)    push A
0866: 5D 83    MOV   A,REG[0x83]        (0128)    mov  A,reg[ADCINC_AtoDcr3]                    ; First SC block:
0868: 21 FC    AND   A,0xFC             (0129)    and  A,~03h                                   ;   clear power bits to zero
086A: 2B 00    OR    A,[X+0]            (0130)    or   A,[ X ]                                  ;   establish new value
086C: 60 83    MOV   REG[0x83],A        (0131)    mov  reg[ADCINC_AtoDcr3],A                    ;   change the actual setting
086E: 18       POP   A                  (0132)    pop  A
086F: 70 3F    AND   F,0x3F             
0871: 71 C0    OR    F,0xC0             
                                        (0133)    RAM_EPILOGUE RAM_USE_CLASS_2
0873: 7F       RET                      (0134)    ret
0874: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0135) .ENDSECTION
                                        (0136) 
                                        (0137) .SECTION
                                        (0138) ;-----------------------------------------------------------------------------
                                        (0139) ;  FUNCTION NAME: ADCINC_Stop
                                        (0140) ;
                                        (0141) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0142) ;                 and turns off PWM
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;
                                        (0145) ;  ARGUMENTS:     None.
                                        (0146) ;  RETURNS:       Nothing.
                                        (0147) ;  SIDE EFFECTS:
                                        (0148) ;    The A and X registers may be modified by this or future implementations
                                        (0149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0151) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0152) ;    functions.
                                        (0153) ;
                                        (0154)  ADCINC_Stop:
                                        (0155) _ADCINC_Stop:
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0157)    ADCINC_STOPADC_M
0877: 41 83 FC AND   REG[0x83],0xFC     (0158)    and  reg[ADCINC_AtoDcr3], ~03h
087A: 41 23 FE AND   REG[0x23],0xFE     (0159)    and  reg[ADCINC_PWMcr0], ~01h ; stop PWM
                                        (0160)    RAM_EPILOGUE RAM_USE_CLASS_1
087D: 7F       RET                      (0161)    ret
087E: 62 D0 00 MOV   REG[0xD0],0x0      
0881: 41 83 EF AND   REG[0x83],0xEF     
0884: 41 82 DF AND   REG[0x82],0xDF     
                                        (0162) .ENDSECTION
                                        (0163) 
                                        (0164) 
                                        (0165) .SECTION
                                        (0166) ;-----------------------------------------------------------------------------
                                        (0167) ;  FUNCTION NAME: ADCINC_GetSamples
                                        (0168) ;
                                        (0169) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    A register contain number of samples
                                        (0173) ;  RETURNS:      Nothing.
                                        (0174) ;  SIDE EFFECTS:
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;          
                                        (0181) ;    Currently only the page pointer registers listed below are modified: 
                                        (0182) ;          CUR_PP
                                        (0183) ;
                                        (0184)  ADCINC_GetSamples:
                                        (0185) _ADCINC_GetSamples:
                                        (0186)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0187)    RAM_SETPAGE_CUR >ADCINC_fMode
                                        (0188)    ADCINC_ENABLE_INTEGRATOR_M
0887: 55 11 00 MOV   [0x11],0x0         (0189)    mov [ADCINC_fMode],0
088A: 55 10 00 MOV   [0x10],0x0         (0190)    mov [ADCINC_bState],0
088D: 53 12    MOV   [0x12],A           (0191)    mov [ADCINC_bNumSamples],A
088F: 5D 22    MOV   A,REG[0x22]        (0192)    mov A, reg[ADCINC_PWMdr2]
0891: B0 04    JNZ   0x0896             (0193)    jnz  .SkipPulseWrite
0893: 62 22 01 MOV   REG[0x22],0x1      (0194)    mov reg[ADCINC_PWMdr2], 1
0896: 71 10    OR    F,0x10             
                                        (0195) .SkipPulseWrite:
                                        (0196) 
                                        (0197)    M8C_SetBank1
0898: 41 E7 3F AND   REG[0xE7],0x3F     (0198)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
089B: 43 E7 40 OR    REG[0xE7],0x40     (0199)    or  reg[E7h], 40h             ; then set to incremental Mode
089E: 70 EF    AND   F,0xEF             
08A0: 62 DB FE MOV   REG[0xDB],0xFE     
08A3: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0200)    M8C_SetBank0
                                        (0201) 
                                        (0202)    ADCINC_STARTADC_M  ;enable interrupt 
                                        (0203)    RAM_EPILOGUE RAM_USE_CLASS_4 
08A6: 7F       RET                      (0204)    ret
08A7: 71 10    OR    F,0x10             
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) 
                                        (0208) .SECTION
                                        (0209) ;-----------------------------------------------------------------------------
                                        (0210) ;  FUNCTION NAME: ADCINC_StopADC
                                        (0211) ;
                                        (0212) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
                                        (0213) ;               is disabled but the PWM output is still active.
                                        (0214) ;               Integrator is reset
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) ;
                                        (0217) ;  ARGUMENTS:    None.
                                        (0218) ;  RETURNS:      Nothing.
                                        (0219) ;  SIDE EFFECTS:
                                        (0220) ;    The A and X registers may be modified by this or future implementations
                                        (0221) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0222) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0223) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0224) ;    functions.
                                        (0225) ;
                                        (0226)  ADCINC_StopADC:
                                        (0227) _ADCINC_StopADC:
                                        (0228)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0229)    M8C_SetBank1
08A9: 41 E7 3F AND   REG[0xE7],0x3F     (0230)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
08AC: 43 E7 80 OR    REG[0xE7],0x80     (0231)    or  reg[E7h], 80h             ; then set to incremental Mode
08AF: 70 EF    AND   F,0xEF             
08B1: 41 E1 FE AND   REG[0xE1],0xFE     
08B4: 43 82 20 OR    REG[0x82],0x20     
08B7: 43 83 10 OR    REG[0x83],0x10     
                                        (0232)    M8C_SetBank0
                                        (0233)    ADCINC_STOPADC_M
                                        (0234)    ADCINC_RESET_INTEGRATOR_M
                                        (0235)    RAM_EPILOGUE RAM_USE_CLASS_1 
08BA: 7F       RET                      (0236)    ret
08BB: 62 D0 00 MOV   REG[0xD0],0x0      
08BE: 51 0F    MOV   A,[0xF]            
                                        (0237) .ENDSECTION
                                        (0238) 
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: ADCINC_fIsDataAvailable
                                        (0243) ;
                                        (0244) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  ARGUMENTS:    None.
                                        (0247) ;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
                                        (0248) ;  SIDE EFFECTS:
                                        (0249) ;    The A and X registers may be modified by this or future implementations
                                        (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0253) ;    functions.
                                        (0254) ;          
                                        (0255) ;    Currently only the page pointer registers listed below are modified: 
                                        (0256) ;          CUR_PP
                                        (0257) ;
                                        (0258)  ADCINC_fIsDataAvailable:
                                        (0259) _ADCINC_fIsDataAvailable:
                                        (0260)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0261)    ADCINC_fIsDataAvailable_M   
                                        (0262)    RAM_EPILOGUE RAM_USE_CLASS_4
08C0: 7F       RET                      (0263)    ret
08C1: 62 D0 00 MOV   REG[0xD0],0x0      
08C4: 55 0F 00 MOV   [0xF],0x0          
08C7: 58 0B    MOV   X,[0xB]            
08C9: 51 0C    MOV   A,[0xC]            
08CB: 3C 0F 00 CMP   [0xF],0x0          
08CE: BF F5    JNZ   0x08C4             
                                        (0264) .ENDSECTION
                                        (0265) 
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME:  ADCINC_iClearFlagGetData
                                        (0270) ;                  ADCINC_wClearFlagGetData
                                        (0271) ;
                                        (0272) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0273) ;                  Flag is checked after trandfer to insure valid data.
                                        (0274) ;                  available. Also clears the DATA_READY flag. 
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  ARGUMENTS:    None.
                                        (0277) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;          
                                        (0285) ;    Currently only the page pointer registers listed below are modified: 
                                        (0286) ;          CUR_PP
                                        (0287) ;
                                        (0288)  ADCINC_iClearFlagGetData:
                                        (0289) _ADCINC_iClearFlagGetData:
                                        (0290)  ADCINC_wClearFlagGetData:
                                        (0291) _ADCINC_wClearFlagGetData:
                                        (0292)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0293)    ADCINC_iClearFlagGetData_M   
                                        (0294)    RAM_EPILOGUE RAM_USE_CLASS_4
08D0: 7F       RET                      (0295)    ret
08D1: 62 D0 00 MOV   REG[0xD0],0x0      
08D4: 55 0F 00 MOV   [0xF],0x0          
08D7: 51 0C    MOV   A,[0xC]            
                                        (0296) .ENDSECTION
                                        (0297) 
                                        (0298) 
                                        (0299) .SECTION
                                        (0300) ;-----------------------------------------------------------------------------
                                        (0301) ;  FUNCTION NAME:  ADCINC_cClearFlagGetData
                                        (0302) ;                  ADCINC_bClearFlagGetData
                                        (0303) ;
                                        (0304) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0305) ;-----------------------------------------------------------------------------
                                        (0306) ;  ARGUMENTS:    None.
                                        (0307) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0311) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0312) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0313) ;    functions.
                                        (0314) ;          
                                        (0315) ;    Currently only the page pointer registers listed below are modified: 
                                        (0316) ;          CUR_PP
                                        (0317) ;
                                        (0318)  ADCINC_cClearFlagGetData:
                                        (0319) _ADCINC_cClearFlagGetData:
                                        (0320)  ADCINC_bClearFlagGetData:
                                        (0321) _ADCINC_bClearFlagGetData:
                                        (0322)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0323)    ADCINC_bClearFlagGetData_M     
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
08D9: 7F       RET                      (0325)    ret
08DA: 62 D0 00 MOV   REG[0xD0],0x0      
08DD: 58 0B    MOV   X,[0xB]            
08DF: 51 0C    MOV   A,[0xC]            
                                        (0326) .ENDSECTION
                                        (0327) .SECTION
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;  FUNCTION NAME:  ADCINC_iGetData
                                        (0330) ;				   ADCINC_wGetData
                                        (0331) ;
                                        (0332) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0333) ;                   available.
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;  ARGUMENTS:    None.
                                        (0336) ;  RETURNS:      fastcall int iResult is returned in the X,A registers
                                        (0337) ;  SIDE EFFECTS:
                                        (0338) ;    The A and X registers may be modified by this or future implementations
                                        (0339) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0342) ;    functions.
                                        (0343) ;          
                                        (0344) ;    Currently only the page pointer registers listed below are modified: 
                                        (0345) ;          CUR_PP
                                        (0346) ;
                                        (0347)  ADCINC_iGetData:
                                        (0348) _ADCINC_iGetData:
                                        (0349)  ADCINC_wGetData:
                                        (0350) _ADCINC_wGetData:
                                        (0351)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0352)    ADCINC_wGetData_M          
                                        (0353)    RAM_EPILOGUE RAM_USE_CLASS_4
08E1: 7F       RET                      (0354)    ret
08E2: 62 D0 00 MOV   REG[0xD0],0x0      
08E5: 51 0C    MOV   A,[0xC]            
                                        (0355) .ENDSECTION
                                        (0356) .SECTION
                                        (0357) ;-----------------------------------------------------------------------------
                                        (0358) ;  FUNCTION NAME:  ADCINC_bGetData
                                        (0359) ;                  ADCINC_cGetData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0362) ;                   available.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  ARGUMENTS:    None.
                                        (0365) ;  RETURNS:      fastcall CHAR cData returned in the A register
                                        (0366) ;  SIDE EFFECTS:
                                        (0367) ;    The A and X registers may be modified by this or future implementations
                                        (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0371) ;    functions.
                                        (0372) ;          
                                        (0373) ;    Currently only the page pointer registers listed below are modified: 
                                        (0374) ;          CUR_PP
                                        (0375) ;
                                        (0376)  ADCINC_bGetData:
                                        (0377) _ADCINC_bGetData:
                                        (0378)  ADCINC_cGetData:
                                        (0379) _ADCINC_cGetData:
                                        (0380)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0381)    ADCINC_cGetData_M        
                                        (0382)    RAM_EPILOGUE RAM_USE_CLASS_4
08E7: 7F       RET                      (0383)    ret
08E8: 62 D0 00 MOV   REG[0xD0],0x0      
08EB: 51 0F    MOV   A,[0xF]            
08ED: 55 0F 00 MOV   [0xF],0x0          
                                        (0384) .ENDSECTION
                                        (0385) 
                                        (0386) 
                                        (0387) .SECTION
                                        (0388) ;-----------------------------------------------------------------------------
                                        (0389) ;  FUNCTION NAME: ADCINC_fClearFlag
                                        (0390) ;
                                        (0391) ;  DESCRIPTION: Clears the data ready flag.
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;  ARGUMENTS:    None.
                                        (0394) ;  RETURNS:      Nothing.
                                        (0395) ;  SIDE EFFECTS: 
                                        (0396) ;    The DATA_READY flag is cleared.
                                        (0397) ;    
                                        (0398) ;    The A and X registers may be modified by this or future implementations
                                        (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0402) ;    functions.
                                        (0403) ;          
                                        (0404) ;    Currently only the page pointer registers listed below are modified: 
                                        (0405) ;          CUR_PP
                                        (0406) ;
                                        (0407)  ADCINC_fClearFlag:
                                        (0408) _ADCINC_fClearFlag:
                                        (0409)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0410)    ADCINC_fClearFlag_M    
                                        (0411)    RAM_EPILOGUE RAM_USE_CLASS_4
08F0: 7F       RET                      (0412)    ret
08F1: 60 22    MOV   REG[0x22],A        
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) 
                                        (0416) .SECTION
                                        (0417) ;-----------------------------------------------------------------------------
                                        (0418) ;  FUNCTION NAME: ADCINC_WritePulseWidth
                                        (0419) ;
                                        (0420) ;  DESCRIPTION:
                                        (0421) ;     Write the 8-bit period value into the compare register (DR2).
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;
                                        (0424) ;  ARGUMENTS: fastcall BYTE bPeriodValue (passed in A)
                                        (0425) ;  RETURNS:   Nothing
                                        (0426) ;  SIDE EFFECTS:
                                        (0427) ;    The A and X registers may be modified by this or future implementations
                                        (0428) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0429) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0430) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0431) ;    functions.
                                        (0432) ;
                                        (0433)  ADCINC_WritePulseWidth:
                                        (0434) _ADCINC_WritePulseWidth:
                                        (0435)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0436)    ADCINC_WritePulseWidth_M  
                                        (0437)    RAM_EPILOGUE RAM_USE_CLASS_1
08F3: 7F       RET                      (0438)    ret
                                        (0439) .ENDSECTION
                                        (0440) 
                                        (0441) ; End of File ADCINC.asm
FILE: G:\Dropbox\Hobby\PROGRA~1\PSOCPR~1\I2C_ADC\I2C_ADC\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        															// Part specific constants and macros
(0006) #include "PSoCAPI.h"    															// PSoC API definitions for all User Modules
(0007) 
(0008) // Variablen
(0009) int Wert = 0;
(0010) char Adresse = 0;
(0011) 
(0012) // Funktionen
(0013) void I2C_Init(void);
(0014) 
(0015) void main(void)
(0016) {
(0017) 	M8C_EnableGInt; 
__UserModules_end|__text_start|_main|_main:
    08F4: 71 01    OR    F,0x1
(0018) 	LCD_Start();																	// LCD Modul aktivieren
    08F6: 10       PUSH  X
    08F7: 7C 05 11 LCALL _LCD_Init|_LCD_Start|LCD_Start|LCD_Init
(0019) 	PGA_Start(PGA_LOWPOWER);														// PGA aktivieren
    08FA: 50 01    MOV   A,0x1
    08FC: 7C 03 BF LCALL PGA_Start|_PGA_SetPower|PGA_SetPower|_PGA_Start
(0020) 	ADCINC_Start(ADCINC_HIGHPOWER);       											// ADC aktivieren 
    08FF: 50 03    MOV   A,0x3
    0901: 7C 08 53 LCALL _ADCINC_Start
(0021) 	ADCINC_GetSamples(0);                 											// Free-Run Modus aktivieren 
    0904: 50 00    MOV   A,0x0
    0906: 7C 08 7E LCALL _ADCINC_GetSamples
(0022) 
(0023) 	
(0024) 	LCD_Position(0,0); 
    0909: 50 00    MOV   A,0x0
    090B: 57 00    MOV   X,0x0
    090D: 7C 05 84 LCALL _LCD_Position
(0025) 	LCD_PrCString("PSoC I2C Slave");
    0910: 50 01    MOV   A,0x1
    0912: 08       PUSH  A
    0913: 50 AE    MOV   A,0xAE
    0915: 5C       MOV   X,A
    0916: 18       POP   A
    0917: 7C 03 FF LCALL _LCD_PrCString
(0026) 	
(0027) 	EzI2Cs_SetRamBuffer(10, 10, (char *)&Wert);										// I²C Buffer setzen, 10 Byte Größe, 10 Byte Schreib/Lesbar
    091A: 50 00    MOV   A,0x0
    091C: 08       PUSH  A
    091D: 50 13    MOV   A,0x13
    091F: 08       PUSH  A
    0920: 50 0A    MOV   A,0xA
    0922: 08       PUSH  A
    0923: 08       PUSH  A
    0924: 7C 07 CC LCALL _EzI2Cs_SetRamBuffer
    0927: 38 FC    ADD   SP,0xFC
    0929: 20       POP   X
(0028) 	
(0029) 	I2C_Init();
    092A: 90 84    CALL  _I2C_Init
(0030) 	
(0031) 	Adresse = EzI2Cs_GetAddr();
    092C: 10       PUSH  X
    092D: 7C 07 AD LCALL _EzI2Cs_GetAddr
    0930: 20       POP   X
    0931: 62 D0 00 MOV   REG[0xD0],0x0
    0934: 53 17    MOV   [Adresse],A
    0936: 80 75    JMP   0x09AC
(0032) 
(0033) 	
(0034) 	while(1)
(0035) 	{
(0036) 		while(ADCINC_fIsDataAvailable() == 0);    
    0938: 10       PUSH  X
    0939: 7C 08 BB LCALL _ADCINC_fIsDataAvailable
    093C: 20       POP   X
    093D: 62 D0 00 MOV   REG[0xD0],0x0
    0940: 39 00    CMP   A,0x0
    0942: AF F5    JZ    0x0938
(0037) 		Wert = ADCINC_iClearFlagGetData();              
    0944: 10       PUSH  X
    0945: 7C 08 C1 LCALL _ADCINC_iClearFlagGetData|_ADCINC_wClearFlagGetData|ADCINC_wClearFlagGetData
    0948: 62 D0 00 MOV   REG[0xD0],0x0
    094B: 5A 16    MOV   [__r0],X
    094D: 20       POP   X
    094E: 08       PUSH  A
    094F: 51 16    MOV   A,[__r0]
    0951: 62 D0 00 MOV   REG[0xD0],0x0
    0954: 53 13    MOV   [Wert],A
    0956: 18       POP   A
    0957: 53 14    MOV   [Wert+1],A
(0038) 
(0039) 		LCD_Position(1,0); 
    0959: 10       PUSH  X
    095A: 57 00    MOV   X,0x0
    095C: 50 01    MOV   A,0x1
    095E: 7C 05 84 LCALL _LCD_Position
(0040) 		LCD_PrCString("ADC:");
    0961: 50 01    MOV   A,0x1
    0963: 08       PUSH  A
    0964: 50 A9    MOV   A,0xA9
    0966: 5C       MOV   X,A
    0967: 18       POP   A
    0968: 7C 03 FF LCALL _LCD_PrCString
(0041) 		LCD_Position(1,5);
    096B: 57 05    MOV   X,0x5
    096D: 50 01    MOV   A,0x1
    096F: 7C 05 84 LCALL _LCD_Position
(0042) 		LCD_PrHexInt(Wert);
    0972: 62 D0 00 MOV   REG[0xD0],0x0
    0975: 51 13    MOV   A,[Wert]
    0977: 08       PUSH  A
    0978: 51 14    MOV   A,[Wert+1]
    097A: 20       POP   X
    097B: 7C 04 34 LCALL _LCD_PrHexInt
(0043) 		LCD_Position(2,0); 
    097E: 57 00    MOV   X,0x0
    0980: 50 02    MOV   A,0x2
    0982: 7C 05 84 LCALL _LCD_Position
(0044) 		LCD_PrCString("Adresse:");
    0985: 50 01    MOV   A,0x1
    0987: 08       PUSH  A
    0988: 50 A0    MOV   A,0xA0
    098A: 5C       MOV   X,A
    098B: 18       POP   A
    098C: 7C 03 FF LCALL _LCD_PrCString
(0045) 		LCD_Position(2,9);
    098F: 57 09    MOV   X,0x9
    0991: 50 02    MOV   A,0x2
    0993: 7C 05 84 LCALL _LCD_Position
    0996: 20       POP   X
(0046) 		LCD_PrHexInt(Adresse);
    0997: 62 D0 00 MOV   REG[0xD0],0x0
    099A: 51 17    MOV   A,[Adresse]
    099C: 62 D0 00 MOV   REG[0xD0],0x0
    099F: 53 15    MOV   [__r1],A
    09A1: 10       PUSH  X
    09A2: 50 00    MOV   A,0x0
    09A4: 08       PUSH  A
    09A5: 51 15    MOV   A,[__r1]
    09A7: 20       POP   X
    09A8: 7C 04 34 LCALL _LCD_PrHexInt
    09AB: 20       POP   X
(0047) 	}
    09AC: 8F 8B    JMP   0x0938
    09AE: 8F FF    JMP   0x09AE
(0048) }
(0049) 
(0050) void I2C_Init(void)
(0051) {
(0052) 	EzI2Cs_Start();																	// I²C Modul starten
_I2C_Init:
    09B0: 10       PUSH  X
    09B1: 7C 07 71 LCALL _EzI2Cs_Start
(0053) 	EzI2Cs_EnableInt();																// I²C Interrupts aktivieren
    09B4: 7C 07 B2 LCALL _EzI2Cs_EnableInt
    09B7: 20       POP   X
    09B8: 7F       RET   
