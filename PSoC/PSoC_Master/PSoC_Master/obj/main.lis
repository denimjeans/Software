 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile G:\PSOCPR~1\PSOC_M~1\PSOC_M~1\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3802              add SP,2
 0004                   .dbline 11
 0004           ; #include <m8c.h>                                                                              // Part specific constants and macros
 0004           ; #include "PSoCAPI.h"                                                                          // PSoC API definitions for all User Modules
 0004           ; #pragma interrupt_handler Timer_Int
 0004           ; #pragma interrupt_handler UART_Int
 0004           ; 
 0004           ; char Buffer[80];
 0004           ; char *p;
 0004           ; char *Zeiger;
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 12
 0004           ;       M8C_EnableGInt;
 0004 7101                      or  F, 01h
 0006           
 0006                   .dbline 13
 0006           ;       M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
 0006 43E020            or REG[0xe0],32
 0009                   .dbline 14
 0009           ;       LCD_Start();
 0009 10                push X
 000A 7C0000            xcall _LCD_Start
 000D                   .dbline 15
 000D           ;       Timer16_Start();
 000D 7C0000            xcall _Timer16_Start
 0010                   .dbline 16
 0010           ;       Timer16_EnableInt();
 0010 7C0000            xcall _Timer16_EnableInt
 0013 20                pop X
 0014                   .dbline 17
 0014           ;       UART_Start(UART_PARITY_NONE);                                           // UART aktivieren
 0014 10                push X
 0015 5000              mov A,0
 0017 7C0000            xcall _UART_Start
 001A 20                pop X
 001B                   .dbline 18
 001B           ;       UART_IntCntl(UART_ENABLE_RX_INT);                                               // RX Interrupt aktivieren
 001B 10                push X
 001C 5001              mov A,1
 001E 7C0000            xcall _UART_IntCntl
 0021 20                pop X
 0022 807F              xjmp L3
 0024           L2:
 0024                   .dbline 21
 0024           ;       
 0024           ;       while(1)
 0024           ;       {                       
 0024                   .dbline 22
 0024           ;               *p = 0;                                                                                         // Pointer "P" auf 0 setzen
 0024 62D000            mov REG[0xd0],>_p
 0027 5101              mov A,[_p+1]
 0029 08                push A
 002A 5100              mov A,[_p]
 002C 62D000            mov REG[0xd0],>__r0
 002F 5300              mov [__r0],A
 0031 18                pop A
 0032 5300              mov [__r1],A
 0034 5100              mov A,[__r0]
 0036 60D5              mov REG[0xd5],A
 0038 5000              mov A,0
 003A 3F00              mvi [__r1],A
 003C                   .dbline 23
 003C           ;               p = Buffer;                                                                                     // Zeiger "P" auf das Array "Buffer" zeigen lassen
 003C 62D000            mov REG[0xd0],>_p
 003F 550100            mov [_p+1],<_Buffer
 0042 550000            mov [_p],>_Buffer
 0045           L5:
 0045                   .dbline 24
 0045           ;               while ((*p++ = UART_cGetChar()) != 0x0D);                       // Zeichen über UART einlesen und es am die Stelle speichern auf die "P" zeigt. 
 0045           L6:
 0045                   .dbline 24
 0045 62D000            mov REG[0xd0],>_p
 0048 5101              mov A,[_p+1]
 004A 08                push A
 004B 5100              mov A,[_p]
 004D 62D000            mov REG[0xd0],>__r0
 0050 5300              mov [__r0],A
 0052 18                pop A
 0053 5300              mov [__r1],A
 0055 5401              mov [X+1],A
 0057 5100              mov A,[__r0]
 0059 5400              mov [X+0],A
 005B 5100              mov A,[__r1]
 005D 0101              add A,1
 005F 62D000            mov REG[0xd0],>_p
 0062 5301              mov [_p+1],A
 0064 62D000            mov REG[0xd0],>__r0
 0067 5100              mov A,[__r0]
 0069 0900              adc A,0
 006B 62D000            mov REG[0xd0],>_p
 006E 5300              mov [_p],A
 0070 10                push X
 0071 7C0000            xcall _UART_cGetChar
 0074 62D000            mov REG[0xd0],>__r0
 0077 20                pop X
 0078 5300              mov [__r0],A
 007A 5201              mov A,[X+1]
 007C 5300              mov [__r3],A
 007E 5200              mov A,[X+0]
 0080 60D5              mov REG[0xd5],A
 0082 5100              mov A,[__r0]
 0084 3F00              mvi [__r3],A
 0086 3C000D            cmp [__r0],13
 0089 BFBB              jnz L5
 008B                   .dbline 27
 008B           ;                                                                                                                       // Den Wert des Pointers "P" erhöhen. Schleife wird bei 0x0D verlassen.
 008B           ;                                               // Ausgabe des Arrays "Buffer"
 008B           ;               memset (Buffer,' ',16);                                                         // Array "Buffer" leeren
 008B 5000              mov A,0
 008D 08                push A
 008E 5010              mov A,16
 0090 08                push A
 0091 5000              mov A,0
 0093 08                push A
 0094 5020              mov A,32
 0096 08                push A
 0097 5000              mov A,>_Buffer
 0099 08                push A
 009A 5000              mov A,<_Buffer
 009C 08                push A
 009D 7C0000            xcall _memset
 00A0 38FA              add SP,-6
 00A2                   .dbline 28
 00A2           ;       }
 00A2           L3:
 00A2                   .dbline 20
 00A2 8F81              xjmp L2
 00A4           X0:
 00A4                   .dbline -2
 00A4           L1:
 00A4 38FE              add SP,-2
 00A6 20                pop X
 00A7                   .dbline 0 ; func end
 00A7 8FFF              jmp .
 00A9                   .dbend
 00A9                   .dbfunc e Timer_Int _Timer_Int fV
 00A9           _Timer_Int::
 00A9                   .dbline -1
 00A9                   .dbline 32
 00A9           ; }
 00A9           ; 
 00A9           ; void Timer_Int(void)
 00A9           ;       {
 00A9                   .dbline -2
 00A9           L8:
 00A9                   .dbline 0 ; func end
 00A9 7E                reti
 00AA                   .dbend
 00AA                   .dbfunc e UART_Int _UART_Int fV
 00AA           _UART_Int::
 00AA                   .dbline -1
 00AA 71C0              or F,-64
 00AC 08                push A
 00AD 5DD0              mov A,REG[0xd0]
 00AF 08                push A
 00B0 5DD3              mov A,REG[0xd3]
 00B2 08                push A
 00B3 5DD4              mov A,REG[0xd4]
 00B5 08                push A
 00B6 5DD5              mov A,REG[0xd5]
 00B8 08                push A
 00B9 62D000            mov REG[0xd0],>__r0
 00BC 5100              mov A,[__r0]
 00BE 08                push A
 00BF 5100              mov A,[__r1]
 00C1 08                push A
 00C2 5100              mov A,[__r2]
 00C4 08                push A
 00C5 5100              mov A,[__r3]
 00C7 08                push A
 00C8 5100              mov A,[__r4]
 00CA 08                push A
 00CB 5100              mov A,[__r5]
 00CD 08                push A
 00CE 5100              mov A,[__r6]
 00D0 08                push A
 00D1 5100              mov A,[__r7]
 00D3 08                push A
 00D4 5100              mov A,[__r8]
 00D6 08                push A
 00D7 5100              mov A,[__r9]
 00D9 08                push A
 00DA 5100              mov A,[__r10]
 00DC 08                push A
 00DD 5100              mov A,[__r11]
 00DF 08                push A
 00E0 5100              mov A,[__rX]
 00E2 08                push A
 00E3 5100              mov A,[__rY]
 00E5 08                push A
 00E6 5100              mov A,[__rZ]
 00E8 08                push A
 00E9                   .dbline 36
 00E9           ;       }
 00E9           ;       
 00E9           ; void UART_Int(void)
 00E9           ;       {
 00E9                   .dbline 37
 00E9           ;       PRT0DR ^= 0x01;
 00E9 450001            xor REG[0],1
 00EC                   .dbline 38
 00EC           ;          if(UART_bCmdCheck())                                                                 // Auf Befehl warten  
 00EC 10                push X
 00ED 7C0000            xcall _UART_bCmdCheck
 00F0 62D000            mov REG[0xd0],>__r0
 00F3 20                pop X
 00F4 3900              cmp A,0
 00F6 A055              jz L10
 00F8                   .dbline 39
 00F8           ;          {                                            
 00F8                   .dbline 40
 00F8           ;           if(Zeiger = UART_szGetParam())                                      
 00F8 10                push X
 00F9 7C0000            xcall _UART_szGetParam
 00FC 62D000            mov REG[0xd0],>__r0
 00FF 5300              mov [__r0],A
 0101 5A00              mov [__r1],X
 0103 20                pop X
 0104 5100              mov A,[__r1]
 0106 08                push A
 0107 5100              mov A,[__r0]
 0109 62D000            mov REG[0xd0],>_Zeiger
 010C 5300              mov [_Zeiger],A
 010E 18                pop A
 010F 5301              mov [_Zeiger+1],A
 0111 62D000            mov REG[0xd0],>__r0
 0114 3C0000            cmp [__r0],0
 0117 B006              jnz X1
 0119 3C0000            cmp [__r1],0
 011C A02A              jz L12
 011E           X1:
 011E                   .dbline 41
 011E           ;                 {       
 011E                   .dbline 42
 011E           ;                       LCD_Position(0,0);
 011E 10                push X
 011F 5000              mov A,0
 0121 5C                mov X,A
 0122 7C0000            xcall _LCD_Position
 0125 20                pop X
 0126                   .dbline 43
 0126           ;                       LCD_PrCString("Gesendet:");
 0126 10                push X
 0127 5000              mov A,>L14
 0129 08                push A
 012A 5000              mov A,<L14
 012C 5C                mov X,A
 012D 18                pop A
 012E 7C0000            xcall _LCD_PrCString
 0131 20                pop X
 0132                   .dbline 44
 0132           ;                       LCD_Position(1,0);
 0132 10                push X
 0133 5700              mov X,0
 0135 5001              mov A,1
 0137 7C0000            xcall _LCD_Position
 013A 20                pop X
 013B                   .dbline 45
 013B           ;                       LCD_PrString(Buffer);            
 013B 10                push X
 013C 5000              mov A,>_Buffer
 013E 08                push A
 013F 5000              mov A,<_Buffer
 0141 5C                mov X,A
 0142 18                pop A
 0143 7C0000            xcall _LCD_PrString
 0146 20                pop X
 0147                   .dbline 46
 0147           ;           } 
 0147           L12:
 0147                   .dbline 47
 0147           ;        UART_CmdReset();                                               // Befehlsbuffer löschen  
 0147 10                push X
 0148 7C0000            xcall _UART_CmdReset
 014B 20                pop X
 014C                   .dbline 48
 014C           ;        } 
 014C           L10:
 014C                   .dbline -2
 014C           L9:
 014C 62D000            mov REG[0xD0],>__r0
 014F 18                pop A
 0150 5300              mov [__rZ],A
 0152 18                pop A
 0153 5300              mov [__rY],A
 0155 18                pop A
 0156 5300              mov [__rX],A
 0158 18                pop A
 0159 5300              mov [__r11],A
 015B 18                pop A
 015C 5300              mov [__r10],A
 015E 18                pop A
 015F 5300              mov [__r9],A
 0161 18                pop A
 0162 5300              mov [__r8],A
 0164 18                pop A
 0165 5300              mov [__r7],A
 0167 18                pop A
 0168 5300              mov [__r6],A
 016A 18                pop A
 016B 5300              mov [__r5],A
 016D 18                pop A
 016E 5300              mov [__r4],A
 0170 18                pop A
 0171 5300              mov [__r3],A
 0173 18                pop A
 0174 5300              mov [__r2],A
 0176 18                pop A
 0177 5300              mov [__r1],A
 0179 18                pop A
 017A 5300              mov [__r0],A
 017C 18                pop A
 017D 60D5              mov REG[213],A
 017F 18                pop A
 0180 60D4              mov REG[212],A
 0182 18                pop A
 0183 60D3              mov REG[211],A
 0185 18                pop A
 0186 60D0              mov REG[208],A
 0188 18                pop A
 0189                   .dbline 0 ; func end
 0189 7E                reti
 018A                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile G:\PSOCPR~1\PSOC_M~1\PSOC_M~1\main.c
 0000           _Zeiger::
 0000 0000              .byte 0,0
 0002                   .dbsym e Zeiger _Zeiger pc
                        .area data(ram, con, rel)
 0000                   .dbfile G:\PSOCPR~1\PSOC_M~1\PSOC_M~1\main.c
 0000           _p::
 0000 0000              .byte 0,0
 0002                   .dbsym e p _p pc
                        .area data(ram, con, rel)
 0000                   .dbfile G:\PSOCPR~1\PSOC_M~1\PSOC_M~1\main.c
 0000           _Buffer::
 0000 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 003C 00000000000000000000      .word 0,0,0,0,0
 0046 00000000000000000000      .byte 0,0,0,0,0,0,0,0,0,0
 0050                   .dbsym e Buffer _Buffer A[80:80]c
                        .area lit(rom, con, rel)
 0000           L14:
 0000 476573656E6465743A00      .byte 'G,'e,'s,'e,'n,'d,'e,'t,58,0
