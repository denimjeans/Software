FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.1.2306
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#897 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.21
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0129)     // call	void_handler
0010: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0133)     // call	void_handler
0014: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   18h                      ;VC3 Interrupt Vector
                                        (0137)     // call	void_handler
0018: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0141)     // call	void_handler
001C: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0145)     // call	void_handler
0020: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 06 22 LJMP  _Timer16_ISR       (0149)     ljmp	_Timer16_ISR
0027: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 03 C0 LJMP  _UART_TX_ISR       (0153)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 03 C1 LJMP  _UART_RX_ISR       (0157)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0161)     // call	void_handler
0030: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0165)     // call	void_handler
0034: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0169)     // call	void_handler
0038: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0173)     // call	void_handler
003C: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0177)     // call	void_handler
0040: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0181)     // call	void_handler
0044: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0185)     // call	void_handler
0048: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0189)     // call	void_handler
004C: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0193)     // call	void_handler
0050: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0197)     // call	void_handler
0054: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0201)     // call	void_handler
0058: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0205)     // call	void_handler
005C: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0209)     // call	void_handler
0060: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0213)     // call	void_handler
0064: 7E       RETI                     (0214)     reti
0068: 71 10    OR    F,0x10             
                                        (0215) 
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  Start of Execution.
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0220) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0221) ;
                                        (0222) 
                                        (0223) IF	(TOOLCHAIN & HITECH)
                                        (0224)  	AREA PD_startup(CODE, REL, CON)
                                        (0225) ELSE
                                        (0226)     org 68h
                                        (0227) ENDIF
                                        (0228) __Start:
                                        (0229) 
                                        (0230)     ; initialize SMP values for voltage stabilization, if required,
                                        (0231)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0232)     ; least for now. 
                                        (0233)     ;
                                        (0234)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0235)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0236)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0237)     M8C_SetBank0
                                        (0238) 
                                        (0239)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0240)     mov   A, 20h
0074: 28       ROMX                     (0241)     romx
0075: 50 40    MOV   A,0x40             (0242)     mov   A, 40h
0077: 28       ROMX                     (0243)     romx
0078: 50 60    MOV   A,0x60             (0244)     mov   A, 60h
007A: 28       ROMX                     (0245)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0246)     ; %45%20%46%46% End workaround
                                        (0247) 
                                        (0248) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0249) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0250)     M8C_EnableWatchDog
                                        (0251) ENDIF
                                        (0252) 
                                        (0253) IF ( SELECT_32K )
007E: 43 FE 04 OR    REG[0xFE],0x4      (0254)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0255) ELSE
                                        (0256)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0257) ENDIF
                                        (0258) 
                                        (0259)     ;---------------------------
                                        (0260)     ; Set up the Temporary stack
                                        (0261)     ;---------------------------
                                        (0262)     ; A temporary stack is set up for the SSC instructions.
                                        (0263)     ; The real stack start will be assigned later.
                                        (0264)     ;
                                        (0265) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0266)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0267)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0268) 
                                        (0269)     ;-----------------------------------------------
                                        (0270)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0271)     ;-----------------------------------------------
                                        (0272) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0273) 
                                        (0274) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0275)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0276)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0277)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0278)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0279)   IF ( AGND_BYPASS )
                                        (0280)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0281)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0282)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0283)     ; value using the proper trim values.
                                        (0284)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0285)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)   ENDIF
                                        (0287)  ENDIF
                                        (0288) ENDIF ; 5.0 V Operation
                                        (0289) 
                                        (0290) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0291)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0292)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0293)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0294)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0295)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0296)  ENDIF
                                        (0297) ENDIF ; 3.3 Volt Operation
                                        (0298) 
0087: 55 F8 00 MOV   [p+130],0x0        (0299)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [p+131],0x0        (0300)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0301) 
                                        (0302)     ;---------------------------------------
                                        (0303)     ; Initialize Crystal Oscillator and PLL
                                        (0304)     ;---------------------------------------
                                        (0305) 
                                        (0306) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0307)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0308)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0309)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0310)     ; the ECO to stabilize.
                                        (0311)     ;
                                        (0312)     M8C_SetBank1
008F: 62 E0 9A MOV   REG[0xE0],0x9A     (0313)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0314)     M8C_SetBank0
                                        (0315)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
0097: 43 E0 40 OR    REG[0xE0],0x40     (0316)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
009A: 62 E2 00 MOV   REG[0xE2],0x0      (0317)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0318) .WaitFor1s:
009D: 49 DA 40 TST   REG[0xDA],0x40     (0319)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
00A0: AF FC    JZ    0x009D             (0320)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0321)                                           ;   since interrupts are not globally enabled
                                        (0322) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0323)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0324)     M8C_SetBank1
                                        (0325)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
                                        (0326)     M8C_SetBank0
                                        (0327)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0328) 
                                        (0329) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0330) 
                                        (0331) IF ( PLL_MODE )
                                        (0332)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0333)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0334)     ;
                                        (0335)     M8C_SetBank1
                                        (0336)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0337)     M8C_SetBank0
                                        (0338)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0339)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0340) 
                                        (0341) .WaitFor16ms:
                                        (0342)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0343)     jz   .WaitFor16ms
                                        (0344)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0345)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0346)     M8C_SetBank0
                                        (0347) 
                                        (0348) IF      ( WAIT_FOR_32K )
                                        (0349) ELSE ; !( WAIT_FOR_32K )
                                        (0350)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0351)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0352) ENDIF ;(WAIT_FOR_32K)
                                        (0353) ENDIF ;(PLL_MODE)
                                        (0354) 
                                        (0355) 	;-------------------------------------------------------
                                        (0356)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0357)     ;-------------------------------------------------------
                                        (0358) 
                                        (0359)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0360) 
                                        (0361) IF (SYSCLK_SOURCE)
                                        (0362)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0363) ENDIF
                                        (0364)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0365) 
                                        (0366)     ;------------------------
                                        (0367)     ; Close CT leakage path.
                                        (0368)     ;------------------------
00A2: 62 71 05 MOV   REG[0x71],0x5      (0369)     mov   reg[ACB00CR0], 05h
00A5: 62 75 05 MOV   REG[0x75],0x5      (0370)     mov   reg[ACB01CR0], 05h
00A8: 62 79 05 MOV   REG[0x79],0x5      (0371)     mov   reg[ACB02CR0], 05h
00AB: 62 7D 05 MOV   REG[0x7D],0x5      (0372)     mov   reg[ACB03CR0], 05h
00AE: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0373) 
                                        (0374) 
                                        (0375) IF	(TOOLCHAIN & HITECH)
                                        (0376)     ;---------------------------------------------
                                        (0377)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0378)     ;---------------------------------------------
                                        (0379) 	global		__Lstackps
                                        (0380) 	mov     a,low __Lstackps
                                        (0381) 	swap    a,sp
                                        (0382) 
                                        (0383) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0384)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0385)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0386)     RAM_SETPAGE_CUR 0
                                        (0387)     RAM_SETPAGE_MVW 0
                                        (0388)     RAM_SETPAGE_MVR 0
                                        (0389)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0390)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0391)     ELSE
                                        (0392)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0393)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0394) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0395) ELSE
                                        (0396)     ;---------------------------------------------
                                        (0397)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0398)     ;---------------------------------------------
                                        (0399) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0400)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00B1: 50 00    MOV   A,0x0              (0401)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00B3: 4E       SWAP  SP,A               (0402)     swap  A, SP
00B4: 62 D3 07 MOV   REG[0xD3],0x7      
00B7: 62 D0 00 MOV   REG[0xD0],0x0      
00BA: 62 D5 00 MOV   REG[0xD5],0x0      
00BD: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0403)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0404)     RAM_SETPAGE_CUR 0
                                        (0405)     RAM_SETPAGE_MVW 0
                                        (0406)     RAM_SETPAGE_MVR 0
                                        (0407) 
                                        (0408)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00C0: 71 C0    OR    F,0xC0             (0409)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0410)   ELSE
                                        (0411)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0412)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0413) ELSE
                                        (0414)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0415)     swap  SP, A
                                        (0416) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0417) ENDIF ;	TOOLCHAIN
                                        (0418) 
                                        (0419)     ;-------------------------
                                        (0420)     ; Load Base Configuration
                                        (0421)     ;-------------------------
                                        (0422)     ; Load global parameter settings and load the user modules in the
                                        (0423)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0424)     ; to minimize start up time; (2) We may still need to play with the
                                        (0425)     ; Sleep Timer.
                                        (0426)     ;
00C2: 7C 03 55 LCALL 0x0355             (0427)     lcall LoadConfigInit
                                        (0428) 
                                        (0429)     ;-----------------------------------
                                        (0430)     ; Initialize C Run-Time Environment
                                        (0431)     ;-----------------------------------
                                        (0432) IF ( C_LANGUAGE_SUPPORT )
                                        (0433) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0434)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0435)     mov  [__r0],<__bss_start
                                        (0436) BssLoop:
                                        (0437)     cmp  [__r0],<__bss_end
                                        (0438)     jz   BssDone
                                        (0439)     mvi  [__r0],A
                                        (0440)     jmp  BssLoop
                                        (0441) BssDone:
                                        (0442)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0443)     mov  X,<__idata_start
                                        (0444)     mov  [__r0],<__data_start
                                        (0445) IDataLoop:
                                        (0446)     cmp  [__r0],<__data_end
                                        (0447)     jz   C_RTE_Done
                                        (0448)     push A
                                        (0449)     romx
                                        (0450)     mvi  [__r0],A
                                        (0451)     pop  A
                                        (0452)     inc  X
                                        (0453)     adc  A,0
                                        (0454)     jmp  IDataLoop
                                        (0455) 
                                        (0456) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0457) 
                                        (0458) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00C5: 62 D0 00 MOV   REG[0xD0],0x0      (0459)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0460)                                        ; to use the Virtual Register page.
                                        (0461) 
                                        (0462)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0463)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0464)     ; text segment and may have been relocated by the Code Compressor.
                                        (0465)     ;
00C8: 50 02    MOV   A,0x2              (0466)     mov   A, >__pXIData                ; Get the address of the flash
00CA: 57 4E    MOV   X,0x4E             (0467)     mov   X, <__pXIData                ;   pointer to the xidata area.
00CC: 08       PUSH  A                  (0468)     push  A
00CD: 28       ROMX                     (0469)     romx                               ; get the MSB of xidata's address
00CE: 53 73    MOV   [__r0],A           (0470)     mov   [__r0], A
00D0: 18       POP   A                  (0471)     pop   A
00D1: 75       INC   X                  (0472)     inc   X
00D2: 09 00    ADC   A,0x0              (0473)     adc   A, 0
00D4: 28       ROMX                     (0474)     romx                               ; get the LSB of xidata's address
00D5: 4B       SWAP  A,X                (0475)     swap  A, X
00D6: 51 73    MOV   A,[__r0]           (0476)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0477)                                        ;   XIData structure list in flash
00D8: 80 04    JMP   0x00DD             (0478)     jmp   .AccessStruct
                                        (0479) 
                                        (0480)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0481)     ; values of C variables. Each structure contains 3 member elements.
                                        (0482)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0483)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0484)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0485)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0486)     ; value in the second member element, an unsigned byte:
                                        (0487)     ; (1) If the value of the second element is non-zero, it represents
                                        (0488)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0489)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0490)     ; the bytes are copied to the block of RAM.
                                        (0491)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0492)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0493)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0494) 
                                        (0495) .AccessNextStructLoop:
00DA: 75       INC   X                  (0496)     inc   X                            ; pXIData++
00DB: 09 00    ADC   A,0x0              (0497)     adc   A, 0
00DD: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0498) .AccessStruct:                         ; Entry point for first block
                                        (0499)     ;
                                        (0500)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0501)     ;
                                        (0502)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00E0: 08       PUSH  A                  (0503)     push  A
00E1: 28       ROMX                     (0504)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00E2: 60 D5    MOV   REG[0xD5],A        (0505)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00E4: 74       INC   A                  (0506)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00E5: A0 4B    JZ    0x0131             (0507)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00E7: 18       POP   A                  (0508)     pop   A                            ; restore pXIData to [A,X]
00E8: 75       INC   X                  (0509)     inc   X                            ; pXIData++
00E9: 09 00    ADC   A,0x0              (0510)     adc   A, 0
00EB: 08       PUSH  A                  (0511)     push  A
00EC: 28       ROMX                     (0512)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00ED: 53 73    MOV   [__r0],A           (0513)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00EF: 18       POP   A                  (0514)     pop   A                            ; restore pXIData to [A,X]
00F0: 75       INC   X                  (0515)     inc   X                            ; pXIData++ (point to size)
00F1: 09 00    ADC   A,0x0              (0516)     adc   A, 0
00F3: 08       PUSH  A                  (0517)     push  A
00F4: 28       ROMX                     (0518)     romx                               ; Get the size (CPU.A <- *pXIData)
00F5: A0 1C    JZ    0x0112             (0519)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00F7: 53 72    MOV   [__r1],A           (0520)     mov   [__r1], A                    ;             else downcount in __r1
00F9: 18       POP   A                  (0521)     pop   A                            ; restore pXIData to [A,X]
                                        (0522) 
                                        (0523) .CopyNextByteLoop:
                                        (0524)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0525)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0526)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0527)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0528)     ;
00FA: 75       INC   X                  (0529)     inc   X                            ; pXIData++ (point to next data byte)
00FB: 09 00    ADC   A,0x0              (0530)     adc   A, 0
00FD: 08       PUSH  A                  (0531)     push  A
00FE: 28       ROMX                     (0532)     romx                               ; Get the data value (CPU.A <- *pXIData)
00FF: 3F 73    MVI   [__r0],A           (0533)     mvi   [__r0], A                    ; Transfer the data to RAM
0101: 47 73 FF TST   [__r0],0xFF        (0534)     tst   [__r0], 0xff                 ; Check for page crossing
0104: B0 06    JNZ   0x010B             (0535)     jnz   .CopyLoopTail                ;   No crossing, keep going
0106: 5D D5    MOV   A,REG[0xD5]        (0536)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0108: 74       INC   A                  (0537)     inc   A
0109: 60 D5    MOV   REG[0xD5],A        (0538)     mov   reg[ MVW_PP], A
                                        (0539) .CopyLoopTail:
010B: 18       POP   A                  (0540)     pop   A                            ; restore pXIData to [A,X]
010C: 7A 72    DEC   [__r1]             (0541)     dec   [__r1]                       ; End of this array in flash?
010E: BF EB    JNZ   0x00FA             (0542)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0110: 8F C9    JMP   0x00DA             (0543)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0544) 
                                        (0545) .ClearRAMBlockToZero:
0112: 18       POP   A                  (0546)     pop   A                            ; restore pXIData to [A,X]
0113: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
0114: 09 00    ADC   A,0x0              (0548)     adc   A, 0
0116: 08       PUSH  A                  (0549)     push  A
0117: 28       ROMX                     (0550)     romx                               ; Get the run length (CPU.A <- *pXIData)
0118: 53 72    MOV   [__r1],A           (0551)     mov   [__r1], A                    ; Initialize downcounter
011A: 50 00    MOV   A,0x0              (0552)     mov   A, 0                         ; Initialize source data
                                        (0553) 
                                        (0554) .ClearRAMBlockLoop:
                                        (0555)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0556)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0557)     ;
011C: 3F 73    MVI   [__r0],A           (0558)     mvi   [__r0], A                    ; Clear a byte
011E: 47 73 FF TST   [__r0],0xFF        (0559)     tst   [__r0], 0xff                 ; Check for page crossing
0121: B0 08    JNZ   0x012A             (0560)     jnz   .ClearLoopTail               ;   No crossing, keep going
0123: 5D D5    MOV   A,REG[0xD5]        (0561)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0125: 74       INC   A                  (0562)     inc   A
0126: 60 D5    MOV   REG[0xD5],A        (0563)     mov   reg[ MVW_PP], A
0128: 50 00    MOV   A,0x0              (0564)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0565) .ClearLoopTail:
012A: 7A 72    DEC   [__r1]             (0566)     dec   [__r1]                       ; Was this the last byte?
012C: BF EF    JNZ   0x011C             (0567)     jnz   .ClearRAMBlockLoop           ;   No,  continue
012E: 18       POP   A                  (0568)     pop   A                            ;   Yes, restore pXIData to [A,X] and
012F: 8F AA    JMP   0x00DA             (0569)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0570) 
                                        (0571) .C_RTE_WrapUp:
0131: 18       POP   A                  (0572)     pop   A                            ; balance stack
0132: 71 10    OR    F,0x10             
                                        (0573) 
                                        (0574) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0575) 
                                        (0576) C_RTE_Done:
                                        (0577) 
                                        (0578) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0579) 
                                        (0580)     ;-------------------------------
                                        (0581)     ; Voltage Stabilization for SMP
                                        (0582)     ;-------------------------------
                                        (0583) 
                                        (0584) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0585) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0586)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0587)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0588)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0589)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0590)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0591)     M8C_SetBank1
                                        (0592)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0593)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0594)     M8C_SetBank0
                                        (0595)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0596)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0597) .WaitFor2ms:
                                        (0598)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0599)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0600) ENDIF ; SMP is operational
                                        (0601) ENDIF ; 5.0V Operation
                                        (0602) 
                                        (0603)     ;-------------------------------
                                        (0604)     ; Set Power-On Reset (POR) Level
                                        (0605)     ;-------------------------------
                                        (0606) 
                                        (0607)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0608)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0609)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0610)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0611)     ;  lead to corruption of PSoC flash.
                                        (0612) 
                                        (0613)     M8C_SetBank1
                                        (0614) 
                                        (0615) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0616)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0617)  ELSE                                       ;    No, fast mode
                                        (0618)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0619)                                             ;       no, set midpoint POR in user code, if desired
                                        (0620)   ELSE ; 24HMz                              ;
0134: 43 E3 20 OR    REG[0xE3],0x20     (0621)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
0137: 70 EF    AND   F,0xEF             
                                        (0622)   ENDIF ; 24MHz
                                        (0623)  ENDIF ; Slow Mode
                                        (0624) ENDIF ; 5.0V Operation
                                        (0625) 
                                        (0626)     M8C_SetBank0
                                        (0627) 
                                        (0628)     ;----------------------------
                                        (0629)     ; Wrap up and invoke "main"
                                        (0630)     ;----------------------------
                                        (0631) 
                                        (0632)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0633)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0634)     ;
0139: 62 E0 00 MOV   REG[0xE0],0x0      (0635)     mov  reg[INT_MSK0],0
013C: 71 10    OR    F,0x10             
                                        (0636) 
                                        (0637)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0638)     ; And put decimator in full mode so it does not consume too much current.
                                        (0639)     ;
                                        (0640)     M8C_SetBank1
013E: 62 E0 83 MOV   REG[0xE0],0x83     (0641)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0141: 43 E7 80 OR    REG[0xE7],0x80     (0642)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0144: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0646)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0647)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0648)     ;
0146: 62 E2 00 MOV   REG[0xE2],0x0      (0649)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0650)                                    ; have been set during the boot process.
                                        (0651) IF	(TOOLCHAIN & HITECH)
                                        (0652) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0653) ELSE
                                        (0654) IF ENABLE_LJMP_TO_MAIN
                                        (0655)     ljmp  _main                    ; goto main (no return)
                                        (0656) ELSE
0149: 7C 09 15 LCALL __UserModules_end|_main|__text_start|_main(0657)     lcall _main                    ; call main
                                        (0658) .Exit:
014C: 8F FF    JMP   0x014C             (0659)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0660) ENDIF
                                        (0661) ENDIF ; TOOLCHAIN
                                        (0662) 
                                        (0663)     ;---------------------------------
                                        (0664)     ; Library Access to Global Parms
                                        (0665)     ;---------------------------------
                                        (0666)     ;
                                        (0667)  bGetPowerSetting:
                                        (0668) _bGetPowerSetting:
                                        (0669)     ; Returns value of POWER_SETTING in the A register.
                                        (0670)     ; No inputs. No Side Effects.
                                        (0671)     ;
014E: 50 10    MOV   A,0x10             (0672)     mov   A, POWER_SETTING
0150: 7F       RET                      (0673)     ret
                                        (0674) 
                                        (0675) IF	(TOOLCHAIN & HITECH)
                                        (0676) ELSE
                                        (0677)     ;---------------------------------
                                        (0678)     ; Order Critical RAM & ROM AREAs
                                        (0679)     ;---------------------------------
                                        (0680)     ;  'TOP' is all that has been defined so far...
                                        (0681) 
                                        (0682)     ;  ROM AREAs for C CONST, static & global items
                                        (0683)     ;
                                        (0684)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
                                        (0685)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
                                        (0686) __idata_start:
                                        (0687) 
                                        (0688)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
                                        (0689) __func_lit_start:
                                        (0690) 
                                        (0691) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0692)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0693)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0694)     ; relocated by the code compressor, but the text area may shrink and
                                        (0695)     ; that moves xidata around.
                                        (0696)     ;
                                        (0697) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0698) ENDIF
                                        (0699) 
                                        (0700)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0701)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0702) 
                                        (0703)     ; CODE segment for general use
                                        (0704)     ;
                                        (0705)     AREA text (ROM, REL, CON)
                                        (0706) __text_start:
                                        (0707) 
                                        (0708)     ; RAM area usage
                                        (0709)     ;
                                        (0710)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0711) __data_start:
                                        (0712) 
                                        (0713)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0714)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0715)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0716) __bss_start:
                                        (0717) 
                                        (0718) ENDIF ; TOOLCHAIN
                                        (0719) 
                                        (0720) ; end of file boot.asm
    0151: 30       HALT  
    0152: 30       HALT  
    0153: 30       HALT  
    0154: 30       HALT  
    0155: 30       HALT  
    0156: 30       HALT  
    0157: 30       HALT  
    0158: 30       HALT  
    0159: 30       HALT  
    015A: 30       HALT  
    015B: 30       HALT  
    015C: 30       HALT  
    015D: 30       HALT  
    015E: 30       HALT  
    015F: 30       HALT  
    0160: 30       HALT  
    0161: 30       HALT  
    0162: 30       HALT  
    0163: 30       HALT  
    0164: 30       HALT  
    0165: 30       HALT  
    0166: 30       HALT  
    0167: 30       HALT  
    0168: 30       HALT  
    0169: 30       HALT  
    016A: 30       HALT  
    016B: 30       HALT  
    016C: 30       HALT  
    016D: 30       HALT  
    016E: 30       HALT  
    016F: 30       HALT  
    0170: 30       HALT  
    0171: 30       HALT  
    0172: 30       HALT  
    0173: 30       HALT  
    0174: 30       HALT  
    0175: 30       HALT  
    0176: 30       HALT  
    0177: 30       HALT  
    0178: 30       HALT  
    0179: 30       HALT  
    017A: 30       HALT  
    017B: 30       HALT  
    017C: 30       HALT  
    017D: 30       HALT  
    017E: 30       HALT  
    017F: 30       HALT  
    0180: 30       HALT  
    0181: 30       HALT  
    0182: 30       HALT  
    0183: 30       HALT  
    0184: 30       HALT  
    0185: 30       HALT  
    0186: 30       HALT  
    0187: 30       HALT  
    0188: 30       HALT  
    0189: 30       HALT  
    018A: 30       HALT  
    018B: 30       HALT  
    018C: 30       HALT  
    018D: 30       HALT  
    018E: 30       HALT  
    018F: 30       HALT  
    0190: 30       HALT  
    0191: 30       HALT  
    0192: 30       HALT  
    0193: 30       HALT  
    0194: 30       HALT  
    0195: 30       HALT  
    0196: 30       HALT  
    0197: 30       HALT  
    0198: 30       HALT  
    0199: 30       HALT  
    019A: 30       HALT  
    019B: 30       HALT  
    019C: 30       HALT  
    019D: 30       HALT  
    019E: 30       HALT  
    019F: 30       HALT  
    01A0: 47 65 73 TST   [__rZ],0x73
    01A3: 65 6E    ASL   [__r5]
    01A5: 64       ASL   A
    01A6: 65 74    ASL   [Zeiger]
    01A8: 3A 00    CMP   A,[0x0]
    01AA: 23 00    AND   A,[X+0]
    01AC: 21 00    AND   A,0x0
    01AE: 22 00    AND   A,[0x0]
    01B0: 27 04 25 AND   [X+4],0x25
    01B3: 80 26    JMP   0x01DA
    01B5: 00       SWI   
    01B6: 2F 00 2D OR    [X+0],0x2D
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.1.2306
0250: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_psoc_master_Bank1
                                        (0006) export LoadConfigTBL_psoc_master_Bank0
                                        (0007) export LoadConfigTBL_psoc_master_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_psoc_master_Bank0:
                                        (0010) ;  Instance name LCD, User Module LCD
                                        (0011) ;  Instance name Timer16, User Module Timer16
                                        (0012) ;       Instance name Timer16, Block Name TIMER16_LSB(DBB00)
                                        (0013) 	db		23h, 00h		;Timer16_CONTROL_LSB_REG(DBB00CR0)
                                        (0014) 	db		21h, 00h		;Timer16_PERIOD_LSB_REG(DBB00DR1)
                                        (0015) 	db		22h, 00h		;Timer16_COMPARE_LSB_REG(DBB00DR2)
                                        (0016) ;       Instance name Timer16, Block Name TIMER16_MSB(DBB01)
                                        (0017) 	db		27h, 04h		;Timer16_CONTROL_MSB_REG(DBB01CR0)
                                        (0018) 	db		25h, 80h		;Timer16_PERIOD_MSB_REG(DBB01DR1)
                                        (0019) 	db		26h, 00h		;Timer16_COMPARE_MSB_REG(DBB01DR2)
                                        (0020) ;  Instance name UART, User Module UART
                                        (0021) ;       Instance name UART, Block Name RX(DCB03)
                                        (0022) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0023) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0024) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0025) ;       Instance name UART, Block Name TX(DCB02)
                                        (0026) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0027) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0028) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0029) ;  Global Register values Bank 0
                                        (0030) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0031) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0032) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0033) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0034) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0035) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0036) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0037) 	db		b0h, 30h		; Row_0_InputMux register (RDI0RI)
                                        (0038) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0039) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0040) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0041) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0042) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0043) 	db		b6h, 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0044) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0045) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0046) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0047) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0048) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0049) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0050) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0051) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0052) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0053) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0054) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0055) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0056) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0057) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0058) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0059) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0060) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0061) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0062) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0063) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0064) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0065) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0066) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0067) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0068) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0069) 	db		ffh
                                        (0070) LoadConfigTBL_psoc_master_Bank1:
                                        (0071) ;  Instance name LCD, User Module LCD
                                        (0072) ;  Instance name Timer16, User Module Timer16
                                        (0073) ;       Instance name Timer16, Block Name TIMER16_LSB(DBB00)
                                        (0074) 	db		20h, 00h		;Timer16_FUNC_LSB_REG(DBB00FN)
                                        (0075) 	db		21h, 17h		;Timer16_INPUT_LSB_REG(DBB00IN)
                                        (0076) 	db		22h, 40h		;Timer16_OUTPUT_LSB_REG(DBB00OU)
                                        (0077) ;       Instance name Timer16, Block Name TIMER16_MSB(DBB01)
                                        (0078) 	db		24h, 20h		;Timer16_FUNC_MSB_REG(DBB01FN)
                                        (0079) 	db		25h, 37h		;Timer16_INPUT_MSB_REG(DBB01IN)
                                        (0080) 	db		26h, 40h		;Timer16_OUTPUT_MSB_REG(DBB01OU)
                                        (0081) ;  Instance name UART, User Module UART
                                        (0082) ;       Instance name UART, Block Name RX(DCB03)
                                        (0083) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0084) 	db		2dh, e1h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0085) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0086) ;       Instance name UART, Block Name TX(DCB02)
                                        (0087) 	db		28h, 0dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0088) 	db		29h, 01h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0089) 	db		2ah, 47h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0090) ;  Global Register values Bank 1
                                        (0091) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0092) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0093) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0094) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0095) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0096) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0097) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0098) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0099) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0100) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0101) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0102) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0103) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0104) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0105) 	db		dfh, 9bh		; OscillatorControl_3 register (OSC_CR3)
                                        (0106) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0107) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0108) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0109) 	db		ffh
                                        (0110) AREA psoc_config(rom, rel)
                                        (0111) LoadConfigTBL_psoc_master_Ordered:
                                        (0112) ;  Ordered Global Register values
                                        (0113) 	M8C_SetBank0
0252: 62 00 00 MOV   REG[0x0],0x0       (0114) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0255: 71 10    OR    F,0x10             
                                        (0115) 	M8C_SetBank1
0257: 62 00 01 MOV   REG[0x0],0x1       (0116) 	mov	reg[00h], 01h		; Port_0_DriveMode_0 register (PRT0DM0)
025A: 62 01 FE MOV   REG[0x1],0xFE      (0117) 	mov	reg[01h], feh		; Port_0_DriveMode_1 register (PRT0DM1)
025D: 70 EF    AND   F,0xEF             
                                        (0118) 	M8C_SetBank0
025F: 62 03 FE MOV   REG[0x3],0xFE      (0119) 	mov	reg[03h], feh		; Port_0_DriveMode_2 register (PRT0DM2)
0262: 62 02 00 MOV   REG[0x2],0x0       (0120) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0265: 71 10    OR    F,0x10             
                                        (0121) 	M8C_SetBank1
0267: 62 02 00 MOV   REG[0x2],0x0       (0122) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
026A: 62 03 00 MOV   REG[0x3],0x0       (0123) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
026D: 70 EF    AND   F,0xEF             
                                        (0124) 	M8C_SetBank0
026F: 62 01 00 MOV   REG[0x1],0x0       (0125) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0272: 62 04 00 MOV   REG[0x4],0x0       (0126) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0275: 71 10    OR    F,0x10             
                                        (0127) 	M8C_SetBank1
0277: 62 04 00 MOV   REG[0x4],0x0       (0128) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
027A: 62 05 FF MOV   REG[0x5],0xFF      (0129) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
027D: 70 EF    AND   F,0xEF             
                                        (0130) 	M8C_SetBank0
027F: 62 07 BC MOV   REG[0x7],0xBC      (0131) 	mov	reg[07h], bch		; Port_1_DriveMode_2 register (PRT1DM2)
0282: 62 06 40 MOV   REG[0x6],0x40      (0132) 	mov	reg[06h], 40h		; Port_1_GlobalSelect register (PRT1GS)
0285: 71 10    OR    F,0x10             
                                        (0133) 	M8C_SetBank1
0287: 62 06 00 MOV   REG[0x6],0x0       (0134) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
028A: 62 07 00 MOV   REG[0x7],0x0       (0135) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
028D: 70 EF    AND   F,0xEF             
                                        (0136) 	M8C_SetBank0
028F: 62 05 00 MOV   REG[0x5],0x0       (0137) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0292: 62 08 00 MOV   REG[0x8],0x0       (0138) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0295: 71 10    OR    F,0x10             
                                        (0139) 	M8C_SetBank1
0297: 62 08 FF MOV   REG[0x8],0xFF      (0140) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
029A: 62 09 00 MOV   REG[0x9],0x0       (0141) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
029D: 70 EF    AND   F,0xEF             
                                        (0142) 	M8C_SetBank0
029F: 62 0B 00 MOV   REG[0xB],0x0       (0143) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
02A2: 62 0A 80 MOV   REG[0xA],0x80      (0144) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
02A5: 71 10    OR    F,0x10             
                                        (0145) 	M8C_SetBank1
02A7: 62 0A 00 MOV   REG[0xA],0x0       (0146) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
02AA: 62 0B 00 MOV   REG[0xB],0x0       (0147) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
02AD: 70 EF    AND   F,0xEF             
                                        (0148) 	M8C_SetBank0
02AF: 62 09 00 MOV   REG[0x9],0x0       (0149) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
02B2: 62 0C 00 MOV   REG[0xC],0x0       (0150) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
02B5: 71 10    OR    F,0x10             
                                        (0151) 	M8C_SetBank1
02B7: 62 0C 00 MOV   REG[0xC],0x0       (0152) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
02BA: 62 0D 00 MOV   REG[0xD],0x0       (0153) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
02BD: 70 EF    AND   F,0xEF             
                                        (0154) 	M8C_SetBank0
02BF: 62 0F 00 MOV   REG[0xF],0x0       (0155) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02C2: 62 0E 00 MOV   REG[0xE],0x0       (0156) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02C5: 71 10    OR    F,0x10             
                                        (0157) 	M8C_SetBank1
02C7: 62 0E 00 MOV   REG[0xE],0x0       (0158) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02CA: 62 0F 00 MOV   REG[0xF],0x0       (0159) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02CD: 70 EF    AND   F,0xEF             
                                        (0160) 	M8C_SetBank0
02CF: 62 0D 00 MOV   REG[0xD],0x0       (0161) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02D2: 62 10 00 MOV   REG[0x10],0x0      (0162) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02D5: 71 10    OR    F,0x10             
                                        (0163) 	M8C_SetBank1
02D7: 62 10 00 MOV   REG[0x10],0x0      (0164) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02DA: 62 11 00 MOV   REG[0x11],0x0      (0165) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02DD: 70 EF    AND   F,0xEF             
                                        (0166) 	M8C_SetBank0
02DF: 62 13 00 MOV   REG[0x13],0x0      (0167) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02E2: 62 12 00 MOV   REG[0x12],0x0      (0168) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02E5: 71 10    OR    F,0x10             
                                        (0169) 	M8C_SetBank1
02E7: 62 12 00 MOV   REG[0x12],0x0      (0170) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02EA: 62 13 00 MOV   REG[0x13],0x0      (0171) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02ED: 70 EF    AND   F,0xEF             
                                        (0172) 	M8C_SetBank0
02EF: 62 11 00 MOV   REG[0x11],0x0      (0173) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02F2: 62 14 00 MOV   REG[0x14],0x0      (0174) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02F5: 71 10    OR    F,0x10             
                                        (0175) 	M8C_SetBank1
02F7: 62 14 00 MOV   REG[0x14],0x0      (0176) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02FA: 62 15 00 MOV   REG[0x15],0x0      (0177) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02FD: 70 EF    AND   F,0xEF             
                                        (0178) 	M8C_SetBank0
02FF: 62 17 00 MOV   REG[0x17],0x0      (0179) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0302: 62 16 00 MOV   REG[0x16],0x0      (0180) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0305: 71 10    OR    F,0x10             
                                        (0181) 	M8C_SetBank1
0307: 62 16 00 MOV   REG[0x16],0x0      (0182) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
030A: 62 17 00 MOV   REG[0x17],0x0      (0183) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
030D: 70 EF    AND   F,0xEF             
                                        (0184) 	M8C_SetBank0
030F: 62 15 00 MOV   REG[0x15],0x0      (0185) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0312: 62 18 00 MOV   REG[0x18],0x0      (0186) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
0315: 71 10    OR    F,0x10             
                                        (0187) 	M8C_SetBank1
0317: 62 18 00 MOV   REG[0x18],0x0      (0188) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
031A: 62 19 00 MOV   REG[0x19],0x0      (0189) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
031D: 70 EF    AND   F,0xEF             
                                        (0190) 	M8C_SetBank0
031F: 62 1B 00 MOV   REG[0x1B],0x0      (0191) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0322: 62 1A 00 MOV   REG[0x1A],0x0      (0192) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0325: 71 10    OR    F,0x10             
                                        (0193) 	M8C_SetBank1
0327: 62 1A 00 MOV   REG[0x1A],0x0      (0194) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
032A: 62 1B 00 MOV   REG[0x1B],0x0      (0195) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
032D: 70 EF    AND   F,0xEF             
                                        (0196) 	M8C_SetBank0
032F: 62 19 00 MOV   REG[0x19],0x0      (0197) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0332: 62 1C 00 MOV   REG[0x1C],0x0      (0198) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0335: 71 10    OR    F,0x10             
                                        (0199) 	M8C_SetBank1
0337: 62 1C 00 MOV   REG[0x1C],0x0      (0200) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
033A: 62 1D 00 MOV   REG[0x1D],0x0      (0201) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
033D: 70 EF    AND   F,0xEF             
                                        (0202) 	M8C_SetBank0
033F: 62 1F 00 MOV   REG[0x1F],0x0      (0203) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0342: 62 1E 00 MOV   REG[0x1E],0x0      (0204) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0345: 71 10    OR    F,0x10             
                                        (0205) 	M8C_SetBank1
0347: 62 1E 00 MOV   REG[0x1E],0x0      (0206) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
034A: 62 1F 00 MOV   REG[0x1F],0x0      (0207) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
034D: 70 EF    AND   F,0xEF             
                                        (0208) 	M8C_SetBank0
034F: 62 1D 00 MOV   REG[0x1D],0x0      (0209) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0352: 70 EF    AND   F,0xEF             
                                        (0210) 	M8C_SetBank0
0354: 7F       RET                      (0211) 	ret
                                        (0212) 
                                        (0213) 
                                        (0214) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.1.2306
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_psoc_master
                                        (0026) export _LoadConfig_psoc_master
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
0355: 55 02 00 MOV   [0x2],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
0358: 55 03 FF MOV   [0x3],0xFF         (0066) 	mov		[Port_2_DriveMode_0_SHADE], ffh
035B: 55 04 00 MOV   [0x4],0x0          (0067) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0068) 
035E: 7C 03 65 LCALL 0x0365             (0069) 	lcall	LoadConfig_psoc_master
0361: 7C 02 50 LCALL 0x0250             (0070) 	lcall	LoadConfigTBL_psoc_master_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
0364: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration psoc_master
                                        (0078) ;
                                        (0079) ;    Load configuration registers for psoc_master.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_psoc_master:
                                        (0096)  LoadConfig_psoc_master:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
0365: 10       PUSH  X                  (0099) 	push	x
0366: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
0368: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
036A: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
036B: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_psoc_master_Bank0
036D: 57 AA    MOV   X,0xAA             (0105)     mov     X, <LoadConfigTBL_psoc_master_Bank0
036F: 7C 03 80 LCALL 0x0380             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
0372: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
0374: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
0375: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_psoc_master_Bank1
0377: 57 11    MOV   X,0x11             (0112)     mov     X, <LoadConfigTBL_psoc_master_Bank1
0379: 7C 03 80 LCALL 0x0380             (0113)     lcall   LoadConfig              ; Load the bank 1 values
037C: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
037E: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
037F: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
0380: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
0382: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
0383: 08       PUSH  A                  (0143)     push    A
0384: 4F       MOV   X,SP               (0144)     mov     X, SP
0385: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
0388: D0 04    JNC   0x038D             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
038A: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
038D: 18       POP   A                  (0149)     pop     A
038E: 20       POP   X                  (0150)     pop     X
038F: 70 EF    AND   F,0xEF             
0391: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0394: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
0395: 08       PUSH  A                  (0156)     push    A
0396: 28       ROMX                     (0157)     romx                            ; Load register address from table
0397: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
0399: A0 1F    JZ    0x03B9             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
039B: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
039C: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
039F: A0 03    JZ    0x03A3             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03A1: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
03A3: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
03A5: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
03A6: 20       POP   X                  (0167)     pop     X
03A7: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
03A8: 09 00    ADC   A,0x0              (0169)     adc     A, 0
03AA: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
03AB: 08       PUSH  A                  (0171)     push    A
03AC: 28       ROMX                     (0172)     romx                            ; load config data from the table
03AD: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
03AE: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
03B0: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
03B2: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
03B3: 20       POP   X                  (0177)     pop     X
03B4: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
03B5: 09 00    ADC   A,0x0              (0179)     adc     A, 0
03B7: 8F D7    JMP   0x038F             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
03B9: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
03BB: 70 3F    AND   F,0x3F             
03BD: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
03BF: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2011/6/28 at 6:10:17
                                        (0005) ;;  Generated by PSoC Designer 5.1.2306
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094) 
                                        (0095)    ;---------------------------------------------------
                                        (0096)    ; Insert your custom assembly code above this banner
                                        (0097)    ;---------------------------------------------------
                                        (0098)    
                                        (0099)    ;---------------------------------------------------
                                        (0100)    ; Insert a lcall to a C function below this banner
                                        (0101)    ; and un-comment the lines between these banners
                                        (0102)    ;---------------------------------------------------
                                        (0103)    
                                        (0104)    ;PRESERVE_CPU_CONTEXT
                                        (0105)    ;lcall _My_C_Function
                                        (0106)    ;RESTORE_CPU_CONTEXT
                                        (0107)    
                                        (0108)    ;---------------------------------------------------
                                        (0109)    ; Insert a lcall to a C function above this banner
                                        (0110)    ; and un-comment the lines between these banners
                                        (0111)    ;---------------------------------------------------
                                        (0112)    ;@PSoC_UserCode_END@ (Do not change this line.)
03C0: 7E       RETI                     (0113)    reti
                                        (0114) 
                                        (0115) 
                                        (0116) ;-----------------------------------------------------------------------------
                                        (0117) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0118) ;
                                        (0119) ;  DESCRIPTION:
                                        (0120) ;     UART RX interrupt handler for instance UART.
                                        (0121) ;     This ISR handles the background processing of received characters if
                                        (0122) ;     the buffer is enabled.
                                        (0123) ;
                                        (0124) ;
                                        (0125) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0126) ;
                                        (0127) ;  SIDE EFFECTS:
                                        (0128) ;     There are 3 posible errors that may occur with the serial port.
                                        (0129) ;      1) Parity Error
                                        (0130) ;      2) Framing Error
                                        (0131) ;      3) OverRun Error
                                        (0132) ;
                                        (0133) ;  This user module check for parity and framing error.  If either of these
                                        (0134) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0135) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0136) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0137) ;  this ISR to set a flag if an error condition occurs.
                                        (0138) ;
                                        (0139) ;  THEORY of OPERATION:
                                        (0140) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0141) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0142) ;     the command terminator is detected, the command bit is set and all other
                                        (0143) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0144) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0145) ;     terminator.  After that, the characters will be discarded, although
                                        (0146) ;     a command determinator will still cause the command bit to be set.
                                        (0147) ;
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) _UART_RX_ISR:
                                        (0150) 
                                        (0151)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0152)    ;---------------------------------------------------
                                        (0153)    ; Insert your custom assembly code below this banner
                                        (0154)    ;---------------------------------------------------
03C1: 7D 09 BF LJMP  _UART_Int          (0155) 	ljmp _UART_Int
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ; Insert your custom assembly code above this banner
                                        (0158)    ;---------------------------------------------------
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert a lcall to a C function below this banner
                                        (0162)    ; and un-comment the lines between these banners
                                        (0163)    ;---------------------------------------------------
                                        (0164)    
                                        (0165)    ;PRESERVE_CPU_CONTEXT
                                        (0166)    ;lcall _My_C_Function
                                        (0167)    ;RESTORE_CPU_CONTEXT
                                        (0168)    
                                        (0169)    ;---------------------------------------------------
                                        (0170)    ; Insert a lcall to a C function above this banner
                                        (0171)    ; and un-comment the lines between these banners
                                        (0172)    ;---------------------------------------------------
                                        (0173)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0174) 
                                        (0175) IF (UART_RXBUF_ENABLE)
03C4: 08       PUSH  A                  (0176)    push A
03C5: 10       PUSH  X                  (0177)    push X
03C6: 5D D3    MOV   A,REG[0xD3]        
03C8: 08       PUSH  A                  
                                        (0178)    
                                        (0179)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0180)       REG_PRESERVE IDX_PP
                                        (0181)    ENDIF
                                        (0182)    
03C9: 58 01    MOV   X,[0x1]            (0183)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
03CB: 5D 2F    MOV   A,REG[0x2F]        (0184)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
03CD: 08       PUSH  A                  (0185)    push A                                                  ; Store copy for later test
                                        (0186)                                                            ; IF real RX interrupt
03CE: 21 08    AND   A,0x8              (0187)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
03D0: B0 04    JNZ   0x03D5             (0188)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
03D2: 18       POP   A                  (0189)    pop  A                                                  ; Restore stack
03D3: 80 5E    JMP   0x0432             (0190)    jmp  .RESTORE_IDX_PP
                                        (0191) 
                                        (0192) .UARTRX_ReadRx:
03D5: 18       POP   A                  (0193)    pop  A                                                  ; Restore status flags
                                        (0194)                                                            ; IF there is no error, get data
                                        (0195)                                                            ; Check for parity or framing error
03D6: 21 E0    AND   A,0xE0             (0196)    and  A,UART_RX_ERROR
03D8: A0 12    JZ    0x03EB             (0197)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0198) 
03DA: 2C 00    OR    [0x0],A            (0199)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
03DC: 49 2E 00 TST   REG[0x2E],0x0      (0200)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
03DF: 21 20    AND   A,0x20             (0201)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
03E1: A0 50    JZ    0x0432             (0202)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0203) 
                                        (0204)                                                            ; Disable and re-enable RX to reset after
                                        (0205)                                                            ; framing error.
03E3: 41 2F FE AND   REG[0x2F],0xFE     (0206)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
03E6: 43 2F 01 OR    REG[0x2F],0x1      (0207)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
03E9: 80 48    JMP   0x0432             (0208)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0209) 
                                        (0210) 
                                        (0211) .UARTRX_NO_ERROR:
03EB: 5D 2E    MOV   A,REG[0x2E]        (0212)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0213) 
                                        (0214)                                                            ; IF buffer not full
03ED: 47 00 01 TST   [0x0],0x1          (0215)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
03F0: B0 41    JNZ   0x0432             (0216)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0217) 
03F2: 39 0D    CMP   A,0xD              (0218)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
03F4: B0 14    JNZ   0x0409             (0219)    jnz  .UARTRX_CHK_BACKSPACE
03F6: 2E 00 01 OR    [0x0],0x1          (0220)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
03F9: 62 D3 00 MOV   REG[0xD3],0x0      
03FC: 70 3F    AND   F,0x3F             
03FE: 71 80    OR    F,0x80             
                                        (0221) 
                                        (0222) 
                                        (0223) 
                                        (0224)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0225)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0400: 56 55 00 MOV   [X+85],0x0         (0226)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
0403: 70 3F    AND   F,0x3F             
0405: 71 00    OR    F,0x0              
                                        (0227)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0407: 80 2A    JMP   0x0432             (0228)    jmp  .RESTORE_IDX_PP
                                        (0229) 
                                        (0230) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0231) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0232)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0233)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0234)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0235)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0236)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0237)    jmp  .RESTORE_IDX_PP
                                        (0238) ENDIF                                                      ; 
                                        (0239) 
                                        (0240) .UARTRX_IGNORE:
                                        (0241) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
0409: 39 20    CMP   A,0x20             (0242)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
040B: C0 26    JC    0x0432             (0243)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
040D: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0244) ENDIF
                                        (0245) 
                                        (0246) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0247) 	
                                        (0248)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
0410: 3C 01 0F CMP   [0x1],0xF          (0249)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
0413: C0 11    JC    0x0425             (0250)    jc   .UARTRX_ISR_GETDATA
0415: 70 3F    AND   F,0x3F             
0417: 71 80    OR    F,0x80             
                                        (0251)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0419: 56 55 00 MOV   [X+85],0x0         (0252)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
041C: 70 3F    AND   F,0x3F             
041E: 71 00    OR    F,0x0              
                                        (0253)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0420: 2E 00 10 OR    [0x0],0x10         (0254)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
0423: 80 0E    JMP   0x0432             (0255)    jmp  .RESTORE_IDX_PP
0425: 70 3F    AND   F,0x3F             
0427: 71 80    OR    F,0x80             
                                        (0256) 
                                        (0257) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0258)                                                            ; X is already loaded with pointer
                                        (0259)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0429: 54 55    MOV   [X+85],A           (0260)    mov  [X+UART_aRxBuffer],A                               ; store data in array
042B: 70 3F    AND   F,0x3F             
042D: 71 00    OR    F,0x0              
                                        (0261)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
042F: 75       INC   X                  (0262)    inc  X                                                  ; Inc the pointer
0430: 5A 01    MOV   [0x1],X            (0263)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
0432: 18       POP   A                  
0433: 60 D3    MOV   REG[0xD3],A        
                                        (0264)                                                            ; ENDIF max string size
                                        (0265) .RESTORE_IDX_PP:
                                        (0266)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0267)       REG_RESTORE IDX_PP
                                        (0268)    ENDIF
                                        (0269) 
                                        (0270) .END_UARTRX_ISR:
0435: 20       POP   X                  (0271)    pop  X
0436: 18       POP   A                  (0272)    pop  A
                                        (0273) 
                                        (0274) ENDIF
                                        (0275) 
                                        (0276) UART_RX_ISR_END:
0437: 7E       RETI                     (0277)    reti
                                        (0278) 
                                        (0279) ; end of file UARTINT.asm
                                        (0280) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
0438: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
043B: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2011/6/28 at 6:10:17
                                        (0005) ;;  Generated by PSoC Designer 5.1.2306
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
043E: 7F       RET                      (0182)    ret
043F: 41 E1 FB AND   REG[0xE1],0xFB     
0442: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0445: 7F       RET                      (0214)    ret
0446: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
0448: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
044A: A0 07    JZ    0x0452             (0249)    jz    .SetModeRegEmpty
044C: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
044F: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
0451: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
0452: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
0455: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
0457: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
0458: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
045A: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
045C: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
045E: 91 2A    CALL  _UART_CmdReset     (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0460: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0461: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
0464: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
0467: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0468: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
046A: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
046B: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
046D: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
046E: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0470: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0471: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
0473: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
0474: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
0476: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
0478: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
047A: A0 06    JZ    0x0481             (0492)    jz   .SetTxCmpMode
                                        (0493) 
047C: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
047F: 80 04    JMP   0x0484             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0481: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
0484: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
0486: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
0487: 08       PUSH  A                  (0536)    push A
0488: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
048A: A0 06    JZ    0x0491             (0538)    jz   .DisRxInt
048C: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
048F: 80 04    JMP   0x0494             (0541)    jmp  .CheckTxInt
0491: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
0494: 18       POP   A                  (0547)    pop  A
0495: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
0497: A0 06    JZ    0x049E             (0549)    jz   .DisTxInt
0499: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
049C: 80 04    JMP   0x04A1             (0552)    jmp  .End_IntCntl
049E: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
04A1: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
04B2: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
04B3: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
04B4: 67       ASR   A                  (0603)    asr   A
04B5: 67       ASR   A                  (0604)    asr   A
04B6: 67       ASR   A                  (0605)    asr   A
04B7: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
04B9: FF E7    INDEX 0x04A2             (0607)    index UART_HEX_STR                  ; Get Hex value
04BB: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
04BD: 18       POP   A                  (0609)    pop   A                             ; Restore value
04BE: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
04C0: FF E0    INDEX 0x04A2             (0611)    index UART_HEX_STR                  ; Get Hex value
04C2: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
04C4: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
04C5: 4B       SWAP  A,X                (0645)    swap  A,X
04C6: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
04C8: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
04C9: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
04CB: 7F       RET                      (0650)    ret
04CC: 49 2B 10 TST   REG[0x2B],0x10     
04CF: AF FC    JZ    _UART_PutChar      
04D1: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
04D3: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
04D4: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
04D7: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
04D9: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
04DB: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
04DC: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
04DE: 08       PUSH  A                  (0756)    push A
04DF: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
04E1: B0 04    JNZ   0x04E6             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
04E3: 18       POP   A                  (0759)    pop  A
04E4: 80 0B    JMP   0x04F0             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
04E6: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
04E8: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
04E9: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
04EA: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
04EC: B0 03    JNZ   0x04F0             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
04EE: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
04EF: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
04F0: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
04F2: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
04F3: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
04F5: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
04F7: 08       PUSH  A                  (0819)    push A
04F8: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
04FA: B0 07    JNZ   0x0502             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
04FC: 18       POP   A                  (0822)    pop  A
04FD: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
04FF: 4B       SWAP  A,X                (0824)    swap A,X
0500: 80 07    JMP   0x0508             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0502: 18       POP   A                  (0828)    pop  A
0503: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0505: 4B       SWAP  A,X                (0830)    swap A,X
0506: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0508: 7F       RET                      (0836)    ret
0509: 70 BF    AND   F,0xBF             
050B: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
050D: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
050F: A0 06    JZ    0x0516             (0872)    jz    End_PutString                           ; Check for end of string
0511: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0513: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0514: 8F F8    JMP   0x050D             (0875)    jmp   .PutStringLoop                          ; Get next character
0516: 70 3F    AND   F,0x3F             
0518: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
051A: 7F       RET                      (0879)    ret
051B: 70 BF    AND   F,0xBF             
051D: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0520: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0521: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0523: A0 1A    JZ    0x053E             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0525: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
0527: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0529: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
052B: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
052D: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
052F: 49 2B 10 TST   REG[0x2B],0x10     
0532: AF FC    JZ    0x052F             
0534: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0536: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
0537: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
053A: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
053C: 8F E4    JMP   0x0521             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
053E: 70 3F    AND   F,0x3F             
0540: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0542: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0543: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0544: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
0547: B0 06    JNZ   0x054E             (0980)    jnz   .CW_WRITEIT
0549: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
054C: A0 1D    JZ    0x056A             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
054E: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
054F: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0551: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
0553: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
0554: 49 2B 10 TST   REG[0x2B],0x10     
0557: AF FC    JZ    0x0554             
0559: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
055B: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
055C: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
055F: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0562: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0565: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
0568: 8F DB    JMP   0x0544             (0995)    jmp   .CW_Loop
056A: 70 3F    AND   F,0x3F             
056C: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
056E: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
056F: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0570: 10       PUSH  X                  (1030)    push  X
0571: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0572: A0 0B    JZ    0x057E             (1032)    jz    .End_CPutString
0574: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
0576: 20       POP   X                  (1034)    pop   X
0577: 18       POP   A                  (1035)    pop   A
0578: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
0579: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
057B: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
057C: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
057E: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0580: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0581: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
0583: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
0585: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0587: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0589: 7F       RET                      (1078)    ret
058A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
058D: 55 55 00 MOV   [Buffer+80],0x0    (1122)    mov [UART_aRxBuffer], 0x00
0590: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
0593: 55 01 00 MOV   [0x1],0x0          (1124)    mov [UART_bRxCnt], 0x00
0596: 26 00 00 AND   [0x0],0x0          (1125)    and [UART_fStatus], 0x00
0599: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
059C: 55 78 00 MOV   [p+2],0x0          (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
059F: 7F       RET                      (1129)    ret
05A0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
05A3: 51 00    MOV   A,[0x0]            (1165)    mov A,  [UART_fStatus]
05A5: 21 01    AND   A,0x1              (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
05A7: 7F       RET                      (1168)    ret
05A8: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
05AB: 51 00    MOV   A,[0x0]            (1209)    mov A,  [UART_fStatus]
05AD: 21 F0    AND   A,0xF0             (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
05AF: 26 00 0F AND   [0x0],0xF          (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
05B2: 7F       RET                      (1213)    ret
05B3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
05B6: 51 01    MOV   A,[0x1]            (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
05B8: 7F       RET                      (1246)    ret
05B9: 70 BF    AND   F,0xBF             
05BB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
05BE: 50 55    MOV   A,0x55             (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
05C0: 02 78    ADD   A,[p+2]            (1305)    add   A, [ptrParam]                      ; Add string offset
05C2: 5C       MOV   X,A                (1306)    mov   X, A
05C3: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
05C6: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
05C8: B0 04    JNZ   0x05CD             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
05CA: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
05CB: 80 33    JMP   0x05FF             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
05CD: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
05CF: B0 11    JNZ   0x05E1             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
05D1: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
05D2: 76 78    INC   [p+2]              (1318)    inc   [ptrParam]                         ;          the stored pointer.
05D4: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
05D6: 3C 78 0F CMP   [p+2],0xF          (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
05D9: BF F3    JNZ   0x05CD             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
05DB: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
05DC: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
05DF: 80 1F    JMP   0x05FF             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
05E1: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
05E2: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
05E3: 76 78    INC   [p+2]              (1334)    inc   [ptrParam]
05E5: 3C 78 0F CMP   [p+2],0xF          (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
05E8: AF F3    JZ    0x05DC             (1336)    jz    .TerminateString
05EA: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
05EC: A0 12    JZ    0x05FF             (1338)    jz    .End_GetNextParam
05EE: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
05F0: BF F1    JNZ   0x05E2             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
05F2: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
05F5: 76 78    INC   [p+2]              (1342)    inc   [ptrParam]
05F7: 3C 78 0F CMP   [p+2],0xF          (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
05FA: B0 04    JNZ   0x05FF             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
05FC: 55 78 0F MOV   [p+2],0xF          (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
05FF: 20       POP   X                  (1348)    pop   X
0600: 10       PUSH  X                  (1349)    push  X
0601: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
0604: B0 0A    JNZ   0x060F             (1351)    jnz   .NotNullString
0606: 20       POP   X                  (1352)    pop   X
0607: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
0609: 5B       MOV   A,X                (1354)    mov   A, X
060A: 70 3F    AND   F,0x3F             
060C: 71 C0    OR    F,0xC0             
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
060E: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
060F: 20       POP   X                  (1360)    pop  X
0610: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
0612: 70 3F    AND   F,0x3F             
0614: 71 C0    OR    F,0xC0             
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
0616: 7F       RET                      (1364)    ret
0617: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
061A: 50 55    MOV   A,0x55             (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
061C: 02 78    ADD   A,[p+2]            (1397)    add  A, [ptrParam]                       ; Add string offset
061E: 5C       MOV   X,A                (1398)    mov  X,A
061F: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
0621: 7F       RET                      (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\timer16int.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16INT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2011/6/28 at 6:10:8
                                        (0005) ;;  Generated by PSoC Designer 5.1.2306
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer16.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer16_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer16_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer16_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
0622: 7D 09 BE LJMP  _Timer_Int         (0068) 	ljmp _Timer_Int
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ; Insert your custom assembly code above this banner
                                        (0071)    ;---------------------------------------------------
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert a lcall to a C function below this banner
                                        (0075)    ; and un-comment the lines between these banners
                                        (0076)    ;---------------------------------------------------
                                        (0077)    
                                        (0078)    ;PRESERVE_CPU_CONTEXT
                                        (0079)    ;lcall _My_C_Function
                                        (0080)    ;RESTORE_CPU_CONTEXT
                                        (0081)    
                                        (0082)    ;---------------------------------------------------
                                        (0083)    ; Insert a lcall to a C function above this banner
                                        (0084)    ; and un-comment the lines between these banners
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0087) 
0625: 7E       RETI                     (0088)    reti
                                        (0089) 
                                        (0090) 
                                        (0091) ; end of file Timer16INT.asm
FILE: lib\timer16.asm                   (0001) ;;*****************************************************************************
0626: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer16.asm
                                        (0004) ;;   Version: 2.6, Updated on 2011/6/28 at 6:10:8
                                        (0005) ;;  Generated by PSoC Designer 5.1.2306
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer16.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer16_EnableInt
                                        (0030) export _Timer16_EnableInt
                                        (0031) export  Timer16_DisableInt
                                        (0032) export _Timer16_DisableInt
                                        (0033) export  Timer16_Start
                                        (0034) export _Timer16_Start
                                        (0035) export  Timer16_Stop
                                        (0036) export _Timer16_Stop
                                        (0037) export  Timer16_WritePeriod
                                        (0038) export _Timer16_WritePeriod
                                        (0039) export  Timer16_WriteCompareValue
                                        (0040) export _Timer16_WriteCompareValue
                                        (0041) export  Timer16_wReadCompareValue
                                        (0042) export _Timer16_wReadCompareValue
                                        (0043) export  Timer16_wReadTimer
                                        (0044) export _Timer16_wReadTimer
                                        (0045) export  Timer16_wReadTimerSaveCV
                                        (0046) export _Timer16_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer16_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer16_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer16_ReadTimer         ; deprecated
                                        (0053) export _wTimer16_ReadTimer         ; deprecated
                                        (0054) export  wTimer16_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer16_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer16_ReadCounter       ; obsolete
                                        (0058) export _wTimer16_ReadCounter       ; obsolete
                                        (0059) export  wTimer16_CaptureCounter    ; obsolete
                                        (0060) export _wTimer16_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA psoc_master_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer16_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer16_EnableInt:
                                        (0098) _Timer16_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer16_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0629: 7F       RET                      (0102)    ret
062A: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer16_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer16_DisableInt:
                                        (0126) _Timer16_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer16_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
062D: 7F       RET                      (0130)    ret
062E: 43 23 01 OR    REG[0x23],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer16_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer16_Start:
                                        (0154) _Timer16_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer16_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0631: 7F       RET                      (0158)    ret
0632: 41 23 FE AND   REG[0x23],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer16_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer16_Stop:
                                        (0182) _Timer16_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer16_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0635: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer16_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer16_WritePeriod:
                                        (0211) _Timer16_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0636: 60 21    MOV   REG[0x21],A        (0213)    mov   reg[Timer16_PERIOD_LSB_REG], A
0638: 5B       MOV   A,X                (0214)    mov   A, X
0639: 60 25    MOV   REG[0x25],A        (0215)    mov   reg[Timer16_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
063B: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer16_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer16_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer16_WriteCompareValue:
                                        (0243) _Timer16_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
063C: 60 22    MOV   REG[0x22],A        (0245)    mov   reg[Timer16_COMPARE_LSB_REG], A
063E: 5B       MOV   A,X                (0246)    mov   A, X
063F: 60 26    MOV   REG[0x26],A        (0247)    mov   reg[Timer16_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
0641: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer16_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer16_wReadCompareValue:
                                        (0272) _Timer16_wReadCompareValue:
                                        (0273)  wTimer16_ReadCompareValue:                      ; this name deprecated
                                        (0274) _wTimer16_ReadCompareValue:                      ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
0642: 5D 26    MOV   A,REG[0x26]        (0276)    mov   A, reg[Timer16_COMPARE_MSB_REG]
0644: 5C       MOV   X,A                (0277)    mov   X, A
0645: 5D 22    MOV   A,REG[0x22]        (0278)    mov   A, reg[Timer16_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
0647: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer16_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer16_wReadTimerSaveCV:
                                        (0321) _Timer16_wReadTimerSaveCV:
                                        (0322)  wTimer16_ReadTimerSaveCV:                       ; this name deprecated
                                        (0323) _wTimer16_ReadTimerSaveCV:                       ; this name deprecated
                                        (0324)  wTimer16_ReadCounter:                           ; this name deprecated
                                        (0325) _wTimer16_ReadCounter:                           ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
0648: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
0649: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
064B: 5D 23    MOV   A,REG[0x23]        (0334)    mov   A, reg[Timer16_CONTROL_LSB_REG]         ; save the Control register
064D: 08       PUSH  A                  (0335)    push  A
064E: 5D 22    MOV   A,REG[0x22]        (0336)    mov   A, reg[Timer16_COMPARE_LSB_REG]         ; save the Compare register
0650: 08       PUSH  A                  (0337)    push  A
0651: 5D 26    MOV   A,REG[0x26]        (0338)    mov   A, reg[Timer16_COMPARE_MSB_REG]
0653: 08       PUSH  A                  (0339)    push  A
0654: 5D 20    MOV   A,REG[0x20]        (0340)    mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
0656: 5D 26    MOV   A,REG[0x26]        (0342)    mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Now grab DR2 (DR0) and save
0658: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
065A: 5D 22    MOV   A,REG[0x22]        (0344)    mov   A, reg[Timer16_COMPARE_LSB_REG]
065C: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
065E: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
0660: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0663: A0 03    JZ    0x0667             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
0665: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
0667: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
0669: 70 FE    AND   F,0xFE             
066B: 41 23 FE AND   REG[0x23],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer16_Stop_M                                ; Disable (stop) the timer
066E: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
066F: 60 26    MOV   REG[0x26],A        (0355)    mov   reg[Timer16_COMPARE_MSB_REG], A
0671: 18       POP   A                  (0356)    pop   A
0672: 60 22    MOV   REG[0x22],A        (0357)    mov   reg[Timer16_COMPARE_LSB_REG], A
0674: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
0675: 60 23    MOV   REG[0x23],A        (0359)    mov   reg[Timer16_CONTROL_LSB_REG], A
0677: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
0678: 20       POP   X                  (0361)    pop   X
0679: 70 3F    AND   F,0x3F             
067B: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
067D: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer16_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer16_wReadTimer:
                                        (0397) _Timer16_wReadTimer:
                                        (0398)  wTimer16_ReadTimer:                             ; this name deprecated
                                        (0399) _wTimer16_ReadTimer:                             ; this name deprecated
                                        (0400)  wTimer16_CaptureCounter:                        ; this name deprecated
                                        (0401) _wTimer16_CaptureCounter:                        ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
067E: 5D 20    MOV   A,REG[0x20]        (0404)    mov   A, reg[Timer16_COUNTER_LSB_REG]         ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
0680: 5D 26    MOV   A,REG[0x26]        (0407)    mov   A, reg[Timer16_COMPARE_MSB_REG]         ; Return DR2 (actually DR0)
0682: 5C       MOV   X,A                (0408)    mov   X, A
0683: 5D 22    MOV   A,REG[0x22]        (0409)    mov   A, reg[Timer16_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
0685: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer16.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2011/6/28 at 6:9:34
                                        (0005) ;;  Generated by PSoC Designer 5.1.2306
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0686: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0687: 10       PUSH  X                  (0209)     push  X
0688: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0689: B0 04    JNZ   0x068E             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
068B: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
068C: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
068D: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
068E: 90 44    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData|LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
0690: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0691: 18       POP   A                  (0220)     pop   A
0692: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0693: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0695: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0696: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
06A8: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
06A9: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
06AA: 67       ASR   A                  (0262)     asr   A
06AB: 67       ASR   A                  (0263)     asr   A
06AC: 67       ASR   A                  (0264)     asr   A
06AD: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
06AF: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
06B1: 90 21    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData|LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
06B3: 18       POP   A                  (0268)     pop   A                            ; Restore value
06B4: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
06B6: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
06B8: 90 1A    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData|LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
06BA: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
06BB: 4B       SWAP  A,X                (0305)     swap  A,X
06BC: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
06BE: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
06BF: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
06C1: 7F       RET                      (0310)     ret
06C2: 70 BF    AND   F,0xBF             
06C4: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
06C6: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
06C8: A0 06    JZ    0x06CF             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
06CA: 90 08    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData|LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
06CC: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
06CD: 8F F8    JMP   0x06C6             (0351)     jmp   .Loop_PrString               ; Go get next character
06CF: 70 3F    AND   F,0x3F             
06D1: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
06D3: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
06D4: 90 65    CALL  0x073B             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
06D6: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
06D7: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
06D8: 67       ASR   A                  (0390)     asr   A
06D9: 67       ASR   A                  (0391)     asr   A
06DA: 67       ASR   A                  (0392)     asr   A
06DB: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
06DD: 90 3B    CALL  0x071A             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
06DF: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
06E0: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
06E2: 40       NOP                      (0397)     nop
06E3: 40       NOP                      (0398)     nop
06E4: 40       NOP                      (0399)     nop
06E5: 90 33    CALL  0x071A             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
06E7: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
06E8: 90 51    CALL  0x073B             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
06EA: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
06EB: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
06EC: 67       ASR   A                  (0436)     asr   A
06ED: 67       ASR   A                  (0437)     asr   A
06EE: 67       ASR   A                  (0438)     asr   A
06EF: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
06F1: 90 09    CALL  0x06FC             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
06F3: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
06F4: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
06F6: 40       NOP                      (0443)     nop
06F7: 40       NOP                      (0444)     nop
06F8: 40       NOP                      (0445)     nop
06F9: 90 01    CALL  0x06FC             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
06FB: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
06FC: 08       PUSH  A                  (0477)     push  A
06FD: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0700: 26 02 80 AND   [0x2],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0703: 51 02    MOV   A,[0x2]            (0480)     mov   A,[Port_2_Data_SHADE]
0705: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0707: 18       POP   A                  (0483)     pop   A
0708: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
070A: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
070C: 2A 02    OR    A,[0x2]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
070E: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0710: 53 02    MOV   [0x2],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0712: 40       NOP                      (0489)     nop
0713: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0715: 53 02    MOV   [0x2],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0717: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0719: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
071A: 08       PUSH  A                  (0523)     push  A
071B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
071E: 26 02 80 AND   [0x2],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0721: 2E 02 20 OR    [0x2],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0724: 51 02    MOV   A,[0x2]            (0527)     mov   A,[Port_2_Data_SHADE]
0726: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0728: 18       POP   A                  (0530)     pop   A
0729: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
072B: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
072D: 2A 02    OR    A,[0x2]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
072F: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0731: 53 02    MOV   [0x2],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0733: 40       NOP                      (0536)     NOP
0734: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0736: 53 02    MOV   [0x2],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0738: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
073A: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
073B: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
073C: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
073F: 26 02 80 AND   [0x2],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0742: 51 02    MOV   A,[0x2]            (0574)     mov   A,[Port_2_Data_SHADE]
0744: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0746: 26 03 F0 AND   [0x3],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0749: 51 03    MOV   A,[0x3]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
074B: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
074D: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
074F: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0751: 2E 02 40 OR    [0x2],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0754: 51 02    MOV   A,[0x2]            (0584)     mov   A,[Port_2_Data_SHADE]
0756: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0758: 40       NOP                      (0586)     NOP
                                        (0587) 
0759: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
075A: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
075C: 2E 02 50 OR    [0x2],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
075F: 51 02    MOV   A,[0x2]            (0593)     mov   A,[Port_2_Data_SHADE]
0761: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0763: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0764: 40       NOP                      (0597)     nop
0765: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0767: 08       PUSH  A                  (0610)     push  A
0768: 26 02 C0 AND   [0x2],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
076B: 51 02    MOV   A,[0x2]            (0612)     mov   A,[Port_2_Data_SHADE]
076D: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
076F: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0770: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0771: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0772: 2E 02 50 OR    [0x2],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0775: 51 02    MOV   A,[0x2]            (0620)     mov   A,[Port_2_Data_SHADE]
0777: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0779: 40       NOP                      (0623)     nop
077A: 40       NOP                      (0624)     nop
                                        (0625) 
077B: 26 02 C0 AND   [0x2],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
077E: 51 02    MOV   A,[0x2]            (0627)     mov   A,[Port_2_Data_SHADE]
0780: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0782: 18       POP   A                  (0630)     pop   A
0783: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0785: A0 04    JZ    0x078A             (0633)     jz    .UNLOCK
0787: 79       DEC   X                  (0634)     dec   X
0788: BF D3    JNZ   0x075C             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
078A: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
078B: 2E 03 7F OR    [0x3],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
078E: 51 03    MOV   A,[0x3]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0790: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0792: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0794: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0796: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0797: 7F       RET                      (0646)     ret
0798: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
079B: 26 03 80 AND   [0x3],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
079E: 2E 03 7F OR    [0x3],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
07A1: 26 04 80 AND   [0x4],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
07A4: 51 03    MOV   A,[0x3]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
07A6: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
07A8: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
07AA: 51 04    MOV   A,[0x4]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
07AC: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
07AE: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
07B0: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
07B2: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
07B4: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
07B6: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
07B8: 50 03    MOV   A,0x3              (0701)     mov   A,03h
07BA: 9F 40    CALL  0x06FC             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
07BC: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
07BE: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
07C0: 50 03    MOV   A,0x3              (0707)     mov   A,03h
07C2: 9F 38    CALL  0x06FC             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
07C4: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
07C6: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
07C8: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
07CA: 50 03    MOV   A,0x3              (0714)     mov   A,03h
07CC: 9F 2E    CALL  0x06FC             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
07CE: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07D0: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
07D2: 50 02    MOV   A,0x2              (0720)     mov   A,02h
07D4: 9F 26    CALL  0x06FC             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
07D6: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07D8: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
07DA: 50 08    MOV   A,0x8              (0726)     mov   A,08h
07DC: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
07DE: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07E0: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
07E2: 50 01    MOV   A,0x1              (0731)     mov   A,01h
07E4: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
07E6: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07E8: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
07EA: 50 06    MOV   A,0x6              (0736)     mov   A,06h
07EC: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
07EE: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
07F0: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
07F2: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
07F4: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
07F6: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
07F8: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
07FA: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
07FC: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
07FE: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0800: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0802: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0804: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0806: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
080B: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
080D: 10       PUSH  X                  (0791)     push  X                            ; Store COL
080E: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0810: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0811: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0813: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0814: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0816: 70 3F    AND   F,0x3F             
0818: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
081A: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
081B: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
081D: 78       DEC   A                  (0828)     dec   A
081E: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0820: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0829: 08       PUSH  A                  (0871)     push  A
082A: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
082C: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
082E: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0830: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0832: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0834: D0 06    JNC   0x083B             (0877)     jnc   .Delay50u_End
0836: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0838: 78       DEC   A                  (0880)     dec   A                              ; [4]
0839: BF FE    JNZ   0x0838             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
083B: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
083C: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
083D: 4F       MOV   X,SP               (1015)     mov   X, SP
083E: 10       PUSH  X                  (1016)     push  X
083F: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
0841: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
0843: 70 3F    AND   F,0x3F             
0845: 71 C0    OR    F,0xC0             
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
0847: 9F C2    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0849: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
084A: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
084D: B0 05    JNZ   0x0853             (1026)     jnz   .LCD_CHECK1
084F: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
0851: 80 11    JMP   0x0863             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
0853: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
0856: D0 07    JNC   0x085E             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0858: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
085A: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
085C: 80 06    JMP   0x0863             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
085E: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0860: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
0863: 9E 6F    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData|LCD_Write_Data(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
0865: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
0867: BF E2    JNZ   0x084A             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
0869: 70 3F    AND   F,0x3F             
086B: 71 C0    OR    F,0xC0             
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
086D: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
086E: 4F       MOV   X,SP               (1168)     mov   X, SP
086F: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
0871: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
0873: 08       PUSH  A                  (1172)     push  A
0874: FF 91    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
0876: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0878: 9E 6E    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
087A: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
087D: B0 05    JNZ   0x0883             (1177)     jnz   .VBG_NZ_SEG
087F: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
0881: 80 13    JMP   0x0895             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
0883: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
0886: D0 09    JNC   0x0890             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0888: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
088A: 78       DEC   A                  (1185)     dec   A
088B: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
088E: 80 06    JMP   0x0895             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0890: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
0893: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
0895: 9E 3D    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData|LCD_Write_Data(1194)     call  LCD_WriteData                ; Write value
0897: 18       POP   A                  (1195)     pop   A
0898: 78       DEC   A                  (1196)     dec   A
0899: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
089B: BF D7    JNZ   0x0873             (1198)     jnz   .VBG_LOOP
089D: 70 3F    AND   F,0x3F             
089F: 71 C0    OR    F,0xC0             
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
08A1: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
08A2: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
08A3: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
08A4: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
08A5: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
08A7: 9E 3F    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
08A9: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
08AC: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
08AF: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
08B1: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
08B3: D0 05    JNC   0x08B9             (1251)     jnc   .VBG_SOLID
08B5: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
08B7: 80 03    JMP   0x08BB             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
08B9: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
08BB: 9E 17    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData|LCD_Write_Data(1257)     call  LCD_WriteData                ; character data
08BD: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
08BF: BF EF    JNZ   0x08AF             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
08C1: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
08C3: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
08C6: BF E5    JNZ   0x08AC             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
08C8: 18       POP   A                  (1264)     pop  A
08C9: 18       POP   A                  (1265)     pop  A
08CA: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
08CC: 9E 1A    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
08CE: 70 3F    AND   F,0x3F             
08D0: 71 C0    OR    F,0xC0             
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
08D2: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
08E1: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
08E2: 38 03    ADD   SP,0x3             (1320)     add   SP,3
08E4: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
08E6: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
08E8: 9D FE    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
08EA: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
08ED: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
08F0: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
08F2: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
08F5: B0 05    JNZ   0x08FB             (1332)     jnz   .BG_OTHER
08F7: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
08F9: 80 03    JMP   0x08FD             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
08FB: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
08FD: 9D D5    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData|LCD_Write_Data(1338)     call  LCD_WriteData
08FF: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0901: BF EE    JNZ   0x08F0             (1340)     jnz   .BG_Loop2
0903: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
0905: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0908: BF E4    JNZ   0x08ED             (1343)     jnz   .BG_Loop1
                                        (1344) 
090A: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
090C: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
090E: 9D D8    CALL  _LCD_Control       (1347)     call  LCD_Control
0910: 70 3F    AND   F,0x3F             
0912: 71 C0    OR    F,0xC0             
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0914: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: G:\PSOCPR~1\PSOC_M~1\PSOC_M~1\main.c
(0001) #include <m8c.h>        									// Part specific constants and macros
(0002) #include "PSoCAPI.h"    									// PSoC API definitions for all User Modules
(0003) #pragma interrupt_handler Timer_Int
(0004) #pragma interrupt_handler UART_Int
(0005) 
(0006) char Buffer[80];
(0007) char *p;
(0008) char *Zeiger;
(0009) 
(0010) void main(void)
(0011) {
__UserModules_end|_main|__text_start|_main:
    0915: 10       PUSH  X
    0916: 4F       MOV   X,SP
    0917: 38 02    ADD   SP,0x2
(0012) 	M8C_EnableGInt;
    0919: 71 01    OR    F,0x1
(0013) 	M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);
    091B: 43 E0 20 OR    REG[0xE0],0x20
(0014) 	LCD_Start();
    091E: 10       PUSH  X
    091F: 7C 07 98 LCALL LCD_Start|_LCD_Init|LCD_Init|_LCD_Start
(0015) 	Timer16_Start();
    0922: 7C 06 2E LCALL _Timer16_Start
(0016) 	Timer16_EnableInt();
    0925: 7C 06 26 LCALL _Timer16_EnableInt
    0928: 20       POP   X
(0017) 	UART_Start(UART_PARITY_NONE);         					// UART aktivieren
    0929: 10       PUSH  X
    092A: 50 00    MOV   A,0x0
    092C: 7C 04 58 LCALL _UART_Start
    092F: 20       POP   X
(0018) 	UART_IntCntl(UART_ENABLE_RX_INT); 						// RX Interrupt aktivieren
    0930: 10       PUSH  X
    0931: 50 01    MOV   A,0x1
    0933: 7C 04 87 LCALL _UART_IntCntl
    0936: 20       POP   X
    0937: 80 7F    JMP   0x09B7
(0019) 	
(0020) 	while(1)
(0021) 	{			
(0022) 		*p = 0;												// Pointer "P" auf 0 setzen
    0939: 62 D0 00 MOV   REG[0xD0],0x0
    093C: 51 77    MOV   A,[p+1]
    093E: 08       PUSH  A
    093F: 51 76    MOV   A,[p]
    0941: 62 D0 00 MOV   REG[0xD0],0x0
    0944: 53 73    MOV   [__r0],A
    0946: 18       POP   A
    0947: 53 72    MOV   [__r1],A
    0949: 51 73    MOV   A,[__r0]
    094B: 60 D5    MOV   REG[0xD5],A
    094D: 50 00    MOV   A,0x0
    094F: 3F 72    MVI   [__r1],A
(0023) 		p = Buffer;											// Zeiger "P" auf das Array "Buffer" zeigen lassen
    0951: 62 D0 00 MOV   REG[0xD0],0x0
    0954: 55 77 05 MOV   [p+1],0x5
    0957: 55 76 00 MOV   [p],0x0
(0024) 		while ((*p++ = UART_cGetChar()) != 0x0D);			// Zeichen über UART einlesen und es am die Stelle speichern auf die "P" zeigt. 
    095A: 62 D0 00 MOV   REG[0xD0],0x0
    095D: 51 77    MOV   A,[p+1]
    095F: 08       PUSH  A
    0960: 51 76    MOV   A,[p]
    0962: 62 D0 00 MOV   REG[0xD0],0x0
    0965: 53 73    MOV   [__r0],A
    0967: 18       POP   A
    0968: 53 72    MOV   [__r1],A
    096A: 54 01    MOV   [X+1],A
    096C: 51 73    MOV   A,[__r0]
    096E: 54 00    MOV   [X+0],A
    0970: 51 72    MOV   A,[__r1]
    0972: 01 01    ADD   A,0x1
    0974: 62 D0 00 MOV   REG[0xD0],0x0
    0977: 53 77    MOV   [p+1],A
    0979: 62 D0 00 MOV   REG[0xD0],0x0
    097C: 51 73    MOV   A,[__r0]
    097E: 09 00    ADC   A,0x0
    0980: 62 D0 00 MOV   REG[0xD0],0x0
    0983: 53 76    MOV   [p],A
    0985: 10       PUSH  X
    0986: 7C 04 D4 LCALL _UART_cGetChar
    0989: 62 D0 00 MOV   REG[0xD0],0x0
    098C: 20       POP   X
    098D: 53 73    MOV   [__r0],A
    098F: 52 01    MOV   A,[X+1]
    0991: 53 70    MOV   [__r3],A
    0993: 52 00    MOV   A,[X+0]
    0995: 60 D5    MOV   REG[0xD5],A
    0997: 51 73    MOV   A,[__r0]
    0999: 3F 70    MVI   [__r3],A
    099B: 3C 73 0D CMP   [__r0],0xD
    099E: BF BB    JNZ   0x095A
(0025) 															// Den Wert des Pointers "P" erhöhen. Schleife wird bei 0x0D verlassen.
(0026) 						// Ausgabe des Arrays "Buffer"
(0027) 		memset (Buffer,' ',16);								// Array "Buffer" leeren
    09A0: 50 00    MOV   A,0x0
    09A2: 08       PUSH  A
    09A3: 50 10    MOV   A,0x10
    09A5: 08       PUSH  A
    09A6: 50 00    MOV   A,0x0
    09A8: 08       PUSH  A
    09A9: 50 20    MOV   A,0x20
    09AB: 08       PUSH  A
    09AC: 50 00    MOV   A,0x0
    09AE: 08       PUSH  A
    09AF: 50 05    MOV   A,0x5
    09B1: 08       PUSH  A
    09B2: 7C 0A AA LCALL _memset
    09B5: 38 FA    ADD   SP,0xFA
(0028) 	}
    09B7: 8F 81    JMP   0x0939
    09B9: 38 FE    ADD   SP,0xFE
    09BB: 20       POP   X
    09BC: 8F FF    JMP   0x09BC
(0029) }
(0030) 
(0031) void Timer_Int(void)
(0032) 	{
_Timer_Int:
    09BE: 7E       RETI  
(0033) 	}
(0034) 	
(0035) void UART_Int(void)
(0036) 	{
_UART_Int:
    09BF: 71 C0    OR    F,0xC0
    09C1: 08       PUSH  A
    09C2: 5D D0    MOV   A,REG[0xD0]
    09C4: 08       PUSH  A
    09C5: 5D D3    MOV   A,REG[0xD3]
    09C7: 08       PUSH  A
    09C8: 5D D4    MOV   A,REG[0xD4]
    09CA: 08       PUSH  A
    09CB: 5D D5    MOV   A,REG[0xD5]
    09CD: 08       PUSH  A
    09CE: 62 D0 00 MOV   REG[0xD0],0x0
    09D1: 51 73    MOV   A,[__r0]
    09D3: 08       PUSH  A
    09D4: 51 72    MOV   A,[__r1]
    09D6: 08       PUSH  A
    09D7: 51 71    MOV   A,[__r2]
    09D9: 08       PUSH  A
    09DA: 51 70    MOV   A,[__r3]
    09DC: 08       PUSH  A
    09DD: 51 6F    MOV   A,[__r4]
    09DF: 08       PUSH  A
    09E0: 51 6E    MOV   A,[__r5]
    09E2: 08       PUSH  A
    09E3: 51 6D    MOV   A,[__r6]
    09E5: 08       PUSH  A
    09E6: 51 6C    MOV   A,[__r7]
    09E8: 08       PUSH  A
    09E9: 51 6B    MOV   A,[__r8]
    09EB: 08       PUSH  A
    09EC: 51 6A    MOV   A,[__r9]
    09EE: 08       PUSH  A
    09EF: 51 69    MOV   A,[__r10]
    09F1: 08       PUSH  A
    09F2: 51 68    MOV   A,[__r11]
    09F4: 08       PUSH  A
    09F5: 51 67    MOV   A,[__rX]
    09F7: 08       PUSH  A
    09F8: 51 66    MOV   A,[__rY]
    09FA: 08       PUSH  A
    09FB: 51 65    MOV   A,[__rZ]
    09FD: 08       PUSH  A
(0037) 	PRT0DR ^= 0x01;
    09FE: 45 00 01 XOR   REG[0x0],0x1
(0038) 	   if(UART_bCmdCheck()) 								// Auf Befehl warten  
    0A01: 10       PUSH  X
    0A02: 7C 05 A0 LCALL _UART_bCmdCheck
    0A05: 62 D0 00 MOV   REG[0xD0],0x0
    0A08: 20       POP   X
    0A09: 39 00    CMP   A,0x0
    0A0B: A0 55    JZ    0x0A61
(0039) 	   {                    			
(0040)           if(Zeiger = UART_szGetParam()) 					
    0A0D: 10       PUSH  X
    0A0E: 7C 05 B9 LCALL _UART_szGetParam
    0A11: 62 D0 00 MOV   REG[0xD0],0x0
    0A14: 53 73    MOV   [__r0],A
    0A16: 5A 72    MOV   [__r1],X
    0A18: 20       POP   X
    0A19: 51 72    MOV   A,[__r1]
    0A1B: 08       PUSH  A
    0A1C: 51 73    MOV   A,[__r0]
    0A1E: 62 D0 00 MOV   REG[0xD0],0x0
    0A21: 53 74    MOV   [Zeiger],A
    0A23: 18       POP   A
    0A24: 53 75    MOV   [Zeiger+1],A
    0A26: 62 D0 00 MOV   REG[0xD0],0x0
    0A29: 3C 73 00 CMP   [__r0],0x0
    0A2C: B0 06    JNZ   0x0A33
    0A2E: 3C 72 00 CMP   [__r1],0x0
    0A31: A0 2A    JZ    0x0A5C
(0041) 		  {       
(0042) 			LCD_Position(0,0);
    0A33: 10       PUSH  X
    0A34: 50 00    MOV   A,0x0
    0A36: 5C       MOV   X,A
    0A37: 7C 08 0B LCALL _LCD_Position
    0A3A: 20       POP   X
(0043) 			LCD_PrCString("Gesendet:");
    0A3B: 10       PUSH  X
    0A3C: 50 01    MOV   A,0x1
    0A3E: 08       PUSH  A
    0A3F: 50 A0    MOV   A,0xA0
    0A41: 5C       MOV   X,A
    0A42: 18       POP   A
    0A43: 7C 06 86 LCALL _LCD_PrCString
    0A46: 20       POP   X
(0044) 			LCD_Position(1,0);
    0A47: 10       PUSH  X
    0A48: 57 00    MOV   X,0x0
    0A4A: 50 01    MOV   A,0x1
    0A4C: 7C 08 0B LCALL _LCD_Position
    0A4F: 20       POP   X
(0045) 			LCD_PrString(Buffer);		 
    0A50: 10       PUSH  X
    0A51: 50 00    MOV   A,0x0
    0A53: 08       PUSH  A
    0A54: 50 05    MOV   A,0x5
    0A56: 5C       MOV   X,A
    0A57: 18       POP   A
    0A58: 7C 06 C2 LCALL _LCD_PrString
    0A5B: 20       POP   X
(0046)           } 
(0047)        UART_CmdReset();                          			// Befehlsbuffer löschen  
    0A5C: 10       PUSH  X
    0A5D: 7C 05 8A LCALL _UART_CmdReset
    0A60: 20       POP   X
(0048)        } 
    0A61: 62 D0 00 MOV   REG[0xD0],0x0
(0049) 
(0050) 	}    0A64: 18       POP   A
    0A65: 53 65    MOV   [__rZ],A
    0A67: 18       POP   A
    0A68: 53 66    MOV   [__rY],A
    0A6A: 18       POP   A
    0A6B: 53 67    MOV   [__rX],A
    0A6D: 18       POP   A
    0A6E: 53 68    MOV   [__r11],A
    0A70: 18       POP   A
    0A71: 53 69    MOV   [__r10],A
    0A73: 18       POP   A
    0A74: 53 6A    MOV   [__r9],A
    0A76: 18       POP   A
    0A77: 53 6B    MOV   [__r8],A
    0A79: 18       POP   A
    0A7A: 53 6C    MOV   [__r7],A
    0A7C: 18       POP   A
    0A7D: 53 6D    MOV   [__r6],A
    0A7F: 18       POP   A
    0A80: 53 6E    MOV   [__r5],A
    0A82: 18       POP   A
    0A83: 53 6F    MOV   [__r4],A
    0A85: 18       POP   A
    0A86: 53 70    MOV   [__r3],A
    0A88: 18       POP   A
    0A89: 53 71    MOV   [__r2],A
    0A8B: 18       POP   A
    0A8C: 53 72    MOV   [__r1],A
    0A8E: 18       POP   A
    0A8F: 53 73    MOV   [__r0],A
    0A91: 18       POP   A
    0A92: 60 D5    MOV   REG[0xD5],A
    0A94: 18       POP   A
    0A95: 60 D4    MOV   REG[0xD4],A
    0A97: 18       POP   A
    0A98: 60 D3    MOV   REG[0xD3],A
    0A9A: 18       POP   A
    0A9B: 60 D0    MOV   REG[0xD0],A
    0A9D: 18       POP   A
    0A9E: 7E       RETI  
_memsetLMM:
    0A9F: 62 D0 00 MOV   REG[0xD0],0x0
    0AA2: 10       PUSH  X
    0AA3: 4F       MOV   X,SP
    0AA4: 52 FB    MOV   A,[X-5]
    0AA6: 60 D5    MOV   REG[0xD5],A
    0AA8: 80 03    JMP   0x0AAC
_memset:
    0AAA: 10       PUSH  X
    0AAB: 4F       MOV   X,SP
    0AAC: 52 FC    MOV   A,[X-4]
    0AAE: 53 72    MOV   [__r1],A
    0AB0: 53 71    MOV   [__r2],A
    0AB2: 52 FB    MOV   A,[X-5]
    0AB4: 53 73    MOV   [__r0],A
    0AB6: 52 FA    MOV   A,[X-6]
    0AB8: 80 08    JMP   0x0AC1
    0ABA: 3F 71    MVI   [__r2],A
    0ABC: 7B F8    DEC   [X-8]
    0ABE: 1F F7 00 SBB   [X-9],0x0
    0AC1: 3D F8 00 CMP   [X-8],0x0
    0AC4: BF F5    JNZ   0x0ABA
    0AC6: 3D F7 00 CMP   [X-9],0x0
    0AC9: BF F0    JNZ   0x0ABA
    0ACB: 20       POP   X
    0ACC: 7F       RET   
