FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.2.2401
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#897 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.21
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0129)     // call	void_handler
0010: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0133)     // call	void_handler
0014: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   18h                      ;VC3 Interrupt Vector
                                        (0137)     // call	void_handler
0018: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0141)     // call	void_handler
001C: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0145)     // call	void_handler
0020: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 03 C3 LJMP  _LED7SEG_ISR       (0149)     ljmp	_LED7SEG_ISR
0027: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 03 98 LJMP  _SPIS_ISR          (0153)     ljmp	_SPIS_ISR
002B: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0157)     // call	void_handler
002C: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0161)     // call	void_handler
0030: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0165)     // call	void_handler
0034: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0169)     // call	void_handler
0038: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0173)     // call	void_handler
003C: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0177)     // call	void_handler
0040: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0181)     // call	void_handler
0044: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0185)     // call	void_handler
0048: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0189)     // call	void_handler
004C: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0193)     // call	void_handler
0050: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0197)     // call	void_handler
0054: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0201)     // call	void_handler
0058: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0205)     // call	void_handler
005C: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0209)     // call	void_handler
0060: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0213)     // call	void_handler
0064: 7E       RETI                     (0214)     reti
0068: 71 10    OR    F,0x10             
                                        (0215) 
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  Start of Execution.
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0220) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0221) ;
                                        (0222) 
                                        (0223) IF	(TOOLCHAIN & HITECH)
                                        (0224)  	AREA PD_startup(CODE, REL, CON)
                                        (0225) ELSE
                                        (0226)     org 68h
                                        (0227) ENDIF
                                        (0228) __Start:
                                        (0229) 
                                        (0230)     ; initialize SMP values for voltage stabilization, if required,
                                        (0231)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0232)     ; least for now. 
                                        (0233)     ;
                                        (0234)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0235)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0236)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0237)     M8C_SetBank0
                                        (0238) 
                                        (0239)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0240)     mov   A, 20h
0074: 28       ROMX                     (0241)     romx
0075: 50 40    MOV   A,0x40             (0242)     mov   A, 40h
0077: 28       ROMX                     (0243)     romx
0078: 50 60    MOV   A,0x60             (0244)     mov   A, 60h
007A: 28       ROMX                     (0245)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0246)     ; %45%20%46%46% End workaround
                                        (0247) 
                                        (0248) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0249) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0250)     M8C_EnableWatchDog
                                        (0251) ENDIF
                                        (0252) 
                                        (0253) IF ( SELECT_32K )
                                        (0254)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0255) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0256)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0257) ENDIF
                                        (0258) 
                                        (0259)     ;---------------------------
                                        (0260)     ; Set up the Temporary stack
                                        (0261)     ;---------------------------
                                        (0262)     ; A temporary stack is set up for the SSC instructions.
                                        (0263)     ; The real stack start will be assigned later.
                                        (0264)     ;
                                        (0265) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0266)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0267)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0268) 
                                        (0269)     ;-----------------------------------------------
                                        (0270)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0271)     ;-----------------------------------------------
                                        (0272) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0273) 
                                        (0274) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0275)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0276)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0277)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0278)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0279)   IF ( AGND_BYPASS )
                                        (0280)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0281)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0282)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0283)     ; value using the proper trim values.
                                        (0284)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0285)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)   ENDIF
                                        (0287)  ENDIF
                                        (0288) ENDIF ; 5.0 V Operation
                                        (0289) 
                                        (0290) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0291)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0292)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0293)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0294)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0295)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0296)  ENDIF
                                        (0297) ENDIF ; 3.3 Volt Operation
                                        (0298) 
0087: 55 F8 00 MOV   [0xF8],0x0         (0299)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [0xF9],0x0         (0300)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0301) 
                                        (0302)     ;---------------------------------------
                                        (0303)     ; Initialize Crystal Oscillator and PLL
                                        (0304)     ;---------------------------------------
                                        (0305) 
                                        (0306) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0307)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0308)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0309)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0310)     ; the ECO to stabilize.
                                        (0311)     ;
                                        (0312)     M8C_SetBank1
                                        (0313)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0314)     M8C_SetBank0
                                        (0315)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0316)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0317)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0318) .WaitFor1s:
                                        (0319)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0320)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0321)                                           ;   since interrupts are not globally enabled
                                        (0322) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0323)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0324)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0325)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0326)     M8C_SetBank0
                                        (0327)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0328) 
                                        (0329) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0330) 
                                        (0331) IF ( PLL_MODE )
                                        (0332)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0333)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0334)     ;
                                        (0335)     M8C_SetBank1
                                        (0336)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0337)     M8C_SetBank0
                                        (0338)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0339)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0340) 
                                        (0341) .WaitFor16ms:
                                        (0342)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0343)     jz   .WaitFor16ms
                                        (0344)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0345)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0346)     M8C_SetBank0
                                        (0347) 
                                        (0348) IF      ( WAIT_FOR_32K )
                                        (0349) ELSE ; !( WAIT_FOR_32K )
                                        (0350)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0351)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0352) ENDIF ;(WAIT_FOR_32K)
                                        (0353) ENDIF ;(PLL_MODE)
                                        (0354) 
                                        (0355) 	;-------------------------------------------------------
                                        (0356)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0357)     ;-------------------------------------------------------
                                        (0358) 
                                        (0359)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0360) 
                                        (0361) IF (SYSCLK_SOURCE)
                                        (0362)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0363) ENDIF
                                        (0364)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0365) 
                                        (0366)     ;------------------------
                                        (0367)     ; Close CT leakage path.
                                        (0368)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0369)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0370)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0371)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0372)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0373) 
                                        (0374) 
                                        (0375) IF	(TOOLCHAIN & HITECH)
                                        (0376)     ;---------------------------------------------
                                        (0377)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0378)     ;---------------------------------------------
                                        (0379) 	global		__Lstackps
                                        (0380) 	mov     a,low __Lstackps
                                        (0381) 	swap    a,sp
                                        (0382) 
                                        (0383) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0384)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0385)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0386)     RAM_SETPAGE_CUR 0
                                        (0387)     RAM_SETPAGE_MVW 0
                                        (0388)     RAM_SETPAGE_MVR 0
                                        (0389)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0390)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0391)     ELSE
                                        (0392)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0393)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0394) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0395) ELSE
                                        (0396)     ;---------------------------------------------
                                        (0397)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0398)     ;---------------------------------------------
                                        (0399) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0400)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0401)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0402)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0403)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0404)     RAM_SETPAGE_CUR 0
                                        (0405)     RAM_SETPAGE_MVW 0
                                        (0406)     RAM_SETPAGE_MVR 0
                                        (0407) 
                                        (0408)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0409)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0410)   ELSE
                                        (0411)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0412)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0413) ELSE
                                        (0414)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0415)     swap  SP, A
                                        (0416) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0417) ENDIF ;	TOOLCHAIN
                                        (0418) 
                                        (0419)     ;-------------------------
                                        (0420)     ; Load Base Configuration
                                        (0421)     ;-------------------------
                                        (0422)     ; Load global parameter settings and load the user modules in the
                                        (0423)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0424)     ; to minimize start up time; (2) We may still need to play with the
                                        (0425)     ; Sleep Timer.
                                        (0426)     ;
00B7: 7C 03 33 LCALL 0x0333             (0427)     lcall LoadConfigInit
                                        (0428) 
                                        (0429)     ;-----------------------------------
                                        (0430)     ; Initialize C Run-Time Environment
                                        (0431)     ;-----------------------------------
                                        (0432) IF ( C_LANGUAGE_SUPPORT )
                                        (0433) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0434)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0435)     mov  [__r0],<__bss_start
                                        (0436) BssLoop:
                                        (0437)     cmp  [__r0],<__bss_end
                                        (0438)     jz   BssDone
                                        (0439)     mvi  [__r0],A
                                        (0440)     jmp  BssLoop
                                        (0441) BssDone:
                                        (0442)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0443)     mov  X,<__idata_start
                                        (0444)     mov  [__r0],<__data_start
                                        (0445) IDataLoop:
                                        (0446)     cmp  [__r0],<__data_end
                                        (0447)     jz   C_RTE_Done
                                        (0448)     push A
                                        (0449)     romx
                                        (0450)     mvi  [__r0],A
                                        (0451)     pop  A
                                        (0452)     inc  X
                                        (0453)     adc  A,0
                                        (0454)     jmp  IDataLoop
                                        (0455) 
                                        (0456) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0457) 
                                        (0458) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0459)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0460)                                        ; to use the Virtual Register page.
                                        (0461) 
                                        (0462)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0463)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0464)     ; text segment and may have been relocated by the Code Compressor.
                                        (0465)     ;
00BD: 50 02    MOV   A,0x2              (0466)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 2C    MOV   X,0x2C             (0467)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0468)     push  A
00C2: 28       ROMX                     (0469)     romx                               ; get the MSB of xidata's address
00C3: 53 09    MOV   [__r0],A           (0470)     mov   [__r0], A
00C5: 18       POP   A                  (0471)     pop   A
00C6: 75       INC   X                  (0472)     inc   X
00C7: 09 00    ADC   A,0x0              (0473)     adc   A, 0
00C9: 28       ROMX                     (0474)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0475)     swap  A, X
00CB: 51 09    MOV   A,[__r0]           (0476)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0477)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0478)     jmp   .AccessStruct
                                        (0479) 
                                        (0480)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0481)     ; values of C variables. Each structure contains 3 member elements.
                                        (0482)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0483)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0484)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0485)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0486)     ; value in the second member element, an unsigned byte:
                                        (0487)     ; (1) If the value of the second element is non-zero, it represents
                                        (0488)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0489)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0490)     ; the bytes are copied to the block of RAM.
                                        (0491)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0492)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0493)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0494) 
                                        (0495) .AccessNextStructLoop:
00CF: 75       INC   X                  (0496)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0497)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0498) .AccessStruct:                         ; Entry point for first block
                                        (0499)     ;
                                        (0500)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0501)     ;
                                        (0502)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0503)     push  A
00D6: 28       ROMX                     (0504)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0505)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0506)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0507)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0508)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0509)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0510)     adc   A, 0
00E0: 08       PUSH  A                  (0511)     push  A
00E1: 28       ROMX                     (0512)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 09    MOV   [__r0],A           (0513)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0514)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0515)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0516)     adc   A, 0
00E8: 08       PUSH  A                  (0517)     push  A
00E9: 28       ROMX                     (0518)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0519)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 08    MOV   [__r1],A           (0520)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0521)     pop   A                            ; restore pXIData to [A,X]
                                        (0522) 
                                        (0523) .CopyNextByteLoop:
                                        (0524)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0525)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0526)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0527)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0528)     ;
00EF: 75       INC   X                  (0529)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0530)     adc   A, 0
00F2: 08       PUSH  A                  (0531)     push  A
00F3: 28       ROMX                     (0532)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 09    MVI   [__r0],A           (0533)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 09 FF TST   [__r0],0xFF        (0534)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0535)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0536)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0537)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0538)     mov   reg[ MVW_PP], A
                                        (0539) .CopyLoopTail:
0100: 18       POP   A                  (0540)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 08    DEC   [__r1]             (0541)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0542)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0543)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0544) 
                                        (0545) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0546)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0548)     adc   A, 0
010B: 08       PUSH  A                  (0549)     push  A
010C: 28       ROMX                     (0550)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 08    MOV   [__r1],A           (0551)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0552)     mov   A, 0                         ; Initialize source data
                                        (0553) 
                                        (0554) .ClearRAMBlockLoop:
                                        (0555)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0556)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0557)     ;
0111: 3F 09    MVI   [__r0],A           (0558)     mvi   [__r0], A                    ; Clear a byte
0113: 47 09 FF TST   [__r0],0xFF        (0559)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0560)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0561)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0562)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0563)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0564)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0565) .ClearLoopTail:
011F: 7A 08    DEC   [__r1]             (0566)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0567)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0568)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0569)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0570) 
                                        (0571) .C_RTE_WrapUp:
0126: 18       POP   A                  (0572)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
                                        (0573) 
                                        (0574) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0575) 
                                        (0576) C_RTE_Done:
                                        (0577) 
                                        (0578) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0579) 
                                        (0580)     ;-------------------------------
                                        (0581)     ; Voltage Stabilization for SMP
                                        (0582)     ;-------------------------------
                                        (0583) 
                                        (0584) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0585) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0586)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0587)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0588)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0589)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0590)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0591)     M8C_SetBank1
                                        (0592)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0593)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0594)     M8C_SetBank0
                                        (0595)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0596)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0597) .WaitFor2ms:
                                        (0598)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0599)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0600) ENDIF ; SMP is operational
                                        (0601) ENDIF ; 5.0V Operation
                                        (0602) 
                                        (0603)     ;-------------------------------
                                        (0604)     ; Set Power-On Reset (POR) Level
                                        (0605)     ;-------------------------------
                                        (0606) 
                                        (0607)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0608)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0609)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0610)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0611)     ;  lead to corruption of PSoC flash.
                                        (0612) 
                                        (0613)     M8C_SetBank1
                                        (0614) 
                                        (0615) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0616)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0617)  ELSE                                       ;    No, fast mode
                                        (0618)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0619)                                             ;       no, set midpoint POR in user code, if desired
                                        (0620)   ELSE ; 24HMz                              ;
0129: 43 E3 20 OR    REG[0xE3],0x20     (0621)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
012C: 70 EF    AND   F,0xEF             
                                        (0622)   ENDIF ; 24MHz
                                        (0623)  ENDIF ; Slow Mode
                                        (0624) ENDIF ; 5.0V Operation
                                        (0625) 
                                        (0626)     M8C_SetBank0
                                        (0627) 
                                        (0628)     ;----------------------------
                                        (0629)     ; Wrap up and invoke "main"
                                        (0630)     ;----------------------------
                                        (0631) 
                                        (0632)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0633)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0634)     ;
012E: 62 E0 00 MOV   REG[0xE0],0x0      (0635)     mov  reg[INT_MSK0],0
0131: 71 10    OR    F,0x10             
                                        (0636) 
                                        (0637)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0638)     ; And put decimator in full mode so it does not consume too much current.
                                        (0639)     ;
                                        (0640)     M8C_SetBank1
0133: 62 E0 03 MOV   REG[0xE0],0x3      (0641)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0136: 43 E7 80 OR    REG[0xE7],0x80     (0642)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0139: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0646)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0647)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0648)     ;
013B: 62 E2 00 MOV   REG[0xE2],0x0      (0649)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0650)                                    ; have been set during the boot process.
                                        (0651) IF	(TOOLCHAIN & HITECH)
                                        (0652) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0653) ELSE
                                        (0654) IF ENABLE_LJMP_TO_MAIN
                                        (0655)     ljmp  _main                    ; goto main (no return)
                                        (0656) ELSE
013E: 7C 05 4B LCALL __UserModules_end|__text_start|_main|_main(0657)     lcall _main                    ; call main
                                        (0658) .Exit:
0141: 8F FF    JMP   0x0141             (0659)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0660) ENDIF
                                        (0661) ENDIF ; TOOLCHAIN
                                        (0662) 
                                        (0663)     ;---------------------------------
                                        (0664)     ; Library Access to Global Parms
                                        (0665)     ;---------------------------------
                                        (0666)     ;
                                        (0667)  bGetPowerSetting:
                                        (0668) _bGetPowerSetting:
                                        (0669)     ; Returns value of POWER_SETTING in the A register.
                                        (0670)     ; No inputs. No Side Effects.
                                        (0671)     ;
0143: 50 10    MOV   A,0x10             (0672)     mov   A, POWER_SETTING
0145: 7F       RET                      (0673)     ret
                                        (0674) 
                                        (0675) IF	(TOOLCHAIN & HITECH)
                                        (0676) ELSE
                                        (0677)     ;---------------------------------
                                        (0678)     ; Order Critical RAM & ROM AREAs
                                        (0679)     ;---------------------------------
                                        (0680)     ;  'TOP' is all that has been defined so far...
                                        (0681) 
                                        (0682)     ;  ROM AREAs for C CONST, static & global items
                                        (0683)     ;
                                        (0684)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
                                        (0685)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
                                        (0686) __idata_start:
                                        (0687) 
                                        (0688)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
                                        (0689) __func_lit_start:
                                        (0690) 
                                        (0691) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0692)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0693)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0694)     ; relocated by the code compressor, but the text area may shrink and
                                        (0695)     ; that moves xidata around.
                                        (0696)     ;
                                        (0697) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0698) ENDIF
                                        (0699) 
                                        (0700)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0701)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0702) 
                                        (0703)     ; CODE segment for general use
                                        (0704)     ;
                                        (0705)     AREA text (ROM, REL, CON)
                                        (0706) __text_start:
                                        (0707) 
                                        (0708)     ; RAM area usage
                                        (0709)     ;
                                        (0710)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0711) __data_start:
                                        (0712) 
                                        (0713)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0714)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0715)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0716) __bss_start:
                                        (0717) 
                                        (0718) ENDIF ; TOOLCHAIN
                                        (0719) 
                                        (0720) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.2.2401
022E: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_spi_slave_Bank1
                                        (0006) export LoadConfigTBL_spi_slave_Bank0
                                        (0007) export LoadConfigTBL_spi_slave_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_spi_slave_Bank0:
                                        (0010) ;  Instance name LED7SEG, User Module LED7SEG
                                        (0011) ;       Instance name LED7SEG, Block Name MPXTMR(DBB01)
                                        (0012) 	db		27h, 04h		;LED7SEG_CONTROL_REG(DBB01CR0)
                                        (0013) 	db		25h, 1fh		;LED7SEG_(DBB01DR1)
                                        (0014) 	db		26h, 0fh		;LED7SEG_(DBB01DR2)
                                        (0015) ;  Instance name SPIS, User Module SPIS
                                        (0016) ;       Instance name SPIS, Block Name SPIS(DCB02)
                                        (0017) 	db		2bh, 00h		;SPIS_CONTROL_REG  (DCB02CR0)
                                        (0018) 	db		29h, 00h		;SPIS_TX_BUFFER_REG(DCB02DR1)
                                        (0019) 	db		2ah, 00h		;SPIS_RX_BUFFER_REG(DCB02DR2)
                                        (0020) ;  Global Register values Bank 0
                                        (0021) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0022) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0023) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0024) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0025) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0026) 	db		e7h, 40h		; DecimatorControl_1 register (DEC_CR1)
                                        (0027) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0028) 	db		b0h, 05h		; Row_0_InputMux register (RDI0RI)
                                        (0029) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0030) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0031) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0032) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0033) 	db		b5h, 01h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0034) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0035) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0036) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0037) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0038) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0039) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0040) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0041) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0042) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0043) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0044) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0045) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0046) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0047) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0048) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0049) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0050) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0051) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0052) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0053) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0054) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0055) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0056) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0057) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0058) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0059) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0060) 	db		ffh
                                        (0061) LoadConfigTBL_spi_slave_Bank1:
                                        (0062) ;  Instance name LED7SEG, User Module LED7SEG
                                        (0063) ;       Instance name LED7SEG, Block Name MPXTMR(DBB01)
                                        (0064) 	db		24h, 20h		;LED7SEG_(DBB01FN)
                                        (0065) 	db		25h, 17h		;LED7SEG_(DBB01IN)
                                        (0066) 	db		26h, 40h		;LED7SEG_(DBB01OU)
                                        (0067) ;  Instance name SPIS, User Module SPIS
                                        (0068) ;       Instance name SPIS, Block Name SPIS(DCB02)
                                        (0069) 	db		28h, 0eh		;SPIS_FUNCTION_REG (DCB02FN)
                                        (0070) 	db		29h, dfh		;SPIS_INPUT_REG    (DCB02IN)
                                        (0071) 	db		2ah, 64h		;SPIS_OUTPUT_REG   (DCB02OU)
                                        (0072) ;  Global Register values Bank 1
                                        (0073) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0074) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0075) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0076) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0077) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0078) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0079) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0080) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0081) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0082) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0083) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0084) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0085) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0086) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0087) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0088) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0089) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0090) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0091) 	db		ffh
                                        (0092) AREA psoc_config(rom, rel)
                                        (0093) LoadConfigTBL_spi_slave_Ordered:
                                        (0094) ;  Ordered Global Register values
                                        (0095) 	M8C_SetBank0
0230: 62 00 00 MOV   REG[0x0],0x0       (0096) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0233: 71 10    OR    F,0x10             
                                        (0097) 	M8C_SetBank1
0235: 62 00 01 MOV   REG[0x0],0x1       (0098) 	mov	reg[00h], 01h		; Port_0_DriveMode_0 register (PRT0DM0)
0238: 62 01 FE MOV   REG[0x1],0xFE      (0099) 	mov	reg[01h], feh		; Port_0_DriveMode_1 register (PRT0DM1)
023B: 70 EF    AND   F,0xEF             
                                        (0100) 	M8C_SetBank0
023D: 62 03 C6 MOV   REG[0x3],0xC6      (0101) 	mov	reg[03h], c6h		; Port_0_DriveMode_2 register (PRT0DM2)
0240: 62 02 39 MOV   REG[0x2],0x39      (0102) 	mov	reg[02h], 39h		; Port_0_GlobalSelect register (PRT0GS)
0243: 71 10    OR    F,0x10             
                                        (0103) 	M8C_SetBank1
0245: 62 02 00 MOV   REG[0x2],0x0       (0104) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0248: 62 03 00 MOV   REG[0x3],0x0       (0105) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
024B: 70 EF    AND   F,0xEF             
                                        (0106) 	M8C_SetBank0
024D: 62 01 00 MOV   REG[0x1],0x0       (0107) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0250: 62 04 00 MOV   REG[0x4],0x0       (0108) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0253: 71 10    OR    F,0x10             
                                        (0109) 	M8C_SetBank1
0255: 62 04 00 MOV   REG[0x4],0x0       (0110) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
0258: 62 05 FF MOV   REG[0x5],0xFF      (0111) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
025B: 70 EF    AND   F,0xEF             
                                        (0112) 	M8C_SetBank0
025D: 62 07 FF MOV   REG[0x7],0xFF      (0113) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0260: 62 06 00 MOV   REG[0x6],0x0       (0114) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0263: 71 10    OR    F,0x10             
                                        (0115) 	M8C_SetBank1
0265: 62 06 00 MOV   REG[0x6],0x0       (0116) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0268: 62 07 00 MOV   REG[0x7],0x0       (0117) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
026B: 70 EF    AND   F,0xEF             
                                        (0118) 	M8C_SetBank0
026D: 62 05 00 MOV   REG[0x5],0x0       (0119) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0270: 62 08 00 MOV   REG[0x8],0x0       (0120) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0273: 71 10    OR    F,0x10             
                                        (0121) 	M8C_SetBank1
0275: 62 08 01 MOV   REG[0x8],0x1       (0122) 	mov	reg[08h], 01h		; Port_2_DriveMode_0 register (PRT2DM0)
0278: 62 09 FE MOV   REG[0x9],0xFE      (0123) 	mov	reg[09h], feh		; Port_2_DriveMode_1 register (PRT2DM1)
027B: 70 EF    AND   F,0xEF             
                                        (0124) 	M8C_SetBank0
027D: 62 0B FE MOV   REG[0xB],0xFE      (0125) 	mov	reg[0bh], feh		; Port_2_DriveMode_2 register (PRT2DM2)
0280: 62 0A 00 MOV   REG[0xA],0x0       (0126) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0283: 71 10    OR    F,0x10             
                                        (0127) 	M8C_SetBank1
0285: 62 0A 00 MOV   REG[0xA],0x0       (0128) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0288: 62 0B 00 MOV   REG[0xB],0x0       (0129) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
028B: 70 EF    AND   F,0xEF             
                                        (0130) 	M8C_SetBank0
028D: 62 09 00 MOV   REG[0x9],0x0       (0131) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0290: 62 0C 00 MOV   REG[0xC],0x0       (0132) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0293: 71 10    OR    F,0x10             
                                        (0133) 	M8C_SetBank1
0295: 62 0C FF MOV   REG[0xC],0xFF      (0134) 	mov	reg[0ch], ffh		; Port_3_DriveMode_0 register (PRT3DM0)
0298: 62 0D 00 MOV   REG[0xD],0x0       (0135) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
029B: 70 EF    AND   F,0xEF             
                                        (0136) 	M8C_SetBank0
029D: 62 0F 00 MOV   REG[0xF],0x0       (0137) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02A0: 62 0E 00 MOV   REG[0xE],0x0       (0138) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02A3: 71 10    OR    F,0x10             
                                        (0139) 	M8C_SetBank1
02A5: 62 0E 00 MOV   REG[0xE],0x0       (0140) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02A8: 62 0F 00 MOV   REG[0xF],0x0       (0141) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02AB: 70 EF    AND   F,0xEF             
                                        (0142) 	M8C_SetBank0
02AD: 62 0D 00 MOV   REG[0xD],0x0       (0143) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02B0: 62 10 00 MOV   REG[0x10],0x0      (0144) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02B3: 71 10    OR    F,0x10             
                                        (0145) 	M8C_SetBank1
02B5: 62 10 0F MOV   REG[0x10],0xF      (0146) 	mov	reg[10h], 0fh		; Port_4_DriveMode_0 register (PRT4DM0)
02B8: 62 11 F0 MOV   REG[0x11],0xF0     (0147) 	mov	reg[11h], f0h		; Port_4_DriveMode_1 register (PRT4DM1)
02BB: 70 EF    AND   F,0xEF             
                                        (0148) 	M8C_SetBank0
02BD: 62 13 F0 MOV   REG[0x13],0xF0     (0149) 	mov	reg[13h], f0h		; Port_4_DriveMode_2 register (PRT4DM2)
02C0: 62 12 00 MOV   REG[0x12],0x0      (0150) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02C3: 71 10    OR    F,0x10             
                                        (0151) 	M8C_SetBank1
02C5: 62 12 00 MOV   REG[0x12],0x0      (0152) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02C8: 62 13 00 MOV   REG[0x13],0x0      (0153) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02CB: 70 EF    AND   F,0xEF             
                                        (0154) 	M8C_SetBank0
02CD: 62 11 00 MOV   REG[0x11],0x0      (0155) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02D0: 62 14 00 MOV   REG[0x14],0x0      (0156) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02D3: 71 10    OR    F,0x10             
                                        (0157) 	M8C_SetBank1
02D5: 62 14 00 MOV   REG[0x14],0x0      (0158) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02D8: 62 15 0F MOV   REG[0x15],0xF      (0159) 	mov	reg[15h], 0fh		; Port_5_DriveMode_1 register (PRT5DM1)
02DB: 70 EF    AND   F,0xEF             
                                        (0160) 	M8C_SetBank0
02DD: 62 17 0F MOV   REG[0x17],0xF      (0161) 	mov	reg[17h], 0fh		; Port_5_DriveMode_2 register (PRT5DM2)
02E0: 62 16 00 MOV   REG[0x16],0x0      (0162) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02E3: 71 10    OR    F,0x10             
                                        (0163) 	M8C_SetBank1
02E5: 62 16 00 MOV   REG[0x16],0x0      (0164) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
02E8: 62 17 00 MOV   REG[0x17],0x0      (0165) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
02EB: 70 EF    AND   F,0xEF             
                                        (0166) 	M8C_SetBank0
02ED: 62 15 00 MOV   REG[0x15],0x0      (0167) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
02F0: 62 18 00 MOV   REG[0x18],0x0      (0168) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
02F3: 71 10    OR    F,0x10             
                                        (0169) 	M8C_SetBank1
02F5: 62 18 00 MOV   REG[0x18],0x0      (0170) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
02F8: 62 19 00 MOV   REG[0x19],0x0      (0171) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
02FB: 70 EF    AND   F,0xEF             
                                        (0172) 	M8C_SetBank0
02FD: 62 1B 00 MOV   REG[0x1B],0x0      (0173) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0300: 62 1A 00 MOV   REG[0x1A],0x0      (0174) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0303: 71 10    OR    F,0x10             
                                        (0175) 	M8C_SetBank1
0305: 62 1A 00 MOV   REG[0x1A],0x0      (0176) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0308: 62 1B 00 MOV   REG[0x1B],0x0      (0177) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
030B: 70 EF    AND   F,0xEF             
                                        (0178) 	M8C_SetBank0
030D: 62 19 00 MOV   REG[0x19],0x0      (0179) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0310: 62 1C 00 MOV   REG[0x1C],0x0      (0180) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0313: 71 10    OR    F,0x10             
                                        (0181) 	M8C_SetBank1
0315: 62 1C 00 MOV   REG[0x1C],0x0      (0182) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0318: 62 1D 00 MOV   REG[0x1D],0x0      (0183) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
031B: 70 EF    AND   F,0xEF             
                                        (0184) 	M8C_SetBank0
031D: 62 1F 00 MOV   REG[0x1F],0x0      (0185) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0320: 62 1E 00 MOV   REG[0x1E],0x0      (0186) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0323: 71 10    OR    F,0x10             
                                        (0187) 	M8C_SetBank1
0325: 62 1E 00 MOV   REG[0x1E],0x0      (0188) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0328: 62 1F 00 MOV   REG[0x1F],0x0      (0189) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
032B: 70 EF    AND   F,0xEF             
                                        (0190) 	M8C_SetBank0
032D: 62 1D 00 MOV   REG[0x1D],0x0      (0191) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0330: 70 EF    AND   F,0xEF             
                                        (0192) 	M8C_SetBank0
0332: 7F       RET                      (0193) 	ret
                                        (0194) 
                                        (0195) 
                                        (0196) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.2.2401
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_spi_slave
                                        (0026) export _LoadConfig_spi_slave
                                        (0027) export Port_4_Data_SHADE
                                        (0028) export _Port_4_Data_SHADE
                                        (0029) 
                                        (0030) 
                                        (0031) export NO_SHADOW
                                        (0032) export _NO_SHADOW
                                        (0033) 
                                        (0034) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0035) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0036) 
                                        (0037) AREA psoc_config(rom, rel)
                                        (0038) 
                                        (0039) ;---------------------------------------------------------------------------
                                        (0040) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0041) ;                  parameters handled by boot code, like CPU speed). This
                                        (0042) ;                  function can be called from user code, but typically it
                                        (0043) ;                  is only called from boot.
                                        (0044) ;
                                        (0045) ;       INPUTS: None.
                                        (0046) ;      RETURNS: Nothing.
                                        (0047) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0048) ;               In the large memory model currently only the page
                                        (0049) ;               pointer registers listed below are modified.  This does
                                        (0050) ;               not guarantee that in future implementations of this
                                        (0051) ;               function other page pointer registers will not be
                                        (0052) ;               modified.
                                        (0053) ;          
                                        (0054) ;               Page Pointer Registers Modified: 
                                        (0055) ;               CUR_PP
                                        (0056) ;
                                        (0057) _LoadConfigInit:
                                        (0058)  LoadConfigInit:
                                        (0059)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0060)     
0333: 55 00 00 MOV   [0x0],0x0          (0061) 	mov		[Port_4_Data_SHADE], 0h
                                        (0062) 
0336: 7C 03 3D LCALL 0x033D             (0063) 	lcall	LoadConfig_spi_slave
0339: 7C 02 2E LCALL 0x022E             (0064) 	lcall	LoadConfigTBL_spi_slave_Ordered
                                        (0065) 
                                        (0066) 
                                        (0067)     RAM_EPILOGUE RAM_USE_CLASS_4
033C: 7F       RET                      (0068)     ret
                                        (0069) 
                                        (0070) ;---------------------------------------------------------------------------
                                        (0071) ; Load Configuration spi_slave
                                        (0072) ;
                                        (0073) ;    Load configuration registers for spi_slave.
                                        (0074) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0075) ;
                                        (0076) ;       INPUTS: None.
                                        (0077) ;      RETURNS: Nothing.
                                        (0078) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0079) ;               modified as may the Page Pointer registers!
                                        (0080) ;               In the large memory model currently only the page
                                        (0081) ;               pointer registers listed below are modified.  This does
                                        (0082) ;               not guarantee that in future implementations of this
                                        (0083) ;               function other page pointer registers will not be
                                        (0084) ;               modified.
                                        (0085) ;          
                                        (0086) ;               Page Pointer Registers Modified: 
                                        (0087) ;               CUR_PP
                                        (0088) ;
                                        (0089) _LoadConfig_spi_slave:
                                        (0090)  LoadConfig_spi_slave:
                                        (0091)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0092) 
033D: 10       PUSH  X                  (0093) 	push	x
033E: 70 EF    AND   F,0xEF             
                                        (0094)     M8C_SetBank0                    ; Force bank 0
0340: 50 00    MOV   A,0x0              (0095)     mov     a, 0                    ; Specify bank 0
0342: 67       ASR   A                  (0096)     asr     a                       ; Store in carry flag
                                        (0097)                                     ; Load bank 0 table:
0343: 50 01    MOV   A,0x1              (0098)     mov     A, >LoadConfigTBL_spi_slave_Bank0
0345: 57 A0    MOV   X,0xA0             (0099)     mov     X, <LoadConfigTBL_spi_slave_Bank0
0347: 7C 03 58 LCALL 0x0358             (0100)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0101) 
034A: 50 01    MOV   A,0x1              (0102)     mov     a, 1                    ; Specify bank 1
034C: 67       ASR   A                  (0103)     asr     a                       ; Store in carry flag
                                        (0104)                                     ; Load bank 1 table:
034D: 50 01    MOV   A,0x1              (0105)     mov     A, >LoadConfigTBL_spi_slave_Bank1
034F: 57 FB    MOV   X,0xFB             (0106)     mov     X, <LoadConfigTBL_spi_slave_Bank1
0351: 7C 03 58 LCALL 0x0358             (0107)     lcall   LoadConfig              ; Load the bank 1 values
0354: 70 EF    AND   F,0xEF             
                                        (0108) 
                                        (0109)     M8C_SetBank0                    ; Force return to bank 0
0356: 20       POP   X                  (0110) 	pop		x
                                        (0111) 
                                        (0112)     RAM_EPILOGUE RAM_USE_CLASS_4
0357: 7F       RET                      (0113)     ret
                                        (0114) 
                                        (0115) 
                                        (0116) 
                                        (0117) 
                                        (0118) ;---------------------------------------------------------------------------
                                        (0119) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0120) ;              pairs. Terminate on address=0xFF.
                                        (0121) ;
                                        (0122) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0123) ;           Flag Register Carry bit encodes the Register Bank
                                        (0124) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0125) ;
                                        (0126) ;  RETURNS: nothing.
                                        (0127) ;
                                        (0128) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0129) ;                X-3 Temporary store for register address
                                        (0130) ;                X-2 LSB of config table address
                                        (0131) ;                X-1 MSB of config table address
                                        (0132) ;
                                        (0133) LoadConfig:
                                        (0134)     RAM_PROLOGUE RAM_USE_CLASS_2
0358: 38 02    ADD   SP,0x2             (0135)     add     SP, 2                   ; Set up local vars
035A: 10       PUSH  X                  (0136)     push    X                       ; Save config table address on stack
035B: 08       PUSH  A                  (0137)     push    A
035C: 4F       MOV   X,SP               (0138)     mov     X, SP
035D: 56 FC 00 MOV   [X-4],0x0          (0139)     mov     [X-4], 0                ; Set default Destination to Bank 0
0360: D0 04    JNC   0x0365             (0140)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0362: 56 FC 01 MOV   [X-4],0x1          (0141)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0142) .BankSelectSaved:
0365: 18       POP   A                  (0143)     pop     A
0366: 20       POP   X                  (0144)     pop     X
0367: 70 EF    AND   F,0xEF             
0369: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0145) 
                                        (0146) LoadConfigLp:
                                        (0147)     M8C_SetBank0                    ; Switch to bank 0
                                        (0148)     M8C_ClearWDT                    ; Clear the watchdog for long inits
036C: 10       PUSH  X                  (0149)     push    X                       ; Preserve the config table address
036D: 08       PUSH  A                  (0150)     push    A
036E: 28       ROMX                     (0151)     romx                            ; Load register address from table
036F: 39 FF    CMP   A,0xFF             (0152)     cmp     A, END_CONFIG_TABLE     ; End of table?
0371: A0 1F    JZ    0x0391             (0153)     jz      EndLoadConfig           ;   Yes, go wrap it up
0373: 4F       MOV   X,SP               (0154)     mov     X, SP                   ;
0374: 48 FC 01 TST   [X-4],0x1          (0155)     tst     [X-4], 1                ; Loading IO Bank 1?
0377: A0 03    JZ    0x037B             (0156)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0379: 71 10    OR    F,0x10             
                                        (0157)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0158) .IOBankNowSet:
037B: 54 FD    MOV   [X-3],A            (0159)     mov     [X-3], A                ; Stash the register address
037D: 18       POP   A                  (0160)     pop     A                       ; Retrieve the table address
037E: 20       POP   X                  (0161)     pop     X
037F: 75       INC   X                  (0162)     inc     X                       ; Advance to the data byte
0380: 09 00    ADC   A,0x0              (0163)     adc     A, 0
0382: 10       PUSH  X                  (0164)     push    X                       ; Save the config table address again
0383: 08       PUSH  A                  (0165)     push    A
0384: 28       ROMX                     (0166)     romx                            ; load config data from the table
0385: 4F       MOV   X,SP               (0167)     mov     X, SP                   ; retrieve the register address
0386: 59 FD    MOV   X,[X-3]            (0168)     mov     X, [X-3]
0388: 61 00    MOV   REG[X+0x0],A       (0169)     mov     reg[X], A               ; Configure the register
038A: 18       POP   A                  (0170)     pop     A                       ; retrieve the table address
038B: 20       POP   X                  (0171)     pop     X
038C: 75       INC   X                  (0172)     inc     X                       ; advance to next table entry
038D: 09 00    ADC   A,0x0              (0173)     adc     A, 0
038F: 8F D7    JMP   0x0367             (0174)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0175) EndLoadConfig:
0391: 38 FC    ADD   SP,0xFC            (0176)     add     SP, -4
0393: 70 3F    AND   F,0x3F             
0395: 71 C0    OR    F,0xC0             
                                        (0177)     RAM_EPILOGUE RAM_USE_CLASS_2
0397: 7F       RET                      (0178)     ret
                                        (0179) 
                                        (0180) AREA InterruptRAM(ram, rel)
                                        (0181) 
                                        (0182) NO_SHADOW:
                                        (0183) _NO_SHADOW:
                                        (0184) ; write only register shadows
                                        (0185) _Port_4_Data_SHADE:
                                        (0186) Port_4_Data_SHADE:	BLK	1
                                        (0187) 
FILE: lib\spisint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPISINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2011/12/1 at 17:23:21
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:
                                        (0008) ;;     Interrupt handler routine for SPIS user module instance: SPIS.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "SPIS.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _SPIS_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _SPIS_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _SPIS_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0398: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file SPISINT.asm
FILE: lib\spis.asm                      (0001) ;;*****************************************************************************
0399: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIS.asm
                                        (0004) ;;   Version: 2.60, Updated on 2011/12/1 at 17:23:21
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SPIS User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SPIS.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export   SPIS_EnableInt
                                        (0030) export  _SPIS_EnableInt
                                        (0031) export   SPIS_DisableInt
                                        (0032) export  _SPIS_DisableInt
                                        (0033) export   SPIS_Start
                                        (0034) export  _SPIS_Start
                                        (0035) export   SPIS_Stop
                                        (0036) export  _SPIS_Stop
                                        (0037) export   SPIS_SetupTxData
                                        (0038) export  _SPIS_SetupTxData
                                        (0039) export   SPIS_bReadRxData
                                        (0040) export  _SPIS_bReadRxData
                                        (0041) export   SPIS_bReadStatus
                                        (0042) export  _SPIS_bReadStatus
                                        (0043) 
                                        (0044) IF (SPIS_SW_SS_Feature)
                                        (0045) export   SPIS_DisableSS
                                        (0046) export  _SPIS_DisableSS
                                        (0047) export   SPIS_EnableSS
                                        (0048) export  _SPIS_EnableSS
                                        (0049) 
                                        (0050) export   SPIS_SetSS	             ; Deprecated
                                        (0051) export  _SPIS_SetSS              ; Deprecated
                                        (0052) export   SPIS_ClearSS            ; Deprecated
                                        (0053) export  _SPIS_ClearSS            ; Deprecated
                                        (0054) ENDIF
                                        (0055) 
                                        (0056) ;  Old exports.  Will be removed in future release.
                                        (0057) ;  Do not use
                                        (0058) export   bSPIS_ReadRxData
                                        (0059) export  _bSPIS_ReadRxData
                                        (0060) export   bSPIS_ReadStatus
                                        (0061) export  _bSPIS_ReadStatus
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ;  Constant Definitions
                                        (0065) ;-----------------------------------------------
                                        (0066) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0067) 
                                        (0068) 
                                        (0069) area UserModules (ROM, REL)
                                        (0070) 
                                        (0071) 
                                        (0072) .SECTION
                                        (0073) ;-----------------------------------------------------------------------------
                                        (0074) ;  FUNCTION NAME: SPIS_EnableInt
                                        (0075) ;
                                        (0076) ;  DESCRIPTION:
                                        (0077) ;     Enables the SPIS interrupt by setting the interrupt enable mask
                                        (0078) ;     bit associated with this User Module.
                                        (0079) ;
                                        (0080) ;     NOTE:  Remember to enable the global interrupt by calling the
                                        (0081) ;
                                        (0082) ;-----------------------------------------------------------------------------
                                        (0083) ;
                                        (0084) ;  ARGUMENTS: none
                                        (0085) ;
                                        (0086) ;  RETURNS: none
                                        (0087) ;
                                        (0088) ;  SIDE EFFECTS: 
                                        (0089) ;    The A and X registers may be modified by this or future implementations
                                        (0090) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0091) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0092) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0093) ;    functions.
                                        (0094) ;
                                        (0095)  SPIS_EnableInt:
                                        (0096) _SPIS_EnableInt:
                                        (0097)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0098)    M8C_EnableIntMask SPIS_INT_REG, SPIS_bINT_MASK
                                        (0099)    RAM_EPILOGUE RAM_USE_CLASS_1
039C: 7F       RET                      (0100)    ret
039D: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0101) 
                                        (0102) .ENDSECTION
                                        (0103) 
                                        (0104) .SECTION
                                        (0105) ;-----------------------------------------------------------------------------
                                        (0106) ;  FUNCTION NAME: SPIS_DisableInt
                                        (0107) ;
                                        (0108) ;  DESCRIPTION:
                                        (0109) ;     Disables this SPIS's interrupt by clearing the interrupt enable mask bit
                                        (0110) ;     associated with this User Module.
                                        (0111) ;
                                        (0112) ;-----------------------------------------------------------------------------
                                        (0113) ;
                                        (0114) ;  ARGUMENTS:  none
                                        (0115) ;
                                        (0116) ;  RETURNS: none
                                        (0117) ;
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  SPIS_DisableInt:
                                        (0126) _SPIS_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    M8C_DisableIntMask   SPIS_INT_REG, SPIS_bINT_MASK
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
03A0: 7F       RET                      (0130)    ret
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) .SECTION
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;  FUNCTION NAME: SPIS_Start
                                        (0137) ;
                                        (0138) ;  DESCRIPTION:
                                        (0139) ;     Sets the start bit, SPI mode, and LSB/MSB first configuration of the SPIS
                                        (0140) ;     user module.
                                        (0141) ;
                                        (0142) ;     SPIS User Module will be ready to receive data, when an SPI Master initiates
                                        (0143) ;
                                        (0144) ;-----------------------------------------------------------------------------
                                        (0145) ;
                                        (0146) ;  ARGUMENTS:
                                        (0147) ;     BYTE bConfiguration - Consists of SPI Mode and LSB/MSB first bit.
                                        (0148) ;           Use defined masks - masks can be OR'd together.
                                        (0149) ;     PASSED in Accumulator.
                                        (0150) ;
                                        (0151) ;  RETURNS:  none
                                        (0152) ;
                                        (0153) ;  SIDE EFFECTS: 
                                        (0154) ;    The A and X registers may be modified by this or future implementations
                                        (0155) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0156) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0157) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0158) ;    functions.
                                        (0159) ;
                                        (0160)  SPIS_Start:
                                        (0161) _SPIS_Start:
                                        (0162)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0163)    ; setup the SPIS configuration setting
03A1: 29 01    OR    A,0x1              (0164)    or    A, bfCONTROL_REG_START_BIT
03A3: 60 2B    MOV   REG[0x2B],A        (0165)    mov   REG[SPIS_CONTROL_REG], A
                                        (0166)    RAM_EPILOGUE RAM_USE_CLASS_1
03A5: 7F       RET                      (0167)    ret
                                        (0168) 
                                        (0169) .ENDSECTION
                                        (0170) 
                                        (0171) .SECTION
                                        (0172) ;-----------------------------------------------------------------------------
                                        (0173) ;  FUNCTION NAME: SPIS_Stop
                                        (0174) ;
                                        (0175) ;  DESCRIPTION:
                                        (0176) ;     Disables SPIS operation, and de-asserts the slave select signals.
                                        (0177) ;
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;
                                        (0180) ;  ARGUMENTS:  none
                                        (0181) ;
                                        (0182) ;  RETURNS:  none
                                        (0183) ;
                                        (0184) ;  SIDE EFFECTS: 
                                        (0185) ;    The A and X registers may be modified by this or future implementations
                                        (0186) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0187) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0188) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0189) ;    functions.
                                        (0190) ;
                                        (0191)  SPIS_Stop:
                                        (0192) _SPIS_Stop:
                                        (0193)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0194)    ; clear the SPIS stop bits
03A6: 41 2B FE AND   REG[0x2B],0xFE     (0195)    and   REG[SPIS_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0196)    RAM_EPILOGUE RAM_USE_CLASS_1
03A9: 7F       RET                      (0197)    ret
                                        (0198) 
                                        (0199) .ENDSECTION
                                        (0200) 
                                        (0201) .SECTION
                                        (0202) ;-----------------------------------------------------------------------------
                                        (0203) ;  FUNCTION NAME: SPIS_SetupTxData
                                        (0204) ;
                                        (0205) ;  DESCRIPTION:
                                        (0206) ;     Loads data into the SPI Tx Buffer in readiness for an SPI Tx/Rx cycle.
                                        (0207) ;
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;
                                        (0210) ;  ARGUMENTS:
                                        (0211) ;     BYTE  bTxData - data to transmit.
                                        (0212) ;        Passed in A register
                                        (0213) ;
                                        (0214) ;  RETURNS:  none
                                        (0215) ;
                                        (0216) ;  SIDE EFFECTS: 
                                        (0217) ;    The A and X registers may be modified by this or future implementations
                                        (0218) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0219) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0220) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0221) ;    functions.
                                        (0222) ;
                                        (0223)  SPIS_SetupTxData:
                                        (0224) _SPIS_SetupTxData:
                                        (0225)    RAM_PROLOGUE RAM_USE_CLASS_1
03AA: 60 29    MOV   REG[0x29],A        (0226)    mov REG[SPIS_TX_BUFFER_REG], A
                                        (0227)    RAM_EPILOGUE RAM_USE_CLASS_1
03AC: 7F       RET                      (0228)    ret
                                        (0229) 
                                        (0230) .ENDSECTION
                                        (0231) 
                                        (0232) .SECTION
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;  FUNCTION NAME: SPIS_bReadRxData
                                        (0235) ;
                                        (0236) ;  DESCRIPTION:
                                        (0237) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0238) ;     sure data is valid.
                                        (0239) ;
                                        (0240) ;-----------------------------------------------------------------------------
                                        (0241) ;
                                        (0242) ;  ARGUMENTS:  none
                                        (0243) ;
                                        (0244) ;  RETURNS:
                                        (0245) ;     bRxData - returned in A.
                                        (0246) ;
                                        (0247) ;  SIDE EFFECTS: 
                                        (0248) ;    The A and X registers may be modified by this or future implementations
                                        (0249) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0250) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0251) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0252) ;    functions.
                                        (0253) ;
                                        (0254)  SPIS_bReadRxData:
                                        (0255) _SPIS_bReadRxData:
                                        (0256)  bSPIS_ReadRxData:
                                        (0257) _bSPIS_ReadRxData:
                                        (0258)    RAM_PROLOGUE RAM_USE_CLASS_1
03AD: 5D 2A    MOV   A,REG[0x2A]        (0259)    mov A, REG[SPIS_RX_BUFFER_REG]
                                        (0260)    RAM_EPILOGUE RAM_USE_CLASS_1
03AF: 7F       RET                      (0261)    ret
                                        (0262) 
                                        (0263) .ENDSECTION
                                        (0264) 
                                        (0265) .SECTION
                                        (0266) ;-----------------------------------------------------------------------------
                                        (0267) ;  FUNCTION NAME: SPIS_bReadStatus
                                        (0268) ;
                                        (0269) ;  DESCRIPTION:
                                        (0270) ;     Reads the SPIS Status bits in the Control/Status register.
                                        (0271) ;
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;
                                        (0274) ;  ARGUMENTS:  none
                                        (0275) ;
                                        (0276) ;  RETURNS:
                                        (0277) ;     BYTE  bStatus - transmit status data.  Use the defined bit masks.
                                        (0278) ;        Returned in Accumulator.
                                        (0279) ;
                                        (0280) ;  SIDE EFFECTS: 
                                        (0281) ;    The A and X registers may be modified by this or future implementations
                                        (0282) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0283) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0284) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0285) ;    functions.
                                        (0286) ;
                                        (0287)  SPIS_bReadStatus:
                                        (0288) _SPIS_bReadStatus:
                                        (0289)  bSPIS_ReadStatus:
                                        (0290) _bSPIS_ReadStatus:
                                        (0291)    RAM_PROLOGUE RAM_USE_CLASS_1
03B0: 5D 2B    MOV   A,REG[0x2B]        (0292)    mov A,  REG[SPIS_CONTROL_REG]
                                        (0293)    RAM_EPILOGUE RAM_USE_CLASS_1
03B2: 7F       RET                      (0294)    ret
03B3: 71 10    OR    F,0x10             
                                        (0295) 
                                        (0296) .ENDSECTION
                                        (0297) 
                                        (0298) IF (SPIS_SW_SS_Feature)
                                        (0299) 
                                        (0300) .SECTION
                                        (0301) ;-----------------------------------------------------------------------------
                                        (0302) ;  FUNCTION NAME: SPIS_DisableSS
                                        (0303) ;
                                        (0304) ;  DESCRIPTION:
                                        (0305) ;     Set the active-low "SS" Slave Select signal to the HIGH state
                                        (0306) ;     via firmware
                                        (0307) ;
                                        (0308) ;-----------------------------------------------------------------------------
                                        (0309) ;
                                        (0310) ;  ARGUMENTS:  none
                                        (0311) ;
                                        (0312) ;  RETURNS: none
                                        (0313) ;
                                        (0314) ;  SIDE EFFECTS:
                                        (0315) ;    The A and X registers may be modified by this or future implementations
                                        (0316) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0317) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0318) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0319) ;    functions.
                                        (0320) ;
                                        (0321) ;    If the software slave select mode is not enabled.  This function
                                        (0322) ;    may change the hardware SS input signal.
                                        (0323) ;
                                        (0324)  SPIS_DisableSS:
                                        (0325) _SPIS_DisableSS:
                                        (0326)  SPIS_SetSS:		; This name deprecated
                                        (0327) _SPIS_SetSS:		; This name deprecated
                                        (0328)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0329)    M8C_SetBank1
03B5: 43 2A 08 OR    REG[0x2A],0x8      (0330)    or  reg[SPIS_OUTPUT_REG],SPIS_SPIS_SLAVE_SELECT
03B8: 70 EF    AND   F,0xEF             
                                        (0331)    M8C_SetBank0
                                        (0332)    RAM_EPILOGUE RAM_USE_CLASS_1
03BA: 7F       RET                      (0333)    ret
03BB: 71 10    OR    F,0x10             
                                        (0334) 
                                        (0335) .ENDSECTION
                                        (0336) 
                                        (0337) .SECTION
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;  FUNCTION NAME: SPIS_EnableSS
                                        (0340) ;
                                        (0341) ;  DESCRIPTION:
                                        (0342) ;     Set the active-low "SS" Slave select signal to the LOW state
                                        (0343) ;     via firmware
                                        (0344) ;
                                        (0345) ;-----------------------------------------------------------------------------
                                        (0346) ;
                                        (0347) ;  ARGUMENTS:  none
                                        (0348) ;
                                        (0349) ;  RETURNS: none
                                        (0350) ;
                                        (0351) ;  SIDE EFFECTS:   
                                        (0352) ;    The A and X registers may be modified by this or future implementations
                                        (0353) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0354) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0355) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0356) ;    functions.
                                        (0357) ;
                                        (0358) ;    If the software slave select mode is not enabled.  This function
                                        (0359) ;    may change the hardware SS input signal.
                                        (0360) ;
                                        (0361)  SPIS_EnableSS:
                                        (0362) _SPIS_EnableSS:
                                        (0363)  SPIS_ClearSS:		; This name deprecated
                                        (0364) _SPIS_ClearSS:		; This name deprecated
                                        (0365)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0366)    M8C_SetBank1
03BD: 41 2A F7 AND   REG[0x2A],0xF7     (0367)    and  reg[SPIS_OUTPUT_REG],~SPIS_SPIS_SLAVE_SELECT
03C0: 70 EF    AND   F,0xEF             
                                        (0368)    M8C_SetBank0
                                        (0369)    RAM_EPILOGUE RAM_USE_CLASS_1
03C2: 7F       RET                      (0370)    ret
                                        (0371) 
                                        (0372) .ENDSECTION
                                        (0373) 
                                        (0374) ENDIF
                                        (0375) 
                                        (0376) ; End of File SPIS.asm
                                        (0377) 
FILE: lib\led7segint.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: LED7SEGINT.asm
                                        (0004) ;;   Version: 1.20, Updated on 2011/12/1 at 17:22:54
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED7SEG Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "LED7SEG.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _LED7SEG_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _LED7SEG_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _LED7SEG_ISR:
                                        (0063) 
03C3: 7C 04 3C LCALL _LED7SEG_Update    (0064)    lcall  LED7SEG_Update   ; A and X are preserved for this call.
                                        (0065) 
                                        (0066)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ; Insert your custom assembly code below this banner
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ;   NOTE: interrupt service routines must preserve
                                        (0071)    ;   the values of the A and X CPU registers.
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert your custom assembly code above this banner
                                        (0075)    ;---------------------------------------------------
                                        (0076)    
                                        (0077)    ;---------------------------------------------------
                                        (0078)    ; Insert a lcall to a C function below this banner
                                        (0079)    ; and un-comment the lines between these banners
                                        (0080)    ;---------------------------------------------------
                                        (0081)    
                                        (0082)    ;PRESERVE_CPU_CONTEXT
                                        (0083)    ;lcall _My_C_Function
                                        (0084)    ;RESTORE_CPU_CONTEXT
                                        (0085)    
                                        (0086)    ;---------------------------------------------------
                                        (0087)    ; Insert a lcall to a C function above this banner
                                        (0088)    ; and un-comment the lines between these banners
                                        (0089)    ;---------------------------------------------------
                                        (0090)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0091) 
03C6: 7E       RETI                     (0092)    reti
                                        (0093) 
                                        (0094) 
                                        (0095) ; end of file LED7SEGINT.asm
FILE: lib\led7seg.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
03EA: 70 BF    AND   F,0xBF             (0003) ;;  FILENAME:   LED7SEG.asm
03EC: 62 D3 00 MOV   REG[0xD3],0x0      
03EF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0004) ;;  Version: 1.20, Updated on 2011/12/1 at 17:22:54
                                        (0005) ;;  Generated by PSoC Designer 5.2.2401
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Seven Segment LCD user module.
                                        (0008) ;;
                                        (0009) ;;  LCD connections to PSoC port
                                        (0010) ;;
                                        (0011) ;;    PX.0 ==> SEG a                      a
                                        (0012) ;;    PX.1 ==> SEG b                    =====
                                        (0013) ;;    PX.2 ==> SEG c                   ||   || b
                                        (0014) ;;    PX.3 ==> SEG d                 f || g ||
                                        (0015) ;;    PX.4 ==> SEG e                    =====
                                        (0016) ;;    PX.5 ==> SEG f                   ||   || c
                                        (0017) ;;    PX.6 ==> SEG g                 e ||   ||
                                        (0018) ;;    PX.7 ==> SEG dp                   =====  # dp
                                        (0019) ;;                                        d     
                                        (0020) ;;
                                        (0021) ;;    PY.i       ==> Digit 1        Digit Number
                                        (0022) ;;    PY.(i+1)   ==> Digit 2      +---+---+-    +---+
                                        (0023) ;;    ...                         | 1 | 2 | ... | n |     where n is digit count
                                        (0024) ;;    PY.(i+n-1) ==> Digit n      +---+---+     +---+      
                                        (0025) ;;
                                        (0026) ;;
                                        (0027) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0028) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0029) ;;        This means it is the caller's responsibility to preserve any values
                                        (0030) ;;        in the X and A registers that are still needed after the API functions
                                        (0031) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0032) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0033) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0034) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0035) ;;-----------------------------------------------------------------------------
                                        (0036) ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0037) ;;*****************************************************************************
                                        (0038) ;;*****************************************************************************
                                        (0039) 
                                        (0040) include "LED7SEG.inc"
                                        (0041) include "memory.inc"
                                        (0042) 
                                        (0043) export _LED7SEG_Start
                                        (0044) export  LED7SEG_Start
                                        (0045) 
                                        (0046) export _LED7SEG_Stop
                                        (0047) export  LED7SEG_Stop
                                        (0048) 
                                        (0049) export _LED7SEG_Dim
                                        (0050) export  LED7SEG_Dim
                                        (0051) 
                                        (0052) export _LED7SEG_Update
                                        (0053) export  LED7SEG_Update
                                        (0054) 
                                        (0055) export _LED7SEG_PutHex
                                        (0056) export  LED7SEG_PutHex
                                        (0057) 
                                        (0058) export _LED7SEG_PutPattern
                                        (0059) export  LED7SEG_PutPattern
                                        (0060) 
                                        (0061) export _LED7SEG_DP
                                        (0062) export  LED7SEG_DP
                                        (0063) 
                                        (0064) export _LED7SEG_DispInt 
                                        (0065) export  LED7SEG_DispInt
                                        (0066) 
                                        (0067) export  LED7SEG_DigitRAM
                                        (0068) export _LED7SEG_DigitRAM
                                        (0069) 
                                        (0070) export  LED7SEG_ScanStatus
                                        (0071) export _LED7SEG_ScanStatus
                                        (0072) 
                                        (0073) area InterruptRAM(RAM, REL, CON)
                                        (0074) 
                                        (0075)  LED7SEG_VarPage:                                ; Dummy label for paging
                                        (0076) 
                                        (0077)  LED7SEG_ScanStatus:
                                        (0078) _LED7SEG_ScanStatus:                         blk      1
                                        (0079) 
                                        (0080)  LED7SEG_DigitRAM:
                                        (0081) _LED7SEG_DigitRAM:                           blk      LED7SEG_DigitCnt
                                        (0082) 
                                        (0083) AREA UserModules (ROM, REL)
                                        (0084) 
                                        (0085) ;; 
                                        (0086) ;;  char dp g f e   d c b a    Code  Code
                                        (0087) ;;   0    0 0 1 1   1 1 1 1    0x3F  0xC0
                                        (0088) ;;   1    0 0 0 0   0 1 1 0    0x06  0xF9
                                        (0089) ;;   2    0 1 0 1   1 0 1 1    0x5B  0xA4
                                        (0090) ;;   3    0 1 0 0   1 1 1 1    0x4F  0xB0
                                        (0091) ;;   4    0 1 1 0   0 1 1 0    0x66  0x99
                                        (0092) ;;   5    0 1 1 0   1 1 0 1    0x6D  0x92
                                        (0093) ;;   6    0 1 1 1   1 1 0 1    0x7D  0x82
                                        (0094) ;;   7    0 0 0 0   0 1 1 1    0x07  0xF8
                                        (0095) ;;   8    0 1 1 1   1 1 1 1    0x7F  0x80
                                        (0096) ;;   9    0 1 1 0   1 1 1 1    0x6F  0x90
                                        (0097) ;;   A    0 1 1 1   0 1 1 1    0x77  0x88
                                        (0098) ;;   b    0 1 1 1   1 1 0 0    0x7C  0x83
                                        (0099) ;;   C    0 0 1 1   1 0 0 1    0x39  0xC6
                                        (0100) ;;   d    0 1 0 1   1 1 1 0    0x5E  0xA1
                                        (0101) ;;   E    0 1 1 1   1 0 0 1    0x79  0x86
                                        (0102) ;;   F    0 1 1 1   0 0 0 1    0x71  0x8E
                                        (0103) ;;   -    0 1 0 0   0 0 0 0    0x40  0xBF
                                        (0104) 
                                        (0105) 
                                        (0106) 
                                        (0107) .LITERAL
                                        (0108)  LED7SEG_HexSegMask:
                                        (0109) 
                                        (0110)      DB   0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07
                                        (0111)      DB   0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71
                                        (0112)      DB   0x40
                                        (0113) 
                                        (0114) 
                                        (0115)  LED7SEG_DigitPortMask:
                                        (0116) IF(LED7SEG_DigitDrive)  // Active High Digit Drive
                                        (0117)      DB   LED7SEG_Dig1Mask
                                        (0118)      DB   LED7SEG_Dig2Mask
                                        (0119)      DB   LED7SEG_Dig3Mask
                                        (0120)      DB   LED7SEG_Dig4Mask
                                        (0121)      DB   LED7SEG_Dig5Mask
                                        (0122)      DB   LED7SEG_Dig6Mask
                                        (0123)      DB   LED7SEG_Dig7Mask
                                        (0124)      DB   LED7SEG_Dig8Mask
                                        (0125) ELSE                             // Active Low Digit Drive
                                        (0126)      DB   ~LED7SEG_Dig1Mask
                                        (0127)      DB   ~LED7SEG_Dig2Mask
                                        (0128)      DB   ~LED7SEG_Dig3Mask
                                        (0129)      DB   ~LED7SEG_Dig4Mask
                                        (0130)      DB   ~LED7SEG_Dig5Mask
                                        (0131)      DB   ~LED7SEG_Dig6Mask
                                        (0132)      DB   ~LED7SEG_Dig7Mask
                                        (0133)      DB   ~LED7SEG_Dig8Mask
                                        (0134) ENDIF
                                        (0135) 
                                        (0136) 
                                        (0137) DEC_TABLE:   ; Used for base10 display
                                        (0138) DW 0x0001, 0x000A, 0x0064, 0x03E8, 0x2710
                                        (0139) ;    1       10     100     1000   10,000
                                        (0140) 
                                        (0141) .ENDLITERAL
                                        (0142) 
                                        (0143) .SECTION
                                        (0144) ;-----------------------------------------------------------------------------
                                        (0145) ;  FUNCTION NAME: LED7SEG_Start(void)
                                        (0146) ;
                                        (0147) ;  DESCRIPTION:
                                        (0148) ;     Init state machine and clear buffer memory
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;
                                        (0152) ;  ARGUMENTS:
                                        (0153) ;    none
                                        (0154) ;
                                        (0155) ;  RETURNS:  none
                                        (0156) ;
                                        (0157) ;  SIDE EFFECTS:
                                        (0158) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0159) ;
                                        (0160) ;-----------------------------------------------------------------------------
                                        (0161) _LED7SEG_Start:
                                        (0162)  LED7SEG_Start:
                                        (0163)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0164)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0165)    RAM_SETPAGE_IDX >LED7SEG_VarPage
                                        (0166)    RAM_SETPAGE_CUR >LED7SEG_VarPage
03F2: 10       PUSH  X                  (0167)    push   X
                                        (0168)    ; Initialize digit RAM
03F3: 57 03    MOV   X,0x3              (0169)    mov    X,(LED7SEG_DigitCnt-1)
                                        (0170) .ClearLoop:
03F5: 56 02 00 MOV   [X+2],0x0          (0171)    mov    [X+LED7SEG_DigitRAM],LED7SEG_SegmentInit
03F8: 79       DEC   X                  (0172)    dec    X
03F9: DF FB    JNC   0x03F5             (0173)    jnc    .ClearLoop
                                        (0174) 
                                        (0175)    ; Set scan bit
03FB: 55 01 80 MOV   [0x1],0x80         (0176)    mov   [LED7SEG_ScanStatus],LED7SEG_ScanFlag  
03FE: 71 10    OR    F,0x10             
                                        (0177) 
                                        (0178) 
                                        (0179)    M8C_SetBank1
0400: 43 10 0F OR    REG[0x10],0xF      (0180)    or    reg[LED7SEG_DigitPortDM0],LED7SEG_DigitMask
0403: 41 11 F0 AND   REG[0x11],0xF0     (0181)    and   reg[LED7SEG_DigitPortDM1],~LED7SEG_DigitMask
0406: 70 EF    AND   F,0xEF             
                                        (0182)    M8C_SetBank0
0408: 41 13 F0 AND   REG[0x13],0xF0     (0183)    and   reg[LED7SEG_DigitPortDM2],~LED7SEG_DigitMask
                                        (0184) 
040B: 20       POP   X                  (0185)    pop   X
                                        (0186) 
                                        (0187) IF (LED7SEG_TIMER_PRESENT)
040C: 43 27 01 OR    REG[0x27],0x1      (0188)    or    reg[LED7SEG_CONTROL_REG],  LED7SEG_CONTROL_REG_START_BIT
040F: 43 E1 02 OR    REG[0xE1],0x2      
0412: 70 3F    AND   F,0x3F             
0414: 71 C0    OR    F,0xC0             
                                        (0189)    M8C_EnableIntMask LED7SEG_INT_REG, LED7SEG_INT_MASK
                                        (0190) ENDIF
                                        (0191) 
                                        (0192)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_3
0416: 7F       RET                      (0194)    ret
0417: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0195) .ENDSECTION
                                        (0196) 
                                        (0197) 
                                        (0198) .SECTION
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;  FUNCTION NAME: LED7SEG_Stop(void)
                                        (0201) ;
                                        (0202) ;  DESCRIPTION:
                                        (0203) ;     Stops scanning and turn off all digits
                                        (0204) ;
                                        (0205) ;-----------------------------------------------------------------------------
                                        (0206) ;
                                        (0207) ;  ARGUMENTS:
                                        (0208) ;    none
                                        (0209) ;
                                        (0210) ;  RETURNS:  none
                                        (0211) ;
                                        (0212) ;  SIDE EFFECTS:
                                        (0213) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0214) ;
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) _LED7SEG_Stop:
                                        (0217)  LED7SEG_Stop:
                                        (0218)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0219)    RAM_SETPAGE_CUR >LED7SEG_VarPage
                                        (0220) 
041A: 08       PUSH  A                  (0221)    push A
                                        (0222)    ; Turn off scan
041B: 55 01 00 MOV   [0x1],0x0          (0223)    mov   [LED7SEG_ScanStatus],0x00 
                                        (0224) 
                                        (0225)    ; Turn off all digits
                                        (0226) IF(1)                                            ; Active High Digit Drive
041E: 26 00 F0 AND   [0x0],0xF0         (0227)    and  [Port_4_Data_SHADE],~LED7SEG_DigitMask
                                        (0228) ELSE                                             ; Active Low Digit Drive
                                        (0229)    or   [Port_4_Data_SHADE],LED7SEG_DigitMask
                                        (0230) ENDIF
0421: 51 00    MOV   A,[0x0]            (0231)    mov  A,[Port_4_Data_SHADE]    
0423: 60 10    MOV   REG[0x10],A        (0232)    mov  reg[LED7SEG_DigitPortDR],A
0425: 18       POP   A                  (0233)    pop  A
0426: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0234) 
                                        (0235) IF (LED7SEG_TIMER_PRESENT)
                                        (0236)    M8C_DisableIntMask LED7SEG_INT_REG, LED7SEG_INT_MASK
0429: 41 27 FE AND   REG[0x27],0xFE     (0237)    and   reg[LED7SEG_CONTROL_REG], ~LED7SEG_CONTROL_REG_START_BIT
                                        (0238) ENDIF
                                        (0239) 
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_4
042C: 7F       RET                      (0241)    ret
042D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0242) .ENDSECTION
                                        (0243) 
                                        (0244) 
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: LED7SEG_Dim(Byte bDim)
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Init state machine and clear buffer memory
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS:
                                        (0256) ;    A => bDim   ( Dim Off = 0,  Dim On = 1)
                                        (0257) ;
                                        (0258) ;  RETURNS:  none
                                        (0259) ;
                                        (0260) ;  SIDE EFFECTS:
                                        (0261) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0262) ;
                                        (0263) ;-----------------------------------------------------------------------------
                                        (0264) _LED7SEG_Dim:
                                        (0265)  LED7SEG_Dim:
                                        (0266)   
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0268)    RAM_SETPAGE_CUR >LED7SEG_VarPage
                                        (0269) 
0430: 21 01    AND   A,0x1              (0270)    and    A,0x01
0432: A0 05    JZ    0x0438             (0271)    jz     .DimOff
                                        (0272) 
                                        (0273) .DimOn:
0434: 2E 01 40 OR    [0x1],0x40         (0274)    or     [LED7SEG_ScanStatus],LED7SEG_DimEnable
                                        (0275)    RAM_EPILOGUE RAM_USE_CLASS_4
0437: 7F       RET                      (0276)    ret
                                        (0277) 
                                        (0278) .DimOff:
0438: 26 01 BF AND   [0x1],0xBF         (0279)    and    [LED7SEG_ScanStatus],~LED7SEG_DimEnable
                                        (0280)    RAM_EPILOGUE RAM_USE_CLASS_4
043B: 7F       RET                      (0281)    ret
043C: 70 BF    AND   F,0xBF             
                                        (0282) 
                                        (0283) .ENDSECTION
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: LED7SEG_Update(void)
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Advance and display next digit from array.  This function is designed
                                        (0291) ;     to be called from an ISR, although it could be called in the mainline
                                        (0292) ;     of your program.
                                        (0293) ;
                                        (0294) ;     To call this function from a non Large Memory Model (LMM) device,
                                        (0295) ;     in an ISR use the following.
                                        (0296) ;
                                        (0297) ;     lcall LED7SEG_Update
                                        (0298) ;
                                        (0299) ;     If using a LMM part, and calling from an ISR, make sure the processor
                                        (0300) ;     is either in page mode 0, or in native page mode.  
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS:
                                        (0305) ;    none
                                        (0306) ;
                                        (0307) ;  RETURNS:  none
                                        (0308) ;
                                        (0309) ;  SIDE EFFECTS:
                                        (0310) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0311) ;
                                        (0312) ;  How It Works:
                                        (0313) ;    *  Check if Scan is on
                                        (0314) ;    *  Blank display, Turn off common drive
                                        (0315) ;    *  Load Segment register
                                        (0316) ;    *  Set proper digit, (Turn on common drive)
                                        (0317) ;    *  Adance counter to next digit
                                        (0318) ;-----------------------------------------------------------------------------
                                        (0319) _LED7SEG_Update:
                                        (0320)  LED7SEG_Update:
                                        (0321)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0322)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0323) 
043E: 08       PUSH  A                  (0324)    push  A
043F: 10       PUSH  X                  (0325)    push  X
0440: 5D D3    MOV   A,REG[0xD3]        
0442: 08       PUSH  A                  
0443: 5D D0    MOV   A,REG[0xD0]        
0445: 08       PUSH  A                  
0446: 62 D3 00 MOV   REG[0xD3],0x0      
0449: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0326)    IF (SYSTEM_LARGE_MEMORY_MODEL)
                                        (0327)       REG_PRESERVE IDX_PP
                                        (0328)       REG_PRESERVE CUR_PP
                                        (0329)    ENDIF
                                        (0330) 
                                        (0331)    RAM_SETPAGE_IDX >LED7SEG_VarPage
                                        (0332)    RAM_SETPAGE_CUR >LED7SEG_VarPage
                                        (0333) 
044C: 47 01 80 TST   [0x1],0x80         (0334)    tst   [LED7SEG_ScanStatus],LED7SEG_ScanFlag  // Test if scanning is enabled
044F: A0 3B    JZ    0x048B             (0335)    jz    .Update_End
                                        (0336) 
                                        (0337)    ; Turn off display briefly
                                        (0338) IF(1)                                            ; Active High Digit Drive
0451: 26 00 F0 AND   [0x0],0xF0         (0339)    and  [Port_4_Data_SHADE],~LED7SEG_DigitMask
                                        (0340) ELSE                                             ; Active Low Digit Drive
                                        (0341)    or   [Port_4_Data_SHADE],LED7SEG_DigitMask
                                        (0342) ENDIF
0454: 51 00    MOV   A,[0x0]            (0343)    mov   A,[Port_4_Data_SHADE]    
0456: 60 10    MOV   REG[0x10],A        (0344)    mov   reg[LED7SEG_DigitPortDR],A
                                        (0345) 
                                        (0346)    ; Get the segment value, and write it to the segment port
0458: 51 01    MOV   A,[0x1]            (0347)    mov   A,[LED7SEG_ScanStatus]
045A: 21 0F    AND   A,0xF              (0348)    and   A,LED7SEG_CntMask                       ; Mask off all but scan position
045C: 4B       SWAP  A,X                (0349)    swap  A,X
                                        (0350) 
                                        (0351)    ; Check for Dim flag
045D: 47 01 20 TST   [0x1],0x20         (0352)    tst   [LED7SEG_ScanStatus],LED7SEG_DimFlag    ; If set skip update
0460: B0 0E    JNZ   0x046F             (0353)    jnz   .IncDigit
                                        (0354) 
0462: 52 02    MOV   A,[X+2]            (0355)    mov   A,[X+LED7SEG_DigitRAM]
                                        (0356) 
                                        (0357) ; Invert here if Active Low segment drive
                                        (0358) IF(1)                                            ; Active Low Segment Drive
                                        (0359)    ; Do nothing
                                        (0360) ELSE
                                        (0361)    cpl   A
                                        (0362) ENDIF
0464: 60 0C    MOV   REG[0xC],A         (0363)    mov   reg[LED7SEG_SegmentPortDR],A
                                        (0364) 
                                        (0365)    ; Turn digit back on
                                        (0366) 
0466: 5B       MOV   A,X                (0367)    mov   A,X                                     ; Copy index into A
0467: FF 6F    INDEX 0x03D8             (0368)    index LED7SEG_DigitPortMask                   ; Digit mask into A
                                        (0369) 
                                        (0370) IF(1)                                            ; Active High Digit Drive
0469: 2C 00    OR    [0x0],A            (0371)    or   [Port_4_Data_SHADE],A
                                        (0372) ELSE                                             ; Active Low Digit Drive
                                        (0373)    and  [Port_4_Data_SHADE],A
                                        (0374) ENDIF
046B: 51 00    MOV   A,[0x0]            (0375)    mov  A,[Port_4_Data_SHADE]
046D: 60 10    MOV   REG[0x10],A        (0376)    mov  reg[LED7SEG_DigitPortDR],A
                                        (0377) 
                                        (0378) 
                                        (0379)    ; Calculate next digit
                                        (0380) .IncDigit:
046F: 4B       SWAP  A,X                (0381)    swap  A,X                                     ; Put current digit into A
0470: 74       INC   A                  (0382)    inc   A                                       ; Advance to next
0471: 76 01    INC   [0x1]              (0383)    inc   [LED7SEG_ScanStatus]
0473: 11 04    SUB   A,0x4              (0384)    sub   A,LED7SEG_DigitCnt
0475: A0 05    JZ    0x047B             (0385)    jz    .Reset_Count
0477: D0 03    JNC   0x047B             (0386)    jnc   .Reset_Count
0479: 80 11    JMP   0x048B             (0387)    jmp   .Update_End
                                        (0388) 
                                        (0389) .Reset_Count:
047B: 26 01 F0 AND   [0x1],0xF0         (0390)    and   [LED7SEG_ScanStatus],~LED7SEG_CntMask   ; Reset count to zero  
047E: 47 01 40 TST   [0x1],0x40         (0391)    tst   [LED7SEG_ScanStatus],LED7SEG_DimEnable  ; If set skip update
0481: A0 06    JZ    0x0488             (0392)    jz    .Update_End_DimOff
0483: 36 01 20 XOR   [0x1],0x20         (0393)    xor   [LED7SEG_ScanStatus],LED7SEG_DimFlag   
0486: 80 04    JMP   0x048B             (0394)    jmp   .Update_End
                                        (0395) 
                                        (0396) .Update_End_DimOff:                              ; Make sure Dim is off
0488: 26 01 DF AND   [0x1],0xDF         (0397)    and   [LED7SEG_ScanStatus],~LED7SEG_DimFlag   ; Make sure dim flag off
048B: 18       POP   A                  
048C: 60 D0    MOV   REG[0xD0],A        
048E: 18       POP   A                  
048F: 60 D3    MOV   REG[0xD3],A        
                                        (0398) 
                                        (0399) .Update_End:
                                        (0400)    IF (SYSTEM_LARGE_MEMORY_MODEL)  
                                        (0401)       REG_RESTORE CUR_PP
                                        (0402)       REG_RESTORE IDX_PP
                                        (0403)    ENDIF
                                        (0404) 
0491: 20       POP   X                  (0405)    pop   X
0492: 18       POP   A                  (0406)    pop   A
0493: 70 3F    AND   F,0x3F             
0495: 71 C0    OR    F,0xC0             
                                        (0407) .Update_Exit:
                                        (0408) 
                                        (0409)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_4
0497: 7F       RET                      (0411)    ret
0498: 70 BF    AND   F,0xBF             
049A: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0412) .ENDSECTION
                                        (0413) 
                                        (0414) .SECTION
                                        (0415) ;-----------------------------------------------------------------------------
                                        (0416) ;  FUNCTION NAME: LED7SEG_PutHex(BYTE bValue, BYTE bDigit)
                                        (0417) ;
                                        (0418) ;  DESCRIPTION:
                                        (0419) ;     Write hex value to one of the digits
                                        (0420) ;
                                        (0421) ;-----------------------------------------------------------------------------
                                        (0422) ;
                                        (0423) ;  ARGUMENTS:
                                        (0424) ;    A => Value to display
                                        (0425) ;    X => Digit to update  ( 1 to n )
                                        (0426) ;
                                        (0427) ;  RETURNS:  none
                                        (0428) ;
                                        (0429) ;  SIDE EFFECTS:
                                        (0430) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0431) ;
                                        (0432) ;-----------------------------------------------------------------------------
                                        (0433) _LED7SEG_PutHex:
                                        (0434)  LED7SEG_PutHex:
                                        (0435)    RAM_PROLOGUE RAM_USE_CLASS_3  
                                        (0436)    RAM_SETPAGE_IDX >LED7SEG_VarPage
                                        (0437)   
049D: FF 28    INDEX 0x03C7             (0438)    index   LED7SEG_HexSegMask                    ; Get code
049F: 79       DEC   X                  (0439)    dec     X                                     ; Dec to shift from (1 to N) to (0 to N-1)
04A0: 4B       SWAP  A,X                (0440)    swap    A,X                                   ; Code in X, index in A
04A1: 39 04    CMP   A,0x4              (0441)    cmp     A,(LED7SEG_DigitCnt)
04A3: D0 07    JNC   0x04AB             (0442)    jnc     .putHex_End
                                        (0443) 
04A5: 4B       SWAP  A,X                (0444)    swap    A,X                                   ; Code in A, index in X
04A6: 27 02 80 AND   [X+2],0x80         (0445)    and     [X+LED7SEG_DigitRAM],0x80
04A9: 2D 02    OR    [X+2],A            (0446)    or      [X+LED7SEG_DigitRAM],A
04AB: 70 3F    AND   F,0x3F             
04AD: 71 C0    OR    F,0xC0             
                                        (0447) .putHex_End:
                                        (0448)    RAM_EPILOGUE RAM_USE_CLASS_3
04AF: 7F       RET                      (0449)    ret
04B0: 70 BF    AND   F,0xBF             
04B2: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0450) .ENDSECTION
                                        (0451) 
                                        (0452) .SECTION
                                        (0453) ;-----------------------------------------------------------------------------
                                        (0454) ;  FUNCTION NAME: LED7SEG_PutPattern(BYTE bPattern, BYTE bDigit)
                                        (0455) ;
                                        (0456) ;  DESCRIPTION:
                                        (0457) ;     Write pattern to 7 segment display
                                        (0458) ;
                                        (0459) ;-----------------------------------------------------------------------------
                                        (0460) ;
                                        (0461) ;  ARGUMENTS:
                                        (0462) ;    A => Pattern to display
                                        (0463) ;    X => Digit to update  ( 1 to n )
                                        (0464) ;
                                        (0465) ;  RETURNS:  none
                                        (0466) ;
                                        (0467) ;  SIDE EFFECTS:
                                        (0468) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0469) ;
                                        (0470) ;-----------------------------------------------------------------------------
                                        (0471) _LED7SEG_PutPattern:
                                        (0472)  LED7SEG_PutPattern:
                                        (0473)    RAM_PROLOGUE RAM_USE_CLASS_3  
                                        (0474)    RAM_SETPAGE_IDX >LED7SEG_VarPage
                                        (0475)   
04B5: 79       DEC   X                  (0476)    dec     X                                     ; Dec to shift from (1 to N) to (0 to N-1)
04B6: 4B       SWAP  A,X                (0477)    swap    A,X                                   ; Code in X, index in A
04B7: 39 04    CMP   A,0x4              (0478)    cmp     A,(LED7SEG_DigitCnt)
04B9: D0 04    JNC   0x04BE             (0479)    jnc     .putPat_End
                                        (0480) 
04BB: 4B       SWAP  A,X                (0481)    swap    A,X                                   ; Code in A, index in X
04BC: 54 02    MOV   [X+2],A            (0482)    mov     [X+LED7SEG_DigitRAM],A
04BE: 70 3F    AND   F,0x3F             
04C0: 71 C0    OR    F,0xC0             
                                        (0483) .putPat_End:
                                        (0484)    RAM_EPILOGUE RAM_USE_CLASS_3
04C2: 7F       RET                      (0485)    ret
04C3: 70 BF    AND   F,0xBF             
04C5: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0486) .ENDSECTION
                                        (0487) 
                                        (0488) .SECTION
                                        (0489) ;-----------------------------------------------------------------------------
                                        (0490) ;  FUNCTION NAME: LED7SEG_DP(BYTE bDpOnOff, BYTE bDigit)
                                        (0491) ;
                                        (0492) ;  DESCRIPTION:
                                        (0493) ;     Set the decimal point with the given mask.
                                        (0494) ;
                                        (0495) ;-----------------------------------------------------------------------------
                                        (0496) ;
                                        (0497) ;  ARGUMENTS:
                                        (0498) ;    A => DP ON/OFF (0 = DP Off, 1 = DP On)
                                        (0499) ;    X => Digit  (1 to N)
                                        (0500) ;
                                        (0501) ;  RETURNS:  none
                                        (0502) ;
                                        (0503) ;  SIDE EFFECTS:
                                        (0504) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0505) ;
                                        (0506) ;-----------------------------------------------------------------------------
                                        (0507) _LED7SEG_DP:
                                        (0508)  LED7SEG_DP:
                                        (0509)    RAM_PROLOGUE RAM_USE_CLASS_3  
                                        (0510)    RAM_SETPAGE_IDX >LED7SEG_VarPage
04C8: 79       DEC   X                  (0511)    dec    X                                      ; noramlize from 1 - N, to 0 to N-1
04C9: 4B       SWAP  A,X                (0512)    swap   A,X
04CA: 39 04    CMP   A,0x4              (0513)    cmp    A,(LED7SEG_DigitCnt)
04CC: D0 0E    JNC   0x04DB             (0514)    jnc    .DP_End
                                        (0515)    
04CE: 4B       SWAP  A,X                (0516)    swap   A,X
04CF: 39 00    CMP   A,0x0              (0517)    cmp    A,0x00                                 ; Is flag set
04D1: A0 06    JZ    0x04D8             (0518)    jz     .DPOff
                                        (0519) 
04D3: 2F 02 80 OR    [X+2],0x80         (0520)    or     [X+LED7SEG_DigitRAM],0x80              ; Set DP
04D6: 80 04    JMP   0x04DB             (0521)    jmp    .DP_End
                                        (0522) .DPOff:
04D8: 27 02 7F AND   [X+2],0x7F         (0523)    and    [X+LED7SEG_DigitRAM],0x7F              ; Clear DP
04DB: 70 3F    AND   F,0x3F             
04DD: 71 C0    OR    F,0xC0             
                                        (0524) 
                                        (0525) .DP_End:
                                        (0526)    RAM_EPILOGUE RAM_USE_CLASS_3
04DF: 7F       RET                      (0527)    ret
                                        (0528) .ENDSECTION
                                        (0529) 
                                        (0530) 
                                        (0531) .SECTION
                                        (0532) ;-----------------------------------------------------------------------------
                                        (0533) ;  FUNCTION NAME: LED7SEG_DispInt(int iValue, BYTE bPos, BYTE bLSD)
                                        (0534) ;
                                        (0535) ;  DESCRIPTION:
                                        (0536) ;     Display integer on 7-Segment display
                                        (0537) ;
                                        (0538) ;-----------------------------------------------------------------------------
                                        (0539) ;
                                        (0540) ;  ARGUMENTS:
                                        (0541) ;          [SP-3] => iValue[7:0]   Value to convert
                                        (0542) ;          [SP-4] => iValue[15:8]  
                                        (0543) ;          [SP-5] => bPos[7:0]     Digit starting position
                                        (0544) ;          [SP-6] => bLSD[7:0]     Digits to display
                                        (0545) ;
                                        (0546) ;
                                        (0547) ;  RETURNS:  none
                                        (0548) ;
                                        (0549) ;  SIDE EFFECTS:
                                        (0550) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0551) ;
                                        (0552) ;-----------------------------------------------------------------------------
                                        (0553) ;
                                        (0554) DI_ValueLSB:   equ   -3
                                        (0555) DI_ValueMSB:   equ   -4
                                        (0556) DI_POS:        equ   -5
                                        (0557) DI_LSD:        equ   -6
                                        (0558) DI_DECPTR:     equ    0
                                        (0559) DI_RESULT:     equ    1
                                        (0560) DI_TMP:        equ    2
                                        (0561) DI_STACKSIZE:  equ    3
                                        (0562) 
                                        (0563) _LED7SEG_DispInt:
                                        (0564)  LED7SEG_DispInt:
                                        (0565)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0566)    
04E0: 4F       MOV   X,SP               (0567)    mov   X,SP                                    ; Get copy of the stack pointer
04E1: 38 03    ADD   SP,0x3             (0568)    add   SP,DI_STACKSIZE                         ; Make some extra room for vars
                                        (0569) 
                                        (0570)    ; Testing only
04E3: 52 FC    MOV   A,[X-4]            (0571)    mov   A,[X+DI_ValueMSB]
04E5: 52 FD    MOV   A,[X-3]            (0572)    mov   A,[X+DI_ValueLSB]
04E7: 52 FB    MOV   A,[X-5]            (0573)    mov   A,[X+DI_POS]
04E9: 7B FA    DEC   [X-6]              (0574)    dec   [X+DI_LSD]                              ; shift count from [1 to N] to [0 to N-1]
                                        (0575) 
04EB: 56 00 04 MOV   [X+0],0x4          (0576)    mov   [X+DI_DECPTR],4                         ; Load dec ptr with 10000 value
                                        (0577) 
                                        (0578) 
                                        (0579)    ; Comapare input value to decade
                                        (0580) .DEC_LOOP_TOP:
04EE: 56 01 00 MOV   [X+1],0x0          (0581)    mov   [X+DI_RESULT],0                         ; Reset result
                                        (0582) .DEC_LOOP:
                                        (0583)    ; Compare MSB
04F1: 52 00    MOV   A,[X+0]            (0584)    mov   A,[X+DI_DECPTR]
04F3: 64       ASL   A                  (0585)    asl   A                                       ; Index it for 2 (word) bytes ber value
04F4: FE EA    INDEX 0x03E0             (0586)    index DEC_TABLE
04F6: 3B FC    CMP   A,[X-4]            (0587)    cmp   A,[X+DI_ValueMSB]                       ; Is 10^x > Value  (10^x - value)
04F8: C0 0F    JC    0x0508             (0588)    jc    .DO_INC_SUB                             ; If value is still bigger, increment and subtract
04FA: B0 24    JNZ   0x051F             (0589)    jnz   .TRY_NEXT_DEC
                                        (0590) 
                                        (0591)    ; Compare LSB only if MSB values were equal
04FC: 52 00    MOV   A,[X+0]            (0592)    mov   A,[X+DI_DECPTR]                         ; Get LSB of DEC value
04FE: 64       ASL   A                  (0593)    asl   A                                       ; Index it for 2 bytes per value
04FF: 74       INC   A                  (0594)    inc   A                                       ; Advance to LSB value
0500: FE DE    INDEX 0x03E0             (0595)    index DEC_TABLE
0502: 3B FD    CMP   A,[X-3]            (0596)    cmp   A,[X+DI_ValueLSB]                       ; Is 10^x > Value  (10^x - value)
0504: C0 03    JC    0x0508             (0597)    jc    .DO_INC_SUB                             ; If value is still bigger, increment and subtract
0506: B0 18    JNZ   0x051F             (0598)    jnz   .TRY_NEXT_DEC
                                        (0599)                                                  ; If it fell through, they are equal
                                        (0600) .DO_INC_SUB:
0508: 77 01    INC   [X+1]              (0601)    inc   [X+DI_RESULT]                           ; Increment the result counter
                                        (0602)    ; Subtract DEC value from Value
050A: 52 00    MOV   A,[X+0]            (0603)    mov   A,[X+DI_DECPTR]
050C: 64       ASL   A                  (0604)    asl   A                                       ; Index it for 2 bytes per value
050D: FE D1    INDEX 0x03E0             (0605)    index DEC_TABLE
050F: 54 02    MOV   [X+2],A            (0606)    mov   [X+DI_TMP],A                            ; Store this value for a moment  
                                        (0607) 
0511: 52 00    MOV   A,[X+0]            (0608)    mov   A,[X+DI_DECPTR]                         ; Get LSB of DEC value
0513: 64       ASL   A                  (0609)    asl   A                                       ; Index it for 2 bytes per value
0514: 74       INC   A                  (0610)    inc   A                                       ; Advance to LSB value
0515: FE C9    INDEX 0x03E0             (0611)    index DEC_TABLE
0517: 15 FD    SUB   [X-3],A            (0612)    sub   [X+DI_ValueLSB],A                       ; Is 10^x > Value  (10^x - value)
0519: 52 02    MOV   A,[X+2]            (0613)    mov   A,[X+DI_TMP]
051B: 1D FC    SBB   [X-4],A            (0614)    sbb   [X+DI_ValueMSB],A
051D: 8F D3    JMP   0x04F1             (0615)    jmp   .DEC_LOOP                               ; Keep subtracting until less than.
                                        (0616)    
                                        (0617) .TRY_NEXT_DEC:                                   ; Completed last decade
                                        (0618) 
051F: 52 FA    MOV   A,[X-6]            (0619)    mov   A,[X+DI_LSD]                            ; Get first position
0521: 3B 00    CMP   A,[X+0]            (0620)    cmp   A,[X+DI_DECPTR]      
0523: C0 0F    JC    0x0533             (0621)    jc    .SkipPrint                              ; Not ready skip the print
                                        (0622) 
                                        (0623) 
                                        (0624)    ; Figure if digit should be displayed
0525: 52 01    MOV   A,[X+1]            (0625)    mov   A,[X+DI_RESULT]                         ; Get result
0527: 10       PUSH  X                  (0626)    push  X
0528: 59 FB    MOV   X,[X-5]            (0627)    mov   X,[X+DI_POS]                            ; Load Position
052A: 70 3F    AND   F,0x3F             
052C: 71 C0    OR    F,0xC0             
                                        (0628) 
                                        (0629)    RAM_EPILOGUE RAM_USE_CLASS_2
052E: 9F 68    CALL  _LED7SEG_PutHex    (0630)    call  LED7SEG_PutHex
                                        (0631)    RAM_PROLOGUE RAM_USE_CLASS_2                  ; Restore system to class 2 memory mode
0530: 20       POP   X                  (0632)    pop   X
0531: 77 FB    INC   [X-5]              (0633)    inc   [X+DI_POS]                              ; Next time print to the right
                                        (0634) 
                                        (0635) .SkipPrint:
0533: 56 01 00 MOV   [X+1],0x0          (0636)    mov   [X+DI_RESULT],0
0536: 7B 00    DEC   [X+0]              (0637)    dec   [X+DI_DECPTR]
0538: BF B8    JNZ   0x04F1             (0638)    jnz   .DEC_LOOP
                                        (0639) 
053A: 52 FD    MOV   A,[X-3]            (0640)    mov   A,[X+DI_ValueLSB]                       ; Is 10^x > Value  (10^x - value)
053C: 59 FB    MOV   X,[X-5]            (0641)    mov   X,[X+DI_POS]                            ; Load Position
053E: 70 3F    AND   F,0x3F             
0540: 71 C0    OR    F,0xC0             
                                        (0642) 
                                        (0643)    RAM_EPILOGUE RAM_USE_CLASS_2
0542: 9F 54    CALL  _LED7SEG_PutHex    (0644)    call  LED7SEG_PutHex
                                        (0645)    RAM_PROLOGUE RAM_USE_CLASS_2                  ; Restore system to class 2 memory mode
                                        (0646) 
                                        (0647) .DispInt_End:
0544: 38 FD    ADD   SP,0xFD            (0648)    add   SP,-DI_STACKSIZE                        ; Restore stack
0546: 70 3F    AND   F,0x3F             
0548: 71 C0    OR    F,0xC0             
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_2
054A: 7F       RET                      (0650)    ret
FILE: G:\Hobby\PROGRA~1\PSOCPR~1\SPI_SL~1\SPI_SL~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        													// Part specific constants and macros
(0006) #include "PSoCAPI.h"    													// PSoC API definitions for all User Modules
(0007) 
(0008) int ADWandler = 0x00;
(0009) 
(0010) void main(void)
(0011) {
(0012) 	M8C_EnableGInt;
__UserModules_end|__text_start|_main|_main:
    054B: 71 01    OR    F,0x1
(0013) 	LED7SEG_Start(); 
    054D: 7C 03 EA LCALL _LED7SEG_Start
(0014) 	SPIS_Start(SPIS_SPIS_MODE_0 | SPIS_SPIS_MSB_FIRST);
    0550: 10       PUSH  X
    0551: 50 00    MOV   A,0x0
    0553: 7C 03 A1 LCALL _SPIS_Start
    0556: 20       POP   X
    0557: 80 33    JMP   0x058B
(0015) 	
(0016) 	while (1)
(0017) 	{
(0018) 		PRT2DR ^= 0x01;														// LED_Empfangen togglen
    0559: 45 08 01 XOR   REG[0x8],0x1
(0019)        	while(!(SPIS_bReadStatus() & SPIS_SPIS_SPI_COMPLETE));
    055C: 10       PUSH  X
    055D: 7C 03 B0 LCALL _SPIS_bReadStatus|bSPIS_ReadStatus|_bSPIS_ReadStatus|SPIS_bReadStatus
    0560: 20       POP   X
    0561: 62 D0 00 MOV   REG[0xD0],0x0
    0564: 53 09    MOV   [__r0],A
    0566: 47 09 20 TST   [__r0],0x20
    0569: AF F2    JZ    0x055C
(0020)         ADWandler = SPIS_bReadRxData();
    056B: 10       PUSH  X
    056C: 7C 03 AD LCALL _bSPIS_ReadRxData|SPIS_bReadRxData|_SPIS_bReadRxData|bSPIS_ReadRxData
    056F: 20       POP   X
    0570: 62 D0 00 MOV   REG[0xD0],0x0
    0573: 53 07    MOV   [ADWandler+1],A
    0575: 55 06 00 MOV   [ADWandler],0x0
(0021)         LED7SEG_DispInt(ADWandler,1,4);
    0578: 10       PUSH  X
    0579: 50 04    MOV   A,0x4
    057B: 08       PUSH  A
    057C: 50 01    MOV   A,0x1
    057E: 08       PUSH  A
    057F: 51 06    MOV   A,[ADWandler]
    0581: 08       PUSH  A
    0582: 51 07    MOV   A,[ADWandler+1]
    0584: 08       PUSH  A
    0585: 7C 04 E0 LCALL _LED7SEG_DispInt
    0588: 38 FC    ADD   SP,0xFC
    058A: 20       POP   X
(0022) 	}
    058B: 8F CD    JMP   0x0559
(0023) }    058D: 8F FF    JMP   0x058D
