                ;;*****************************************************************************
                ;;*****************************************************************************
                ;;  FILENAME: I2CHWMSTR.asm
                ;;   Version: 1.90, Updated on 2011/12/1 at 17:22:49
                ;;  Generated by PSoC Designer 5.2.2401
                ;;
                ;;  DESCRIPTION: <UMName> User Module software implementation file
                ;;
                ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                ;;        arguments and observe the associated "Registers are volatile" policy.
                ;;        This means it is the caller's responsibility to preserve any values
                ;;        in the X and A registers that are still needed after the API functions
                ;;        returns. For Large Memory Model devices it is also the caller's 
                ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                ;;        MVW_PP registers. Even though some of these registers may not be modified
                ;;        now, there is no guarantee that will remain the case in future releases.
                ;;-----------------------------------------------------------------------------
                ;;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                ;;*****************************************************************************
                ;;*****************************************************************************
                
 0010           FLAG_XIO_MASK:  equ 10h
 0008           FLAG_SUPER:     equ 08h
 0004           FLAG_CARRY:     equ 04h
 0002           FLAG_ZERO:      equ 02h
 0001           FLAG_GLOBAL_IE: equ 01h
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ 0C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ 0B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ 0B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ 0B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ 0B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ 0B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ 0B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ 0B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ 0B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ 0B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ 0BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ 0BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ 0BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ 0BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ 0BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ 0D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ 0D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ 0D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ 0D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ 0DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ 0DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DD           INT_CLR3:     equ 0DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ 0DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00E0           INT_MSK0:     equ 0E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ 0E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ 0E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ 0E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ 0E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ 0E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ 0E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ 0E7h          ; Data Control Register 1                  (RW)
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 00E8           MUL_X:        equ 0E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ 0E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ 0EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ 0EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ 0ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ 0EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ 0EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ 0EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ 0F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ 0FEh          ; CPU Status and Control Register #1       (#)
 0010           CPU_SCR1_SLIMO:         equ 10h	   ; MASK: Slow IMO (internal main osc) enable
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: flag, Internal Reset Status bit
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ 0FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ 0C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ 0F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ 0F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ 0D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ 0D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ 0D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ 0D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ 0DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ 0DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ 0DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ 0E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ 0E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ 0F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ 0E2h          ; Oscillator Control Register 2            (RW)
 0080           OSC_CR2_PLLGAIN:      equ 80h    ; MASK: High/Low gain
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ 0E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ 0E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E8           IMO_TR:       equ 0E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ 0E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ 0EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ 0EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0000           SYSTEM_STACK_PAGE: equ 0   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0000           SYSTEM_LARGE_MEMORY_MODEL: equ 0   
 0001           SYSTEM_SMALL_MEMORY_MODEL: equ 1   
 0001           IMAGECRAFT: equ 1   
 0002           HITECH: equ 2   
 0001           TOOLCHAIN: equ IMAGECRAFT   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C27000.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           ; ******* Hi Tech Specific *******
 0000           ; Turn on the expansion of all macros by default
                IF (TOOLCHAIN & HITECH)
                OPT EXPAND
                ENDIF
                ;  ******* Page Pointer Manipulation Macros *******
                ;
                ;  Most of the following macros are conditionally compiled so they only
                ;  produce code if the large memory model is selected.
                
                   ;-----------------------------------------------
                   ;  Set Stack Page Macro
                   ;-----------------------------------------------
                   ;
                   ;  DESC: Modify STK_PP in the large or small memory Models.
                   ;
                   ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
                   ;        which stack operations like PUSH and POP store and retrieve their
                   ;        data
                   ;
                   ;  COST: 8 instruction cycles (in LMM only)
                
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 0000           macro PRESERVE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_PRESERVE_PAGE_POINTERS
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             MOV A, [__r0]
 0000             PUSH A
 0000             MOV A, [__r1]
 0000             PUSH A
 0000             MOV A, [__r2]
 0000             PUSH A
 0000             MOV A, [__r3]
 0000             PUSH A
 0000             MOV A, [__r4]
 0000             PUSH A
 0000             MOV A, [__r5]
 0000             PUSH A
 0000             MOV A, [__r6]
 0000             PUSH A
 0000             MOV A, [__r7]
 0000             PUSH A
 0000             MOV A, [__r8]
 0000             PUSH A
 0000             MOV A, [__r9]
 0000             PUSH A
 0000             MOV A, [__r10]
 0000             PUSH A
 0000             MOV A, [__r11]
 0000             PUSH A
 0000             MOV A, [__rX]
 0000             PUSH A
 0000             MOV A, [__rY]
 0000             PUSH A
 0000             MOV A, [__rZ]
 0000             PUSH A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               MOV REG[CUR_PP], 0
 0000             ENDIF
 0000           ENDIF
 0000           macro RESTORE_CPU_CONTEXT
 0000           IF ( TOOLCHAIN & IMAGECRAFT )
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               RAM_RESTORE_NATIVE_PAGING
 0000               MOV reg[CUR_PP], >__r0 ;Set CUR_PP to same page as virtual registers
 0000             ENDIF
 0000             POP A
 0000             MOV [__rZ], A
 0000             POP A
 0000             MOV [__rY], A
 0000             POP A
 0000             MOV [__rX], A
 0000             POP A
 0000             MOV [__r11], A
 0000             POP A
 0000             MOV [__r10], A
 0000             POP A
 0000             MOV [__r9], A
 0000             POP A
 0000             MOV [__r8], A
 0000             POP A
 0000             MOV [__r7], A
 0000             POP A
 0000             MOV [__r6], A
 0000             POP A
 0000             MOV [__r5], A
 0000             POP A
 0000             MOV [__r4], A
 0000             POP A
 0000             MOV [__r3], A
 0000             POP A
 0000             MOV [__r2], A
 0000             POP A
 0000             MOV [__r1], A
 0000             POP A
 0000             MOV [__r0], A
 0000             IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000               ISR_RESTORE_PAGE_POINTERS
 0000               AND F, FLAG_PGMODE_0
 0000             ENDIF
 0000             POP A
 0000           ENDIF
 0002           I2CHW_MUM_SEL: equ 2h
 0000           
 0001           I2CHW_SLAVE: equ 1
 0002           I2CHW_MSTR:  equ 2
 0004           I2CHW_MMS:   equ 4
 0000           
 0000           ;I2CHW_SLAVE_ADDR:                          equ   @Slave_Addrh       ;Permanent Slave Address
 0000           I2CHW_ADDR_REG_PRESENT:                     equ   0                  ;CY8C28X45 have 1 always while all other have 0
 0000           I2CHW_AUTO_ADDR_CHECK:                      equ   0                  ;CY8C28X45 may have this 0 or 1 while all other have 0
 0000           I2CHW_USED_I2C_BLOCK:                       equ   0                  ;CY8C28X45 have 0 for I2C Controller_0 and 1 for I2C Controller_1, other have 0
 0000           
 0000           ;--------------------------------------------------
 0000           ;   I2CHW API Constants
 0000           ;--------------------------------------------------
 0000           
 00DE           I2CHW_INT_REG:                             equ 0x0de
 0001           I2CHW_INT_MASK:                            equ 0x01
 0000           
 0000           
 0000           
 0000           ;-----------------
 0000           ; Misc. equates
 0000           ;-----------------
 0000           
 0000           ;I2CHW_RsrcStatus byte, Status Bit definitions
 0001           I2CHW_RD_NOERR:                             equ 0x1   ;read completed without errors
 0002           I2CHW_RD_OVERFLOW:                          equ 0x2   ;master read more bytes than were contained in read buffer
 0004           I2CHW_RD_COMPLETE:                          equ 0x4   ;last read transaction complete
 0008           I2CHW_READFLASH:                            equ 0x8   ;set- next read will use flash read buffer, clear- next read will use ram read buffer
 0010           I2CHW_WR_NOERR:                             equ 0x10  ;write completed without errors
 0020           I2CHW_WR_OVERFLOW:                          equ 0x20  ;received bytes exceeded write buffer length
 0040           I2CHW_WR_COMPLETE:                          equ 0x40  ;Master uses this definition, slave uses that below.
 0040           I2CHW_ISR_NEW_ADDR:                         equ 0x40  ;New addre received (can infer that previous transaction is complete)
 0080           I2CHW_ISR_ACTIVE:                           equ 0x80  ;ISR for I2C_slave is is active
 0000           
 0000           
 0004           fI2C_NAKnextWr:                             equ 0x04  ;flag to tell slave to nak next byte from master
 0000           
 0000           
 0000           ;=== I2C equates ===
 0000           
 0000           
 0000           
 00D7           I2CHW_SCR:                                  equ d7h    ; I2C Enable Master/Slave Block Operation
 0000           
 0080           I2CM_BUSERR:    equ 0x80
 0040           I2CM_LOSTARB:   equ 0x40
 0020           I2C_STOP_ST:    equ 0x20
 0010           I2C_ACKOUT:     equ 0x10
 0008           I2C_ADDRIN:     equ 0x08
 0004           I2C_TX:         equ 0x04 ;compliment is RX
 0002           I2C_LST_BIT:    equ 0x02
 0001           I2C_BYTE_COMPL: equ 0x01
 0000           
 00D6           I2CHW_CFG:                                  equ d6h    ; I2C Configuration RegisterI2C
 0000           
 0020           I2C_BUSERRIE:   equ 0x20
 0010           I2C_STOPIE:     equ 0x10
 0008           I2C_CLKR1:      equ 0x08
 0004           I2C_CLKR0:      equ 0x04
 0002           I2C_M_EN:       equ 0x02
 0001           I2C_S_EN:       equ 0x01
 0000           
 00D9           I2CHW_MSCR:                                 equ d9h    ; I2C Master Status and Control
 0000           
 0008           I2CM_BUSBUSY:   equ 0x08
 0004           I2CM_MASTEROP:  equ 0x04
 0002           I2CM_RESTRT:    equ 0x02
 0001           I2CM_SNDSTRT:   equ 0x01
 0000           
 00D8           I2CHW_DR:                                   equ d8h    ; I2C Status and Control Register
 0000           
                IF(I2CHW_ADDR_REG_PRESENT) ;Applicable for CY8C28X45
                I2CHW_ADDR:                  equ @ADDR_ADDRh                     ; I2C Address
                ENDIF
                
                ;Equates used as conditional compile keys
                
                
 0000           I2CHW_READ_BUFTYPE:                         equ 0x0
 0000           
 0000           I2CHW_READ_FLASH:                           equ I2CHW_READ_BUFTYPE & 0x01
 0000           
 0000           I2CHW_24MHZ_FIX:                            equ 0x0
 0000           
 0000           I2CHW_THROTTLE_CLK_RATE:                    equ I2CHW_24MHZ_FIX & 0x01
 0000           
 0000           I2CHW_POLLING_ENABLE:                       equ 0x0
 0000           
 0000           I2CHW_POLLED_PROCESS:                       equ I2CHW_POLLING_ENABLE & 0x01
 0000           
 0000           ;I2C_(status and control) reg write macro
 0000           ;----------------------------------------------------
 0000           ;  I2C_SCR and I2C_MSCR reg write macro
 0000           ;
 0000           ;  Use the following macros to write to the I2C_SCR register
 0000           ;  Usage:    SetI2C_MSCR WRITE_VALUE
 0000           ;            SetI2C_SCR  WRITE_VALUE
 0000           ;            SetI2C_CFG  WRITE_VALUE
 0000           ;
 0000           ;  where WRITE_VALUE is the data to be writen
 0000           ;
 0000           ;----------------------------------------------------
 0000           ; Write to the  I2CHW_SCR register
 0000           ;
 0000               macro SetI2CHW_SCR
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  X
 0000                   mov   X, A                        ; if data for I2C_SCR was in A save it in X
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x1
 0000                   mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if the operation uses data in A get it out of X
 0000                   mov   reg[I2CHW_SCR], @0    ; write data to reg[I2C_SCR]
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   pop   A                           ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if A was data restore it from X now
 0000                   pop   X                           ; restore original accumulator
 0000           ELSE
 0000                   mov   reg[I2CHW_SCR], @0 ; write data to reg[I2C_SCR]
 0000           ENDIF
 0000               macro SetI2CHW_MSCR
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  X
 0000                   mov   X, A                        ; if data for I2C_SCR was in A save it in X
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x01
 0000                   mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if the operation uses data in A get it out of X
 0000                   mov   reg[I2CHW_MSCR], @0   ; write data to reg[I2C_MSCR]
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   pop   A                           ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   mov   A, X                        ; if A was data restore it from X now
 0000                   pop   X                           ; restore original accumulator
 0000           ELSE
 0000                   mov  reg[I2CHW_MSCR], @0   ; write data to reg[I2C_MSCR]
 0000           ENDIF
 0000               macro BitSetI2CHW_CFG
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                   push  A
 0000                   mov   A, reg[OSC_CR0]             ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x02
 0000                   mov   reg[OSC_CR0], A             ; throttle the clock down to 12Mhz
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                           ELSE
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                   or    F, FLAG_XIO_MASK            ; set bank1
 0000                           ENDIF
 0000                   pop   A                           ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                   pop   A                           ; restore original accumulator
 0000           ELSE
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           or    F, FLAG_XIO_MASK            ; set bank1
 0000                   or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                           and   F, ~FLAG_XIO_MASK           ; set bank0
 0000                           ELSE
 0000                           or    reg[I2CHW_CFG], @0    ; write data to reg[I2C_CFG]
 0000                           ENDIF
 0000           ENDIF
 0000               macro BitClrI2CHW_CFG
 0000           
 0000           IF I2CHW_THROTTLE_CLK_RATE
 0000                   or    F, FLAG_XIO_MASK                    ; set bank1
 0000                   push  A
 0000                   mov   A, reg[OSC_CR0]                     ;
 0000                   push  A
 0000                   and   A, ~0x07
 0000                   or    A, 0x02
 0000                   mov   reg[OSC_CR0], A                     ; throttle the clock down to 12Mhz
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                           ELSE
 0000                   and   F, ~FLAG_XIO_MASK                   ; set bank0
 0000                   and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                   or    F, FLAG_XIO_MASK                    ; set bank1
 0000                           ENDIF
 0000                   pop   A                                   ; restore original clock speed
 0000                   mov   reg[OSC_CR0], A
 0000                   and   F, ~FLAG_XIO_MASK                   ; set bank0
 0000                   pop   A                                   ; restore original accumulator
 0000           ELSE
 0000                           IF(I2CHW_USED_I2C_BLOCK)
 0000                           or    F, FLAG_XIO_MASK                    ; set bank1
 0000                   and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                           and   F, ~FLAG_XIO_MASK                   ; set bank0
 0000                           ELSE
 0000                           and   reg[I2CHW_CFG], ~@0           ; write data to reg[I2C_CFG]
 0000                           ENDIF
 0000           ENDIF
 0000               macro I2CHW_SERVICE_RETURN
 0000           
 0000           IF I2CHW_POLLED_PROCESS
 0000                   ret                                       ; NOT and ISR so use only a ret to return from poll
 0000           ELSE    
 0000                   reti                                      ; use reti to return from ISR
 0000           ENDIF
 0000               macro I2CHW_POLL_SERVICE
 0000           
 0000           IF I2CHW_POLLED_PROCESS
 0000                   lcall  I2CHW_Poll              ; Call this function repeatedly if we are in a loop
 0000                                                                     ; waiting for bStatus BUS_BUSY to clear.  Otherwise
 0000                                                                                                             ; this is a deadlock condtion
 0000           ENDIF
 0001           I2CHW_READ:           equ  0x01 ; Set the R/W flag after the slave address.
 0000           I2CHW_WRITE:          equ  0x00 ; Clear the R/W flag after the slave address.
 0000           I2CHW_XFER_ERROR:     equ  0x00 ; Slave did not ACK
 0000           
 0000           I2CHW_CompleteXfer:   equ  0x00 ; Perform a complete I2C transfer
 0001           I2CHW_RepStart:       equ  0x01 ; Perform a complete transfer with a Repeat Start
 0002           I2CHW_NoStop:         equ  0x02 ; Perform a complete transfer, but leave off the stop.
 0000           
 0000           I2CHW_NAKslave:       equ  0x00 ; NAK the slave after a read
 0001           I2CHW_ACKslave:       equ  0x01 ; ACK the slave after a read
 0000           
 0000           ; end of file I2CHW.inc
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global Symbols
 0000           ;-----------------------------------------------
 0000           
                export   I2CHW_fSendRepeatStart
                export  _I2CHW_fSendRepeatStart
                export   I2CHW_fSendStart
                export  _I2CHW_fSendStart
                export   I2CHW_SendStop
                export  _I2CHW_SendStop
                ; export the following 3 functions for C-implementations large or small mem models 
                export  _I2CHW_fReadBytes
                export  _I2CHW_bWriteBytes
                export  _I2CHW_bWriteCBytes
                
                export   I2CHW_fWrite
                export  _I2CHW_fWrite
                
                export   I2CHW_bRead
                export  _I2CHW_bRead
                
                export    I2CHW_bReadBusStatus
                export   _I2CHW_bReadBusStatus
                
                
                IF SYSTEM_SMALL_MEMORY_MODEL
                
                export   I2CHW_fReadBytes
                export   I2CHW_bWriteBytes
                export   I2CHW_bWriteCBytes
                
                ENDIF    ;SYSTEM_SMALL_MEMORY_MODEL
                
                ;-------------------------------------------------------------------
                ;  Declare the varables for both the assembler and C compiler.
                ;
                ;-------------------------------------------------------------------
                export  I2CHW_bStatus
                export _I2CHW_bStatus
                
                ;-----------------------------------------------
                ; Variable Allocation
                ;-----------------------------------------------
                area InterruptRAM(RAM, REL, CON)
                
 0000           _I2CHW_bStatus:
 0000            I2CHW_bStatus:                        blk   1  ; Status during transfers
 0001           
                AREA UserModules (ROM, REL)
                ;-----------------------------------------------
                ;  EQUATES
                ;-----------------------------------------------
 0001           I2CHW_SLAVE_ACKed:                     equ 0x01 ; This bit set if Slave ACKed Master
 0010           I2CHW_SEND_ACK:                        equ 0x10 ; If this flag set, Master should send ACK
 0000           
 0000           
 0000           .SECTION
 0000           ;-----------------------------------------------------------------------------
 0000           ;  FUNCTION NAME: I2CHW_fReadBytes
 0000           ;
 0000           ;  DESCRIPTION:
 0000           ;       Read Multiple bytes from a slave.  Use the ISR to perform operation.
 0000           ;-----------------------------------------------------------------------------
 0000           ;
 0000           ;  ARGUMENTS:
 0000           ;  [SP-7]=> Mode flags that allow the programmer to set flags
 0000           ;           to determine if:
 0000           ;             0x01 => Use RepeatStart instead of Start
 0000           ;             0x02 => Don't send Stop
 0000           ;  [SP-6]=> Count of bytes to read.
 0000           ;  [SP-5]=> MSB of Array address to put data in (ignorned for small mem model)
 0000           ;  [SP-4]=> LSB of Array address to put data in 
 0000           ;  [SP-3]=> Address of slave
 0000           ;
 0000           ;  RETURNS:       None
 0000           ;
 0000           ;  SIDE EFFECTS:
 0000           ;    The A and X registers may be modified by this or future implementations
 0000           ;    of this function.  The same is true for all RAM page pointer registers in
 0000           ;    the Large Memory Model.  When necessary, it is the calling function's
 0000           ;    responsibility to perserve their values across calls to fastcall16 
 0000           ;    functions.
 0000           ;          
 0000           ;    Currently only the page pointer registers listed below are modified: 
 0000           ;          CUR_PP
 0000           ;
 0000           ;  THEORY of OPERATION or PROCEDURE:
 0000           ;    I2C and block must be operational.
 0000           ;    This routine will enable the I2C interrupt!
 0000           ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
 0000           ;    pend on the ISR_ACTIVE bit until it can run
 0000           ;
 0000           ;-----------------------------------------------------------------------------
                IF      (TOOLCHAIN & HITECH)
                RxMode:         set  -7
                RxCnt:          set  -6
                RxArrayHI:      set  -5
                RxArrayLO:      set  -4
                RxSlaveAddr:    set  -3
                ELSE
 FFFFFFF9           RxMode:         equ  -7
 FFFFFFFA           RxCnt:          equ  -6
 FFFFFFFB           RxArrayHI:      equ  -5
 FFFFFFFC           RxArrayLO:      equ  -4
 FFFFFFFD           RxSlaveAddr:    equ  -3
                ENDIF
                
 0000           _I2CHW_fReadBytes:			      
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_RsrcStatus
                   ENDIF
 0000 4F                mov   X, SP
 0001           I2CMSCR_NotReady1:
 0001 5100          mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
 0003 470080        tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
 0006               ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
 0006               ;and   A, 0x0f                                           ;only look at the lower bits
 0006                     ;For multi master operations, a pening start or restart
 0006                     ;request might be OK, the master might be waiting to
 0006                     ;acquire the bus from another master
 0006 BFFA          jnz   I2CMSCR_NotReady1
 0008 2E0080        or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared by ISR
 000B               ;get the address from the parameters on the stack
 000B 52FD          mov   A, [X + RxSlaveAddr]
 000D 64            asl   A                                                ; Shift address to the left to make
 000E                                                                      ; a complete byte with the R/W bit.
 000E 2901          or    A,0x01                                           ; OR the address with the Read bit.
 0010 5300          mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
 0012 60D8          mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
 0014 550000        mov   [I2CHW_bStatus],0x00                             ; Clear all flags
 0017 52F9          mov   A, [X+RxMode]                                    ; place the RxMode in status so ISR can access it
 0019 5300          mov   [I2CHW_bStatus],A
 001B               ;
 001B               ;we must now initialize a read buffer using I2CHW_InitWrite
 001B               ;
 001B 10            push   X                                               ;preserve since it's used later
 001C 52FA          mov    A, [X+RxCnt]                                    ;get the write buf size
 001E 08            push   A
 001F 52FB          mov    A, [X+RxArrayHI]                                ;get the write addrHI
 0021 08            push   A                                                                               
 0022 52FC          mov    A, [X+RxArrayLO]                                                                              ;get the write addrLO
 0024 08            push   A                                               ;this will be ignored
 0025 9000          call  I2CHW_InitWrite                                  ;sets the addr and byte count to write to
 0027 38FD          add    SP, -3
 0029 20            pop    X                                               ;restore X to be used for the rest of this routine
 002A               
 002A 5100          mov   A,[I2CHW_SlaveAddr]
 002C 48F901        tst   [x+RxMode],I2CHW_RepStart
 002F B00A          jnz   DoRestartRx
 0031 49D701        tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
 0034 B005          jnz   DoRestartRx
 0036 9113          call  I2C_DoStart                                      ; Send a start and address.
 0038 8003          jmp   CheckRxAck
 003A           DoRestartRx:
 003A 9081          call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
 003C                   ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
 003C                   ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
 003C                   ; as a whole be able to detect that a stop has not been sent previously in this transmission.
 003C           
 003C           CheckRxAck:                                                ; Test to see if Slave ACKed
 003C                   ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
 003C                   ;is finished.
 003C           End_RD:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 003C 7F            ret
 003D           
 003D           .ENDSECTION
 003D           
 003D           .SECTION
 003D           ;-----------------------------------------------------------------------------
 003D           ;  FUNCTION NAME: I2CHW_bWriteBytes
 003D           ;
 003D           ;  DESCRIPTION:
 003D           ;    Write multiple data bits to slave device.
 003D           ;
 003D           ;-----------------------------------------------------------------------------
 003D           ;
 003D           ;  ARGUMENTS:
 003D           ; [SP-7]=> Mode flags that allow the programmer to set flags
 003D           ;          to determine if:
 003D           ;              0x01 => Use RePeatStart instead of Start
 003D           ;              0x02 => Don't send Stop
 003D           ; [SP-6]=> Count of bytes to write.
 003D           ; [SP-5]=> MSB of Array address to put data in (ignored small mem model).
 003D           ; [SP-4]=> LSB of Array address to put data in.
 003D           ; [SP-3]=> Address of slave
 003D           ;
 003D           ;
 003D           ;  RETURNS:     None
 003D           ;
 003D           ;  SIDE EFFECTS:
 003D           ;    The A and X registers may be modified by this or future implementations
 003D           ;    of this function.  The same is true for all RAM page pointer registers in
 003D           ;    the Large Memory Model.  When necessary, it is the calling function's
 003D           ;    responsibility to perserve their values across calls to fastcall16 
 003D           ;    functions.
 003D           ;          
 003D           ;    Currently only the page pointer registers listed below are modified: 
 003D           ;          CUR_PP
 003D           ;
 003D           ;  THEORY of OPERATION or PROCEDURE:
 003D           ;
 003D           ;-----------------------------------------------------------------------------
                IF      (TOOLCHAIN & HITECH)
                TxMode:       set  -7
                TxByteCount:  set  -6
                TxArrayHI:    set  -5
                TxArrayLO:    set  -4
                TxSlaveAddr:  set  -3
                ELSE
 FFFFFFF9           TxMode:       equ  -7
 FFFFFFFA           TxByteCount:  equ  -6
 FFFFFFFB           TxArrayHI:    equ  -5
 FFFFFFFC           TxArrayLO:    equ  -4
 FFFFFFFD           TxSlaveAddr:  equ  -3
                ENDIF
                
 003D           _I2CHW_bWriteBytes:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_RsrcStatus
                   ENDIF
                
 003D 4F                mov   X, SP
 003E           I2CMSCR_NotReady2:
 003E 5100          mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
 0040 470080        tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
 0043               ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
 0043               ;and   A, 0x0f                                           ;only look at the lower bits
 0043                     ;For multi master operations, a pening start or restart
 0043                     ;request might be OK, the master might be waiting to
 0043                     ;acquire the bus from another master
 0043 BFFA          jnz   I2CMSCR_NotReady2
 0045 2E0080        or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared at end of ISR
 0048 52FD          mov   A, [X + TxSlaveAddr]
 004A 64            asl   A                                                ; Shift address to the left to make
 004B                                                                      ; a complete byte with the R/W bit.
 004B                                                                      ; The ASL takes care of clearing bit 0.
 004B 550000        mov   [I2CHW_bStatus],0x00                             ; Clear all flags
 004E 5300          mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
 0050 60D8          mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
 0052 52F9          mov   A, [X+TxMode]                                    ; place the TxMode in status so ISR can access it
 0054 5300          mov   [I2CHW_bStatus],A
 0056               ;
 0056               ;we must now initialize a read buffer using I2CHW_InitWrite
 0056               ;
 0056 10                push   X                                                ;preserve since it's used later
 0057 77FA              inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
 0059           
 0059 52FA              mov    A, [X+TxByteCount]                               ;get the write buf size
 005B 08                push   A
 005C 52FB              mov    A, [X+TxArrayHI]                                 ;get the write buf addr
 005E 08                push   A                                                                                            ;this will be ignored
 005F 52FC              mov    A, [X+TxArrayLO]                                 ;get the write buf addr
 0061 08                push   A
 0062 9000              call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
 0064 38FD              add SP, -3
 0066 20                pop X                                                   ;restore X to be used for the rest of this routine
 0067               ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
 0067           
 0067           
 0067 5100          mov   A,[I2CHW_SlaveAddr]
 0069 48F901        tst   [x+TxMode],I2CHW_RepStart
 006C B00A          jnz   DoRestartTx
 006E 49D701        tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
 0071 BFC8          jnz   DoRestartRx
 0073 90D6          call  I2C_DoStart                                      ; Send a start and address.
 0075 8003          jmp   DoTxAck
 0077           DoRestartTx:
 0077 9044          call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
 0079           DoTxAck:
 0079           
 0079           
 0079           WriteSlaveAck:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0079 7F            ret
 007A           
 007A           .ENDSECTION
 007A           
 007A           .SECTION
 007A           ;-----------------------------------------------------------------------------
 007A           ;  FUNCTION NAME: I2CHW_bWriteCBytes
 007A           ;
 007A           ;  DESCRIPTION:
 007A           ;    Write multiple data bits to slave device from ROM
 007A           ;
 007A           ;-----------------------------------------------------------------------------
 007A           ;
 007A           ;  ARGUMENTS:
 007A           ;  [SP-7]=> Mode flags that allow the programmer to set flags
 007A           ;            to determine if:
 007A           ;               0x01 => Use RepeatStart instead of Start
 007A           ;               0x02 => Don't send Stop
 007A           ;  [SP-6]=> Count of bytes to write.
 007A           ;  [SP-5]=> MSB of ROM Array address to get data from
 007A           ;  [SP-4]=> LSB of ROM Array address to get data from.
 007A           ;  [SP-3]=> Address of slave
 007A           ;
 007A           ;  RETURNS:
 007A           ;    None
 007A           ;
 007A           ;  SIDE EFFECTS:
 007A           ;    The A and X registers may be modified by this or future implementations
 007A           ;    of this function.  The same is true for all RAM page pointer registers in
 007A           ;    the Large Memory Model.  When necessary, it is the calling function's
 007A           ;    responsibility to perserve their values across calls to fastcall16 
 007A           ;    functions.
 007A           ;          
 007A           ;    Currently only the page pointer registers listed below are modified: 
 007A           ;          CUR_PP
 007A           ;
 007A           ;  THEORY of OPERATION or PROCEDURE:
 007A           ;
 007A           ;-----------------------------------------------------------------------------
                IF      (TOOLCHAIN & HITECH)
                TxCMode:       set  -7
                TxCByteCount:  set  -6
                TxCArrayMSB:   set  -5
                TxCArrayLSB:   set  -4
                ;TxSlaveAddr:  set  -3    ;defined above this line if for reference only
                ELSE
 FFFFFFF9           TxCMode:       equ  -7
 FFFFFFFA           TxCByteCount:  equ  -6
 FFFFFFFB           TxCArrayMSB:   equ  -5
 FFFFFFFC           TxCArrayLSB:   equ  -4
 007A           ;TxSlaveAddr:  equ  -3	  ;defined above this line if for reference only
                ENDIF
                
 007A           _I2CHW_bWriteCBytes:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_RsrcStatus
                   ENDIF
 007A 4F                mov   X, SP
 007B           I2CMSCR_NotReady3:
 007B 5100              mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
 007D 470080            tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
 0080               ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
 0080               ;and   A, 0x0f                                           ;only look at the lower bits
 0080                     ;For multi master operations, a pening start or restart
 0080                     ;request might be OK, the master might be waiting to
 0080                     ;acquire the bus from another master
 0080 BFFA              jnz   I2CMSCR_NotReady3
 0082 2E0080            or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
 0085 52FD          mov   A, [X + TxSlaveAddr]
 0087 64            asl   A                                                ; Shift address to the left to make
 0088                                                                      ; a complete byte with the R/W bit.
 0088                                                                      ; The ASL takes care of clearing bit 0.
 0088 550000        mov   [I2CHW_bStatus],0x00                             ; Clear all flags
 008B 5300          mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
 008D 60D8          mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
 008F 52F9          mov   A, [X+TxCMode]                                                             ; place the RxMode in status so ISR can access it
 0091 5300          mov   [I2CHW_bStatus],A
 0093               ;
 0093                   ;we must now initialize a read buffer using I2CHW_InitWrite
 0093                   ;
 0093 10                push   X                                                ;preserve X since it's used later
 0094           
 0094 5000               mov    A, 0                                             ;get the write buf size (this is the hi order part)
 0096 77FA              inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
 0098 D002              jnc    . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
 009A 74                inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
 009B 08                push   A
 009C 52FA              mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
 009E 08                push   A
 009F 52FB              mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
 00A1 08                push   A                                                                                        ;this will be ignored
 00A2 52FC              mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
 00A4 08                push   A
 00A5           
 00A5 9000              call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
 00A7 38FC              add SP, -4
 00A9 20                pop X                                                   ;restore X to be used for the rest of this routine
 00AA           
 00AA               ;or  [I2CHW_RsrcStatus],I2C_READFLASH
 00AA 5100          mov   A,[I2CHW_SlaveAddr]
 00AC 48F901        tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
 00AF B00A          jnz   DoCRestartTx                                     ; should executed.
 00B1 49D701        tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
 00B4 BF85          jnz   DoRestartRx
 00B6 9093          call  I2C_DoStart                                      ; Send a start and address.
 00B8 8003          jmp   DoCTxAck
 00BA           DoCRestartTx:
 00BA 9001          call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
 00BC           
 00BC           DoCTxAck:                                                  ; Test to see if Slave is ACKed
 00BC           
 00BC           CWriteSlaveAck:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00BC 7F            ret
 00BD           
 00BD           .ENDSECTION
 00BD           
 00BD           .SECTION
 00BD           ;-----------------------------------------------------------------------------
 00BD           ;  FUNCTION NAME: I2CHW_DoBufferRepeatStart
 00BD           ;
 00BD           ;  DESCRIPTION:
 00BD           ;    Send repeated start condition and send slave address for buffered transfers.
 00BD           ;
 00BD           ;-----------------------------------------------------------------------------
 00BD           ;
 00BD           ;  ARGUMENTS:
 00BD           ;     This routine is called internally only.  It is not exported or intended as an API
 00BD           ;
 00BD           ;  RETURNS:
 00BD           ;    None
 00BD           ;
 00BD           ;  SIDE EFFECTS:
 00BD           ;    The A and X registers may be modified by this or future implementations
 00BD           ;    of this function.  The same is true for all RAM page pointer registers in
 00BD           ;    the Large Memory Model.  When necessary, it is the calling function's
 00BD           ;    responsibility to perserve their values across calls to fastcall16 
 00BD           ;    functions.
 00BD           ;          
 00BD           ;  THEORY of OPERATION or PROCEDURE:
 00BD           ;    This is similar to the I2C_DoRepeatStart entry point but this function does not
 00BD           ;    wait for the byte_complete flag.  That is this is not polled and is therefore compatible
 00BD           ;    with the buffered read and write functions (above).
 00BD           ;
 00BD           ;-----------------------------------------------------------------------------
 00BD           
 00BD           I2CHW_DoBufferRepeatStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_SlaveAddr
                   ENDIF
                    ;here the path through the routine is dependent on the previous transmission.
                        ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                        ; I2C interrupt
                        ; 2a. the master must NAK the byte if he is reading from the slave.
                        ; We do have to look at the status of the I2C block to see what is going on because if there was a
                        ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                        ; by setting the master restart bit and clearing to I2C_SCR (I2C_TX)
                        ; 2b. if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                        ; I2C_SCR reg.  (same as if we were writing to slave).
                        ; 3. once the ISR starts it will figure out which direction we are going with data (sending/receiving)
                        ;
 00BD 60D8          mov   reg[I2CHW_DR], A
 00BF 5300              mov   [I2CHW_SlaveAddr], A
 00C1                   ;tst      reg[I2CHW_MSCR], I2CM_MASTEROP           ;do we even have control of the bus?
 00C1                   ;jz    notBusMasterErr
 00C1 5DD9          mov   A, reg[I2CHW_MSCR]                               ;read the mscr register to look for pending master operations
 00C3 210F          and   A, 0x0f                                          ;only look at the lower bits
 00C5 A011              jz    BusIdleSendStart
 00C7                   ; for a single master system this should not be an issue,
 00C7                   ; so we'll go ahead and request the restart.  If a stop condition was already generated
 00C7                   ; the state machine will automatically generate a start instead.
 00C7           
 00C7                   ;SetI2CHW_SCR I2CM_RESTRT
 00C7               ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
 00C7                   ;SetI2CHW_SCR          I2C_TX                                ;even though the restart has been requested the state
 00C7                   ;mov      reg[I2CHW_SCR], I2C_TX                   ;even though the restart has been requested the state
 00C7           
 00C7           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x01
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_MSCR], I2CM_RESTRT   ; write data to reg[I2C_MSCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 00C7 62D902            mov  reg[I2CHW_MSCR], I2CM_RESTRT   ; write data to reg[I2C_MSCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                ;ENDIF
 00CA 49D704        tst   reg[I2CHW_SCR], I2C_TX
 00CD B005          jnz   I2C_RestartRecieve
 00CF           
 00CF           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], I2C_TX    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 00CF 62D704            mov   reg[I2CHW_SCR], I2C_TX ; write data to reg[I2C_SCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_SCR], I2C_TX                          ;send Ack
                ;ENDIF
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00D2 7F            ret
 00D3           I2C_RestartRecieve:
 00D3           
 00D3           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 00D3 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_SCR], 0                               ;send Ack
                ;ENDIF
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00D6 7F           ret
 00D7           
 00D7           BusIdleSendStart:
 00D7 5100         mov    A, [I2CHW_SlaveAddr]
 00D9 9070         call   I2C_DoStart
 00DB              ;Since something appears to be messed up do the next best thing to a repeat start, send a start.
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00DB 7F           ret
 00DC           
 00DC           .ENDSECTION
 00DC           
 00DC           .SECTION
 00DC           
 00DC           ;-----------------------------------------------------------------------------
 00DC           ;  FUNCTION NAME: I2CHW_fSendRepeatStart
 00DC           ;
 00DC           ;  DESCRIPTION:
 00DC           ;    Send repeated start condition and send slave address.
 00DC           ;
 00DC           ;-----------------------------------------------------------------------------
 00DC           ;
 00DC           ;  ARGUMENTS:
 00DC           ;    I2CHW_bAddr - Contains the slave address and transfer direction.
 00DC           ;
 00DC           ;  RETURNS:
 00DC           ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
 00DC           ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
 00DC           ;    Returns a zero if the repeat start results in a NAK by an addressed device.
 00DC           ;
 00DC           ;  SIDE EFFECTS:
 00DC           ;    The A and X registers may be modified by this or future implementations
 00DC           ;    of this function.  The same is true for all RAM page pointer registers in
 00DC           ;    the Large Memory Model.  When necessary, it is the calling function's
 00DC           ;    responsibility to perserve their values across calls to fastcall16 
 00DC           ;    functions.
 00DC           ;          
 00DC           ;    Currently only the page pointer registers listed below are modified: 
 00DC           ;          CUR_PP
 00DC           ;
 00DC           ;  THEORY of OPERATION or PROCEDURE:
 00DC           ;    Prepare to send start by setting SCl and SDA high.
 00DC           ;    must be followed directly by I2CHW_start.
 00DC           ;
 00DC           ;-----------------------------------------------------------------------------
 00DC            I2CHW_fSendRepeatStart:
 00DC           _I2CHW_fSendRepeatStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_bStatus
                   ENDIF
                    ;wait if the bus is already busy...
 00DC 08            push  A
 00DD 550000        mov   [I2CHW_bStatus], 0x00
 00E0           I2CMSCR_NotReady4:
 00E0 5100          mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
 00E2 470080        tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
 00E5               ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
 00E5               ;and   A, 0x0f                                           ;only look at the lower bits
 00E5                     ;For multi master operations, a pening start or restart
 00E5                     ;request might be OK, the master might be waiting to
 00E5                     ;acquire the bus from another master
 00E5 BFFA          jnz   I2CMSCR_NotReady4
 00E7 18            pop   A
 00E8           
 00E8           
 00E8 64            asl   a                                                ; Shift address to the left
 00E9 79            dec   x                                                ; If zero, C flag will be set
 00EA C003          jc    I2C_DoRepeatStart                                ; Do a write if zero
 00EC 2901          or    a,0x01                                           ; Set Read flag
 00EE           
 00EE           I2C_DoRepeatStart:
 00EE               ;here the path through the routine is dependent on the previous transmission.
 00EE                   ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
 00EE                   ; I2C interrupt
 00EE                   ; 2. the master must NAK the byte if he is reading from the slave.
 00EE                   ; We don't have to look at the status of the I2C block to see what is going on because if there was a
 00EE                   ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
 00EE                   ; by setting the master restart bit and writing to I2C_SCR (I2C_TX)
 00EE                   ; if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
 00EE                   ; I2C_SCR reg.  (same as if we were writing to slave).
 00EE                   ;
 00EE 60D8          mov   reg[I2CHW_DR], A
 00F0 5300          mov   [I2CHW_SlaveAddr], A
 00F2 49D904        tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
 00F5 A01C          jz    notBusMaster1
 00F7               ;SetI2CHW_MSCR  I2CM_RESTRT
 00F7               ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
 00F7               ;SetI2CHW_SCR         I2C_TX                           ;even though the restart has been requested the state
 00F7               ;mov      reg[I2CHW_SCR], I2C_TX                       ;even though the restart has been requested the state
 00F7                                                                           ; machine is stalling the SCL and has to be 'released'
 00F7           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x01
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_MSCR], I2CM_RESTRT   ; write data to reg[I2C_MSCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 00F7 62D902            mov  reg[I2CHW_MSCR], I2CM_RESTRT   ; write data to reg[I2C_MSCR]
                ENDIF
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 00FA 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                ;    mov   reg[I2CHW_SCR], 0                               ;getting a restart out requires a 0 into the SCR reg
                ;ENDIF
                
 00FD           WaitRepStrtCompl:
 00FD 5DD7          mov   A,  reg[I2CHW_SCR]
 00FF 49D701        tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
 0102 AFFA          jz    WaitRepStrtCompl
 0104 49D702        tst   reg[I2CHW_SCR], I2C_LST_BIT
 0107 B007          jnz   Err_Exit_RepStart
 0109 550001        mov   [I2CHW_bStatus], 0x01
 010C 5001          mov   A, 01
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 010E 7F            ret
 010F           
 010F           Err_Exit_RepStart:
 010F 5000          mov   A, 0
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0111 7F            ret
 0112           
 0112            notBusMaster1:
 0112               ;SetI2CHW_MSCR 0
 0112               ;mov reg[I2CHW_MSCR], 0                                ;we certainly cant restart if we've not Master
 0112               ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
 0112 5000          mov   A, 0
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0114 7F            ret
 0115           
 0115           .ENDSECTION
 0115           
 0115           .SECTION
 0115           ;-----------------------------------------------------------------------------
 0115           ;  FUNCTION NAME: I2CHW_fSendStart
 0115           ;
 0115           ;  DESCRIPTION:
 0115           ;    Generates start condition and sends slave address.
 0115           ;
 0115           ;-----------------------------------------------------------------------------
 0115           ;
 0115           ;  ARGUMENTS:
 0115           ;    A => Contains the slave address.
 0115           ;
 0115           ;  RETURNS:
 0115           ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
 0115           ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
 0115           ;    Returns a zero if the repeat start results in a NAK by an addressed device.
 0115           ;
 0115           ;  SIDE EFFECTS:
 0115           ;    The A and X registers may be modified by this or future implementations
 0115           ;    of this function.  The same is true for all RAM page pointer registers in
 0115           ;    the Large Memory Model.  When necessary, it is the calling function's
 0115           ;    responsibility to perserve their values across calls to fastcall16 
 0115           ;    functions.
 0115           ;          
 0115           ;    Currently only the page pointer registers listed below are modified: 
 0115           ;          CUR_PP
 0115           ;
 0115           ;  THEORY of OPERATION or PROCEDURE:
 0115           ;   Send start by setting SDA low while SCL is high. Set
 0115           ;   SCL low in preparation to send address. 
 0115           ;   Sends address, waits for byte complete
 0115           ;   An address must be followed by a read or write of data if it was acked by a slave
 0115           ;
 0115           ;  WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
 0115           ;   flag is set to return.
 0115           ;
 0115           ;
 0115           ;-----------------------------------------------------------------------------
 0115            I2CHW_fSendStart:
 0115           _I2CHW_fSendStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_bStatus
                   ENDIF
                    ;wait if the bus is already busy...
 0115 08            push  A
 0116 550000        mov   [I2CHW_bStatus], 0x00
 0119           I2CMSCR_NotReady5:
 0119 5100          mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
 011B 470080        tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
 011E               ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
 011E               ;and   A, 0x0f                                           ;only look at the lower bits
 011E                     ;For multi master operations, a pening start or restart
 011E                     ;request might be OK, the master might be waiting to
 011E                     ;acquire the bus from another master
 011E BFFA          jnz   I2CMSCR_NotReady5
 0120 18            pop   A
 0121           
 0121           
 0121               ; disable the interrupt
 0121                   ; *** NOT REENABLED ***
 0121                   ;
 0121 41DEFE        and   reg[I2CHW_INT_REG], ~I2CHW_INT_MASK              ; disable specified interrupt enable bit
 0124 49D701        tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ;If there is a pending BYTE_COMPL here
 0127                                                                           ;it is highly probable that a start is not the
 0127                                                                                                                               ;correct thing to do.
 0127                                                                                                                               ;leaving
 0127 B020          jnz   Err_Exit_Start
 0129           
 0129 64            asl   a                                                ; Shift address to the left
 012A 79            dec   x                                                ; If zero, C flag will be set
 012B C003          jc    I2C_SndWRStart                                   ; Do a write if zero
 012D 2901          or    a,0x01                                           ; Set Read flag
 012F           I2C_SndWRStart:
 012F 60D8          mov   reg[I2CHW_DR], A
 0131 5300          mov   [I2CHW_SlaveAddr], A
 0133               ;SetI2CHW_MSCR, I2CM_SNDSTRT
 0133               ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
 0133           
 0133           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x01
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_MSCR], I2CM_SNDSTRT   ; write data to reg[I2C_MSCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0133 62D901            mov  reg[I2CHW_MSCR], I2CM_SNDSTRT   ; write data to reg[I2C_MSCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                ;ENDIF
                
                
 0136           WaitStrtByteCompl:
 0136 5DD7          mov   A,  reg[I2CHW_SCR]
 0138 49D701        tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
 013B AFFA          jz    WaitStrtByteCompl
 013D 49D702        tst   reg[I2CHW_SCR], I2C_LST_BIT
 0140 B007          jnz   Err_Exit_Start
 0142 550001        mov   [I2CHW_bStatus], 0x01
 0145 5001          mov   A, 01
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0147 7F            ret
 0148           Err_Exit_Start:
 0148 5000          mov   A, 0
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 014A 7F            ret
 014B           
 014B           I2C_DoStart:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_SlaveAddr
                   ENDIF
                    ;here we are not required to test for master operation since we are only attempting to gain control of the bus
                    ; by attempting to assert a Start
                    
 014B 60D8          mov   reg[I2CHW_DR], A
 014D 5300          mov   [I2CHW_SlaveAddr], A
 014F               ;SetI2CHW_MSCR  I2CM_SNDSTRT
 014F               ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
 014F           
 014F           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x01
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_MSCR], I2CM_SNDSTRT   ; write data to reg[I2C_MSCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 014F 62D901            mov  reg[I2CHW_MSCR], I2CM_SNDSTRT   ; write data to reg[I2C_MSCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                ;ENDIF
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0152 7F            ret
 0153           ;
 0153           ;   DO NOT PLACE
 0153           ;   .SECTION
 0153           ;   .ENDSECTION
 0153           ;   _fSendStart USES CODE BELOW
 0153           ;
 0153           ;-----------------------------------------------------------------------------
 0153           ;  FUNCTION NAME: I2CHW_fWrite
 0153           ;
 0153           ;  DESCRIPTION:
 0153           ;    Writes a byte to the I2C master bus.
 0153           ;
 0153           ;-----------------------------------------------------------------------------
 0153           ;
 0153           ;  ARGUMENTS:
 0153           ;    A contains Data to be written to I2C slave.
 0153           ;
 0153           ;  RETURNS:
 0153           ;    1 If ACKed, else 0
 0153           ;
 0153           ;  SIDE EFFECTS:
 0153           ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0153           ;
 0153           ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 0153           ;
 0153           ;  FUNCTION NAME: I2CHW_fWrite
 0153           ;
 0153           ;  DESCRIPTION:
 0153           ;    Writes a data byte to the I2C master bus. 
 0153           ;
 0153           ;  ARGUMENTS:
 0153           ;    Reg A contains slave address.
 0153           ;    I2CHW_bData - Contains data to be transmitted.
 0153           ;
 0153           ;  RETURNS:
 0153           ;    I2CHW_bStatus - Cleared if a slave responds to a request. Set otherwise
 0153           ;
 0153           ;  SIDE EFFECTS:
 0153           ;    The A and X registers may be modified by this or future implementations
 0153           ;    of this function.  The same is true for all RAM page pointer registers in
 0153           ;    the Large Memory Model.  When necessary, it is the calling function's
 0153           ;    responsibility to perserve their values across calls to fastcall16 
 0153           ;    functions.
 0153           ;          
 0153           ;    Currently only the page pointer registers listed below are modified: 
 0153           ;          CUR_PP
 0153           ;
 0153           ;    Send data byte to slave. .
 0153           ;
 0153           ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
 0153           ;    flag is set to return.
 0153           ;
 0153            I2CHW_fWrite:
 0153           _I2CHW_fWrite:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_bStatus
                   ENDIF
                    ; disable the interrupt
                        ; *** NOT REENABLED ***
                        ;
 0153 60D8          mov   reg[I2CHW_DR],A                                  ; Put data in Data Reg
 0155 41DEFE        and   reg[I2CHW_INT_REG], ~I2CHW_INT_MASK              ; disable specified interrupt enable bit
 0158 5DD9          mov   A,  reg[I2CHW_MSCR]                              ;MSCR into A incase there is an error here
 015A 49D904        tst   reg[I2CHW_MSCR],I2CM_MASTEROP                    ;Do we have control of the bus?
 015D A019          jz    Err_Exit_fWrite
 015F           
 015F 550000        mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
 0162               ;SetI2CHW_SCR I2C_TX
 0162               ;mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
 0162           
 0162           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], I2C_TX    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 0162 62D704            mov   reg[I2CHW_SCR], I2C_TX ; write data to reg[I2C_SCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
                ;ENDIF
                
                
 0165           I2CHW_write:
 0165           _I2CHW_write:
 0165           ;    mov   reg[I2CHW_SCR],A                                ; Put data in bData
 0165           ;   jmp   I2CHW_get_ack                                    ; This jump is not required since it falls
 0165           
 0165           WaitTXByteCompl:
 0165 5DD7          mov   A, reg[I2CHW_SCR]
 0167 49D701        tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
 016A AFFA          jz    WaitTXByteCompl
 016C 49D702        tst   reg[I2CHW_SCR], I2C_LST_BIT
 016F B007          jnz   Err_Exit_fWrite
 0171 5500FF        mov   [I2CHW_bStatus], 0xff
 0174 5001          mov   A, 01
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0176 7F            ret
 0177           
 0177           Err_Exit_fWrite:
 0177 5000          mov   A, 0
 0179 5300          mov   [I2CHW_bStatus], A
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 017B 7F            ret
 017C           
 017C           .ENDSECTION
 017C           
 017C           .SECTION
 017C           ;-----------------------------------------------------------------------------
 017C           ;  FUNCTION NAME: I2CHW_get_ack
 017C           ;
 017C           ;  DESCRIPTION:
 017C           ;    Get slave acknowledge response. Used to poll for I2C_BYTE_COMPL and then test Ack (I2C_LST_BIT)
 017C           ;
 017C           ;-----------------------------------------------------------------------------
 017C           ;
 017C           ;  ARGUMENTS:
 017C           ;
 017C           ;  RETURNS:
 017C           ;    Sets flag in I2CHW_bStatus if ACKed by Slave.  !!!
 017C           ;
 017C           ;  SIDE EFFECTS:
 017C           ;    The A and X registers may be modified by this or future implementations
 017C           ;    of this function.  The same is true for all RAM page pointer registers in
 017C           ;    the Large Memory Model.  When necessary, it is the calling function's
 017C           ;    responsibility to perserve their values across calls to fastcall16 
 017C           ;    functions.
 017C           ;          
 017C           ;    Currently only the page pointer registers listed below are modified: 
 017C           ;          CUR_PP
 017C           ;
 017C           ;    Do the ack clock and check for Slave ACK
 017C           ;
 017C           I2CHW_get_ack:
 017C           _I2CHW_get_ack:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_bStatus
                   ENDIF
 017C 2600FE        and [I2CHW_bStatus], ~I2CHW_SLAVE_ACKed
 017F 49D701        tst reg[I2CHW_SCR], I2C_BYTE_COMPL
 0182 BFF9          jnz I2CHW_get_ack
 0184 49D702        tst reg[I2CHW_SCR], I2C_LST_BIT
 0187 B004          jnz notAcked
 0189 2E0001        or [I2CHW_bStatus], I2CHW_SLAVE_ACKed
 018C           notAcked:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 018C 7F            ret
 018D           
 018D           .ENDSECTION
 018D           
 018D           .SECTION
 018D           
 018D           ;-----------------------------------------------------------------------------
 018D           ;  FUNCTION NAME: I2CHW_bRead
 018D           ;
 018D           ;  DESCRIPTION:
 018D           ;    Reads 1 data byte from the I2C master bus.
 018D           ;
 018D           ;-----------------------------------------------------------------------------
 018D           ;
 018D           ;  ARGUMENTS:
 018D           ;    Reg A Contains the Slave Address.
 018D           ;    I2CHW_bStatus - Set for no ack to be followed by stop.
 018D           ;    Clear for ack to indicate more data to follow.
 018D           ;
 018D           ;  RETURNS:
 018D           ;    I2CHW_bData - Contains received data.
 018D           ;
 018D           ;  SIDE EFFECTS:
 018D           ;    The A and X registers may be modified by this or future implementations
 018D           ;    of this function.  The same is true for all RAM page pointer registers in
 018D           ;    the Large Memory Model.  When necessary, it is the calling function's
 018D           ;    responsibility to perserve their values across calls to fastcall16 
 018D           ;    functions.
 018D           ;          
 018D           ;    Currently only the page pointer registers listed below are modified: 
 018D           ;          CUR_PP
 018D           ;
 018D           ;    Must be followed by I2CHW_put_ack.
 018D           ;    The I2CHW interrupt should be disabled since this routine will poll the
 018D           ;    reg[I2CHW_SCR] to determine when a byte is available
 018D           ;
 018D           ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
 018D           ;    flag is set to return.
 018D           ;
 018D           I2CHW_bRead:
 018D           _I2CHW_bRead:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_bStatus
                   ENDIF
                    ; disable the interrupt
                    ; *** NOT REENABLED ***
                    ;
 018D 41DEFE        and   reg[I2CHW_INT_REG], ~I2CHW_INT_MASK              ; disable specified interrupt enable bit
 0190 49D904        tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
 0193 A028          jz    notBusMaster2
 0195           
 0195 550000        mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
 0198               ;or    I2CHW_SEND_ACK                                  ; Set ACK flag
 0198           ;
 0198           ; Check for the special case of the first read after and address is sent
 0198           ;
 0198           
 0198 08            push  A                                                ;preserve the information about wether to ACK or NAK this byte
 0199 5DD7          mov   A, reg[I2CHW_SCR]
 019B 49D708        tst   reg[I2CHW_SCR], I2C_ADDRIN
 019E A004          jz    WaitRXByteCompl                                  ;addr bit not set then this is a normal read
 01A0               ;SetI2CHW_SCR 0
 01A0               ;mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
 01A0           
 01A0           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 01A0 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                ;ENDIF
                                                                           ; through to I2CHW_put_ack.
                
                    ;must DROP through to send an Ack and another byte,
                    ;to stop reading we NAK the slave
 01A3           WaitRXByteCompl:
 01A3 49D701        tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
 01A6 AFFC          jz    WaitRXByteCompl
 01A8           
 01A8 18            pop   A                                                ;recover the saved ACK/NAK flag
 01A9 21FF          and   A,0xFF                                           ; Is Ack flag set"
 01AB A00A          jz    exit_bRead_NOACK                                 ; Don't ACK
 01AD           
 01AD                   ;now if the ACK flag was set, Ack the data which will release the bus and start the next byte in
 01AD                   ;otherwise do NOTHING to the SCR reg.  This will allow the calling routine to generate a repeat start
 01AD                   ;or a stop depending on it's preference.
 01AD           
 01AD           
 01AD 5DD8          mov   A, reg[I2CHW_DR]                                 ; Record data received
 01AF               ;SetI2CHW_SCR I2C_ACKOUT
 01AF               ;mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
 01AF           
 01AF           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], I2C_ACKOUT    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 01AF 62D710            mov   reg[I2CHW_SCR], I2C_ACKOUT ; write data to reg[I2C_SCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
                ;ENDIF
                
 01B2 550001        mov   [I2CHW_bStatus],0x01                             ; Clear ACK flag
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01B5 7F            ret
 01B6           
 01B6           exit_bRead_NOACK:
 01B6 5DD8          mov   A, reg[I2CHW_DR]                                 ; Record data received
 01B8               ; send no Ack or Nak, the calling routine will have to decide to NAK or execute a repeat start.
 01B8               ; sending nothing leaves the bus held in wait until a decision is made.
 01B8 550000        mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01BB 7F            ret
 01BC           
 01BC           notBusMaster2:
 01BC 5500FF       mov   [I2CHW_bStatus], 0xff
 01BF              ;SetI2CHW_SCR 0
 01BF              ;mov          reg[I2CHW_MSCR], 0                        ;we certainly cant restart if we've not Master
 01BF              ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01BF 7F           ret
 01C0           
 01C0           .ENDSECTION
 01C0           
 01C0           
 01C0           .SECTION
 01C0           ;-----------------------------------------------------------------------------
 01C0           ;  FUNCTION NAME: I2CHW_SendStop
 01C0           ;
 01C0           ;  DESCRIPTION:
 01C0           ;    Assert stop condition.
 01C0           ;
 01C0           ;-----------------------------------------------------------------------------
 01C0           ;
 01C0           ;  ARGUMENTS: none
 01C0           ;
 01C0           ;  RETURNS: none
 01C0           ;
 01C0           ;  SIDE EFFECTS:
 01C0           ;    The A and X registers may be modified by this or future implementations
 01C0           ;    of this function.  The same is true for all RAM page pointer registers in
 01C0           ;    the Large Memory Model.  When necessary, it is the calling function's
 01C0           ;    responsibility to perserve their values across calls to fastcall16 
 01C0           ;    functions.
 01C0           ;
 01C0           ;  THEORY of OPERATION or PROCEDURE:
 01C0           ;     Send stop by releasing SDA high while SCL high. When in Master Read Mode, this
 01C0           ;     is done by nak'ing a read from the slave, in Master Write Mode this is done by clearing
 01C0           ;     the I2C_TX bit in  reg[I2CHW_SCR].  In either case this is a zero written to
 01C0           ;     reg[I2CHW_SCR].
 01C0           ;
 01C0            I2CHW_SendStop:
 01C0           _I2CHW_SendStop:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01C0 49D904        tst   reg[I2CHW_MSCR], I2CM_MASTEROP                   ;do we even have control of the bus?
 01C3 A004          jz    notBusMaster3
 01C5               ;SetI2CHW_SCR 0
 01C5               ;mov  reg[I2CHW_SCR], 0
 01C5           ;IF I2CHW_THROTTLE_CLK_RATE
                IF I2CHW_THROTTLE_CLK_RATE
                        or    F, FLAG_XIO_MASK            ; set bank1
                        push  X
                        mov   X, A                        ; if data for I2C_SCR was in A save it in X
                        mov   A, reg[OSC_CR0]             ;
                        push  A
                        and   A, ~0x07
                        or    A, 0x1
                        mov   reg[OSC_CR0], A             ; throttle the clock down to 6Mhz
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if the operation uses data in A get it out of X
                        mov   reg[I2CHW_SCR], 0    ; write data to reg[I2C_SCR]
                        or    F, FLAG_XIO_MASK            ; set bank1
                        pop   A                           ; restore original clock speed
                        mov   reg[OSC_CR0], A
                        and   F, ~FLAG_XIO_MASK           ; set bank0
                        mov   A, X                        ; if A was data restore it from X now
                        pop   X                           ; restore original accumulator
                ELSE
 01C5 62D700            mov   reg[I2CHW_SCR], 0 ; write data to reg[I2C_SCR]
                ENDIF
                ;ELSE
                ;    mov   reg[I2CHW_SCR], 0                               ; Put data in Data Reg
                ;ENDIF
                
 01C8           notBusMaster3:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01C8 7F            ret
 01C9           .ENDSECTION
 01C9           
 01C9           .SECTION
 01C9           ;-----------------------------------------------------------------------------
 01C9           ;  FUNCTION NAME: I2CHW_bReadBusStatus
 01C9           ;
 01C9           ;  DESCRIPTION:
 01C9           ;     Returns the Status bits in the bStatus Register
 01C9           ;
 01C9           ;-----------------------------------------------------------------------------
 01C9           ;
 01C9           ;  ARGUMENTS:
 01C9           ;
 01C9           ;  RETURNS:
 01C9           ;     BYTE  bStatus -  Bus status data.  Use the following defined bits
 01C9           ;     returned in A.
 01C9           ;       I2CHW_RepStart:                     equ  0x01
 01C9           ;       I2CHW_NoStop:                       equ  0x02
 01C9           ;       I2CHW_NAKnextWr:                    equ  0x04
 01C9           ;
 01C9           ;  SIDE EFFECTS:
 01C9           ;    The A and X registers may be modified by this or future implementations
 01C9           ;    of this function.  The same is true for all RAM page pointer registers in
 01C9           ;    the Large Memory Model.  When necessary, it is the calling function's
 01C9           ;    responsibility to perserve their values across calls to fastcall16 
 01C9           ;    functions.
 01C9           ;          
 01C9           ;  THEORY of OPERATION or PROCEDURE:
 01C9           ;     Read the Bus Status register.
 01C9           ;
 01C9           
 01C9            I2CHW_bReadBusStatus:
 01C9           _I2CHW_bReadBusStatus:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      mov reg[CUR_PP], >I2CHW_bStatus
                   ENDIF
 01C9 5100         mov   A, [I2CHW_bStatus]                      ;return the status in A
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01CB 7F           ret
 01CC           
 01CC           .ENDSECTION
 01CC           
                IF SYSTEM_SMALL_MEMORY_MODEL
 01CC           .SECTION
 01CC           ;-----------------------------------------------------------------------------
 01CC           ;  FUNCTION NAME: I2CHW_fReadBytes
 01CC           ;
 01CC           ;  DESCRIPTION:
 01CC           ;
 01CC           ;-----------------------------------------------------------------------------
 01CC           ;
 01CC           ;  ARGUMENTS:
 01CC           ;      A => Address of slave
 01CC           ;      X => Pointer to other arguments.
 01CC           ;    [x] => LSB of Array address to put data in.
 01CC           ;  [X-1] => MSB of Array address to put data in (ignorned)
 01CC           ;  [X-2] => Count of bytes to read.
 01CC           ;  [X-3] => Mode flags that allow the programmer to set flags
 01CC           ;           to determine if:
 01CC           ;             0x01 => Use RepeatStart instead of Start
 01CC           ;             0x02 => Don't send Stop
 01CC           ;
 01CC           ;  RETURNS:       None
 01CC           ;
 01CC           ;  SIDE EFFECTS:
 01CC           ;    The A and X registers may be modified by this or future implementations
 01CC           ;    of this function.  The same is true for all RAM page pointer registers in
 01CC           ;    the Large Memory Model.  When necessary, it is the calling function's
 01CC           ;    responsibility to perserve their values across calls to fastcall16 
 01CC           ;    functions.
 01CC           ;          
 01CC           ;    Currently only the page pointer registers listed below are modified: 
 01CC           ;          CUR_PP
 01CC           ;
 01CC           ;  THEORY of OPERATION or PROCEDURE:
 01CC           ;    I2C and block must be operational.
 01CC           ;    This routine will enable the I2C interrupt!
 01CC           ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
 01CC           ;    pend on the ISR_ACTIVE bit until it can run
 01CC           ;
                IF      (TOOLCHAIN & HITECH)
                RxArray:      set   0
                RxByteCount:  set  -2
                RxMode:       set  -3
                ELSE
 0000           RxArray:      equ   0
 FFFFFFFE           RxByteCount:  equ  -2
 FFFFFFFD           RxMode:       equ  -3
                ENDIF
                
                
 01CC            I2CHW_fReadBytes:
 01CC 08            push  A
 01CD           I2CMSCR_NotReady1Smm:
 01CD 5100              mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
 01CF 470080            tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
 01D2               ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
 01D2               ;and   A, 0x0f                                           ;only look at the lower bits
 01D2                     ;For multi master operations, a pening start or restart
 01D2                     ;request might be OK, the master might be waiting to
 01D2                     ;acquire the bus from another master
 01D2 BFFA              jnz   I2CMSCR_NotReady1Smm
 01D4 18            pop   A
 01D5 2E0080            or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared by ISR
 01D8 64            asl   A                                                ; Shift address to the left to make
 01D9                                                                      ; a complete byte with the R/W bit.
 01D9 2901          or    A,0x01                                           ; OR the address with the Read bit.
 01DB 5300          mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
 01DD 60D8          mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
 01DF 550000        mov   [I2CHW_bStatus],0x00                             ; Clear all flags
 01E2 52FD          mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
 01E4 5300          mov   [I2CHW_bStatus],A
 01E6               ;
 01E6                   ;we must now initialize a read buffer using I2CHW_InitWrite
 01E6                   ;
 01E6 10                push   X                                                ;preserve since it's used later
 01E7 52FE              mov    A, [X+RxByteCount]                               ;get the write buf size
 01E9 08                push   A
 01EA 08                push   A                                                                                            ;this will be ignored
 01EB 5200              mov    A, [X+RxArray]                                   ;get the write buf addr
 01ED 08                push   A
 01EE 4F                mov    X, sp
 01EF 79                dec    X
 01F0 9000              call  I2CHW_InitWrite                              ;sets the addr and byte count to write to
 01F2 38FD              add SP, -3
 01F4 20                pop X                                                   ;restore X to be used for the rest of this routine
 01F5           
 01F5 5100          mov   A,[I2CHW_SlaveAddr]
 01F7 48FD01        tst   [x+RxMode],I2CHW_RepStart
 01FA B00A          jnz   DoRestartRxSmm
 01FC 49D701        tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
 01FF B005          jnz   DoRestartRxSmm
 0201 9F48          call  I2C_DoStart                                      ; Send a start and address.
 0203 8003          jmp   CheckRxAckSmm
 0205           DoRestartRxSmm:
 0205 9EB6          call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
 0207                   ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
 0207                   ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
 0207                   ; as a whole be able to detect that a stop has not been sent previously in this transmission.
 0207           
 0207           CheckRxAckSmm:                                                ; Test to see if Slave ACKed
 0207                   ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
 0207                   ;is finished.
 0207           ;End_RD:
 0207 7F            ret
 0208           
 0208           .ENDSECTION
 0208           
 0208           .SECTION
 0208           ;-----------------------------------------------------------------------------
 0208           ;  FUNCTION NAME: I2CHW_bWriteBytes
 0208           ;
 0208           ;  DESCRIPTION:
 0208           ;    Write multiple data bits to slave device.
 0208           ;
 0208           ;-----------------------------------------------------------------------------
 0208           ;
 0208           ;  ARGUMENTS:
 0208           ;     A => Address of slave
 0208           ;     X => Pointer to other arguments.
 0208           ;   [x] => LSB of Array address to put data in.
 0208           ; [X-1] => MSB of Array address to put data in (ignorned)
 0208           ; [X-2] => Count of bytes to write.
 0208           ; [X-3] => Mode flags that allow the programmer to set flags
 0208           ;          to determine if:
 0208           ;              0x01 => Use RePeatStart instead of Start
 0208           ;              0x02 => Don't send Stop
 0208           ;
 0208           ;
 0208           ;  RETURNS:     None
 0208           ;
 0208           ;  SIDE EFFECTS:
 0208           ;    The A and X registers may be modified by this or future implementations
 0208           ;    of this function.  The same is true for all RAM page pointer registers in
 0208           ;    the Large Memory Model.  When necessary, it is the calling function's
 0208           ;    responsibility to perserve their values across calls to fastcall16 
 0208           ;    functions.
 0208           ;          
                IF      (TOOLCHAIN & HITECH)
                TxArray:      set   0
                TxByteCount:  set  -2
                TxMode:       set  -3
                ELSE
 0000           TxArray:      equ   0
 FFFFFFFE           TxByteCount:  equ  -2
 FFFFFFFD           TxMode:       equ  -3
                ENDIF
                
 0208            I2CHW_bWriteBytes:
 0208 08            push  A
 0209           I2CMSCR_NotReady2Smm:
 0209 5100              mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
 020B 470080            tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
 020E               ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
 020E               ;and   A, 0x0f                                           ;only look at the lower bits
 020E                     ;For multi master operations, a pening start or restart
 020E                     ;request might be OK, the master might be waiting to
 020E                     ;acquire the bus from another master
 020E BFFA              jnz   I2CMSCR_NotReady2Smm
 0210 18            pop   A
 0211 2E0080            or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared at end of ISR
 0214 64            asl   A                                                ; Shift address to the left to make
 0215                                                                      ; a complete byte with the R/W bit.
 0215                                                                      ; The ASL takes care of clearing bit 0.
 0215 550000        mov   [I2CHW_bStatus],0x00                             ; Clear all flags
 0218 5300          mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
 021A 60D8          mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
 021C 52FD          mov   A, [X+TxMode]                                                             ; place the TxMode in status so ISR can access it
 021E 5300          mov   [I2CHW_bStatus],A
 0220               ;
 0220                   ;we must now initialize a read buffer using I2CHW_InitWrite
 0220                   ;
 0220 10                push   X                                                ;preserve since it's used later
 0221 77FE              inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
 0223                                                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
 0223 52FE              mov    A, [X+TxByteCount]                               ;get the write buf size
 0225 08                push   A
 0226 08                push   A                                                                                            ;this will be ignored
 0227 5200              mov    A, [X+TxArray]                                   ;get the write buf addr
 0229 08                push   A
 022A 4F                mov    X, sp
 022B 79                dec    X
 022C 9000              call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
 022E 38FD              add    SP, -3
 0230 20                pop    X                                                ;restore X to be used for the rest of this routine
 0231               ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
 0231           
 0231           
 0231 5100          mov   A,[I2CHW_SlaveAddr]
 0233 48FD01        tst   [x+TxMode],I2CHW_RepStart
 0236 B00A          jnz   DoRestartTxSmm
 0238 49D701        tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
 023B BFC9          jnz   DoRestartRxSmm
 023D 9F0C          call  I2C_DoStart                                      ; Send a start and address.
 023F 8003          jmp   DoTxAckSmm
 0241           DoRestartTxSmm:
 0241 9E7A          call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
 0243           DoTxAckSmm:
 0243           
 0243           
 0243           ;WriteSlaveAck:
 0243 7F            ret
 0244           
 0244           .ENDSECTION
 0244           
 0244           .SECTION
 0244           ;-----------------------------------------------------------------------------
 0244           ;  FUNCTION NAME: I2CHW_bWriteCBytes
 0244           ;
 0244           ;  DESCRIPTION:
 0244           ;    Write multiple data bits to slave device from ROM
 0244           ;
 0244           ;-----------------------------------------------------------------------------
 0244           ;
 0244           ;  ARGUMENTS:
 0244           ;      A => Address of slave
 0244           ;      X => Pointer to other arguments.
 0244           ;     [x] => LSB of ROM Array address to put data in.
 0244           ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
 0244           ;   [X-2] => Count of bytes to write.
 0244           ;   [X-3] => Mode flags that allow the programmer to set flags
 0244           ;            to determine if:
 0244           ;               0x01 => Use RepeatStart instead of Start
 0244           ;               0x02 => Don't send Stop
 0244           ;
 0244           ;  RETURNS:
 0244           ;    None
 0244           ;
 0244           ;  SIDE EFFECTS:
 0244           ;    The A and X registers may be modified by this or future implementations
 0244           ;    of this function.  The same is true for all RAM page pointer registers in
 0244           ;    the Large Memory Model.  When necessary, it is the calling function's
 0244           ;    responsibility to perserve their values across calls to fastcall16 
 0244           ;    functions.
 0244           ;          
                IF      (TOOLCHAIN & HITECH)
                TxCArrayLSB:   set   0
                TxCArrayMSB:   set  -1
                TxCByteCount:  set  -2
                TxCMode:       set  -3
                ELSE
 0000           TxCArrayLSB:   equ   0
 FFFFFFFF           TxCArrayMSB:   equ  -1
 FFFFFFFE           TxCByteCount:  equ  -2
 FFFFFFFD           TxCMode:       equ  -3
                ENDIF
                
 0244            I2CHW_bWriteCBytes:
 0244 08            push  A
 0245           I2CMSCR_NotReady3Smm:
 0245 5100              mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
 0247 470080            tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
 024A               ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
 024A               ;and   A, 0x0f                                           ;only look at the lower bits
 024A                     ;For multi master operations, a pening start or restart
 024A                     ;request might be OK, the master might be waiting to
 024A                     ;acquire the bus from another master
 024A BFFA              jnz   I2CMSCR_NotReady3Smm
 024C 18            pop   A
 024D 2E0080            or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
 0250 64                asl   A                                                 ; Shift address to the left to make
 0251                                                                      ; a complete byte with the R/W bit.
 0251                                                                      ; The ASL takes care of clearing bit 0.
 0251 550000        mov   [I2CHW_bStatus],0x00                             ; Clear all flags
 0254 5300          mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
 0256 60D8          mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
 0258 52FD              mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
 025A 5300          mov   [I2CHW_bStatus],A
 025C               ;
 025C                   ;we must now initialize a read buffer using I2CHW_InitWrite
 025C                   ;
 025C 10                push   X                                                ;preserve X since it's used later
 025D 5000              mov    A, 0                                             ;get the write buf size (this is the hi order part)
 025F 77FE              inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
 0261 D002              jnc     . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
 0263 74                inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
 0264 08                push   A
 0265 52FE              mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
 0267 08                push   A
 0268 52FF              mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
 026A 08                push   A                                                                                        ;this will be ignored
 026B 5200              mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
 026D 08                push   A
 026E 4F                mov    X, sp
 026F 79                dec    X
 0270 9000              call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
 0272 38FC              add SP, -4
 0274 20                pop X                                                   ;restore X to be used for the rest of this routine
 0275               ;or  [I2CHW_RsrcStatus],I2C_READFLASH
 0275 5100          mov   A,[I2CHW_SlaveAddr]
 0277 48FD01        tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
 027A B00A          jnz   DoCRestartTxSmm                                      ; should executed.
 027C 49D701        tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
 027F BF85          jnz   DoRestartRxSmm
 0281 9EC8          call  I2C_DoStart                                      ; Send a start and address.
 0283 8003          jmp   DoCTxAckSmm
 0285           DoCRestartTxSmm:
 0285 9E36          call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
 0287           
 0287           DoCTxAckSmm:                                                   ; Test to see if Slave is ACKed
 0287           
 0287           ;CWriteSlaveAck:
 0287 7F                ret
 0288           
 0288           .ENDSECTION
 0288           
 0288           
                ENDIF    ;SYSTEM_SMALL_MEMORY_MODEL
                
                ; End of File I2CHW.asm
                
                
