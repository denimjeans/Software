FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#897 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.21
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0118)     halt                           ;Stop execution if power falls too low
                                        (0119) 
                                        (0120)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0121)     // call	void_handler
0008: 7E       RETI                     (0122)     reti
                                        (0123) 
                                        (0124)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0125)     // call	void_handler
000C: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0129)     // call	void_handler
0010: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0133)     // call	void_handler
0014: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   18h                      ;VC3 Interrupt Vector
                                        (0137)     // call	void_handler
0018: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 0D 40 LJMP  PSoC_GPIO_ISR      (0141)     ljmp	PSoC_GPIO_ISR
001F: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0145)     // call	void_handler
0020: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0149)     // call	void_handler
0024: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0153)     // call	void_handler
0028: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
                                        (0157)     // call	void_handler
002C: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0161)     // call	void_handler
0030: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0165)     // call	void_handler
0034: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0169)     // call	void_handler
0038: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0173)     // call	void_handler
003C: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0177)     // call	void_handler
0040: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0181)     // call	void_handler
0044: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0185)     // call	void_handler
0048: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0189)     // call	void_handler
004C: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0193)     // call	void_handler
0050: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0197)     // call	void_handler
0054: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0201)     // call	void_handler
0058: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0205)     // call	void_handler
005C: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 07 A4 LJMP  _I2CHW_ISR         (0209)     ljmp	_I2CHW_ISR
0063: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0213)     // call	void_handler
0064: 7E       RETI                     (0214)     reti
0068: 71 10    OR    F,0x10             
                                        (0215) 
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  Start of Execution.
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0220) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0221) ;
                                        (0222) 
                                        (0223) IF	(TOOLCHAIN & HITECH)
                                        (0224)  	AREA PD_startup(CODE, REL, CON)
                                        (0225) ELSE
                                        (0226)     org 68h
                                        (0227) ENDIF
                                        (0228) __Start:
                                        (0229) 
                                        (0230)     ; initialize SMP values for voltage stabilization, if required,
                                        (0231)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0232)     ; least for now. 
                                        (0233)     ;
                                        (0234)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0235)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0236)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0237)     M8C_SetBank0
                                        (0238) 
                                        (0239)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0240)     mov   A, 20h
0074: 28       ROMX                     (0241)     romx
0075: 50 40    MOV   A,0x40             (0242)     mov   A, 40h
0077: 28       ROMX                     (0243)     romx
0078: 50 60    MOV   A,0x60             (0244)     mov   A, 60h
007A: 28       ROMX                     (0245)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0246)     ; %45%20%46%46% End workaround
                                        (0247) 
                                        (0248) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0249) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0250)     M8C_EnableWatchDog
                                        (0251) ENDIF
                                        (0252) 
                                        (0253) IF ( SELECT_32K )
007E: 43 FE 04 OR    REG[0xFE],0x4      (0254)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0255) ELSE
                                        (0256)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0257) ENDIF
                                        (0258) 
                                        (0259)     ;---------------------------
                                        (0260)     ; Set up the Temporary stack
                                        (0261)     ;---------------------------
                                        (0262)     ; A temporary stack is set up for the SSC instructions.
                                        (0263)     ; The real stack start will be assigned later.
                                        (0264)     ;
                                        (0265) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0266)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0267)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0268) 
                                        (0269)     ;-----------------------------------------------
                                        (0270)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0271)     ;-----------------------------------------------
                                        (0272) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0273) 
                                        (0274) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0275)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0276)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0277)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0278)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0279)   IF ( AGND_BYPASS )
                                        (0280)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0281)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0282)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0283)     ; value using the proper trim values.
                                        (0284)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0285)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)   ENDIF
                                        (0287)  ENDIF
                                        (0288) ENDIF ; 5.0 V Operation
                                        (0289) 
                                        (0290) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0291)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0292)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0293)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0294)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0295)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0296)  ENDIF
                                        (0297) ENDIF ; 3.3 Volt Operation
                                        (0298) 
0087: 55 F8 00 MOV   [fReadRTC+204],0x0 (0299)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [fReadRTC+205],0x0 (0300)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0301) 
                                        (0302)     ;---------------------------------------
                                        (0303)     ; Initialize Crystal Oscillator and PLL
                                        (0304)     ;---------------------------------------
                                        (0305) 
                                        (0306) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0307)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0308)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0309)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0310)     ; the ECO to stabilize.
                                        (0311)     ;
                                        (0312)     M8C_SetBank1
008F: 62 E0 9A MOV   REG[0xE0],0x9A     (0313)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0314)     M8C_SetBank0
                                        (0315)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
0097: 43 E0 40 OR    REG[0xE0],0x40     (0316)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
009A: 62 E2 00 MOV   REG[0xE2],0x0      (0317)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0318) .WaitFor1s:
009D: 49 DA 40 TST   REG[0xDA],0x40     (0319)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
00A0: AF FC    JZ    0x009D             (0320)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0321)                                           ;   since interrupts are not globally enabled
                                        (0322) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0323)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0324)     M8C_SetBank1
                                        (0325)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
                                        (0326)     M8C_SetBank0
                                        (0327)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0328) 
                                        (0329) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0330) 
                                        (0331) IF ( PLL_MODE )
                                        (0332)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0333)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0334)     ;
                                        (0335)     M8C_SetBank1
                                        (0336)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0337)     M8C_SetBank0
                                        (0338)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0339)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0340) 
                                        (0341) .WaitFor16ms:
                                        (0342)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0343)     jz   .WaitFor16ms
                                        (0344)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0345)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0346)     M8C_SetBank0
                                        (0347) 
                                        (0348) IF      ( WAIT_FOR_32K )
                                        (0349) ELSE ; !( WAIT_FOR_32K )
                                        (0350)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0351)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0352) ENDIF ;(WAIT_FOR_32K)
                                        (0353) ENDIF ;(PLL_MODE)
                                        (0354) 
                                        (0355) 	;-------------------------------------------------------
                                        (0356)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0357)     ;-------------------------------------------------------
                                        (0358) 
                                        (0359)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0360) 
                                        (0361) IF (SYSCLK_SOURCE)
                                        (0362)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0363) ENDIF
                                        (0364)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0365) 
                                        (0366)     ;------------------------
                                        (0367)     ; Close CT leakage path.
                                        (0368)     ;------------------------
00A2: 62 71 05 MOV   REG[0x71],0x5      (0369)     mov   reg[ACB00CR0], 05h
00A5: 62 75 05 MOV   REG[0x75],0x5      (0370)     mov   reg[ACB01CR0], 05h
00A8: 62 79 05 MOV   REG[0x79],0x5      (0371)     mov   reg[ACB02CR0], 05h
00AB: 62 7D 05 MOV   REG[0x7D],0x5      (0372)     mov   reg[ACB03CR0], 05h
00AE: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0373) 
                                        (0374) 
                                        (0375) IF	(TOOLCHAIN & HITECH)
                                        (0376)     ;---------------------------------------------
                                        (0377)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0378)     ;---------------------------------------------
                                        (0379) 	global		__Lstackps
                                        (0380) 	mov     a,low __Lstackps
                                        (0381) 	swap    a,sp
                                        (0382) 
                                        (0383) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0384)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0385)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0386)     RAM_SETPAGE_CUR 0
                                        (0387)     RAM_SETPAGE_MVW 0
                                        (0388)     RAM_SETPAGE_MVR 0
                                        (0389)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0390)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0391)     ELSE
                                        (0392)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0393)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0394) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0395) ELSE
                                        (0396)     ;---------------------------------------------
                                        (0397)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0398)     ;---------------------------------------------
                                        (0399) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0400)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00B1: 50 00    MOV   A,0x0              (0401)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00B3: 4E       SWAP  SP,A               (0402)     swap  A, SP
00B4: 62 D3 07 MOV   REG[0xD3],0x7      
00B7: 62 D0 00 MOV   REG[0xD0],0x0      
00BA: 62 D5 00 MOV   REG[0xD5],0x0      
00BD: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0403)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0404)     RAM_SETPAGE_CUR 0
                                        (0405)     RAM_SETPAGE_MVW 0
                                        (0406)     RAM_SETPAGE_MVR 0
                                        (0407) 
                                        (0408)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00C0: 71 C0    OR    F,0xC0             (0409)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0410)   ELSE
                                        (0411)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0412)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0413) ELSE
                                        (0414)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0415)     swap  SP, A
                                        (0416) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0417) ENDIF ;	TOOLCHAIN
                                        (0418) 
                                        (0419)     ;-------------------------
                                        (0420)     ; Load Base Configuration
                                        (0421)     ;-------------------------
                                        (0422)     ; Load global parameter settings and load the user modules in the
                                        (0423)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0424)     ; to minimize start up time; (2) We may still need to play with the
                                        (0425)     ; Sleep Timer.
                                        (0426)     ;
00C2: 7C 03 58 LCALL 0x0358             (0427)     lcall LoadConfigInit
                                        (0428) 
                                        (0429)     ;-----------------------------------
                                        (0430)     ; Initialize C Run-Time Environment
                                        (0431)     ;-----------------------------------
                                        (0432) IF ( C_LANGUAGE_SUPPORT )
                                        (0433) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0434)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0435)     mov  [__r0],<__bss_start
                                        (0436) BssLoop:
                                        (0437)     cmp  [__r0],<__bss_end
                                        (0438)     jz   BssDone
                                        (0439)     mvi  [__r0],A
                                        (0440)     jmp  BssLoop
                                        (0441) BssDone:
                                        (0442)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0443)     mov  X,<__idata_start
                                        (0444)     mov  [__r0],<__data_start
                                        (0445) IDataLoop:
                                        (0446)     cmp  [__r0],<__data_end
                                        (0447)     jz   C_RTE_Done
                                        (0448)     push A
                                        (0449)     romx
                                        (0450)     mvi  [__r0],A
                                        (0451)     pop  A
                                        (0452)     inc  X
                                        (0453)     adc  A,0
                                        (0454)     jmp  IDataLoop
                                        (0455) 
                                        (0456) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0457) 
                                        (0458) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00C5: 62 D0 00 MOV   REG[0xD0],0x0      (0459)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0460)                                        ; to use the Virtual Register page.
                                        (0461) 
                                        (0462)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0463)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0464)     ; text segment and may have been relocated by the Code Compressor.
                                        (0465)     ;
00C8: 50 02    MOV   A,0x2              (0466)     mov   A, >__pXIData                ; Get the address of the flash
00CA: 57 51    MOV   X,0x51             (0467)     mov   X, <__pXIData                ;   pointer to the xidata area.
00CC: 08       PUSH  A                  (0468)     push  A
00CD: 28       ROMX                     (0469)     romx                               ; get the MSB of xidata's address
00CE: 53 1A    MOV   [__r0],A           (0470)     mov   [__r0], A
00D0: 18       POP   A                  (0471)     pop   A
00D1: 75       INC   X                  (0472)     inc   X
00D2: 09 00    ADC   A,0x0              (0473)     adc   A, 0
00D4: 28       ROMX                     (0474)     romx                               ; get the LSB of xidata's address
00D5: 4B       SWAP  A,X                (0475)     swap  A, X
00D6: 51 1A    MOV   A,[__r0]           (0476)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0477)                                        ;   XIData structure list in flash
00D8: 80 04    JMP   0x00DD             (0478)     jmp   .AccessStruct
                                        (0479) 
                                        (0480)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0481)     ; values of C variables. Each structure contains 3 member elements.
                                        (0482)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0483)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0484)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0485)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0486)     ; value in the second member element, an unsigned byte:
                                        (0487)     ; (1) If the value of the second element is non-zero, it represents
                                        (0488)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0489)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0490)     ; the bytes are copied to the block of RAM.
                                        (0491)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0492)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0493)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0494) 
                                        (0495) .AccessNextStructLoop:
00DA: 75       INC   X                  (0496)     inc   X                            ; pXIData++
00DB: 09 00    ADC   A,0x0              (0497)     adc   A, 0
00DD: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0498) .AccessStruct:                         ; Entry point for first block
                                        (0499)     ;
                                        (0500)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0501)     ;
                                        (0502)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00E0: 08       PUSH  A                  (0503)     push  A
00E1: 28       ROMX                     (0504)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00E2: 60 D5    MOV   REG[0xD5],A        (0505)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00E4: 74       INC   A                  (0506)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00E5: A0 4B    JZ    0x0131             (0507)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00E7: 18       POP   A                  (0508)     pop   A                            ; restore pXIData to [A,X]
00E8: 75       INC   X                  (0509)     inc   X                            ; pXIData++
00E9: 09 00    ADC   A,0x0              (0510)     adc   A, 0
00EB: 08       PUSH  A                  (0511)     push  A
00EC: 28       ROMX                     (0512)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00ED: 53 1A    MOV   [__r0],A           (0513)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00EF: 18       POP   A                  (0514)     pop   A                            ; restore pXIData to [A,X]
00F0: 75       INC   X                  (0515)     inc   X                            ; pXIData++ (point to size)
00F1: 09 00    ADC   A,0x0              (0516)     adc   A, 0
00F3: 08       PUSH  A                  (0517)     push  A
00F4: 28       ROMX                     (0518)     romx                               ; Get the size (CPU.A <- *pXIData)
00F5: A0 1C    JZ    0x0112             (0519)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00F7: 53 19    MOV   [__r1],A           (0520)     mov   [__r1], A                    ;             else downcount in __r1
00F9: 18       POP   A                  (0521)     pop   A                            ; restore pXIData to [A,X]
                                        (0522) 
                                        (0523) .CopyNextByteLoop:
                                        (0524)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0525)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0526)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0527)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0528)     ;
00FA: 75       INC   X                  (0529)     inc   X                            ; pXIData++ (point to next data byte)
00FB: 09 00    ADC   A,0x0              (0530)     adc   A, 0
00FD: 08       PUSH  A                  (0531)     push  A
00FE: 28       ROMX                     (0532)     romx                               ; Get the data value (CPU.A <- *pXIData)
00FF: 3F 1A    MVI   [__r0],A           (0533)     mvi   [__r0], A                    ; Transfer the data to RAM
0101: 47 1A FF TST   [__r0],0xFF        (0534)     tst   [__r0], 0xff                 ; Check for page crossing
0104: B0 06    JNZ   0x010B             (0535)     jnz   .CopyLoopTail                ;   No crossing, keep going
0106: 5D D5    MOV   A,REG[0xD5]        (0536)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0108: 74       INC   A                  (0537)     inc   A
0109: 60 D5    MOV   REG[0xD5],A        (0538)     mov   reg[ MVW_PP], A
                                        (0539) .CopyLoopTail:
010B: 18       POP   A                  (0540)     pop   A                            ; restore pXIData to [A,X]
010C: 7A 19    DEC   [__r1]             (0541)     dec   [__r1]                       ; End of this array in flash?
010E: BF EB    JNZ   0x00FA             (0542)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0110: 8F C9    JMP   0x00DA             (0543)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0544) 
                                        (0545) .ClearRAMBlockToZero:
0112: 18       POP   A                  (0546)     pop   A                            ; restore pXIData to [A,X]
0113: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
0114: 09 00    ADC   A,0x0              (0548)     adc   A, 0
0116: 08       PUSH  A                  (0549)     push  A
0117: 28       ROMX                     (0550)     romx                               ; Get the run length (CPU.A <- *pXIData)
0118: 53 19    MOV   [__r1],A           (0551)     mov   [__r1], A                    ; Initialize downcounter
011A: 50 00    MOV   A,0x0              (0552)     mov   A, 0                         ; Initialize source data
                                        (0553) 
                                        (0554) .ClearRAMBlockLoop:
                                        (0555)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0556)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0557)     ;
011C: 3F 1A    MVI   [__r0],A           (0558)     mvi   [__r0], A                    ; Clear a byte
011E: 47 1A FF TST   [__r0],0xFF        (0559)     tst   [__r0], 0xff                 ; Check for page crossing
0121: B0 08    JNZ   0x012A             (0560)     jnz   .ClearLoopTail               ;   No crossing, keep going
0123: 5D D5    MOV   A,REG[0xD5]        (0561)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0125: 74       INC   A                  (0562)     inc   A
0126: 60 D5    MOV   REG[0xD5],A        (0563)     mov   reg[ MVW_PP], A
0128: 50 00    MOV   A,0x0              (0564)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0565) .ClearLoopTail:
012A: 7A 19    DEC   [__r1]             (0566)     dec   [__r1]                       ; Was this the last byte?
012C: BF EF    JNZ   0x011C             (0567)     jnz   .ClearRAMBlockLoop           ;   No,  continue
012E: 18       POP   A                  (0568)     pop   A                            ;   Yes, restore pXIData to [A,X] and
012F: 8F AA    JMP   0x00DA             (0569)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0570) 
                                        (0571) .C_RTE_WrapUp:
0131: 18       POP   A                  (0572)     pop   A                            ; balance stack
0132: 71 10    OR    F,0x10             
0134: 70 EF    AND   F,0xEF             
                                        (0573) 
                                        (0574) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0575) 
                                        (0576) C_RTE_Done:
                                        (0577) 
                                        (0578) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0579) 
                                        (0580)     ;-------------------------------
                                        (0581)     ; Voltage Stabilization for SMP
                                        (0582)     ;-------------------------------
                                        (0583) 
                                        (0584) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0585) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0586)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0587)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0588)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0589)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0590)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0591)     M8C_SetBank1
                                        (0592)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0593)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0594)     M8C_SetBank0
                                        (0595)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0596)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0597) .WaitFor2ms:
                                        (0598)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0599)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0600) ENDIF ; SMP is operational
                                        (0601) ENDIF ; 5.0V Operation
                                        (0602) 
                                        (0603)     ;-------------------------------
                                        (0604)     ; Set Power-On Reset (POR) Level
                                        (0605)     ;-------------------------------
                                        (0606) 
                                        (0607)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0608)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0609)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. These
                                        (0610)     ;  values should not be changed from the settings here. Failure to follow this instruction could 
                                        (0611)     ;  lead to corruption of PSoC flash.
                                        (0612) 
                                        (0613)     M8C_SetBank1
                                        (0614) 
                                        (0615) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0616)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0617)  ELSE                                       ;    No, fast mode
                                        (0618)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0619)                                             ;       no, set midpoint POR in user code, if desired
                                        (0620)   ELSE ; 24HMz                              ;
                                        (0621)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0622)   ENDIF ; 24MHz
                                        (0623)  ENDIF ; Slow Mode
                                        (0624) ENDIF ; 5.0V Operation
                                        (0625) 
                                        (0626)     M8C_SetBank0
                                        (0627) 
                                        (0628)     ;----------------------------
                                        (0629)     ; Wrap up and invoke "main"
                                        (0630)     ;----------------------------
                                        (0631) 
                                        (0632)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0633)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0634)     ;
0136: 62 E0 00 MOV   REG[0xE0],0x0      (0635)     mov  reg[INT_MSK0],0
0139: 71 10    OR    F,0x10             
                                        (0636) 
                                        (0637)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0638)     ; And put decimator in full mode so it does not consume too much current.
                                        (0639)     ;
                                        (0640)     M8C_SetBank1
013B: 62 E0 82 MOV   REG[0xE0],0x82     (0641)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
013E: 43 E7 80 OR    REG[0xE7],0x80     (0642)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0141: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0646)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0647)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0648)     ;
0143: 62 E2 00 MOV   REG[0xE2],0x0      (0649)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0650)                                    ; have been set during the boot process.
                                        (0651) IF	(TOOLCHAIN & HITECH)
                                        (0652) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0653) ELSE
                                        (0654) IF ENABLE_LJMP_TO_MAIN
                                        (0655)     ljmp  _main                    ; goto main (no return)
                                        (0656) ELSE
0146: 7C 09 61 LCALL __UserModules_end|__text_start|_main|_main(0657)     lcall _main                    ; call main
                                        (0658) .Exit:
0149: 8F FF    JMP   0x0149             (0659)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0660) ENDIF
                                        (0661) ENDIF ; TOOLCHAIN
                                        (0662) 
                                        (0663)     ;---------------------------------
                                        (0664)     ; Library Access to Global Parms
                                        (0665)     ;---------------------------------
                                        (0666)     ;
                                        (0667)  bGetPowerSetting:
                                        (0668) _bGetPowerSetting:
                                        (0669)     ; Returns value of POWER_SETTING in the A register.
                                        (0670)     ; No inputs. No Side Effects.
                                        (0671)     ;
014B: 50 10    MOV   A,0x10             (0672)     mov   A, POWER_SETTING
014D: 7F       RET                      (0673)     ret
                                        (0674) 
                                        (0675) IF	(TOOLCHAIN & HITECH)
                                        (0676) ELSE
                                        (0677)     ;---------------------------------
                                        (0678)     ; Order Critical RAM & ROM AREAs
                                        (0679)     ;---------------------------------
                                        (0680)     ;  'TOP' is all that has been defined so far...
                                        (0681) 
                                        (0682)     ;  ROM AREAs for C CONST, static & global items
                                        (0683)     ;
                                        (0684)     AREA lit               (ROM, REL, CON)   ; 'const' definitions
                                        (0685)     AREA idata             (ROM, REL, CON)   ; Constants for initializing RAM
                                        (0686) __idata_start:
                                        (0687) 
                                        (0688)     AREA func_lit          (ROM, REL, CON)   ; Function Pointers
                                        (0689) __func_lit_start:
                                        (0690) 
                                        (0691) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0692)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0693)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0694)     ; relocated by the code compressor, but the text area may shrink and
                                        (0695)     ; that moves xidata around.
                                        (0696)     ;
                                        (0697) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0698) ENDIF
                                        (0699) 
                                        (0700)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0701)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0702) 
                                        (0703)     ; CODE segment for general use
                                        (0704)     ;
                                        (0705)     AREA text (ROM, REL, CON)
                                        (0706) __text_start:
                                        (0707) 
                                        (0708)     ; RAM area usage
                                        (0709)     ;
                                        (0710)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0711) __data_start:
                                        (0712) 
                                        (0713)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0714)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0715)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0716) __bss_start:
                                        (0717) 
                                        (0718) ENDIF ; TOOLCHAIN
                                        (0719) 
                                        (0720) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.2.2551
0253: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_DS1307_Bank1
                                        (0006) export LoadConfigTBL_DS1307_Bank0
                                        (0007) export LoadConfigTBL_DS1307_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_DS1307_Bank0:
                                        (0010) ;  Instance name I2CHW, User Module I2CHW
                                        (0011) ;  Instance name LCD, User Module LCD
                                        (0012) ;  Global Register values Bank 0
                                        (0013) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0014) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0015) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0016) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0017) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0018) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0019) 	db		d6h, 08h		; I2CConfig register (I2C_CFG)
                                        (0020) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0021) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0022) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0023) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0024) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0025) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0026) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0027) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0028) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0029) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0030) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0031) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0032) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0033) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0034) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0035) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0036) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0037) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0038) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0039) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0040) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0041) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0042) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0043) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0044) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0045) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0046) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0047) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0048) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0049) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0050) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0051) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0052) 	db		ffh
                                        (0053) LoadConfigTBL_DS1307_Bank1:
                                        (0054) ;  Instance name I2CHW, User Module I2CHW
                                        (0055) ;  Instance name LCD, User Module LCD
                                        (0056) ;  Global Register values Bank 1
                                        (0057) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0058) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0059) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0060) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0061) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0062) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0063) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0064) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0065) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0066) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0067) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0068) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0069) 	db		e1h, 10h		; OscillatorControl_1 register (OSC_CR1)
                                        (0070) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0071) 	db		dfh, efh		; OscillatorControl_3 register (OSC_CR3)
                                        (0072) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0073) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0074) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0075) 	db		ffh
                                        (0076) AREA psoc_config(rom, rel)
                                        (0077) LoadConfigTBL_DS1307_Ordered:
                                        (0078) ;  Ordered Global Register values
                                        (0079) 	M8C_SetBank0
0255: 62 00 00 MOV   REG[0x0],0x0       (0080) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0258: 71 10    OR    F,0x10             
                                        (0081) 	M8C_SetBank1
025A: 62 00 00 MOV   REG[0x0],0x0       (0082) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
025D: 62 01 FF MOV   REG[0x1],0xFF      (0083) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
0260: 70 EF    AND   F,0xEF             
                                        (0084) 	M8C_SetBank0
0262: 62 03 FF MOV   REG[0x3],0xFF      (0085) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0265: 62 02 00 MOV   REG[0x2],0x0       (0086) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0268: 71 10    OR    F,0x10             
                                        (0087) 	M8C_SetBank1
026A: 62 02 00 MOV   REG[0x2],0x0       (0088) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
026D: 62 03 00 MOV   REG[0x3],0x0       (0089) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0270: 70 EF    AND   F,0xEF             
                                        (0090) 	M8C_SetBank0
0272: 62 01 00 MOV   REG[0x1],0x0       (0091) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0275: 62 04 E0 MOV   REG[0x4],0xE0      (0092) 	mov	reg[04h], e0h		; Port_1_Data register (PRT1DR)
0278: 71 10    OR    F,0x10             
                                        (0093) 	M8C_SetBank1
027A: 62 04 E0 MOV   REG[0x4],0xE0      (0094) 	mov	reg[04h], e0h		; Port_1_DriveMode_0 register (PRT1DM0)
027D: 62 05 FF MOV   REG[0x5],0xFF      (0095) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0280: 70 EF    AND   F,0xEF             
                                        (0096) 	M8C_SetBank0
0282: 62 07 BC MOV   REG[0x7],0xBC      (0097) 	mov	reg[07h], bch		; Port_1_DriveMode_2 register (PRT1DM2)
0285: 62 06 00 MOV   REG[0x6],0x0       (0098) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0288: 71 10    OR    F,0x10             
                                        (0099) 	M8C_SetBank1
028A: 62 06 40 MOV   REG[0x6],0x40      (0100) 	mov	reg[06h], 40h		; Port_1_IntCtrl_0 register (PRT1IC0)
028D: 62 07 00 MOV   REG[0x7],0x0       (0101) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0290: 70 EF    AND   F,0xEF             
                                        (0102) 	M8C_SetBank0
0292: 62 05 40 MOV   REG[0x5],0x40      (0103) 	mov	reg[05h], 40h		; Port_1_IntEn register (PRT1IE)
0295: 62 08 00 MOV   REG[0x8],0x0       (0104) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0298: 71 10    OR    F,0x10             
                                        (0105) 	M8C_SetBank1
029A: 62 08 7F MOV   REG[0x8],0x7F      (0106) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
029D: 62 09 80 MOV   REG[0x9],0x80      (0107) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
02A0: 70 EF    AND   F,0xEF             
                                        (0108) 	M8C_SetBank0
02A2: 62 0B 80 MOV   REG[0xB],0x80      (0109) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
02A5: 62 0A 00 MOV   REG[0xA],0x0       (0110) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
02A8: 71 10    OR    F,0x10             
                                        (0111) 	M8C_SetBank1
02AA: 62 0A 00 MOV   REG[0xA],0x0       (0112) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
02AD: 62 0B 00 MOV   REG[0xB],0x0       (0113) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
02B0: 70 EF    AND   F,0xEF             
                                        (0114) 	M8C_SetBank0
02B2: 62 09 00 MOV   REG[0x9],0x0       (0115) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
02B5: 62 0C 00 MOV   REG[0xC],0x0       (0116) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
02B8: 71 10    OR    F,0x10             
                                        (0117) 	M8C_SetBank1
02BA: 62 0C 00 MOV   REG[0xC],0x0       (0118) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
02BD: 62 0D 00 MOV   REG[0xD],0x0       (0119) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
02C0: 70 EF    AND   F,0xEF             
                                        (0120) 	M8C_SetBank0
02C2: 62 0F 00 MOV   REG[0xF],0x0       (0121) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02C5: 62 0E 00 MOV   REG[0xE],0x0       (0122) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02C8: 71 10    OR    F,0x10             
                                        (0123) 	M8C_SetBank1
02CA: 62 0E 00 MOV   REG[0xE],0x0       (0124) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02CD: 62 0F 00 MOV   REG[0xF],0x0       (0125) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02D0: 70 EF    AND   F,0xEF             
                                        (0126) 	M8C_SetBank0
02D2: 62 0D 00 MOV   REG[0xD],0x0       (0127) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02D5: 62 10 00 MOV   REG[0x10],0x0      (0128) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02D8: 71 10    OR    F,0x10             
                                        (0129) 	M8C_SetBank1
02DA: 62 10 00 MOV   REG[0x10],0x0      (0130) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02DD: 62 11 00 MOV   REG[0x11],0x0      (0131) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02E0: 70 EF    AND   F,0xEF             
                                        (0132) 	M8C_SetBank0
02E2: 62 13 00 MOV   REG[0x13],0x0      (0133) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02E5: 62 12 00 MOV   REG[0x12],0x0      (0134) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02E8: 71 10    OR    F,0x10             
                                        (0135) 	M8C_SetBank1
02EA: 62 12 00 MOV   REG[0x12],0x0      (0136) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02ED: 62 13 00 MOV   REG[0x13],0x0      (0137) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02F0: 70 EF    AND   F,0xEF             
                                        (0138) 	M8C_SetBank0
02F2: 62 11 00 MOV   REG[0x11],0x0      (0139) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02F5: 62 14 00 MOV   REG[0x14],0x0      (0140) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02F8: 71 10    OR    F,0x10             
                                        (0141) 	M8C_SetBank1
02FA: 62 14 00 MOV   REG[0x14],0x0      (0142) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02FD: 62 15 00 MOV   REG[0x15],0x0      (0143) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0300: 70 EF    AND   F,0xEF             
                                        (0144) 	M8C_SetBank0
0302: 62 17 00 MOV   REG[0x17],0x0      (0145) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0305: 62 16 00 MOV   REG[0x16],0x0      (0146) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0308: 71 10    OR    F,0x10             
                                        (0147) 	M8C_SetBank1
030A: 62 16 00 MOV   REG[0x16],0x0      (0148) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
030D: 62 17 00 MOV   REG[0x17],0x0      (0149) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0310: 70 EF    AND   F,0xEF             
                                        (0150) 	M8C_SetBank0
0312: 62 15 00 MOV   REG[0x15],0x0      (0151) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0315: 62 18 00 MOV   REG[0x18],0x0      (0152) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
0318: 71 10    OR    F,0x10             
                                        (0153) 	M8C_SetBank1
031A: 62 18 00 MOV   REG[0x18],0x0      (0154) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
031D: 62 19 00 MOV   REG[0x19],0x0      (0155) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0320: 70 EF    AND   F,0xEF             
                                        (0156) 	M8C_SetBank0
0322: 62 1B 00 MOV   REG[0x1B],0x0      (0157) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0325: 62 1A 00 MOV   REG[0x1A],0x0      (0158) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0328: 71 10    OR    F,0x10             
                                        (0159) 	M8C_SetBank1
032A: 62 1A 00 MOV   REG[0x1A],0x0      (0160) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
032D: 62 1B 00 MOV   REG[0x1B],0x0      (0161) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0330: 70 EF    AND   F,0xEF             
                                        (0162) 	M8C_SetBank0
0332: 62 19 00 MOV   REG[0x19],0x0      (0163) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0335: 62 1C 00 MOV   REG[0x1C],0x0      (0164) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0338: 71 10    OR    F,0x10             
                                        (0165) 	M8C_SetBank1
033A: 62 1C 00 MOV   REG[0x1C],0x0      (0166) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
033D: 62 1D 00 MOV   REG[0x1D],0x0      (0167) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0340: 70 EF    AND   F,0xEF             
                                        (0168) 	M8C_SetBank0
0342: 62 1F 00 MOV   REG[0x1F],0x0      (0169) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0345: 62 1E 00 MOV   REG[0x1E],0x0      (0170) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0348: 71 10    OR    F,0x10             
                                        (0171) 	M8C_SetBank1
034A: 62 1E 00 MOV   REG[0x1E],0x0      (0172) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
034D: 62 1F 00 MOV   REG[0x1F],0x0      (0173) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0350: 70 EF    AND   F,0xEF             
                                        (0174) 	M8C_SetBank0
0352: 62 1D 00 MOV   REG[0x1D],0x0      (0175) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0355: 70 EF    AND   F,0xEF             
                                        (0176) 	M8C_SetBank0
0357: 7F       RET                      (0177) 	ret
                                        (0178) 
                                        (0179) 
                                        (0180) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_DS1307
                                        (0026) export _LoadConfig_DS1307
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
0358: 55 00 00 MOV   [0x0],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
035B: 55 01 7F MOV   [0x1],0x7F         (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
035E: 55 02 80 MOV   [0x2],0x80         (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
0361: 7C 03 68 LCALL 0x0368             (0069) 	lcall	LoadConfig_DS1307
0364: 7C 02 53 LCALL 0x0253             (0070) 	lcall	LoadConfigTBL_DS1307_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
0367: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration DS1307
                                        (0078) ;
                                        (0079) ;    Load configuration registers for DS1307.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_DS1307:
                                        (0096)  LoadConfig_DS1307:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
0368: 10       PUSH  X                  (0099) 	push	x
0369: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
036B: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
036D: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
036E: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_DS1307_Bank0
0370: 57 DD    MOV   X,0xDD             (0105)     mov     X, <LoadConfigTBL_DS1307_Bank0
0372: 7C 03 83 LCALL 0x0383             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
0375: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
0377: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
0378: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_DS1307_Bank1
037A: 57 2C    MOV   X,0x2C             (0112)     mov     X, <LoadConfigTBL_DS1307_Bank1
037C: 7C 03 83 LCALL 0x0383             (0113)     lcall   LoadConfig              ; Load the bank 1 values
037F: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
0381: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
0382: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
0383: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
0385: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
0386: 08       PUSH  A                  (0143)     push    A
0387: 4F       MOV   X,SP               (0144)     mov     X, SP
0388: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
038B: D0 04    JNC   0x0390             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
038D: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
0390: 18       POP   A                  (0149)     pop     A
0391: 20       POP   X                  (0150)     pop     X
0392: 70 EF    AND   F,0xEF             
0394: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0397: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
0398: 08       PUSH  A                  (0156)     push    A
0399: 28       ROMX                     (0157)     romx                            ; Load register address from table
039A: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
039C: A0 1F    JZ    0x03BC             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
039E: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
039F: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
03A2: A0 03    JZ    0x03A6             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03A4: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
03A6: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
03A8: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
03A9: 20       POP   X                  (0167)     pop     X
03AA: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
03AB: 09 00    ADC   A,0x0              (0169)     adc     A, 0
03AD: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
03AE: 08       PUSH  A                  (0171)     push    A
03AF: 28       ROMX                     (0172)     romx                            ; load config data from the table
03B0: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
03B1: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
03B3: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
03B5: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
03B6: 20       POP   X                  (0177)     pop     X
03B7: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
03B8: 09 00    ADC   A,0x0              (0179)     adc     A, 0
03BA: 8F D7    JMP   0x0392             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
03BC: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
03BE: 70 3F    AND   F,0x3F             
03C0: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
03C2: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2012/3/2 at 9:14:48
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    90h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D0h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
03C3: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
03C4: 10       PUSH  X                  (0209)     push  X
03C5: 28       ROMX                     (0210)     romx                               ; Get character from ROM
03C6: B0 04    JNZ   0x03CB             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
03C8: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
03C9: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
03CA: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
03CB: 90 44    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
03CD: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
03CE: 18       POP   A                  (0220)     pop   A
03CF: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
03D0: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
03D2: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
03D3: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
03E5: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
03E6: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
03E7: 67       ASR   A                  (0262)     asr   A
03E8: 67       ASR   A                  (0263)     asr   A
03E9: 67       ASR   A                  (0264)     asr   A
03EA: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
03EC: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
03EE: 90 21    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
03F0: 18       POP   A                  (0268)     pop   A                            ; Restore value
03F1: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
03F3: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
03F5: 90 1A    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
03F7: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
03F8: 4B       SWAP  A,X                (0305)     swap  A,X
03F9: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
03FB: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
03FC: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
03FE: 7F       RET                      (0310)     ret
03FF: 70 BF    AND   F,0xBF             
0401: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0403: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0405: A0 06    JZ    0x040C             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0407: 90 08    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
0409: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
040A: 8F F8    JMP   0x0403             (0351)     jmp   .Loop_PrString               ; Go get next character
040C: 70 3F    AND   F,0x3F             
040E: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0410: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0411: 90 65    CALL  0x0478             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0413: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0414: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0415: 67       ASR   A                  (0390)     asr   A
0416: 67       ASR   A                  (0391)     asr   A
0417: 67       ASR   A                  (0392)     asr   A
0418: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
041A: 90 3B    CALL  0x0457             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
041C: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
041D: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
041F: 40       NOP                      (0397)     nop
0420: 40       NOP                      (0398)     nop
0421: 40       NOP                      (0399)     nop
0422: 90 33    CALL  0x0457             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0424: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0425: 90 51    CALL  0x0478             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0427: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0428: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0429: 67       ASR   A                  (0436)     asr   A
042A: 67       ASR   A                  (0437)     asr   A
042B: 67       ASR   A                  (0438)     asr   A
042C: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
042E: 90 09    CALL  0x0439             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0430: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0431: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0433: 40       NOP                      (0443)     nop
0434: 40       NOP                      (0444)     nop
0435: 40       NOP                      (0445)     nop
0436: 90 01    CALL  0x0439             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0438: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0439: 08       PUSH  A                  (0477)     push  A
043A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
043D: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0440: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
0442: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0444: 18       POP   A                  (0483)     pop   A
0445: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0447: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0449: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
044B: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
044D: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
044F: 40       NOP                      (0489)     nop
0450: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0452: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0454: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0456: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0457: 08       PUSH  A                  (0523)     push  A
0458: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
045B: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
045E: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0461: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
0463: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0465: 18       POP   A                  (0530)     pop   A
0466: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0468: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
046A: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
046C: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
046E: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0470: 40       NOP                      (0536)     NOP
0471: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0473: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0475: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0477: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0478: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
0479: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
047C: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
047F: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
0481: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0483: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0486: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0488: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
048A: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
048C: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
048E: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0491: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
0493: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0495: 40       NOP                      (0586)     NOP
                                        (0587) 
0496: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0497: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0499: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
049C: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
049E: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
04A0: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
04A1: 40       NOP                      (0597)     nop
04A2: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
04A4: 08       PUSH  A                  (0610)     push  A
04A5: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
04A8: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
04AA: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
04AC: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
04AD: 40       NOP                      (0616)     nop                                    ; fastest PSoC
04AE: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
04AF: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
04B2: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
04B4: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
04B6: 40       NOP                      (0623)     nop
04B7: 40       NOP                      (0624)     nop
                                        (0625) 
04B8: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
04BB: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
04BD: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
04BF: 18       POP   A                  (0630)     pop   A
04C0: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
04C2: A0 04    JZ    0x04C7             (0633)     jz    .UNLOCK
04C4: 79       DEC   X                  (0634)     dec   X
04C5: BF D3    JNZ   0x0499             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
04C7: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
04C8: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
04CB: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
04CD: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
04CF: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
04D1: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
04D3: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
04D4: 7F       RET                      (0646)     ret
04D5: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
04D8: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
04DB: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
04DE: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
04E1: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
04E3: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
04E5: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
04E7: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
04E9: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
04EB: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
04ED: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
04EF: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
04F1: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
04F3: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
04F5: 50 03    MOV   A,0x3              (0701)     mov   A,03h
04F7: 9F 40    CALL  0x0439             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
04F9: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
04FB: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
04FD: 50 03    MOV   A,0x3              (0707)     mov   A,03h
04FF: 9F 38    CALL  0x0439             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0501: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0503: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0505: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0507: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0509: 9F 2E    CALL  0x0439             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
050B: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
050D: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
050F: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0511: 9F 26    CALL  0x0439             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0513: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0515: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0517: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0519: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
051B: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
051D: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
051F: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0521: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
0523: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0525: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0527: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0529: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
052B: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
052D: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
052F: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0531: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0533: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0535: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0537: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0539: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
053B: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
053D: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
053F: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0541: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0543: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0548: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
054A: 10       PUSH  X                  (0791)     push  X                            ; Store COL
054B: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
054D: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
054E: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0550: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0551: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0553: 70 3F    AND   F,0x3F             
0555: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0557: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0558: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
055A: 78       DEC   A                  (0828)     dec   A
055B: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
055D: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0566: 08       PUSH  A                  (0871)     push  A
0567: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0569: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
056B: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
056D: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
056F: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0571: D0 06    JNC   0x0578             (0877)     jnc   .Delay50u_End
0573: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0575: 78       DEC   A                  (0880)     dec   A                              ; [4]
0576: BF FE    JNZ   0x0575             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0578: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0579: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\i2chwrsrcinits.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHW.asm
                                        (0004) ;;   Version: 1.90, Updated on 2012/3/2 at 9:14:43
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) include "PSoCGPIOINT.inc"
                                        (0026) include "PSoCAPI.inc"
                                        (0027) 
                                        (0028) ;-----------------------------------------------
                                        (0029) ; include instance specific register definitions
                                        (0030) ;-----------------------------------------------
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ;  Global Symbols
                                        (0034) ;-----------------------------------------------
                                        (0035) ;-------------------------------------------------------------------
                                        (0036) ;  Declare the functions global for both assembler and C compiler.
                                        (0037) ;
                                        (0038) ;  Note that there are two names for each API. First name is
                                        (0039) ;  assembler reference. Name with underscore is name refence for
                                        (0040) ;  C compiler.  Calling function in C source code does not require
                                        (0041) ;  the underscore.
                                        (0042) ;-------------------------------------------------------------------
                                        (0043) 
                                        (0044) export    I2CHW_ResumeInt
                                        (0045) export   _I2CHW_ResumeInt
                                        (0046) export    I2CHW_EnableInt
                                        (0047) export   _I2CHW_EnableInt
                                        (0048) export    I2CHW_ClearInt
                                        (0049) export   _I2CHW_ClearInt
                                        (0050) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0051) export    I2CHW_EnableSlave
                                        (0052) export   _I2CHW_EnableSlave
                                        (0053) ENDIF
                                        (0054) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0055) export    I2CHW_EnableMstr
                                        (0056) export   _I2CHW_EnableMstr
                                        (0057) ENDIF
                                        (0058) export    I2CHW_Start
                                        (0059) export   _I2CHW_Start
                                        (0060) export    I2CHW_DisableInt
                                        (0061) export   _I2CHW_DisableInt
                                        (0062) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0063) export    I2CHW_DisableSlave
                                        (0064) export   _I2CHW_DisableSlave
                                        (0065) ENDIF
                                        (0066) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0067) export    I2CHW_DisableMstr
                                        (0068) export   _I2CHW_DisableMstr
                                        (0069) ENDIF
                                        (0070) export    I2CHW_Stop
                                        (0071) export   _I2CHW_Stop
                                        (0072) 
                                        (0073) 
                                        (0074) AREA UserModules (ROM, REL)
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) 
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: I2CHW_Start
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;   Initialize the I2CHW I2C bus interface.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;  ARGUMENTS:
                                        (0087) ;
                                        (0088) ;  RETURNS: none
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;          
                                        (0097)  I2CHW_Start:
                                        (0098) _I2CHW_Start:
                                        (0099)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)     RAM_EPILOGUE RAM_USE_CLASS_1
057A: 7F       RET                      (0101)     ret
                                        (0102) .ENDSECTION
                                        (0103) 
                                        (0104) .SECTION
                                        (0105) ;-----------------------------------------------------------------------------
                                        (0106) ;  FUNCTION NAME: I2CHW_ResumeInt
                                        (0107) ;
                                        (0108) ;  DESCRIPTION:
                                        (0109) ;     reEnables SDA interrupt allowing start condition detection. 
                                        (0110) ;     Skips clearing INT_CLR3 by entering the EnableInt at ResumeIntEntry:.
                                        (0111) ;     Remember to call the global interrupt enable function by using
                                        (0112) ;     the macro: M8C_EnableGInt.
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  ARGUMENTS: none
                                        (0115) ;
                                        (0116) ;  RETURNS: none
                                        (0117) ;
                                        (0118) ;  SIDE EFFECTS:
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125)  I2CHW_ResumeInt:
                                        (0126) _I2CHW_ResumeInt:
                                        (0127)     RAM_PROLOGUE RAM_USE_CLASS_1
057B: 08       PUSH  A                  (0128)     push A
057C: 80 08    JMP   0x0585             (0129)     jmp ResumeIntEntry
                                        (0130)     
                                        (0131) ;-----------------------------------------------------------------------------
                                        (0132) ;  FUNCTION NAME: I2CHW_EnableInt
                                        (0133) ;
                                        (0134) ;  DESCRIPTION:
                                        (0135) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0136) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0137) ;
                                        (0138) ;-----------------------------------------------------------------------------
                                        (0139) ;
                                        (0140) ;  ARGUMENTS: none
                                        (0141) ;
                                        (0142) ;  RETURNS: none
                                        (0143) ;
                                        (0144) ;  SIDE EFFECTS:
                                        (0145) ;    The A and X registers may be modified by this or future implementations
                                        (0146) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0147) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0148) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0149) ;    functions.
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151)  I2CHW_EnableInt:
                                        (0152) _I2CHW_EnableInt:
                                        (0153)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0154)     ;first clear any pending interrupts
057E: 08       PUSH  A                  (0155)     push A
057F: 5D DD    MOV   A,REG[0xDD]        (0156)     mov A, reg[INT_CLR3]
0581: 21 FE    AND   A,0xFE             (0157)     and A, ~I2CHW_INT_MASK
0583: 60 DD    MOV   REG[0xDD],A        (0158)     mov reg[INT_CLR3], A
0585: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0159) ResumeIntEntry:
                                        (0160)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0588: 18       POP   A                  (0161)     pop A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
0589: 7F       RET                      (0163)     ret
                                        (0164) 
                                        (0165) .ENDSECTION
                                        (0166) 
                                        (0167) .SECTION
                                        (0168) ;-----------------------------------------------------------------------------
                                        (0169) ;  FUNCTION NAME: I2CHW_ClearInt
                                        (0170) ;
                                        (0171) ;  DESCRIPTION:
                                        (0172) ;     Clears only the I2C interrupt in the INT_CLR3 register.
                                        (0173) ;
                                        (0174) ;-----------------------------------------------------------------------------
                                        (0175) ;
                                        (0176) ;  ARGUMENTS: none
                                        (0177) ;
                                        (0178) ;  RETURNS: none
                                        (0179) ;
                                        (0180) ;  SIDE EFFECTS:
                                        (0181) ;    The A and X registers may be modified by this or future implementations
                                        (0182) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0183) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0184) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0185) ;    functions.
                                        (0186) ;          
                                        (0187)  I2CHW_ClearInt:
                                        (0188) _I2CHW_ClearInt:
                                        (0189)     RAM_PROLOGUE RAM_USE_CLASS_1
058A: 08       PUSH  A                  (0190)     push A
058B: 5D DD    MOV   A,REG[0xDD]        (0191)     mov A, reg[INT_CLR3]
058D: 21 FE    AND   A,0xFE             (0192)     and A, ~I2CHW_INT_MASK
058F: 60 DD    MOV   REG[0xDD],A        (0193)     mov reg[INT_CLR3], A
0591: 18       POP   A                  (0194)     pop A
                                        (0195)     RAM_EPILOGUE RAM_USE_CLASS_1
0592: 7F       RET                      (0196)     ret
0593: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0197)     
                                        (0198) .ENDSECTION
                                        (0199) 
                                        (0200) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))	
                                        (0201) .SECTION
                                        (0202) ;-----------------------------------------------------------------------------
                                        (0203) ;  FUNCTION NAME: I2CHW_EnableMstr
                                        (0204) ;
                                        (0205) ;  DESCRIPTION:
                                        (0206) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0207) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0208) ;
                                        (0209) ;-----------------------------------------------------------------------------
                                        (0210) ;
                                        (0211) ;  ARGUMENTS: none
                                        (0212) ;
                                        (0213) ;  RETURNS: none
                                        (0214) ;
                                        (0215) ;  SIDE EFFECTS:
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;          
                                        (0222)  I2CHW_EnableMstr:
                                        (0223) _I2CHW_EnableMstr:
                                        (0224)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0225) 	;;CDT 28399
                                        (0226) 	RAM_SETPAGE_CUR >I2CHW_bStatus
0596: 26 03 7F AND   [0x3],0x7F         (0227) 	and [I2CHW_bStatus], ~0x80 ;; ~I2CHW_ISR_ACTIVE
0599: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0228) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
059C: 26 05 7F AND   [0x5],0x7F         (0229)     and    [I2CHW_RsrcStatus], ~0x80;;~I2CHW_ISR_ACTIVE        ; Make sure internal control variables weren't corrupted previous to start.
059F: 43 D6 02 OR    REG[0xD6],0x2      
                                        (0230)     BitSetI2CHW_CFG I2C_M_EN                                         ;Enable SDA interupt
                                        (0231)     RAM_EPILOGUE RAM_USE_CLASS_1
05A2: 7F       RET                      (0232)     ret
05A3: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0233) 
                                        (0234) .ENDSECTION
                                        (0235) ENDIF
                                        (0236) 
                                        (0237) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: I2CHW_EnableSlave
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0244) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0245) ;
                                        (0246) ;-----------------------------------------------------------------------------
                                        (0247) ;
                                        (0248) ;  ARGUMENTS: none
                                        (0249) ;
                                        (0250) ;  RETURNS: none
                                        (0251) ;
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;          
                                        (0259)  I2CHW_EnableSlave:
                                        (0260) _I2CHW_EnableSlave:
                                        (0261)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0262)     
                                        (0263)     M8C_SetBank1 ;The SDA and SCL pins are setting to Hi-z drive mode
                                        (0264)     and reg[I2CHWSDA_DriveMode_0_ADDR],~(I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0265)     or  reg[I2CHWSDA_DriveMode_1_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0266)     M8C_SetBank0
                                        (0267)     or  reg[I2CHWSDA_DriveMode_2_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0268)    
                                        (0269)     BitSetI2CHW_CFG I2C_S_EN                                         ;Enable SDA interrupt
                                        (0270)     nop
                                        (0271)     nop
                                        (0272)     nop
                                        (0273)     nop
                                        (0274)     nop
                                        (0275)    
                                        (0276)     M8C_SetBank1 ;The SDA and SCL pins are restored to Open Drain Low drive mode
                                        (0277)     or reg[I2CHWSDA_DriveMode_0_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0278)     or reg[I2CHWSDA_DriveMode_1_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0279)     M8C_SetBank0
                                        (0280)     or reg[I2CHWSDA_DriveMode_2_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0281)     
                                        (0282)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0283)     ret
                                        (0284) 
                                        (0285) .ENDSECTION
                                        (0286) ENDIF
                                        (0287) 
                                        (0288) .SECTION
                                        (0289) ;-----------------------------------------------------------------------------
                                        (0290) ;  FUNCTION NAME: I2CHW_DisableInt
                                        (0291) ;  FUNCTION NAME: I2CHW_Stop
                                        (0292) ;
                                        (0293) ;  DESCRIPTION:
                                        (0294) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0295) ;
                                        (0296) ;-----------------------------------------------------------------------------
                                        (0297) ;
                                        (0298) ;  ARGUMENTS: none
                                        (0299) ;
                                        (0300) ;  RETURNS: none
                                        (0301) ;
                                        (0302) ;  SIDE EFFECTS:
                                        (0303) ;    The A and X registers may be modified by this or future implementations
                                        (0304) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0305) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0306) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0307) ;    functions.
                                        (0308) ;          
                                        (0309)  I2CHW_DisableInt:
                                        (0310) _I2CHW_DisableInt:
                                        (0311)  I2CHW_Stop:
                                        (0312) _I2CHW_Stop:
                                        (0313)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0314)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0315)     RAM_EPILOGUE RAM_USE_CLASS_1
05A6: 7F       RET                      (0316)     ret
05A7: 41 D6 FD AND   REG[0xD6],0xFD     
                                        (0317) 
                                        (0318) .ENDSECTION
                                        (0319) 
                                        (0320) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0321) .SECTION
                                        (0322) ;-----------------------------------------------------------------------------
                                        (0323) ;  FUNCTION NAME: I2CHW_DisableSlave
                                        (0324) ;
                                        (0325) ;  DESCRIPTION:
                                        (0326) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0327) ;
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;
                                        (0330) ;  ARGUMENTS: none
                                        (0331) ;
                                        (0332) ;  RETURNS: none
                                        (0333) ;
                                        (0334) ;  SIDE EFFECTS:
                                        (0335) ;    The A and X registers may be modified by this or future implementations
                                        (0336) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0337) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0338) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0339) ;    functions.
                                        (0340) ;          
                                        (0341)  I2CHW_DisableSlave:
                                        (0342) _I2CHW_DisableSlave:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0344)     BitClrI2CHW_CFG I2C_S_EN                                         ;Disable the Slave
                                        (0345)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0346)     ret
                                        (0347) 
                                        (0348) .ENDSECTION
                                        (0349) ENDIF
                                        (0350) 
                                        (0351) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0352) .SECTION
                                        (0353) ;-----------------------------------------------------------------------------
                                        (0354) ;  FUNCTION NAME: I2CHW_DisableMstr
                                        (0355) ;
                                        (0356) ;  DESCRIPTION:
                                        (0357) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0358) ;
                                        (0359) ;-----------------------------------------------------------------------------
                                        (0360) ;
                                        (0361) ;  ARGUMENTS: none
                                        (0362) ;
                                        (0363) ;  RETURNS: none
                                        (0364) ;
                                        (0365) ;  SIDE EFFECTS:
                                        (0366) ;    The A and X registers may be modified by this or future implementations
                                        (0367) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0368) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0369) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0370) ;    functions.
                                        (0371) ;          
                                        (0372)  I2CHW_DisableMstr:
                                        (0373) _I2CHW_DisableMstr:
                                        (0374)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0375)     BitClrI2CHW_CFG I2C_M_EN                                         ;Disable the Master
                                        (0376)     RAM_EPILOGUE RAM_USE_CLASS_1
05AA: 7F       RET                      (0377)    ret
                                        (0378) 
                                        (0379) .ENDSECTION
                                        (0380) ENDIF
                                        (0381) 
                                        (0382) ; End of File I2CHW.asm
FILE: lib\i2chwmstr.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
05AB: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: I2CHWMSTR.asm
                                        (0004) ;;   Version: 1.90, Updated on 2012/3/2 at 9:14:43
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: <UMName> User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) include "I2CHWMstr.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) 
                                        (0031) export   I2CHW_fSendRepeatStart
                                        (0032) export  _I2CHW_fSendRepeatStart
                                        (0033) export   I2CHW_fSendStart
                                        (0034) export  _I2CHW_fSendStart
                                        (0035) export   I2CHW_SendStop
                                        (0036) export  _I2CHW_SendStop
                                        (0037) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0038) export  _I2CHW_fReadBytes
                                        (0039) export  _I2CHW_bWriteBytes
                                        (0040) export  _I2CHW_bWriteCBytes
                                        (0041) 
                                        (0042) export   I2CHW_fWrite
                                        (0043) export  _I2CHW_fWrite
                                        (0044) 
                                        (0045) export   I2CHW_bRead
                                        (0046) export  _I2CHW_bRead
                                        (0047) 
                                        (0048) export    I2CHW_bReadBusStatus
                                        (0049) export   _I2CHW_bReadBusStatus
                                        (0050) 
                                        (0051) 
                                        (0052) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0053) 
                                        (0054) export   I2CHW_fReadBytes
                                        (0055) export   I2CHW_bWriteBytes
                                        (0056) export   I2CHW_bWriteCBytes
                                        (0057) 
                                        (0058) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0059) 
                                        (0060) ;-------------------------------------------------------------------
                                        (0061) ;  Declare the varables for both the assembler and C compiler.
                                        (0062) ;
                                        (0063) ;-------------------------------------------------------------------
                                        (0064) export  I2CHW_bStatus
                                        (0065) export _I2CHW_bStatus
                                        (0066) 
                                        (0067) ;-----------------------------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;-----------------------------------------------
                                        (0070) area InterruptRAM(RAM, REL, CON)
                                        (0071) 
                                        (0072) _I2CHW_bStatus:
                                        (0073)  I2CHW_bStatus:                        blk   1  ; Status during transfers
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) ;-----------------------------------------------
                                        (0077) ;  EQUATES
                                        (0078) ;-----------------------------------------------
                                        (0079) I2CHW_SLAVE_ACKed:                     equ 0x01 ; This bit set if Slave ACKed Master
                                        (0080) I2CHW_SEND_ACK:                        equ 0x10 ; If this flag set, Master should send ACK
                                        (0081) 
                                        (0082) 
                                        (0083) .SECTION
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;  FUNCTION NAME: I2CHW_fReadBytes
                                        (0086) ;
                                        (0087) ;  DESCRIPTION:
                                        (0088) ;       Read Multiple bytes from a slave.  Use the ISR to perform operation.
                                        (0089) ;-----------------------------------------------------------------------------
                                        (0090) ;
                                        (0091) ;  ARGUMENTS:
                                        (0092) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0093) ;           to determine if:
                                        (0094) ;             0x01 => Use RepeatStart instead of Start
                                        (0095) ;             0x02 => Don't send Stop
                                        (0096) ;  [SP-6]=> Count of bytes to read.
                                        (0097) ;  [SP-5]=> MSB of Array address to put data in (ignorned for small mem model)
                                        (0098) ;  [SP-4]=> LSB of Array address to put data in 
                                        (0099) ;  [SP-3]=> Address of slave
                                        (0100) ;
                                        (0101) ;  RETURNS:       None
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;          
                                        (0110) ;    Currently only the page pointer registers listed below are modified: 
                                        (0111) ;          CUR_PP
                                        (0112) ;
                                        (0113) ;  THEORY of OPERATION or PROCEDURE:
                                        (0114) ;    I2C and block must be operational.
                                        (0115) ;    This routine will enable the I2C interrupt!
                                        (0116) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (0117) ;    pend on the ISR_ACTIVE bit until it can run
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) IF	(TOOLCHAIN & HITECH)
                                        (0121) RxMode:         set  -7
                                        (0122) RxCnt:          set  -6
                                        (0123) RxArrayHI:      set  -5
                                        (0124) RxArrayLO:      set  -4
                                        (0125) RxSlaveAddr:    set  -3
                                        (0126) ELSE
                                        (0127) RxMode:         equ  -7
                                        (0128) RxCnt:          equ  -6
                                        (0129) RxArrayHI:      equ  -5
                                        (0130) RxArrayLO:      equ  -4
                                        (0131) RxSlaveAddr:    equ  -3
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) _I2CHW_fReadBytes:			      
                                        (0135)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0136)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0137) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
05AE: 4F       MOV   X,SP               (0138) 	mov   X, SP
                                        (0139) I2CMSCR_NotReady1:
05AF: 51 05    MOV   A,[0x5]            (0140)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
05B1: 47 05 80 TST   [0x5],0x80         (0141)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0142)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0143)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0144)           ;For multi master operations, a pening start or restart
                                        (0145)           ;request might be OK, the master might be waiting to
                                        (0146)           ;acquire the bus from another master
05B4: BF FA    JNZ   0x05AF             (0147)     jnz   I2CMSCR_NotReady1
05B6: 2E 05 80 OR    [0x5],0x80         (0148)     or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared by ISR
                                        (0149)     ;get the address from the parameters on the stack
05B9: 52 FD    MOV   A,[X-3]            (0150)     mov   A, [X + RxSlaveAddr]
05BB: 64       ASL   A                  (0151)     asl   A                                                ; Shift address to the left to make
                                        (0152)                                                            ; a complete byte with the R/W bit.
05BC: 29 01    OR    A,0x1              (0153)     or    A,0x01                                           ; OR the address with the Read bit.
05BE: 53 04    MOV   [0x4],A            (0154)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
05C0: 60 D8    MOV   REG[0xD8],A        (0155)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
05C2: 55 03 00 MOV   [0x3],0x0          (0156)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
05C5: 52 F9    MOV   A,[X-7]            (0157)     mov   A, [X+RxMode]                                    ; place the RxMode in status so ISR can access it
05C7: 53 03    MOV   [0x3],A            (0158)     mov   [I2CHW_bStatus],A
                                        (0159)     ;
                                        (0160)     ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0161)     ;
05C9: 10       PUSH  X                  (0162)     push   X                                               ;preserve since it's used later
05CA: 52 FA    MOV   A,[X-6]            (0163)     mov    A, [X+RxCnt]                                    ;get the write buf size
05CC: 08       PUSH  A                  (0164)     push   A
05CD: 52 FB    MOV   A,[X-5]            (0165)     mov    A, [X+RxArrayHI]                                ;get the write addrHI
05CF: 08       PUSH  A                  (0166)     push   A										   
05D0: 52 FC    MOV   A,[X-4]            (0167)     mov    A, [X+RxArrayLO]							                         ;get the write addrLO
05D2: 08       PUSH  A                  (0168)     push   A                                               ;this will be ignored
05D3: 93 0C    CALL  _I2CHW_InitWrite   (0169)     call  I2CHW_InitWrite                                  ;sets the addr and byte count to write to
05D5: 38 FD    ADD   SP,0xFD            (0170)     add    SP, -3
05D7: 20       POP   X                  (0171)     pop    X                                               ;restore X to be used for the rest of this routine
                                        (0172)     
05D8: 51 04    MOV   A,[0x4]            (0173)     mov   A,[I2CHW_SlaveAddr]
05DA: 48 F9 01 TST   [X-7],0x1          (0174)     tst   [x+RxMode],I2CHW_RepStart
05DD: B0 0A    JNZ   0x05E8             (0175)     jnz   DoRestartRx
05DF: 49 D7 01 TST   REG[0xD7],0x1      (0176)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
05E2: B0 05    JNZ   0x05E8             (0177)     jnz   DoRestartRx
05E4: 91 2E    CALL  0x0714             (0178)     call  I2C_DoStart                                      ; Send a start and address.
05E6: 80 03    JMP   0x05EA             (0179)     jmp   CheckRxAck
                                        (0180) DoRestartRx:
05E8: 90 93    CALL  0x067D             (0181)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
05EA: 70 3F    AND   F,0x3F             
05EC: 71 C0    OR    F,0xC0             
                                        (0182)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (0183)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (0184)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (0185) 
                                        (0186) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0187)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (0188)         ;is finished.
                                        (0189) End_RD:
                                        (0190)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0191)     RAM_EPILOGUE RAM_USE_CLASS_4
05EE: 7F       RET                      (0192)     ret
05EF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0193) 
                                        (0194) .ENDSECTION
                                        (0195) 
                                        (0196) .SECTION
                                        (0197) ;-----------------------------------------------------------------------------
                                        (0198) ;  FUNCTION NAME: I2CHW_bWriteBytes
                                        (0199) ;
                                        (0200) ;  DESCRIPTION:
                                        (0201) ;    Write multiple data bits to slave device.
                                        (0202) ;
                                        (0203) ;-----------------------------------------------------------------------------
                                        (0204) ;
                                        (0205) ;  ARGUMENTS:
                                        (0206) ; [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0207) ;          to determine if:
                                        (0208) ;              0x01 => Use RePeatStart instead of Start
                                        (0209) ;              0x02 => Don't send Stop
                                        (0210) ; [SP-6]=> Count of bytes to write.
                                        (0211) ; [SP-5]=> MSB of Array address to put data in (ignored small mem model).
                                        (0212) ; [SP-4]=> LSB of Array address to put data in.
                                        (0213) ; [SP-3]=> Address of slave
                                        (0214) ;
                                        (0215) ;
                                        (0216) ;  RETURNS:     None
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS:
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;          
                                        (0225) ;    Currently only the page pointer registers listed below are modified: 
                                        (0226) ;          CUR_PP
                                        (0227) ;
                                        (0228) ;  THEORY of OPERATION or PROCEDURE:
                                        (0229) ;
                                        (0230) ;-----------------------------------------------------------------------------
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232) TxMode:       set  -7
                                        (0233) TxByteCount:  set  -6
                                        (0234) TxArrayHI:    set  -5
                                        (0235) TxArrayLO:    set  -4
                                        (0236) TxSlaveAddr:  set  -3
                                        (0237) ELSE
                                        (0238) TxMode:       equ  -7
                                        (0239) TxByteCount:  equ  -6
                                        (0240) TxArrayHI:    equ  -5
                                        (0241) TxArrayLO:    equ  -4
                                        (0242) TxSlaveAddr:  equ  -3
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) _I2CHW_bWriteBytes:
                                        (0246)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0247)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0248) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
                                        (0249) 
05F2: 4F       MOV   X,SP               (0250) 	mov   X, SP
                                        (0251) I2CMSCR_NotReady2:
05F3: 51 05    MOV   A,[0x5]            (0252)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
05F5: 47 05 80 TST   [0x5],0x80         (0253)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0254)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0255)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0256)           ;For multi master operations, a pening start or restart
                                        (0257)           ;request might be OK, the master might be waiting to
                                        (0258)           ;acquire the bus from another master
05F8: BF FA    JNZ   0x05F3             (0259)     jnz   I2CMSCR_NotReady2
05FA: 2E 05 80 OR    [0x5],0x80         (0260)     or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared at end of ISR
05FD: 52 FD    MOV   A,[X-3]            (0261)     mov   A, [X + TxSlaveAddr]
05FF: 64       ASL   A                  (0262)     asl   A                                                ; Shift address to the left to make
                                        (0263)                                                            ; a complete byte with the R/W bit.
                                        (0264)                                                            ; The ASL takes care of clearing bit 0.
0600: 55 03 00 MOV   [0x3],0x0          (0265)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0603: 53 04    MOV   [0x4],A            (0266)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0605: 60 D8    MOV   REG[0xD8],A        (0267)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0607: 52 F9    MOV   A,[X-7]            (0268)     mov   A, [X+TxMode]                                    ; place the TxMode in status so ISR can access it
0609: 53 03    MOV   [0x3],A            (0269)     mov   [I2CHW_bStatus],A
                                        (0270)     ;
                                        (0271)     ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0272)     ;
060B: 10       PUSH  X                  (0273)         push   X                                                ;preserve since it's used later
060C: 77 FA    INC   [X-6]              (0274)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (0275) 
060E: 52 FA    MOV   A,[X-6]            (0276)         mov    A, [X+TxByteCount]                               ;get the write buf size
0610: 08       PUSH  A                  (0277)         push   A
0611: 52 FB    MOV   A,[X-5]            (0278)         mov    A, [X+TxArrayHI]                                 ;get the write buf addr
0613: 08       PUSH  A                  (0279)         push   A                                                                                            ;this will be ignored
0614: 52 FC    MOV   A,[X-4]            (0280)         mov    A, [X+TxArrayLO]                                 ;get the write buf addr
0616: 08       PUSH  A                  (0281)         push   A
0617: 93 06    CALL  _I2CHW_InitRamRead (0282)         call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
0619: 38 FD    ADD   SP,0xFD            (0283)         add SP, -3
061B: 20       POP   X                  (0284)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0285)     ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (0286) 
                                        (0287) 
061C: 51 04    MOV   A,[0x4]            (0288)     mov   A,[I2CHW_SlaveAddr]
061E: 48 F9 01 TST   [X-7],0x1          (0289)     tst   [x+TxMode],I2CHW_RepStart
0621: B0 0A    JNZ   0x062C             (0290)     jnz   DoRestartTx
0623: 49 D7 01 TST   REG[0xD7],0x1      (0291)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0626: BF C1    JNZ   0x05E8             (0292)     jnz   DoRestartRx
0628: 90 EA    CALL  0x0714             (0293)     call  I2C_DoStart                                      ; Send a start and address.
062A: 80 03    JMP   0x062E             (0294)     jmp   DoTxAck
                                        (0295) DoRestartTx:
062C: 90 4F    CALL  0x067D             (0296)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
062E: 70 3F    AND   F,0x3F             
0630: 71 C0    OR    F,0xC0             
                                        (0297) DoTxAck:
                                        (0298) 
                                        (0299) 
                                        (0300) WriteSlaveAck:
                                        (0301)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0302) 	RAM_EPILOGUE RAM_USE_CLASS_4
0632: 7F       RET                      (0303)     ret
0633: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0304) 
                                        (0305) .ENDSECTION
                                        (0306) 
                                        (0307) .SECTION
                                        (0308) ;-----------------------------------------------------------------------------
                                        (0309) ;  FUNCTION NAME: I2CHW_bWriteCBytes
                                        (0310) ;
                                        (0311) ;  DESCRIPTION:
                                        (0312) ;    Write multiple data bits to slave device from ROM
                                        (0313) ;
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;
                                        (0316) ;  ARGUMENTS:
                                        (0317) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0318) ;            to determine if:
                                        (0319) ;               0x01 => Use RepeatStart instead of Start
                                        (0320) ;               0x02 => Don't send Stop
                                        (0321) ;  [SP-6]=> Count of bytes to write.
                                        (0322) ;  [SP-5]=> MSB of ROM Array address to get data from
                                        (0323) ;  [SP-4]=> LSB of ROM Array address to get data from.
                                        (0324) ;  [SP-3]=> Address of slave
                                        (0325) ;
                                        (0326) ;  RETURNS:
                                        (0327) ;    None
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;
                                        (0339) ;  THEORY of OPERATION or PROCEDURE:
                                        (0340) ;
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) IF	(TOOLCHAIN & HITECH)
                                        (0343) TxCMode:       set  -7
                                        (0344) TxCByteCount:  set  -6
                                        (0345) TxCArrayMSB:   set  -5
                                        (0346) TxCArrayLSB:   set  -4
                                        (0347) ;TxSlaveAddr:  set  -3	  ;defined above this line if for reference only
                                        (0348) ELSE
                                        (0349) TxCMode:       equ  -7
                                        (0350) TxCByteCount:  equ  -6
                                        (0351) TxCArrayMSB:   equ  -5
                                        (0352) TxCArrayLSB:   equ  -4
                                        (0353) ;TxSlaveAddr:  equ  -3	  ;defined above this line if for reference only
                                        (0354) ENDIF
                                        (0355) 
                                        (0356) _I2CHW_bWriteCBytes:
                                        (0357)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0358) 	RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0359) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0636: 4F       MOV   X,SP               (0360) 	mov   X, SP
                                        (0361) I2CMSCR_NotReady3:
0637: 51 05    MOV   A,[0x5]            (0362)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
0639: 47 05 80 TST   [0x5],0x80         (0363)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0364)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0365)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0366)           ;For multi master operations, a pening start or restart
                                        (0367)           ;request might be OK, the master might be waiting to
                                        (0368)           ;acquire the bus from another master
063C: BF FA    JNZ   0x0637             (0369)         jnz   I2CMSCR_NotReady3
063E: 2E 05 80 OR    [0x5],0x80         (0370)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
0641: 52 FD    MOV   A,[X-3]            (0371)     mov   A, [X + TxSlaveAddr]
0643: 64       ASL   A                  (0372)     asl   A                                                ; Shift address to the left to make
                                        (0373)                                                            ; a complete byte with the R/W bit.
                                        (0374)                                                            ; The ASL takes care of clearing bit 0.
0644: 55 03 00 MOV   [0x3],0x0          (0375)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0647: 53 04    MOV   [0x4],A            (0376)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0649: 60 D8    MOV   REG[0xD8],A        (0377)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
064B: 52 F9    MOV   A,[X-7]            (0378)     mov   A, [X+TxCMode]                                                             ; place the RxMode in status so ISR can access it
064D: 53 03    MOV   [0x3],A            (0379)     mov   [I2CHW_bStatus],A
                                        (0380)     ;
                                        (0381)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0382)         ;
064F: 10       PUSH  X                  (0383)         push   X                                                ;preserve X since it's used later
                                        (0384) 
0650: 50 00    MOV   A,0x0              (0385)          mov    A, 0                                             ;get the write buf size (this is the hi order part)
0652: 77 FA    INC   [X-6]              (0386)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
0654: D0 02    JNC   0x0657             (0387)         jnc    . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
0656: 74       INC   A                  (0388)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
0657: 08       PUSH  A                  (0389)         push   A
0658: 52 FA    MOV   A,[X-6]            (0390)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
065A: 08       PUSH  A                  (0391)         push   A
065B: 52 FB    MOV   A,[X-5]            (0392)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
065D: 08       PUSH  A                  (0393)         push   A                                                                                        ;this will be ignored
065E: 52 FC    MOV   A,[X-4]            (0394)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
0660: 08       PUSH  A                  (0395)         push   A
                                        (0396) 
0661: 92 E9    CALL  _I2CHW_InitFlashRead(0397)         call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
0663: 38 FC    ADD   SP,0xFC            (0398)         add SP, -4
0665: 20       POP   X                  (0399)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0400) 
                                        (0401)     ;or  [I2CHW_RsrcStatus],I2C_READFLASH
0666: 51 04    MOV   A,[0x4]            (0402)     mov   A,[I2CHW_SlaveAddr]
0668: 48 F9 01 TST   [X-7],0x1          (0403)     tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
066B: B0 0A    JNZ   0x0676             (0404)     jnz   DoCRestartTx                                     ; should executed.
066D: 49 D7 01 TST   REG[0xD7],0x1      (0405)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0670: BF 77    JNZ   0x05E8             (0406)     jnz   DoRestartRx
0672: 90 A0    CALL  0x0714             (0407)     call  I2C_DoStart                                      ; Send a start and address.
0674: 80 03    JMP   0x0678             (0408)     jmp   DoCTxAck
                                        (0409) DoCRestartTx:
0676: 90 05    CALL  0x067D             (0410)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0678: 70 3F    AND   F,0x3F             
067A: 71 C0    OR    F,0xC0             
                                        (0411) 
                                        (0412) DoCTxAck:                                                  ; Test to see if Slave is ACKed
                                        (0413) 
                                        (0414) CWriteSlaveAck:
                                        (0415)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0416)     RAM_EPILOGUE RAM_USE_CLASS_4
067C: 7F       RET                      (0417)     ret
067D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0418) 
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: I2CHW_DoBufferRepeatStart
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;    Send repeated start condition and send slave address for buffered transfers.
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     This routine is called internally only.  It is not exported or intended as an API
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;    None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS:
                                        (0437) ;    The A and X registers may be modified by this or future implementations
                                        (0438) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0439) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0440) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0441) ;    functions.
                                        (0442) ;          
                                        (0443) ;  THEORY of OPERATION or PROCEDURE:
                                        (0444) ;    This is similar to the I2C_DoRepeatStart entry point but this function does not
                                        (0445) ;    wait for the byte_complete flag.  That is this is not polled and is therefore compatible
                                        (0446) ;    with the buffered read and write functions (above).
                                        (0447) ;
                                        (0448) ;-----------------------------------------------------------------------------
                                        (0449) 
                                        (0450) I2CHW_DoBufferRepeatStart:
                                        (0451)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0452) 	RAM_SETPAGE_CUR >I2CHW_SlaveAddr
                                        (0453)     ;here the path through the routine is dependent on the previous transmission.
                                        (0454)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0455)         ; I2C interrupt
                                        (0456)         ; 2a. the master must NAK the byte if he is reading from the slave.
                                        (0457)         ; We do have to look at the status of the I2C block to see what is going on because if there was a
                                        (0458)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0459)         ; by setting the master restart bit and clearing to I2C_SCR (I2C_TX)
                                        (0460)         ; 2b. if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0461)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0462)         ; 3. once the ISR starts it will figure out which direction we are going with data (sending/receiving)
                                        (0463)         ;
0680: 60 D8    MOV   REG[0xD8],A        (0464)     mov   reg[I2CHW_DR], A
0682: 53 04    MOV   [0x4],A            (0465)         mov   [I2CHW_SlaveAddr], A
                                        (0466)         ;tst      reg[I2CHW_MSCR], I2CM_MASTEROP           ;do we even have control of the bus?
                                        (0467)         ;jz    notBusMasterErr
0684: 5D D9    MOV   A,REG[0xD9]        (0468)     mov   A, reg[I2CHW_MSCR]                               ;read the mscr register to look for pending master operations
0686: 21 0F    AND   A,0xF              (0469)     and   A, 0x0f                                          ;only look at the lower bits
0688: A0 11    JZ    0x069A             (0470)         jz    BusIdleSendStart
068A: 62 D9 02 MOV   REG[0xD9],0x2      
                                        (0471)         ; for a single master system this should not be an issue,
                                        (0472)         ; so we'll go ahead and request the restart.  If a stop condition was already generated
                                        (0473)         ; the state machine will automatically generate a start instead.
                                        (0474) 
                                        (0475)         ;SetI2CHW_SCR I2CM_RESTRT
                                        (0476)     ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0477)         ;SetI2CHW_SCR          I2C_TX                                ;even though the restart has been requested the state
                                        (0478)         ;mov      reg[I2CHW_SCR], I2C_TX                   ;even though the restart has been requested the state
                                        (0479) 
                                        (0480) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0481)         SetI2CHW_MSCR I2CM_RESTRT
                                        (0482) ;ELSE
                                        (0483) ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0484) ;ENDIF
068D: 49 D7 04 TST   REG[0xD7],0x4      (0485)     tst   reg[I2CHW_SCR], I2C_TX
0690: B0 05    JNZ   0x0696             (0486)     jnz   I2C_RestartRecieve
0692: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0487) 
                                        (0488) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0489)     SetI2CHW_SCR I2C_TX                                    ;even though the restart has been requested the state
                                        (0490) ;ELSE
                                        (0491) ;    mov   reg[I2CHW_SCR], I2C_TX                          ;send Ack
                                        (0492) ;ENDIF
                                        (0493) 
                                        (0494)     RAM_EPILOGUE RAM_USE_CLASS_4
0695: 7F       RET                      (0495)     ret
0696: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0496) I2C_RestartRecieve:
                                        (0497) 
                                        (0498) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0499)     SetI2CHW_SCR 0                                         ;even though the restart has been requested the state
                                        (0500) ;ELSE
                                        (0501) ;    mov   reg[I2CHW_SCR], 0                               ;send Ack
                                        (0502) ;ENDIF
                                        (0503) 
                                        (0504)    RAM_EPILOGUE RAM_USE_CLASS_4
0699: 7F       RET                      (0505)    ret
                                        (0506) 
                                        (0507) BusIdleSendStart:
069A: 51 04    MOV   A,[0x4]            (0508)    mov    A, [I2CHW_SlaveAddr]
069C: 90 76    CALL  0x0714             (0509)    call   I2C_DoStart
                                        (0510)    ;Since something appears to be messed up do the next best thing to a repeat start, send a start.
                                        (0511)    RAM_EPILOGUE RAM_USE_CLASS_4
069E: 7F       RET                      (0512)    ret
069F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0513) 
                                        (0514) .ENDSECTION
                                        (0515) 
                                        (0516) .SECTION
                                        (0517) 
                                        (0518) ;-----------------------------------------------------------------------------
                                        (0519) ;  FUNCTION NAME: I2CHW_fSendRepeatStart
                                        (0520) ;
                                        (0521) ;  DESCRIPTION:
                                        (0522) ;    Send repeated start condition and send slave address.
                                        (0523) ;
                                        (0524) ;-----------------------------------------------------------------------------
                                        (0525) ;
                                        (0526) ;  ARGUMENTS:
                                        (0527) ;    I2CHW_bAddr - Contains the slave address and transfer direction.
                                        (0528) ;
                                        (0529) ;  RETURNS:
                                        (0530) ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0531) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0532) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0533) ;
                                        (0534) ;  SIDE EFFECTS:
                                        (0535) ;    The A and X registers may be modified by this or future implementations
                                        (0536) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0537) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0538) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0539) ;    functions.
                                        (0540) ;          
                                        (0541) ;    Currently only the page pointer registers listed below are modified: 
                                        (0542) ;          CUR_PP
                                        (0543) ;
                                        (0544) ;  THEORY of OPERATION or PROCEDURE:
                                        (0545) ;    Prepare to send start by setting SCl and SDA high.
                                        (0546) ;    must be followed directly by I2CHW_start.
                                        (0547) ;
                                        (0548) ;-----------------------------------------------------------------------------
                                        (0549)  I2CHW_fSendRepeatStart:
                                        (0550) _I2CHW_fSendRepeatStart:
                                        (0551)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0552) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0553)     ;wait if the bus is already busy...
06A2: 08       PUSH  A                  (0554)     push  A
06A3: 55 03 00 MOV   [0x3],0x0          (0555)     mov   [I2CHW_bStatus], 0x00
                                        (0556) I2CMSCR_NotReady4:
06A6: 51 05    MOV   A,[0x5]            (0557)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
06A8: 47 05 80 TST   [0x5],0x80         (0558)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0559)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0560)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0561)           ;For multi master operations, a pening start or restart
                                        (0562)           ;request might be OK, the master might be waiting to
                                        (0563)           ;acquire the bus from another master
06AB: BF FA    JNZ   0x06A6             (0564)     jnz   I2CMSCR_NotReady4
06AD: 18       POP   A                  (0565)     pop   A
                                        (0566) 
                                        (0567) 
06AE: 64       ASL   A                  (0568)     asl   a                                                ; Shift address to the left
06AF: 79       DEC   X                  (0569)     dec   x                                                ; If zero, C flag will be set
06B0: C0 03    JC    0x06B4             (0570)     jc    I2C_DoRepeatStart                                ; Do a write if zero
06B2: 29 01    OR    A,0x1              (0571)     or    a,0x01                                           ; Set Read flag
                                        (0572) 
                                        (0573) I2C_DoRepeatStart:
                                        (0574)     ;here the path through the routine is dependent on the previous transmission.
                                        (0575)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0576)         ; I2C interrupt
                                        (0577)         ; 2. the master must NAK the byte if he is reading from the slave.
                                        (0578)         ; We don't have to look at the status of the I2C block to see what is going on because if there was a
                                        (0579)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0580)         ; by setting the master restart bit and writing to I2C_SCR (I2C_TX)
                                        (0581)         ; if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0582)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0583)         ;
06B4: 60 D8    MOV   REG[0xD8],A        (0584)     mov   reg[I2CHW_DR], A
06B6: 53 04    MOV   [0x4],A            (0585)     mov   [I2CHW_SlaveAddr], A
06B8: 49 D9 04 TST   REG[0xD9],0x4      (0586)     tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
06BB: A0 1C    JZ    0x06D8             (0587)     jz    notBusMaster1
06BD: 62 D9 02 MOV   REG[0xD9],0x2      
06C0: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0588)     ;SetI2CHW_MSCR  I2CM_RESTRT
                                        (0589)     ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0590)     ;SetI2CHW_SCR         I2C_TX                           ;even though the restart has been requested the state
                                        (0591)     ;mov      reg[I2CHW_SCR], I2C_TX                       ;even though the restart has been requested the state
                                        (0592)                                                                 ; machine is stalling the SCL and has to be 'released'
                                        (0593) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0594)     SetI2CHW_MSCR I2CM_RESTRT
                                        (0595)     SetI2CHW_SCR  0                                        ;getting a restart out requires a 0 into the SCR reg
                                        (0596) ;ELSE
                                        (0597) ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0598) ;    mov   reg[I2CHW_SCR], 0                               ;getting a restart out requires a 0 into the SCR reg
                                        (0599) ;ENDIF
                                        (0600) 
                                        (0601) WaitRepStrtCompl:
06C3: 5D D7    MOV   A,REG[0xD7]        (0602)     mov   A,  reg[I2CHW_SCR]
06C5: 49 D7 01 TST   REG[0xD7],0x1      (0603)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
06C8: AF FA    JZ    0x06C3             (0604)     jz    WaitRepStrtCompl
06CA: 49 D7 02 TST   REG[0xD7],0x2      (0605)     tst   reg[I2CHW_SCR], I2C_LST_BIT
06CD: B0 07    JNZ   0x06D5             (0606)     jnz   Err_Exit_RepStart
06CF: 55 03 01 MOV   [0x3],0x1          (0607)     mov   [I2CHW_bStatus], 0x01
06D2: 50 01    MOV   A,0x1              (0608)     mov   A, 01
                                        (0609)     RAM_EPILOGUE RAM_USE_CLASS_4
06D4: 7F       RET                      (0610)     ret
                                        (0611) 
                                        (0612) Err_Exit_RepStart:
06D5: 50 00    MOV   A,0x0              (0613)     mov   A, 0
                                        (0614)     RAM_EPILOGUE RAM_USE_CLASS_4
06D7: 7F       RET                      (0615)     ret
                                        (0616) 
                                        (0617)  notBusMaster1:
                                        (0618)     ;SetI2CHW_MSCR 0
                                        (0619)     ;mov reg[I2CHW_MSCR], 0                                ;we certainly cant restart if we've not Master
                                        (0620)     ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
06D8: 50 00    MOV   A,0x0              (0621)     mov   A, 0
                                        (0622)     RAM_EPILOGUE RAM_USE_CLASS_4
06DA: 7F       RET                      (0623)     ret
06DB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0624) 
                                        (0625) .ENDSECTION
                                        (0626) 
                                        (0627) .SECTION
                                        (0628) ;-----------------------------------------------------------------------------
                                        (0629) ;  FUNCTION NAME: I2CHW_fSendStart
                                        (0630) ;
                                        (0631) ;  DESCRIPTION:
                                        (0632) ;    Generates start condition and sends slave address.
                                        (0633) ;
                                        (0634) ;-----------------------------------------------------------------------------
                                        (0635) ;
                                        (0636) ;  ARGUMENTS:
                                        (0637) ;    A => Contains the slave address.
                                        (0638) ;
                                        (0639) ;  RETURNS:
                                        (0640) ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0641) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0642) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0643) ;
                                        (0644) ;  SIDE EFFECTS:
                                        (0645) ;    The A and X registers may be modified by this or future implementations
                                        (0646) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0647) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0648) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0649) ;    functions.
                                        (0650) ;          
                                        (0651) ;    Currently only the page pointer registers listed below are modified: 
                                        (0652) ;          CUR_PP
                                        (0653) ;
                                        (0654) ;  THEORY of OPERATION or PROCEDURE:
                                        (0655) ;   Send start by setting SDA low while SCL is high. Set
                                        (0656) ;   SCL low in preparation to send address. 
                                        (0657) ;   Sends address, waits for byte complete
                                        (0658) ;   An address must be followed by a read or write of data if it was acked by a slave
                                        (0659) ;
                                        (0660) ;  WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0661) ;   flag is set to return.
                                        (0662) ;
                                        (0663) ;
                                        (0664) ;-----------------------------------------------------------------------------
                                        (0665)  I2CHW_fSendStart:
                                        (0666) _I2CHW_fSendStart:
                                        (0667)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0668) 	RAM_SETPAGE_CUR >I2CHW_bStatus 
                                        (0669)     ;wait if the bus is already busy...
06DE: 08       PUSH  A                  (0670)     push  A
06DF: 55 03 00 MOV   [0x3],0x0          (0671)     mov   [I2CHW_bStatus], 0x00
                                        (0672) I2CMSCR_NotReady5:
06E2: 51 05    MOV   A,[0x5]            (0673)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
06E4: 47 05 80 TST   [0x5],0x80         (0674)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0675)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0676)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0677)           ;For multi master operations, a pening start or restart
                                        (0678)           ;request might be OK, the master might be waiting to
                                        (0679)           ;acquire the bus from another master
06E7: BF FA    JNZ   0x06E2             (0680)     jnz   I2CMSCR_NotReady5
06E9: 18       POP   A                  (0681)     pop   A
06EA: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0682) 
                                        (0683) 
                                        (0684)     ; disable the interrupt
                                        (0685)         ; *** NOT REENABLED ***
                                        (0686)         ;
                                        (0687)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
06ED: 49 D7 01 TST   REG[0xD7],0x1      (0688)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ;If there is a pending BYTE_COMPL here
                                        (0689)                                                                 ;it is highly probable that a start is not the
                                        (0690)                                                                                                                     ;correct thing to do.
                                        (0691)                                                                                                                     ;leaving
06F0: B0 20    JNZ   0x0711             (0692)     jnz   Err_Exit_Start
                                        (0693) 
06F2: 64       ASL   A                  (0694)     asl   a                                                ; Shift address to the left
06F3: 79       DEC   X                  (0695)     dec   x                                                ; If zero, C flag will be set
06F4: C0 03    JC    0x06F8             (0696)     jc    I2C_SndWRStart                                   ; Do a write if zero
06F6: 29 01    OR    A,0x1              (0697)     or    a,0x01                                           ; Set Read flag
                                        (0698) I2C_SndWRStart:
06F8: 60 D8    MOV   REG[0xD8],A        (0699)     mov   reg[I2CHW_DR], A
06FA: 53 04    MOV   [0x4],A            (0700)     mov   [I2CHW_SlaveAddr], A
06FC: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0701)     ;SetI2CHW_MSCR, I2CM_SNDSTRT
                                        (0702)     ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0703) 
                                        (0704) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0705)     SetI2CHW_MSCR I2CM_SNDSTRT
                                        (0706) ;ELSE
                                        (0707) ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0708) ;ENDIF
                                        (0709) 
                                        (0710) 
                                        (0711) WaitStrtByteCompl:
06FF: 5D D7    MOV   A,REG[0xD7]        (0712)     mov   A,  reg[I2CHW_SCR]
0701: 49 D7 01 TST   REG[0xD7],0x1      (0713)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0704: AF FA    JZ    0x06FF             (0714)     jz    WaitStrtByteCompl
0706: 49 D7 02 TST   REG[0xD7],0x2      (0715)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0709: B0 07    JNZ   0x0711             (0716)     jnz   Err_Exit_Start
070B: 55 03 01 MOV   [0x3],0x1          (0717)     mov   [I2CHW_bStatus], 0x01
070E: 50 01    MOV   A,0x1              (0718)     mov   A, 01
                                        (0719)     RAM_EPILOGUE RAM_USE_CLASS_4
0710: 7F       RET                      (0720)     ret
                                        (0721) Err_Exit_Start:
0711: 50 00    MOV   A,0x0              (0722)     mov   A, 0
                                        (0723)     RAM_EPILOGUE RAM_USE_CLASS_4
0713: 7F       RET                      (0724)     ret
0714: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0725) 
                                        (0726) I2C_DoStart:
                                        (0727)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0728)     RAM_SETPAGE_CUR >I2CHW_SlaveAddr
                                        (0729)     ;here we are not required to test for master operation since we are only attempting to gain control of the bus
                                        (0730)     ; by attempting to assert a Start
                                        (0731)     
0717: 60 D8    MOV   REG[0xD8],A        (0732)     mov   reg[I2CHW_DR], A
0719: 53 04    MOV   [0x4],A            (0733)     mov   [I2CHW_SlaveAddr], A
071B: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0734)     ;SetI2CHW_MSCR  I2CM_SNDSTRT
                                        (0735)     ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0736) 
                                        (0737) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0738)     SetI2CHW_MSCR I2CM_SNDSTRT
                                        (0739) ;ELSE
                                        (0740) ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0741) ;ENDIF
                                        (0742)     RAM_EPILOGUE RAM_USE_CLASS_4
071E: 7F       RET                      (0743)     ret
071F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0744) ;
                                        (0745) ;   DO NOT PLACE
                                        (0746) ;   .SECTION
                                        (0747) ;   .ENDSECTION
                                        (0748) ;   _fSendStart USES CODE BELOW
                                        (0749) ;
                                        (0750) ;-----------------------------------------------------------------------------
                                        (0751) ;  FUNCTION NAME: I2CHW_fWrite
                                        (0752) ;
                                        (0753) ;  DESCRIPTION:
                                        (0754) ;    Writes a byte to the I2C master bus.
                                        (0755) ;
                                        (0756) ;-----------------------------------------------------------------------------
                                        (0757) ;
                                        (0758) ;  ARGUMENTS:
                                        (0759) ;    A contains Data to be written to I2C slave.
                                        (0760) ;
                                        (0761) ;  RETURNS:
                                        (0762) ;    1 If ACKed, else 0
                                        (0763) ;
                                        (0764) ;  SIDE EFFECTS:
                                        (0765) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0766) ;
                                        (0767) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0768) ;
                                        (0769) ;  FUNCTION NAME: I2CHW_fWrite
                                        (0770) ;
                                        (0771) ;  DESCRIPTION:
                                        (0772) ;    Writes a data byte to the I2C master bus. 
                                        (0773) ;
                                        (0774) ;  ARGUMENTS:
                                        (0775) ;    Reg A contains slave address.
                                        (0776) ;    I2CHW_bData - Contains data to be transmitted.
                                        (0777) ;
                                        (0778) ;  RETURNS:
                                        (0779) ;    I2CHW_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0780) ;
                                        (0781) ;  SIDE EFFECTS:
                                        (0782) ;    The A and X registers may be modified by this or future implementations
                                        (0783) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0784) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0785) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0786) ;    functions.
                                        (0787) ;          
                                        (0788) ;    Currently only the page pointer registers listed below are modified: 
                                        (0789) ;          CUR_PP
                                        (0790) ;
                                        (0791) ;    Send data byte to slave. .
                                        (0792) ;
                                        (0793) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0794) ;    flag is set to return.
                                        (0795) ;
                                        (0796)  I2CHW_fWrite:
                                        (0797) _I2CHW_fWrite:
                                        (0798)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0799) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0800)     ; disable the interrupt
                                        (0801)         ; *** NOT REENABLED ***
                                        (0802)         ;
0722: 60 D8    MOV   REG[0xD8],A        (0803)     mov   reg[I2CHW_DR],A                                  ; Put data in Data Reg
0724: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0804)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0727: 5D D9    MOV   A,REG[0xD9]        (0805)     mov   A,  reg[I2CHW_MSCR]                              ;MSCR into A incase there is an error here
0729: 49 D9 04 TST   REG[0xD9],0x4      (0806)     tst   reg[I2CHW_MSCR],I2CM_MASTEROP                    ;Do we have control of the bus?
072C: A0 19    JZ    0x0746             (0807)     jz    Err_Exit_fWrite
                                        (0808) 
072E: 55 03 00 MOV   [0x3],0x0          (0809)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
0731: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0810)     ;SetI2CHW_SCR I2C_TX
                                        (0811)     ;mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
                                        (0812) 
                                        (0813) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0814)         SetI2CHW_SCR I2C_TX                                ; Put data in Data Reg
                                        (0815) ;ELSE
                                        (0816) ;    mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
                                        (0817) ;ENDIF
                                        (0818) 
                                        (0819) 
                                        (0820) I2CHW_write:
                                        (0821) _I2CHW_write:
                                        (0822) ;    mov   reg[I2CHW_SCR],A                                ; Put data in bData
                                        (0823) ;   jmp   I2CHW_get_ack                                    ; This jump is not required since it falls
                                        (0824) 
                                        (0825) WaitTXByteCompl:
0734: 5D D7    MOV   A,REG[0xD7]        (0826)     mov   A, reg[I2CHW_SCR]
0736: 49 D7 01 TST   REG[0xD7],0x1      (0827)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0739: AF FA    JZ    0x0734             (0828)     jz    WaitTXByteCompl
073B: 49 D7 02 TST   REG[0xD7],0x2      (0829)     tst   reg[I2CHW_SCR], I2C_LST_BIT
073E: B0 07    JNZ   0x0746             (0830)     jnz   Err_Exit_fWrite
0740: 55 03 FF MOV   [0x3],0xFF         (0831)     mov   [I2CHW_bStatus], 0xff
0743: 50 01    MOV   A,0x1              (0832)     mov   A, 01
                                        (0833)     RAM_EPILOGUE RAM_USE_CLASS_4
0745: 7F       RET                      (0834)     ret
                                        (0835) 
                                        (0836) Err_Exit_fWrite:
0746: 50 00    MOV   A,0x0              (0837)     mov   A, 0
0748: 53 03    MOV   [0x3],A            (0838)     mov   [I2CHW_bStatus], A
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
074A: 7F       RET                      (0840)     ret
074B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0841) 
                                        (0842) .ENDSECTION
                                        (0843) 
                                        (0844) .SECTION
                                        (0845) ;-----------------------------------------------------------------------------
                                        (0846) ;  FUNCTION NAME: I2CHW_get_ack
                                        (0847) ;
                                        (0848) ;  DESCRIPTION:
                                        (0849) ;    Get slave acknowledge response. Used to poll for I2C_BYTE_COMPL and then test Ack (I2C_LST_BIT)
                                        (0850) ;
                                        (0851) ;-----------------------------------------------------------------------------
                                        (0852) ;
                                        (0853) ;  ARGUMENTS:
                                        (0854) ;
                                        (0855) ;  RETURNS:
                                        (0856) ;    Sets flag in I2CHW_bStatus if ACKed by Slave.  !!!
                                        (0857) ;
                                        (0858) ;  SIDE EFFECTS:
                                        (0859) ;    The A and X registers may be modified by this or future implementations
                                        (0860) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0861) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0862) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0863) ;    functions.
                                        (0864) ;          
                                        (0865) ;    Currently only the page pointer registers listed below are modified: 
                                        (0866) ;          CUR_PP
                                        (0867) ;
                                        (0868) ;    Do the ack clock and check for Slave ACK
                                        (0869) ;
                                        (0870) I2CHW_get_ack:
                                        (0871) _I2CHW_get_ack:
                                        (0872)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0873) 	RAM_SETPAGE_CUR >I2CHW_bStatus
074E: 26 03 FE AND   [0x3],0xFE         (0874)     and [I2CHW_bStatus], ~I2CHW_SLAVE_ACKed
0751: 49 D7 01 TST   REG[0xD7],0x1      (0875)     tst reg[I2CHW_SCR], I2C_BYTE_COMPL
0754: BF F6    JNZ   0x074B             (0876)     jnz I2CHW_get_ack
0756: 49 D7 02 TST   REG[0xD7],0x2      (0877)     tst reg[I2CHW_SCR], I2C_LST_BIT
0759: B0 04    JNZ   0x075E             (0878)     jnz notAcked
075B: 2E 03 01 OR    [0x3],0x1          (0879)     or [I2CHW_bStatus], I2CHW_SLAVE_ACKed
                                        (0880) notAcked:
                                        (0881)     RAM_EPILOGUE RAM_USE_CLASS_4
075E: 7F       RET                      (0882)     ret
075F: 62 D0 00 MOV   REG[0xD0],0x0      
0762: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0883) 
                                        (0884) .ENDSECTION
                                        (0885) 
                                        (0886) .SECTION
                                        (0887) 
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;  FUNCTION NAME: I2CHW_bRead
                                        (0890) ;
                                        (0891) ;  DESCRIPTION:
                                        (0892) ;    Reads 1 data byte from the I2C master bus.
                                        (0893) ;
                                        (0894) ;-----------------------------------------------------------------------------
                                        (0895) ;
                                        (0896) ;  ARGUMENTS:
                                        (0897) ;    Reg A Contains the Slave Address.
                                        (0898) ;    I2CHW_bStatus - Set for no ack to be followed by stop.
                                        (0899) ;    Clear for ack to indicate more data to follow.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    I2CHW_bData - Contains received data.
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Must be followed by I2CHW_put_ack.
                                        (0915) ;    The I2CHW interrupt should be disabled since this routine will poll the
                                        (0916) ;    reg[I2CHW_SCR] to determine when a byte is available
                                        (0917) ;
                                        (0918) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0919) ;    flag is set to return.
                                        (0920) ;
                                        (0921) I2CHW_bRead:
                                        (0922) _I2CHW_bRead:
                                        (0923)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0924) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0925)     ; disable the interrupt
                                        (0926)     ; *** NOT REENABLED ***
                                        (0927)     ;
                                        (0928)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0765: 49 D9 04 TST   REG[0xD9],0x4      (0929)     tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
0768: A0 28    JZ    0x0791             (0930)     jz    notBusMaster2
                                        (0931) 
076A: 55 03 00 MOV   [0x3],0x0          (0932)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                                        (0933)     ;or    I2CHW_SEND_ACK                                  ; Set ACK flag
                                        (0934) ;
                                        (0935) ; Check for the special case of the first read after and address is sent
                                        (0936) ;
                                        (0937) 
076D: 08       PUSH  A                  (0938)     push  A                                                ;preserve the information about wether to ACK or NAK this byte
076E: 5D D7    MOV   A,REG[0xD7]        (0939)     mov   A, reg[I2CHW_SCR]
0770: 49 D7 08 TST   REG[0xD7],0x8      (0940)     tst   reg[I2CHW_SCR], I2C_ADDRIN
0773: A0 04    JZ    0x0778             (0941)     jz    WaitRXByteCompl                                  ;addr bit not set then this is a normal read
0775: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0942)     ;SetI2CHW_SCR 0
                                        (0943)     ;mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0944) 
                                        (0945) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0946)     SetI2CHW_SCR 0                                         ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0947) ;ELSE
                                        (0948) ;    mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0949) ;ENDIF
                                        (0950)                                                            ; through to I2CHW_put_ack.
                                        (0951) 
                                        (0952)     ;must DROP through to send an Ack and another byte,
                                        (0953)     ;to stop reading we NAK the slave
                                        (0954) WaitRXByteCompl:
0778: 49 D7 01 TST   REG[0xD7],0x1      (0955)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
077B: AF FC    JZ    0x0778             (0956)     jz    WaitRXByteCompl
                                        (0957) 
077D: 18       POP   A                  (0958)     pop   A                                                ;recover the saved ACK/NAK flag
077E: 21 FF    AND   A,0xFF             (0959)     and   A,0xFF                                           ; Is Ack flag set"
0780: A0 0A    JZ    0x078B             (0960)     jz    exit_bRead_NOACK                                 ; Don't ACK
                                        (0961) 
                                        (0962)         ;now if the ACK flag was set, Ack the data which will release the bus and start the next byte in
                                        (0963)         ;otherwise do NOTHING to the SCR reg.  This will allow the calling routine to generate a repeat start
                                        (0964)         ;or a stop depending on it's preference.
                                        (0965) 
                                        (0966) 
0782: 5D D8    MOV   A,REG[0xD8]        (0967)     mov   A, reg[I2CHW_DR]                                 ; Record data received
0784: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0968)     ;SetI2CHW_SCR I2C_ACKOUT
                                        (0969)     ;mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
                                        (0970) 
                                        (0971) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0972)     SetI2CHW_SCR I2C_ACKOUT                                ; Record data received
                                        (0973) ;ELSE
                                        (0974) ;    mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
                                        (0975) ;ENDIF
                                        (0976) 
0787: 55 03 01 MOV   [0x3],0x1          (0977)     mov   [I2CHW_bStatus],0x01                             ; Clear ACK flag
                                        (0978)     RAM_EPILOGUE RAM_USE_CLASS_4
078A: 7F       RET                      (0979)     ret
                                        (0980) 
                                        (0981) exit_bRead_NOACK:
078B: 5D D8    MOV   A,REG[0xD8]        (0982)     mov   A, reg[I2CHW_DR]                                 ; Record data received
                                        (0983)     ; send no Ack or Nak, the calling routine will have to decide to NAK or execute a repeat start.
                                        (0984)     ; sending nothing leaves the bus held in wait until a decision is made.
078D: 55 03 00 MOV   [0x3],0x0          (0985)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                                        (0986)     RAM_EPILOGUE RAM_USE_CLASS_4
0790: 7F       RET                      (0987)     ret
                                        (0988) 
                                        (0989) notBusMaster2:
0791: 55 03 FF MOV   [0x3],0xFF         (0990)    mov   [I2CHW_bStatus], 0xff
                                        (0991)    ;SetI2CHW_SCR 0
                                        (0992)    ;mov          reg[I2CHW_MSCR], 0                        ;we certainly cant restart if we've not Master
                                        (0993)    ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
                                        (0994)    RAM_EPILOGUE RAM_USE_CLASS_4
0794: 7F       RET                      (0995)    ret
                                        (0996) 
                                        (0997) .ENDSECTION
                                        (0998) 
                                        (0999) 
                                        (1000) .SECTION
                                        (1001) ;-----------------------------------------------------------------------------
                                        (1002) ;  FUNCTION NAME: I2CHW_SendStop
                                        (1003) ;
                                        (1004) ;  DESCRIPTION:
                                        (1005) ;    Assert stop condition.
                                        (1006) ;
                                        (1007) ;-----------------------------------------------------------------------------
                                        (1008) ;
                                        (1009) ;  ARGUMENTS: none
                                        (1010) ;
                                        (1011) ;  RETURNS: none
                                        (1012) ;
                                        (1013) ;  SIDE EFFECTS:
                                        (1014) ;    The A and X registers may be modified by this or future implementations
                                        (1015) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1016) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1017) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1018) ;    functions.
                                        (1019) ;
                                        (1020) ;  THEORY of OPERATION or PROCEDURE:
                                        (1021) ;     Send stop by releasing SDA high while SCL high. When in Master Read Mode, this
                                        (1022) ;     is done by nak'ing a read from the slave, in Master Write Mode this is done by clearing
                                        (1023) ;     the I2C_TX bit in  reg[I2CHW_SCR].  In either case this is a zero written to
                                        (1024) ;     reg[I2CHW_SCR].
                                        (1025) ;
                                        (1026)  I2CHW_SendStop:
                                        (1027) _I2CHW_SendStop:
                                        (1028)     RAM_PROLOGUE RAM_USE_CLASS_1
0795: 49 D9 04 TST   REG[0xD9],0x4      (1029)     tst   reg[I2CHW_MSCR], I2CM_MASTEROP                   ;do we even have control of the bus?
0798: A0 04    JZ    0x079D             (1030)     jz    notBusMaster3
079A: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (1031)     ;SetI2CHW_SCR 0
                                        (1032)     ;mov  reg[I2CHW_SCR], 0
                                        (1033) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (1034)     SetI2CHW_SCR 0                                         ; Put data in Data Reg
                                        (1035) ;ELSE
                                        (1036) ;    mov   reg[I2CHW_SCR], 0                               ; Put data in Data Reg
                                        (1037) ;ENDIF
                                        (1038) 
                                        (1039) notBusMaster3:
                                        (1040)     RAM_EPILOGUE RAM_USE_CLASS_1
079D: 7F       RET                      (1041)     ret
079E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1042) .ENDSECTION
                                        (1043) 
                                        (1044) .SECTION
                                        (1045) ;-----------------------------------------------------------------------------
                                        (1046) ;  FUNCTION NAME: I2CHW_bReadBusStatus
                                        (1047) ;
                                        (1048) ;  DESCRIPTION:
                                        (1049) ;     Returns the Status bits in the bStatus Register
                                        (1050) ;
                                        (1051) ;-----------------------------------------------------------------------------
                                        (1052) ;
                                        (1053) ;  ARGUMENTS:
                                        (1054) ;
                                        (1055) ;  RETURNS:
                                        (1056) ;     BYTE  bStatus -  Bus status data.  Use the following defined bits
                                        (1057) ;     returned in A.
                                        (1058) ;       I2CHW_RepStart:                     equ  0x01
                                        (1059) ;       I2CHW_NoStop:                       equ  0x02
                                        (1060) ;       I2CHW_NAKnextWr:                    equ  0x04
                                        (1061) ;
                                        (1062) ;  SIDE EFFECTS:
                                        (1063) ;    The A and X registers may be modified by this or future implementations
                                        (1064) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1065) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1066) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1067) ;    functions.
                                        (1068) ;          
                                        (1069) ;  THEORY of OPERATION or PROCEDURE:
                                        (1070) ;     Read the Bus Status register.
                                        (1071) ;
                                        (1072) 
                                        (1073)  I2CHW_bReadBusStatus:
                                        (1074) _I2CHW_bReadBusStatus:
                                        (1075)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1076)    RAM_SETPAGE_CUR >I2CHW_bStatus				                      ;Set the Page Pointer for LMM
07A1: 51 03    MOV   A,[0x3]            (1077)    mov   A, [I2CHW_bStatus]                      ;return the status in A
                                        (1078)    RAM_EPILOGUE RAM_USE_CLASS_4
07A3: 7F       RET                      (1079)    ret
                                        (1080) 
                                        (1081) .ENDSECTION
                                        (1082) 
                                        (1083) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1084) .SECTION
                                        (1085) ;-----------------------------------------------------------------------------
                                        (1086) ;  FUNCTION NAME: I2CHW_fReadBytes
                                        (1087) ;
                                        (1088) ;  DESCRIPTION:
                                        (1089) ;
                                        (1090) ;-----------------------------------------------------------------------------
                                        (1091) ;
                                        (1092) ;  ARGUMENTS:
                                        (1093) ;      A => Address of slave
                                        (1094) ;      X => Pointer to other arguments.
                                        (1095) ;    [x] => LSB of Array address to put data in.
                                        (1096) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (1097) ;  [X-2] => Count of bytes to read.
                                        (1098) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (1099) ;           to determine if:
                                        (1100) ;             0x01 => Use RepeatStart instead of Start
                                        (1101) ;             0x02 => Don't send Stop
                                        (1102) ;
                                        (1103) ;  RETURNS:       None
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;    I2C and block must be operational.
                                        (1117) ;    This routine will enable the I2C interrupt!
                                        (1118) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (1119) ;    pend on the ISR_ACTIVE bit until it can run
                                        (1120) ;
                                        (1121) IF	(TOOLCHAIN & HITECH)
                                        (1122) RxArray:      set   0
                                        (1123) RxByteCount:  set  -2
                                        (1124) RxMode:       set  -3
                                        (1125) ELSE
                                        (1126) RxArray:      equ   0
                                        (1127) RxByteCount:  equ  -2
                                        (1128) RxMode:       equ  -3
                                        (1129) ENDIF
                                        (1130) 
                                        (1131) 
                                        (1132)  I2CHW_fReadBytes:
                                        (1133)     push  A
                                        (1134) I2CMSCR_NotReady1Smm:
                                        (1135)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1136)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1137)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1138)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1139)           ;For multi master operations, a pening start or restart
                                        (1140)           ;request might be OK, the master might be waiting to
                                        (1141)           ;acquire the bus from another master
                                        (1142)         jnz   I2CMSCR_NotReady1Smm
                                        (1143)     pop   A
                                        (1144)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared by ISR
                                        (1145)     asl   A                                                ; Shift address to the left to make
                                        (1146)                                                            ; a complete byte with the R/W bit.
                                        (1147)     or    A,0x01                                           ; OR the address with the Read bit.
                                        (1148)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1149)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1150)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1151)     mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1152)     mov   [I2CHW_bStatus],A
                                        (1153)     ;
                                        (1154)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1155)         ;
                                        (1156)         push   X                                                ;preserve since it's used later
                                        (1157)         mov    A, [X+RxByteCount]                               ;get the write buf size
                                        (1158)         push   A
                                        (1159)         push   A                                                                                            ;this will be ignored
                                        (1160)         mov    A, [X+RxArray]                                   ;get the write buf addr
                                        (1161)         push   A
                                        (1162)         mov    X, sp
                                        (1163)         dec    X
                                        (1164)         call  I2CHW_InitWrite                              ;sets the addr and byte count to write to
                                        (1165)         add SP, -3
                                        (1166)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1167) 
                                        (1168)     mov   A,[I2CHW_SlaveAddr]
                                        (1169)     tst   [x+RxMode],I2CHW_RepStart
                                        (1170)     jnz   DoRestartRxSmm
                                        (1171)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1172)     jnz   DoRestartRxSmm
                                        (1173)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1174)     jmp   CheckRxAckSmm
                                        (1175) DoRestartRxSmm:
                                        (1176)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1177)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (1178)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (1179)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (1180) 
                                        (1181) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
                                        (1182)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (1183)         ;is finished.
                                        (1184) ;End_RD:
                                        (1185)     ret
                                        (1186) 
                                        (1187) .ENDSECTION
                                        (1188) 
                                        (1189) .SECTION
                                        (1190) ;-----------------------------------------------------------------------------
                                        (1191) ;  FUNCTION NAME: I2CHW_bWriteBytes
                                        (1192) ;
                                        (1193) ;  DESCRIPTION:
                                        (1194) ;    Write multiple data bits to slave device.
                                        (1195) ;
                                        (1196) ;-----------------------------------------------------------------------------
                                        (1197) ;
                                        (1198) ;  ARGUMENTS:
                                        (1199) ;     A => Address of slave
                                        (1200) ;     X => Pointer to other arguments.
                                        (1201) ;   [x] => LSB of Array address to put data in.
                                        (1202) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (1203) ; [X-2] => Count of bytes to write.
                                        (1204) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (1205) ;          to determine if:
                                        (1206) ;              0x01 => Use RePeatStart instead of Start
                                        (1207) ;              0x02 => Don't send Stop
                                        (1208) ;
                                        (1209) ;
                                        (1210) ;  RETURNS:     None
                                        (1211) ;
                                        (1212) ;  SIDE EFFECTS:
                                        (1213) ;    The A and X registers may be modified by this or future implementations
                                        (1214) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1215) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1216) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1217) ;    functions.
                                        (1218) ;          
                                        (1219) IF	(TOOLCHAIN & HITECH)
                                        (1220) TxArray:      set   0
                                        (1221) TxByteCount:  set  -2
                                        (1222) TxMode:       set  -3
                                        (1223) ELSE
                                        (1224) TxArray:      equ   0
                                        (1225) TxByteCount:  equ  -2
                                        (1226) TxMode:       equ  -3
                                        (1227) ENDIF
                                        (1228) 
                                        (1229)  I2CHW_bWriteBytes:
                                        (1230)     push  A
                                        (1231) I2CMSCR_NotReady2Smm:
                                        (1232)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1233)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1234)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1235)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1236)           ;For multi master operations, a pening start or restart
                                        (1237)           ;request might be OK, the master might be waiting to
                                        (1238)           ;acquire the bus from another master
                                        (1239)         jnz   I2CMSCR_NotReady2Smm
                                        (1240)     pop   A
                                        (1241)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared at end of ISR
                                        (1242)     asl   A                                                ; Shift address to the left to make
                                        (1243)                                                            ; a complete byte with the R/W bit.
                                        (1244)                                                            ; The ASL takes care of clearing bit 0.
                                        (1245)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1246)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1247)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1248)     mov   A, [X+TxMode]                                                             ; place the TxMode in status so ISR can access it
                                        (1249)     mov   [I2CHW_bStatus],A
                                        (1250)     ;
                                        (1251)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1252)         ;
                                        (1253)         push   X                                                ;preserve since it's used later
                                        (1254)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1255)                                                                 ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1256)         mov    A, [X+TxByteCount]                               ;get the write buf size
                                        (1257)         push   A
                                        (1258)         push   A                                                                                            ;this will be ignored
                                        (1259)         mov    A, [X+TxArray]                                   ;get the write buf addr
                                        (1260)         push   A
                                        (1261)         mov    X, sp
                                        (1262)         dec    X
                                        (1263)         call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
                                        (1264)         add    SP, -3
                                        (1265)         pop    X                                                ;restore X to be used for the rest of this routine
                                        (1266)     ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (1267) 
                                        (1268) 
                                        (1269)     mov   A,[I2CHW_SlaveAddr]
                                        (1270)     tst   [x+TxMode],I2CHW_RepStart
                                        (1271)     jnz   DoRestartTxSmm
                                        (1272)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1273)     jnz   DoRestartRxSmm
                                        (1274)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1275)     jmp   DoTxAckSmm
                                        (1276) DoRestartTxSmm:
                                        (1277)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1278) DoTxAckSmm:
                                        (1279) 
                                        (1280) 
                                        (1281) ;WriteSlaveAck:
                                        (1282)     ret
                                        (1283) 
                                        (1284) .ENDSECTION
                                        (1285) 
                                        (1286) .SECTION
                                        (1287) ;-----------------------------------------------------------------------------
                                        (1288) ;  FUNCTION NAME: I2CHW_bWriteCBytes
                                        (1289) ;
                                        (1290) ;  DESCRIPTION:
                                        (1291) ;    Write multiple data bits to slave device from ROM
                                        (1292) ;
                                        (1293) ;-----------------------------------------------------------------------------
                                        (1294) ;
                                        (1295) ;  ARGUMENTS:
                                        (1296) ;      A => Address of slave
                                        (1297) ;      X => Pointer to other arguments.
                                        (1298) ;     [x] => LSB of ROM Array address to put data in.
                                        (1299) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (1300) ;   [X-2] => Count of bytes to write.
                                        (1301) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (1302) ;            to determine if:
                                        (1303) ;               0x01 => Use RepeatStart instead of Start
                                        (1304) ;               0x02 => Don't send Stop
                                        (1305) ;
                                        (1306) ;  RETURNS:
                                        (1307) ;    None
                                        (1308) ;
                                        (1309) ;  SIDE EFFECTS:
                                        (1310) ;    The A and X registers may be modified by this or future implementations
                                        (1311) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1313) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1314) ;    functions.
                                        (1315) ;          
                                        (1316) IF	(TOOLCHAIN & HITECH)
                                        (1317) TxCArrayLSB:   set   0
                                        (1318) TxCArrayMSB:   set  -1
                                        (1319) TxCByteCount:  set  -2
                                        (1320) TxCMode:       set  -3
                                        (1321) ELSE
                                        (1322) TxCArrayLSB:   equ   0
                                        (1323) TxCArrayMSB:   equ  -1
                                        (1324) TxCByteCount:  equ  -2
                                        (1325) TxCMode:       equ  -3
                                        (1326) ENDIF
                                        (1327) 
                                        (1328)  I2CHW_bWriteCBytes:
                                        (1329)     push  A
                                        (1330) I2CMSCR_NotReady3Smm:
                                        (1331)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1332)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1333)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1334)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1335)           ;For multi master operations, a pening start or restart
                                        (1336)           ;request might be OK, the master might be waiting to
                                        (1337)           ;acquire the bus from another master
                                        (1338)         jnz   I2CMSCR_NotReady3Smm
                                        (1339)     pop   A
                                        (1340)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
                                        (1341)         asl   A                                                 ; Shift address to the left to make
                                        (1342)                                                            ; a complete byte with the R/W bit.
                                        (1343)                                                            ; The ASL takes care of clearing bit 0.
                                        (1344)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1345)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1346)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1347)         mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1348)     mov   [I2CHW_bStatus],A
                                        (1349)     ;
                                        (1350)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1351)         ;
                                        (1352)         push   X                                                ;preserve X since it's used later
                                        (1353)         mov    A, 0                                             ;get the write buf size (this is the hi order part)
                                        (1354)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1355)         jnc     . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1356)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
                                        (1357)         push   A
                                        (1358)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
                                        (1359)         push   A
                                        (1360)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
                                        (1361)         push   A                                                                                        ;this will be ignored
                                        (1362)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
                                        (1363)         push   A
                                        (1364)         mov    X, sp
                                        (1365)         dec    X
                                        (1366)         call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
                                        (1367)         add SP, -4
                                        (1368)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1369)     ;or  [I2CHW_RsrcStatus],I2C_READFLASH
                                        (1370)     mov   A,[I2CHW_SlaveAddr]
                                        (1371)     tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
                                        (1372)     jnz   DoCRestartTxSmm                                      ; should executed.
                                        (1373)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1374)     jnz   DoRestartRxSmm
                                        (1375)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1376)     jmp   DoCTxAckSmm
                                        (1377) DoCRestartTxSmm:
                                        (1378)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1379) 
                                        (1380) DoCTxAckSmm:                                                   ; Test to see if Slave is ACKed
                                        (1381) 
                                        (1382) ;CWriteSlaveAck:
                                        (1383)         ret
                                        (1384) 
                                        (1385) .ENDSECTION
                                        (1386) 
                                        (1387) 
                                        (1388) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (1389) 
                                        (1390) ; End of File I2CHW.asm
                                        (1391) 
                                        (1392) 
FILE: lib\i2chwint.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHWINT.asm
                                        (0004) ;;   Version: 1.90, Updated on 2012/3/2 at 9:14:43
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CHW Master Interrupt Service Routine
                                        (0008) ;;  This is the interrupt service routine for the Single Master I2C function.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "I2CHWCommon.inc"
                                        (0017) include "I2CHWMstr.inc"
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export     I2CHW_Read_Count
                                        (0024) export    _I2CHW_Read_Count
                                        (0025) export     I2CHW_Write_Count
                                        (0026) export    _I2CHW_Write_Count
                                        (0027) 
                                        (0028) export    pI2CHW_Read_BufLO
                                        (0029) export   _pI2CHW_Read_BufLO
                                        (0030) export    pI2CHW_Write_BufLO
                                        (0031) export   _pI2CHW_Write_BufLO
                                        (0032) export    I2CHW_RsrcStatus
                                        (0033) export   _I2CHW_RsrcStatus
                                        (0034) export    I2CHW_SlaveAddr
                                        (0035) export   _I2CHW_SlaveAddr
                                        (0036) 
                                        (0037) ;-----------------------------------------------
                                        (0038) ; WARNING: The variables below are deprecated
                                        (0039) ; and have been replaced with Read_BufLO
                                        (0040) ; and Write_BufLO
                                        (0041) ;-----------------------------------------------
                                        (0042) export    pI2CHW_Read_Buf
                                        (0043) export   _pI2CHW_Read_Buf
                                        (0044) export    pI2CHW_Write_Buf
                                        (0045) export   _pI2CHW_Write_Buf
                                        (0046) ;-----------------------------------------------
                                        (0047) ; END WARNING
                                        (0048) ;-----------------------------------------------
                                        (0049)  
                                        (0050) area InterruptRAM(RAM, REL, CON)
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ; Variable Allocation
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056)   I2CHW_SlaveAddr:
                                        (0057)  _I2CHW_SlaveAddr:                           blk      1
                                        (0058)   I2CHW_RsrcStatus:
                                        (0059)  _I2CHW_RsrcStatus:                          blk     1
                                        (0060)   I2CHW_Write_Count:
                                        (0061)  _I2CHW_Write_Count:                         blk    1
                                        (0062) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0063) export    pI2CHW_Write_BufHI
                                        (0064) export   _pI2CHW_Write_BufHI
                                        (0065) 
                                        (0066)  pI2CHW_Write_BufHI:
                                        (0067) _pI2CHW_Write_BufHI:                         blk     1
                                        (0068) ENDIF
                                        (0069) ;-----------------------------------------------
                                        (0070) ; WARNING: The variable below is deprecated
                                        (0071) ; and has been replaced Write_BufLO
                                        (0072) ;-----------------------------------------------
                                        (0073)  pI2CHW_Write_Buf:
                                        (0074) _pI2CHW_Write_Buf:
                                        (0075) ;-----------------------------------------------
                                        (0076) ; END WARNING
                                        (0077) ;-----------------------------------------------
                                        (0078)  pI2CHW_Write_BufLO:
                                        (0079) _pI2CHW_Write_BufLO:                         blk      1
                                        (0080) 
                                        (0081) IF I2CHW_READ_FLASH
                                        (0082) export    pI2CHW_Read_BufHI
                                        (0083) export   _pI2CHW_Read_BufHI
                                        (0084) 
                                        (0085)  pI2CHW_Read_BufHI:
                                        (0086) _pI2CHW_Read_BufHI:                          blk     1
                                        (0087) ELSE
                                        (0088) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0089) export    pI2CHW_Read_BufHI
                                        (0090) export   _pI2CHW_Read_BufHI
                                        (0091) 
                                        (0092)  pI2CHW_Read_BufHI:
                                        (0093) _pI2CHW_Read_BufHI:                          blk     1
                                        (0094) ENDIF
                                        (0095) ENDIF
                                        (0096) 
                                        (0097) ;-----------------------------------------------
                                        (0098) ; WARNING: The variable below is deprecated
                                        (0099) ; and has been replaced Read_BufLO
                                        (0100) ;-----------------------------------------------
                                        (0101)  pI2CHW_Read_Buf:
                                        (0102) _pI2CHW_Read_Buf:
                                        (0103) ;-----------------------------------------------
                                        (0104) ; END WARNING
                                        (0105) ;-----------------------------------------------
                                        (0106)  pI2CHW_Read_BufLO:
                                        (0107) _pI2CHW_Read_BufLO:                          blk       1
                                        (0108) 
                                        (0109) IF I2CHW_READ_FLASH
                                        (0110) export    I2CHW_Read_CountHI
                                        (0111) export   _I2CHW_Read_CountHI
                                        (0112) 
                                        (0113)  I2CHW_Read_CountHI:
                                        (0114) _I2CHW_Read_CountHI:                         blk    1
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)  I2CHW_Read_Count:
                                        (0118) _I2CHW_Read_Count:                           blk      1
                                        (0119) 
                                        (0120) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0121) ;---------------------------------------------------
                                        (0122) ; Insert your custom declarations below this banner
                                        (0123) ;---------------------------------------------------
                                        (0124) 
                                        (0125) ;------------------------
                                        (0126) ; Includes
                                        (0127) ;------------------------
                                        (0128) 
                                        (0129) 	
                                        (0130) ;------------------------
                                        (0131) ;  Constant Definitions
                                        (0132) ;------------------------
                                        (0133) 
                                        (0134) 
                                        (0135) ;------------------------
                                        (0136) ; Variable Allocation
                                        (0137) ;------------------------
                                        (0138) 
                                        (0139) 
                                        (0140) ;---------------------------------------------------
                                        (0141) ; Insert your custom declarations above this banner
                                        (0142) ;---------------------------------------------------
                                        (0143) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0144) 
                                        (0145) 
                                        (0146) 
                                        (0147) AREA UserModules (ROM, REL)
                                        (0148) 
                                        (0149) 
                                        (0150) export _I2CHW_ISR
                                        (0151) ;;****************************************************
                                        (0152) ;; I2C_MASTER  main entry point from vector 60h
                                        (0153) ;;
                                        (0154) ;;****************************************************
                                        (0155) 
                                        (0156) 
                                        (0157) _I2CHW_ISR:
07A4: 08       PUSH  A                  (0158)     push A
07A5: 10       PUSH  X                  (0159)     push X
07A6: 5D D3    MOV   A,REG[0xD3]        
07A8: 08       PUSH  A                  
                                        (0160) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0161)     REG_PRESERVE IDX_PP
                                        (0162) ENDIF
                                        (0163)     
                                        (0164)     ; Stop trap is not recommended because the stop bit cannot be cleared
                                        (0165)     ; User may choose to enable it
                                        (0166)     ; Add code to handle stop condition here
                                        (0167) 
07A9: 49 D7 08 TST   REG[0xD7],0x8      (0168)     tst reg[I2CHW_SCR], I2C_ADDRIN
07AC: A0 18    JZ    0x07C5             (0169)     jz DataState
                                        (0170)     ;test for a start condition sent out, or bus error, ack from slave, or (lost arb & addr)
                                        (0171) AddrState:
07AE: 49 D9 01 TST   REG[0xD9],0x1      (0172)     tst reg[I2CHW_MSCR], I2CM_SNDSTRT
07B1: B0 2F    JNZ   0x07E1             (0173)     jnz NoStart
07B3: 49 D7 02 TST   REG[0xD7],0x2      (0174)     tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
07B6: B0 1E    JNZ   0x07D5             (0175)     jnz SlaveAddrNAK
                                        (0176)                                                            ;slave must have acked here
                                        (0177)                                                            
07B8: 47 04 01 TST   [0x4],0x1          (0178)     tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read (from slave and put it in RAM,
                                        (0179)                                                            ;bit 0 = 0 then write to slave and get it from RAM or Flash
07BB: B0 2E    JNZ   0x07EA             (0180)     jnz I2C_ReadSlave1stByte                               ;bit 0 was 1
07BD: 80 A7    JMP   0x0865             (0181)     jmp I2C_WriteSlave1stByte                              ;bit 0 was 0
07BF: 18       POP   A                  
07C0: 60 D3    MOV   REG[0xD3],A        
                                        (0182) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0183)     REG_RESTORE IDX_PP
                                        (0184) ENDIF
07C2: 20       POP   X                  (0185)     pop X
07C3: 18       POP   A                  (0186)     pop A
07C4: 7E       RETI                     (0187)     reti
                                        (0188) 
                                        (0189) DataState:
07C5: 2E 05 80 OR    [0x5],0x80         (0190)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
07C8: 47 04 01 TST   [0x4],0x1          (0191)     tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read, bit 0 = 0 then write
07CB: B0 2D    JNZ   0x07F9             (0192)     jnz I2C_ReadSlave                                      ;bit 0 was 1
                                        (0193) 
                                        (0194) StillDataToWrite:
07CD: 80 9D    JMP   0x086B             (0195)     jmp I2C_WriteSlave                                     ;bit 0 was 0
07CF: 18       POP   A                  
07D0: 60 D3    MOV   REG[0xD3],A        
                                        (0196) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0197)     REG_RESTORE IDX_PP
                                        (0198) ENDIF
07D2: 20       POP   X                  (0199)     pop X
07D3: 18       POP   A                  (0200)     pop A
07D4: 7E       RETI                     (0201)     reti
07D5: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0202) 
                                        (0203) 
                                        (0204) SlaveAddrNAK:
                                        (0205)     ;;
                                        (0206)     ;; all there is to do here is to return, the slave didn't respond so it's not there or needs
                                        (0207)     ;; to be tried later.
                                        (0208)     ;;
                                        (0209) ;@PSoC_UserCode_BODY4@ (Do not change this line.)
                                        (0210) ;---------------------------------------------------
                                        (0211) ; Insert your custom code below this banner
                                        (0212) ; to modify the way a NAK from a slave is handled
                                        (0213) ; possibly set a user defined status
                                        (0214) ;---------------------------------------------------
                                        (0215) 
                                        (0216) ;********************************************************
                                        (0217) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0218) ;********************************************************
                                        (0219) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0220) ;
                                        (0221) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0222) ;
                                        (0223)     SetI2CHW_SCR 0     ;sets the tx/rx bit to receive, generates a stop without sending any data
                                        (0224) 
07D8: 26 05 7F AND   [0x5],0x7F         (0225)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
07DB: 18       POP   A                  
07DC: 60 D3    MOV   REG[0xD3],A        
                                        (0226) 
                                        (0227) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0228)     REG_RESTORE IDX_PP
                                        (0229) ENDIF
07DE: 20       POP   X                  (0230)     pop X
07DF: 18       POP   A                  (0231)     pop A
07E0: 7E       RETI                     (0232)     reti
                                        (0233) 
                                        (0234) NoStart:
                                        (0235)     ;here might test loss of arbitration and the presence of an address bit indicating that the
                                        (0236)     ;Master is being addressed as a slave.
                                        (0237)     ;;
                                        (0238)     ;; there may be a need to indicate that there was a Master transmission
                                        (0239)     ;; failure or an unsuccessful attempt.
                                        (0240)     ;;
07E1: 26 05 7F AND   [0x5],0x7F         (0241)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
07E4: 18       POP   A                  
07E5: 60 D3    MOV   REG[0xD3],A        
                                        (0242) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0243)     REG_RESTORE IDX_PP
                                        (0244) ENDIF
07E7: 20       POP   X                  (0245)     pop X
07E8: 18       POP   A                  (0246)     pop A
07E9: 7E       RETI                     (0247)     reti
                                        (0248) 
                                        (0249) I2C_ReadSlave1stByte:
07EA: 2E 05 80 OR    [0x5],0x80         (0250)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
07ED: 26 05 FB AND   [0x5],0xFB         (0251)     and [I2CHW_RsrcStatus], ~I2CHW_RD_COMPLETE
07F0: 62 D7 00 MOV   REG[0xD7],0x0      
07F3: 18       POP   A                  
07F4: 60 D3    MOV   REG[0xD3],A        
                                        (0252) 
                                        (0253) ;read normal data in from slave immediately after the address is sent, there is no data to read
                                        (0254) ;but the bus is stalled at byte complete
                                        (0255) 
                                        (0256) ;
                                        (0257) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0258) ;
                                        (0259)     SetI2CHW_SCR 0     ;sets the tx/rx bit to receive, and clocks a byte in
                                        (0260) 
                                        (0261) 
                                        (0262) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0263)     REG_RESTORE IDX_PP
                                        (0264) ENDIF
07F6: 20       POP   X                  (0265)     pop X
07F7: 18       POP   A                  (0266)     pop A
07F8: 7E       RETI                     (0267)     reti
                                        (0268) 
                                        (0269) I2C_ReadSlave:                                             ;this is just a normal read
                                        (0270) 
                                        (0271) 
                                        (0272) ;;code snipped from old SW I2C below
                                        (0273) ;
                                        (0274) ; MASTER READ from SLAVE
                                        (0275) ; (and writing to it's own RAM--Write_Buf and Write_Cnt)
                                        (0276) ;
                                        (0277) ;@PSoC_UserCode_BODY1_V1.2@ (Do not change this line.)
                                        (0278) ;---------------------------------------------------
                                        (0279) ; Insert your custom code below this banner
                                        (0280) ;---------------------------------------------------
                                        (0281) 
                                        (0282) ;********************************************************
                                        (0283) ; By modifying the section from here down to the next comment block
                                        (0284) ; a user could process data for a custom I2C Master Read (write to RAM) application
                                        (0285) ; NOTE: I2C handshakes (ACK/NAK may be effected by any introduced bugs)
                                        (0286) ;********************************************************
07F9: 47 03 04 TST   [0x3],0x4          (0287)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
07FC: B0 14    JNZ   0x0811             (0288)    jnz   InStoreData
                                        (0289)    ;
                                        (0290)    ;process write data here
                                        (0291)    ;
07FE: 7A 06    DEC   [0x6]              (0292)    dec   [I2CHW_Write_Count]
0800: C0 4F    JC    0x0850             (0293)    jc    CompleteRDXfer                                              ; carry set if value became -1
                                        (0294)    ;jz    InStoreData                                                                                             ;In theory overflow cant happen but stop the transaction anyway.
0802: 3C 06 00 CMP   [0x6],0x0          (0295)    cmp   [I2CHW_Write_Count], 00                                     ;set nak flag, dec count, and store data
0805: A0 03    JZ    0x0809             (0296)    jz    InNakNextByte
0807: 80 06    JMP   0x080E             (0297)    jmp   InNotBufEnd
                                        (0298) InNakNextByte:                                                       ;set the nakflag in I2CHW_bStatus
0809: 2E 03 04 OR    [0x3],0x4          (0299)    or    [I2CHW_bStatus], fI2C_NAKnextWr
080C: 80 04    JMP   0x0811             (0300)    jmp   InStoreData
                                        (0301) InNotBufEnd:
080E: 26 03 FB AND   [0x3],0xFB         (0302)    and   [I2CHW_bStatus], ~fI2C_NAKnextWr                            ;clear the nak flag in case it was set from a previous operation
                                        (0303) InStoreData:
                                        (0304)    ;This is the ONLY place this bit is set  This bit should never be cleared by the isr ONLY by the API ClrWrStatus()
0811: 2E 05 10 OR    [0x5],0x10         (0305)    or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR                          ;set current status
                                        (0306) IF SYSTEM_LARGE_MEMORY_MODEL
0814: 51 07    MOV   A,[0x7]            (0307)    mov   A, [pI2CHW_Write_BufHI]
0816: 60 D3    MOV   REG[0xD3],A        
                                        (0308) ENDIF
                                        (0309)    RAM_SETPAGE_IDX A
0818: 58 08    MOV   X,[0x8]            (0310)    mov   X, [pI2CHW_Write_BufLO]
081A: 5D D8    MOV   A,REG[0xD8]        (0311)    mov   A, reg[I2CHW_DR]
081C: 70 3F    AND   F,0x3F             
081E: 71 80    OR    F,0x80             
                                        (0312)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0820: 54 00    MOV   [X+0],A            (0313)    mov   [X], A
0822: 70 3F    AND   F,0x3F             
0824: 71 00    OR    F,0x0              
                                        (0314)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0826: 76 08    INC   [0x8]              (0315)    inc   [pI2CHW_Write_BufLO]
                                        (0316) 
0828: 47 03 04 TST   [0x3],0x4          (0317)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
082B: B0 0A    JNZ   0x0836             (0318)    jnz   NAK_this_one
082D: 62 D7 10 MOV   REG[0xD7],0x10     
0830: 18       POP   A                  
0831: 60 D3    MOV   REG[0xD3],A        
                                        (0319) 
                                        (0320) ;********************************************************
                                        (0321) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0322) ;********************************************************
                                        (0323) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0324) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0325) 
                                        (0326) ;
                                        (0327) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0328) ;
                                        (0329)     SetI2CHW_SCR I2C_ACKOUT                                          ;send Ack
                                        (0330) 
                                        (0331) 
                                        (0332) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0333)     REG_RESTORE IDX_PP
                                        (0334) ENDIF
0833: 20       POP   X                  (0335)     pop X
0834: 18       POP   A                  (0336)     pop A
0835: 7E       RETI                     (0337)     reti
                                        (0338) 
                                        (0339) NAK_this_one:
                                        (0340) 
0836: 26 03 FB AND   [0x3],0xFB         (0341)     and  [I2CHW_bStatus], ~fI2C_NAKnextWr
                                        (0342) 
                                        (0343)     ; *****
                                        (0344)     ; here we may need to look at the mode that this was called under
                                        (0345)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0346)     ; ******
0839: 26 05 F8 AND   [0x5],0xF8         (0347)     and   [I2CHW_RsrcStatus], ~0x07                                  ;clear the read status bits
083C: 2E 05 01 OR    [0x5],0x1          (0348)     or    [I2CHW_RsrcStatus], I2CHW_RD_NOERR
083F: 2E 05 04 OR    [0x5],0x4          (0349)     or    [I2CHW_RsrcStatus], I2CHW_RD_COMPLETE
                                        (0350) 
0842: 26 03 03 AND   [0x3],0x3          (0351)     and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
0845: A0 0A    JZ    0x0850             (0352)     jz      CompleteRDXfer
0847: 26 05 7F AND   [0x5],0x7F         (0353)     and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
084A: 18       POP   A                  
084B: 60 D3    MOV   REG[0xD3],A        
                                        (0354) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0355)     REG_RESTORE IDX_PP
                                        (0356) ENDIF
084D: 20       POP   X                  (0357)     pop X
084E: 18       POP   A                  (0358)     pop A
084F: 7E       RETI                     (0359)     reti
0850: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0360)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0361)     ;The NAK (not I2C_SNDACK) bit in I2C_SCR below will automatically generate a stop
                                        (0362) 
                                        (0363) CompleteRDXfer:
                                        (0364) 
                                        (0365) ;
                                        (0366) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0367) ;
                                        (0368)     SetI2CHW_SCR 0                                                   ;send Ack
                                        (0369) 
                                        (0370) 
0853: 26 05 7F AND   [0x5],0x7F         (0371)     and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0856: 18       POP   A                  
0857: 60 D3    MOV   REG[0xD3],A        
                                        (0372) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0373)     REG_RESTORE IDX_PP
                                        (0374) ENDIF
0859: 20       POP   X                  (0375)     pop X
085A: 18       POP   A                  (0376)     pop A
085B: 7E       RETI                     (0377)     reti                                                             ;return and wait for the next interrupt (on data)
085C: 62 D7 10 MOV   REG[0xD7],0x10     
085F: 18       POP   A                  
0860: 60 D3    MOV   REG[0xD3],A        
                                        (0378) 
                                        (0379) AckTheRead:
                                        (0380) 
                                        (0381) ;
                                        (0382) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0383) ;
                                        (0384)     SetI2CHW_SCR I2C_ACKOUT                                          ;send Ack
                                        (0385) 
                                        (0386) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0387)     REG_RESTORE IDX_PP
                                        (0388) ENDIF
0862: 20       POP   X                  (0389)     pop X
0863: 18       POP   A                  (0390)     pop A
0864: 7E       RETI                     (0391)     reti
                                        (0392) 
                                        (0393) 
                                        (0394) I2C_WriteSlave1stByte:
                                        (0395) ;write normal data to slave
0865: 26 05 BF AND   [0x5],0xBF         (0396)     and [I2CHW_RsrcStatus], ~I2CHW_WR_COMPLETE
0868: 2E 05 80 OR    [0x5],0x80         (0397)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0398) 
                                        (0399) 
                                        (0400) I2C_WriteSlave:
                                        (0401) 
086B: 49 D7 02 TST   REG[0xD7],0x2      (0402)     tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
086E: B0 4C    JNZ   0x08BB             (0403)     jnz SlaveDataNAK
0870: 50 04    MOV   A,0x4              (0404)     mov A, (I2C_TX)
0872: 08       PUSH  A                  (0405)     push A
                                        (0406) 
                                        (0407) ;
                                        (0408) ;MASTER is WRITING TO SLAVE (& reading data from ram or flash buffer)
                                        (0409) ;
                                        (0410) ;;code snipped from SW I2C below
                                        (0411) 
                                        (0412) I2C_ObtainOutData:
                                        (0413) 
                                        (0414) 
                                        (0415) ;********************************************************
                                        (0416) ; here we need to get the next data to output (master-read)
                                        (0417) ; also set the status byte for use on exit
                                        (0418) ;********************************************************
                                        (0419) IF I2CHW_READ_FLASH
                                        (0420) ;@PSoC_UserCode_BODY2_V1.2@ (Do not change this line.)
                                        (0421) ;---------------------------------------------------
                                        (0422) ; Insert your custom code below this banner
                                        (0423) ; to modify the way a master might read non-volitile data
                                        (0424) ; to send.
                                        (0425) ;---------------------------------------------------
                                        (0426) 
                                        (0427)     tst  [I2CHW_RsrcStatus],I2CHW_READFLASH
                                        (0428)     jz   ReadOutData
                                        (0429) 
                                        (0430)     ;
                                        (0431)     ;get the data
                                        (0432)     ;
                                        (0433)     mov  X, [pI2CHW_Read_BufLO]
                                        (0434)     mov  A, [pI2CHW_Read_BufHI]
                                        (0435)     romx
                                        (0436)     mov  reg[I2CHW_DR],A
                                        (0437)     dec  [I2CHW_Read_Count]                                          ;calc addr lsb
                                        (0438)     jnc  NoDecHighCount
                                        (0439)     dec  [I2CHW_Read_CountHI]
                                        (0440) 
                                        (0441)     jc   MstrWRComplete
                                        (0442) 
                                        (0443) NoDecHighCount:
                                        (0444) 
                                        (0445)     inc  [pI2CHW_Read_BufLO]                                         ;set the next flash address to read
                                        (0446)     jnc  NoIncHiAddr
                                        (0447)     inc  [pI2CHW_Read_BufHI]
                                        (0448) NoIncHiAddr:
                                        (0449)    jmp   I2CNormalOutput
                                        (0450) ;
                                        (0451) ;****** THERE SHOULD BE NO WAY TO REACH THIS STATE WE'LL JUST TERMINATE THE ACTIVITY SINCE WERE THE MASTER
                                        (0452) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0453) ;
                                        (0454) ;FlashRdOverflow:
                                        (0455)     ;deal with the over flow cond by resending last data byte (dec the low addr)
                                        (0456) 
                                        (0457) ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0458) ;                                                                      ;set count back to 0
                                        (0459) ;   mov   [I2CHW_Read_CountHI], 0                                    ;functionally the same as incrementing ffff and less instructions
                                        (0460) ;   mov   [I2CHW_Read_Count], 0
                                        (0461) ;   jmp   I2CNormalRead
                                        (0462) 
                                        (0463) ;---------------------------------------------------
                                        (0464) ; Insert your custom code above this banner
                                        (0465) ;---------------------------------------------------
                                        (0466) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0467) 
                                        (0468) ENDIF
                                        (0469) ;@PSoC_UserCode_BODY3@ (Do not change this line.)
                                        (0470) ;---------------------------------------------------
                                        (0471) ; Insert your custom code below this banner
                                        (0472) ; to modify the way a master might read RAM data to send
                                        (0473) ; to an I2C device
                                        (0474) ; By replacing the section from here down to the next block
                                        (0475) ; a user could process data for a custom I2C READ application
                                        (0476) ;---------------------------------------------------
                                        (0477) ReadOutData:
                                        (0478)    ;read the current data byte
                                        (0479) IF SYSTEM_LARGE_MEMORY_MODEL
0873: 51 09    MOV   A,[0x9]            (0480)    mov   A, [pI2CHW_Read_BufHI]
0875: 60 D3    MOV   REG[0xD3],A        
                                        (0481) ENDIF
                                        (0482)    RAM_SETPAGE_IDX A
0877: 58 0A    MOV   X,[0xA]            (0483)    mov   X, [pI2CHW_Read_BufLO]
0879: 70 3F    AND   F,0x3F             
087B: 71 80    OR    F,0x80             
                                        (0484)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
087D: 52 00    MOV   A,[X+0]            (0485)    mov   A, [X]
087F: 70 3F    AND   F,0x3F             
0881: 71 00    OR    F,0x0              
                                        (0486)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0883: 60 D8    MOV   REG[0xD8],A        (0487)    mov   reg[I2CHW_DR], A
0885: 7A 0B    DEC   [0xB]              (0488)    dec   [I2CHW_Read_Count]
                                        (0489) 
0887: C0 0E    JC    0x0896             (0490)    jc    MstrWRComplete
0889: 76 0A    INC   [0xA]              (0491)    inc   [pI2CHW_Read_BufLO]
088B: 80 01    JMP   0x088D             (0492)    jmp   I2CNormalOutput
                                        (0493) ;
                                        (0494) ;ram read overflow detected here, just resend the last location in the buffer
                                        (0495) ;
                                        (0496) ;********        THERE SHOULD BE NO WAY TO OVERFLOW FOR THIS CASE
                                        (0497) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0498) ;
                                        (0499) ;RamRDOverflow:
                                        (0500) ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0501) ;   inc   [I2CHW_Read_Count]                                         ; set back to zero
                                        (0502) 
                                        (0503) ;---------------------------------------------------
                                        (0504) ; End user I2C MASTER WRITE TO SLAVE /READ buffer customization section
                                        (0505) ; Insert your custom code above this banner
                                        (0506) ;---------------------------------------------------
                                        (0507) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0508) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0509) I2CNormalOutput:
                                        (0510) 
                                        (0511)     ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                                        (0512)     ;and place there based on whether or not the previous transmission was our I2C address.
088D: 18       POP   A                  (0513)     pop   A
088E: 60 D7    MOV   REG[0xD7],A        
0890: 18       POP   A                  
0891: 60 D3    MOV   REG[0xD3],A        
                                        (0514) 
                                        (0515) ;
                                        (0516) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0517) ;
                                        (0518)     SetI2CHW_SCR A                                                   ;Sets the I2C_TX bit in the I2C_SCR reg.
                                        (0519) 
                                        (0520) 
                                        (0521) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0522)     REG_RESTORE IDX_PP
                                        (0523) ENDIF
0893: 20       POP   X                  (0524)     pop X
0894: 18       POP   A                  (0525)     pop A
0895: 7E       RETI                     (0526)     reti ;return and wait for the next interrupt (on data)
                                        (0527) 
                                        (0528) MstrWRComplete:
0896: 26 05 8F AND   [0x5],0x8F         (0529)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
0899: 2E 05 40 OR    [0x5],0x40         (0530)     or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
089C: 2E 05 10 OR    [0x5],0x10         (0531)     or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR
                                        (0532) 
                                        (0533)     ; *****
                                        (0534)     ; here we may need to look at the mode that this was called under
                                        (0535)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0536)     ; ******
089F: 26 03 03 AND   [0x3],0x3          (0537)     and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
08A2: A0 0B    JZ    0x08AE             (0538)     jz      CompleteWRXfer
08A4: 18       POP   A                  (0539)     pop  A                                                           ;clear the stack for return
08A5: 26 05 7F AND   [0x5],0x7F         (0540)     and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
08A8: 18       POP   A                  
08A9: 60 D3    MOV   REG[0xD3],A        
                                        (0541) 
                                        (0542) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0543)     REG_RESTORE IDX_PP
                                        (0544) ENDIF
08AB: 20       POP   X                  (0545)     pop X
08AC: 18       POP   A                  (0546)     pop A
08AD: 7E       RETI                     (0547)     reti
                                        (0548)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0549)     ; The release of the I2C_TX bit in I2C_SCR below will automatically generate a stop
                                        (0550) 
                                        (0551) CompleteWRXfer:
                                        (0552) 
08AE: 18       POP   A                  (0553)     pop   A
08AF: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0554) 
                                        (0555) ;
                                        (0556) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0557) ;
                                        (0558)     SetI2CHW_SCR 0                                                   ;this will release the bus and generate a stop condition
                                        (0559) 
08B2: 26 05 7F AND   [0x5],0x7F         (0560)    and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
08B5: 18       POP   A                  
08B6: 60 D3    MOV   REG[0xD3],A        
                                        (0561) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0562)    REG_RESTORE IDX_PP
                                        (0563) ENDIF
08B8: 20       POP   X                  (0564)    pop X
08B9: 18       POP   A                  (0565)    pop A
08BA: 7E       RETI                     (0566)    reti
                                        (0567) 
                                        (0568) SlaveDataNAK:
                                        (0569) ;must also fix up the data buffer.  While it is marginally safe to nak a byte as a slave and 
                                        (0570) ;store it.  It is NEVER safe as a master to notice that a written byte has been nak'ed by a 
                                        (0571) ;slave and fail to resend it.
                                        (0572) ;this piece of code fixes up the count and buffer that the master is using to get data from
                                        (0573) ;to re-transmit the byte when the next master write is done.
08BB: 76 0B    INC   [0xB]              (0574)     inc  [I2CHW_Read_Count]                          ;calc addr lsb
                                        (0575) IF I2CHW_READ_FLASH
                                        (0576)     jnc  NoIncHighCount
                                        (0577)     inc  [I2CHW_Read_CountHI]
                                        (0578) 
                                        (0579) NoIncHighCount:
                                        (0580) ENDIF
08BD: 7A 0A    DEC   [0xA]              (0581)     dec  [pI2CHW_Read_BufLO]                         ;set the next flash address to read
                                        (0582) IF SYSTEM_LARGE_MEMORY_MODEL
08BF: D0 03    JNC   0x08C3             (0583)     jnc  NoDecHiAddr
08C1: 7A 09    DEC   [0x9]              (0584)     dec  [pI2CHW_Read_BufHI]
08C3: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0585) NoDecHiAddr:
                                        (0586) ELSE
                                        (0587) IF I2CHW_READ_FLASH
                                        (0588)     jnc  NoDecHiCAddr
                                        (0589)     dec  [pI2CHW_Read_BufHI]
                                        (0590) NoDecHiCAddr:
                                        (0591) ENDIF
                                        (0592) ENDIF
                                        (0593) 
                                        (0594) ;;
                                        (0595) ;; all there is to do here is to return & set status, the slave didn't want any more data
                                        (0596) ;;
                                        (0597) ; no pop needed because the nak is detected before the push happens above
                                        (0598) 
                                        (0599) ;
                                        (0600) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0601) ;
                                        (0602)     SetI2CHW_SCR 0                                                   ;this will release the bus and generate a stop condition
                                        (0603) 
08C6: 26 05 7F AND   [0x5],0x7F         (0604)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
08C9: 26 05 8F AND   [0x5],0x8F         (0605)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
08CC: 2E 05 40 OR    [0x5],0x40         (0606)     or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
08CF: 2E 05 20 OR    [0x5],0x20         (0607)     or    [I2CHW_RsrcStatus], I2CHW_WR_OVERFLOW
08D2: 18       POP   A                  
08D3: 60 D3    MOV   REG[0xD3],A        
                                        (0608) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0609)     REG_RESTORE IDX_PP
                                        (0610) ENDIF
08D5: 20       POP   X                  (0611)     pop X
08D6: 18       POP   A                  (0612)     pop A
08D7: 7E       RETI                     (0613)    reti
                                        (0614) 
                                        (0615) STOPTRAP:
                                        (0616)     ;
                                        (0617)     ;   If interrupt on STOP condition is enabled:
                                        (0618)     ;   Add user code to process stop (not recommended becuase I2C bus is NOT stalled and ISR
                                        (0619)     ;   may block reception of ongoing transactions/addresses
                                        (0620)     ;   STOP condition is never detected when a repeat start is used by the master.
                                        (0621)     ;
08D8: 26 05 7F AND   [0x5],0x7F         (0622)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
08DB: 18       POP   A                  
08DC: 60 D3    MOV   REG[0xD3],A        
                                        (0623) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0624)     REG_RESTORE IDX_PP
                                        (0625) ENDIF
08DE: 20       POP   X                  (0626)     pop X
08DF: 18       POP   A                  (0627)     pop A
08E0: 7E       RETI                     (0628)     reti
                                        (0629) 
                                        (0630) ; end of file I2CHWINT.asm
FILE: lib\i2chwcommon.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHWCommon.asm
                                        (0004) ;;   Version: 1.90, Updated on 2012/3/2 at 9:14:43
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ; include instance specific register definitions
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) ;-------------------------------------------------------------------
                                        (0034) ;  Declare the functions global for both assembler and C compiler.
                                        (0035) ;
                                        (0036) ;  Note that there are two names for each API. First name is
                                        (0037) ;  assembler reference. Name with underscore is name refence for
                                        (0038) ;  C compiler.  Calling function in C source code does not require
                                        (0039) ;  the underscore.
                                        (0040) ;-------------------------------------------------------------------
                                        (0041) 
                                        (0042) export    I2CHW_InitWrite
                                        (0043) export   _I2CHW_InitWrite
                                        (0044) export    I2CHW_InitRamRead
                                        (0045) export   _I2CHW_InitRamRead
                                        (0046) export    I2CHW_InitFlashRead
                                        (0047) export   _I2CHW_InitFlashRead
                                        (0048) export    I2CHW_bReadI2CStatus
                                        (0049) export   _I2CHW_bReadI2CStatus
                                        (0050) export    I2CHW_ClrRdStatus
                                        (0051) export   _I2CHW_ClrRdStatus
                                        (0052) export    I2CHW_ClrWrStatus
                                        (0053) export   _I2CHW_ClrWrStatus
                                        (0054) 
                                        (0055) 
                                        (0056) AREA UserModules (ROM, REL)
                                        (0057) 
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: I2CHW_InitWrite
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Initializes a data buffer pointer for the slave to use to deposit data, and
                                        (0065) ;     zeroes the value of a count byte for the same buffer.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  [SP-5]   -- count of bytes to write
                                        (0070) ;              [SP-4]   -- Hi order part of address Wrbuf
                                        (0071) ;              [SP-3]   -- Low order part of the address Wrbuf 
                                        (0072) ;
                                        (0073) ;  RETURNS:  none
                                        (0074) ;
                                        (0075) ;    Write Status bits are cleared
                                        (0076) ;
                                        (0077) ;  SIDE EFFECTS:
                                        (0078) ;    The A and X registers may be modified by this or future implementations
                                        (0079) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0080) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0081) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0082) ;    functions.
                                        (0083) ;          
                                        (0084) ;    Currently only the page pointer registers listed below are modified: 
                                        (0085) ;          CUR_PP
                                        (0086) ;
                                        (0087) ;    Write Status bits are cleared
                                        (0088) ;
                                        (0089) ;  THEORY of OPERATION or PROCEDURE:
                                        (0090) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0091) ;     the accumulator.  X register is the low order pointer.
                                        (0092) ;     IF a one byte buffer is established, set a flag to NAK the first written data byte.
                                        (0093) ;
                                        (0094) 
                                        (0095)  I2CHW_InitWrite:
                                        (0096) _I2CHW_InitWrite:
                                        (0097) 
                                        (0098) WrCnt:   equ -5
                                        (0099) WrBufHi: equ -4
                                        (0100) WrBufLo: equ -3
                                        (0101) 
                                        (0102) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0103)     RAM_PROLOGUE RAM_USE_CLASS_2
08E1: 10       PUSH  X                  (0104) 	push  X
08E2: 4F       MOV   X,SP               (0105) 	mov   X, SP
08E3: 79       DEC   X                  (0106)     dec   X                                                          ;set up the pointer for correct param access
08E4: 08       PUSH  A                  (0107)     push  A
08E5: 5D DE    MOV   A,REG[0xDE]        (0108)     mov   A, reg[I2CHW_INT_REG]
08E7: 08       PUSH  A                  (0109)     push  A                                                           ;preserve flags prior to disabling int
08E8: 41 DE FE AND   REG[0xDE],0xFE     
08EB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0110)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0111) 
                                        (0112)     RAM_SETPAGE_CUR >I2CHW_bStatus						                             ;Set the Page Pointer for LMM
08EE: 26 03 FB AND   [0x3],0xFB         (0113)     and    [I2CHW_bStatus], ~fI2C_NAKnextWr                          ;reset the nak-next-written-byte flag.
                                        (0114) IF SYSTEM_LARGE_MEMORY_MODEL
08F1: 52 FC    MOV   A,[X-4]            (0115)     mov   A, [X + WrBufHi]                                           ;move wrbuf addr to A
08F3: 53 07    MOV   [0x7],A            (0116)     mov   [pI2CHW_Write_BufHI], A
                                        (0117) ENDIF
08F5: 52 FD    MOV   A,[X-3]            (0118)     mov   A, [X + WrBufLo]                                           ;move wrbuf addr to A
08F7: 53 08    MOV   [0x8],A            (0119)     mov   [pI2CHW_Write_BufLO], A
08F9: 52 FB    MOV   A,[X-5]            (0120)     mov   A, [X + WrCnt]                                               ;move Write_count to A
08FB: 53 06    MOV   [0x6],A            (0121)     mov   [I2CHW_Write_Count], A
08FD: 39 01    CMP   A,0x1              (0122)     cmp   A, 01                                                        ;if data buffer is one byte long or less
08FF: A0 08    JZ    0x0908             (0123)     jz    I2CHW_SetNak
0901: C0 06    JC    0x0908             (0124)     jc    I2CHW_SetNak
0903: 26 05 8F AND   [0x5],0x8F         (0125)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the 0x10, 0x20 (Write status bits)
0906: 80 09    JMP   0x0910             (0126)     jmp   I2Cs_1_ResetFlgs
                                        (0127) 
                                        (0128) I2CHW_SetNak:
0908: 2E 03 04 OR    [0x3],0x4          (0129)     or    [I2CHW_bStatus], fI2C_NAKnextWr                            ;set the nak-next-written-byte flag.
090B: 26 05 8F AND   [0x5],0x8F         (0130)     and   [I2CHW_RsrcStatus], ~0x70                                  ; clear the 0x10, 0x20 (Write status bits)
090E: 80 01    JMP   0x0910             (0131)     jmp   I2Cs_1_ResetFlgs
                                        (0132) 
                                        (0133) I2Cs_1_ResetFlgs:
0910: 18       POP   A                  (0134)     pop A
0911: 21 01    AND   A,0x1              (0135)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
0913: A0 04    JZ    0x0918             (0136)     jz  . + 5
0915: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0137)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0918: 18       POP   A                  (0138)     pop A
0919: 20       POP   X                  (0139)     pop X
091A: 70 3F    AND   F,0x3F             
091C: 71 C0    OR    F,0xC0             
                                        (0140) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0141)     RAM_EPILOGUE RAM_USE_CLASS_2
091E: 7F       RET                      (0142)     ret
091F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0143) 
                                        (0144) .ENDSECTION
                                        (0145) 
                                        (0146) .SECTION
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148) ;  FUNCTION NAME: I2CHW_InitRamRead
                                        (0149) ;
                                        (0150) ;  DESCRIPTION:
                                        (0151) ;     Initializes a data buffer pointer for the slave to use to retrieve data from,
                                        (0152) ;     and zeroes the value of a count byte for the same buffer.
                                        (0153) ;
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:  [SP-5]  -- count of bytes to read
                                        (0157) ;              [SP-4]  -- Hi order part of addr to ReadBuf
                                        (0158) ;              [SP-3]  -- Low order part of the address to ReadBuf
                                        (0159) ;
                                        (0160) ;  RETURNS: none
                                        (0161) ;
                                        (0162) ;  SIDE EFFECTS:
                                        (0163) ;    The A and X registers may be modified by this or future implementations
                                        (0164) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0165) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0166) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0167) ;    functions.
                                        (0168) ;          
                                        (0169) ;    Currently only the page pointer registers listed below are modified: 
                                        (0170) ;          CUR_PP
                                        (0171) ;
                                        (0172) ;     Read Status bits are cleared
                                        (0173) ;
                                        (0174) ;  THEORY of OPERATION or PROCEDURE:
                                        (0175) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0176) ;     the accumulator.  X register is the low order pointer.
                                        (0177) ;
                                        (0178) 
                                        (0179)  I2CHW_InitRamRead:
                                        (0180) _I2CHW_InitRamRead:
                                        (0181) 
                                        (0182) RdCnt:     equ   -5
                                        (0183) RdBufHi:   equ   -4
                                        (0184) RdBufLo:   equ   -3
                                        (0185) 
                                        (0186)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0187) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0188) 	RAM_SETPAGE_CUR >I2CHW_Read_Count
0922: 10       PUSH  X                  (0189)     push  X
0923: 4F       MOV   X,SP               (0190) 	mov   X, SP
0924: 79       DEC   X                  (0191)     dec   X                                                          ;set up the pointer for correct param access
0925: 08       PUSH  A                  (0192)     push  A
0926: 5D DE    MOV   A,REG[0xDE]        (0193)     mov   A, reg[I2CHW_INT_REG]
0928: 08       PUSH  A                  (0194)     push  A                                                            ;preserve flags prior to disabling int
0929: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0195)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0196) 
                                        (0197) IF SYSTEM_LARGE_MEMORY_MODEL
092C: 52 FC    MOV   A,[X-4]            (0198)     mov   A, [X + RdBufHi]                                           ;move wrbuf addr to A
092E: 53 09    MOV   [0x9],A            (0199)     mov   [pI2CHW_Read_BufHI], A
                                        (0200) ENDIF
0930: 52 FD    MOV   A,[X-3]            (0201)     mov   A, [X + RdBufLo]                                             ; move rdbuf addr to A
0932: 53 0A    MOV   [0xA],A            (0202)     mov   [pI2CHW_Read_BufLO], A
0934: 52 FB    MOV   A,[X-5]            (0203)     mov   A, [X + RdCnt]                                               ; move RamRead_count to A
0936: 53 0B    MOV   [0xB],A            (0204)     mov   [I2CHW_Read_Count], A
0938: 7A 0B    DEC   [0xB]              (0205)     dec   [I2CHW_Read_Count]                                         ; since we decrement through zero...
093A: 26 05 F0 AND   [0x5],0xF0         (0206)     and   [I2CHW_RsrcStatus], ~0x0f                                  ; clear the lower 4 (read status bits)
                                        (0207) 
093D: 18       POP   A                  (0208)     pop A
093E: 21 01    AND   A,0x1              (0209)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
0940: A0 04    JZ    0x0945             (0210)     jz  . + 5
0942: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0211)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0945: 18       POP   A                  (0212)     pop A
0946: 20       POP   X                  (0213)     pop X
0947: 70 3F    AND   F,0x3F             
0949: 71 C0    OR    F,0xC0             
                                        (0214) 
                                        (0215)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0216)     RAM_EPILOGUE RAM_USE_CLASS_2
094B: 7F       RET                      (0217)     ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) .SECTION
                                        (0222) ;-----------------------------------------------------------------------------
                                        (0223) ;  FUNCTION NAME: I2CHW_InitFlashRead
                                        (0224) ;
                                        (0225) ;  DESCRIPTION:
                                        (0226) ;     Initializes a flash data buffer pointer for the slave to use to retrieve
                                        (0227) ;     data from, and zeroes the value of a count byte for the same buffer.
                                        (0228) ;
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:  [SP-6]   -- Hi order part of flash Read count
                                        (0232) ;              [SP-5]   -- Low order part of flashRead counts
                                        (0233) ;              [SP-4]   -- Hi order part of the flash buf address
                                        (0234) ;              [SP-3]   -- Lo order part of flash buf address
                                        (0235) ;
                                        (0236) ;  RETURNS:
                                        (0237) ;
                                        (0238) ;  SIDE EFFECTS:
                                        (0239) ;    The A and X registers may be modified by this or future implementations
                                        (0240) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0241) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0242) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0243) ;    functions.
                                        (0244) ;          
                                        (0245) ;    Currently only the page pointer registers listed below are modified: 
                                        (0246) ;          CUR_PP
                                        (0247) ;
                                        (0248) ;    Read Status bits are cleared
                                        (0249) ;
                                        (0250) ;  THEORY of OPERATION or PROCEDURE:
                                        (0251) ;     The C compiler will place the upper order address of the buffer in Acc.
                                        (0252) ;     X register is the low order pointer.  A user module parameter is used to conserve code
                                        (0253) ;     if flash buffers are un-needed.  The API call is left defined and capable of returning in
                                        (0254) ;     either case
                                        (0255) ;
                                        (0256)  I2CHW_InitFlashRead:
                                        (0257) _I2CHW_InitFlashRead:
                                        (0258) 
                                        (0259) FlRdCntHI:     equ   -6
                                        (0260) FlRdCntLO:     equ   -5
                                        (0261) FlBufAdrHI:    equ   -4
                                        (0262) FlBufAdrLO:    equ   -3
                                        (0263) 
                                        (0264) IF I2CHW_READ_FLASH
                                        (0265)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0266)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0267)     RAM_SETPAGE_CUR >pI2CHW_Read_BufLO   
                                        (0268) 	push  X
                                        (0269) 	mov   X, SP
                                        (0270)     dec   X                                                            ;set up the pointer for correct param access
                                        (0271)     push  A
                                        (0272)     mov   A, reg[I2CHW_INT_REG]
                                        (0273)     push  A                                                            ;preserve flags prior to disabling int
                                        (0274)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0275) 
                                        (0276)     mov   A, [X + FlBufAdrLO]                                          ; move flrdbuf LOaddr to A
                                        (0277)     mov   [pI2CHW_Read_BufLO], A
                                        (0278)     mov   A, [X + FlBufAdrHI]                                          ; move flrdbuf HIaddr to A
                                        (0279)     mov   [pI2CHW_Read_BufHI], A
                                        (0280)     mov   A, [X + FlRdCntLO]                                           ; move flrdbuf LOcount to A
                                        (0281)     mov   [I2CHW_Read_Count], A
                                        (0282)     mov   A, [X + FlRdCntHI]                                           ; move flrdbuf HIcount to A
                                        (0283)     mov   [I2CHW_Read_CountHI], A
                                        (0284) 
                                        (0285)     dec   [I2CHW_Read_Count]                                         ; since this will count throu zero
                                        (0286)     jnc    . + 4                                                       ; only Read_CountHI if Read_Count rolled to 0xff
                                        (0287)     dec   [I2CHW_Read_CountHI]
                                        (0288) 
                                        (0289)     and   [I2CHW_RsrcStatus], ~0x07                                  ; clear the lower 3 (read status bits)
                                        (0290)     or    [I2CHW_RsrcStatus],I2CHW_READFLASH                         ; set the flash status bit
                                        (0291) 
                                        (0292)     pop A
                                        (0293)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
                                        (0294)     jz  . + 5
                                        (0295)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0296)     pop A
                                        (0297) 	pop X
                                        (0298)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0299) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0300) ENDIF
094C: 7F       RET                      (0301)     ret
094D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0302) 
                                        (0303) .ENDSECTION
                                        (0304) 
                                        (0305) .SECTION
                                        (0306) ;-----------------------------------------------------------------------------
                                        (0307) ;  FUNCTION NAME: I2CHW_bReadI2CStatus
                                        (0308) ;
                                        (0309) ;  DESCRIPTION:
                                        (0310) ;     Returns the value in the the RsrcStatus variable.
                                        (0311) ;
                                        (0312) ;-----------------------------------------------------------------------------
                                        (0313) ;
                                        (0314) ;  ARGUMENTS:
                                        (0315) ;
                                        (0316) ;  RETURNS:
                                        (0317) ;     BYTE  bI2CStatus -  status data.  Use the following defined bits
                                        (0318) ;     returned in A.
                                        (0319) ;         I2CHW_RD_NOERR:                   equ 1
                                        (0320) ;         I2CHW_RD_OVERFLOW:                equ 2
                                        (0321) ;         I2CHW_RD_INCOMPLETE:              equ 4
                                        (0322) ;         I2CHW_READFLASH:                  equ 8
                                        (0323) ;         I2CHW_WR_NOERR:                   equ 10h
                                        (0324) ;         I2CHW_WR_OVERFLOW:                equ 20h
                                        (0325) ;         I2CHW_WR_COMPLETE:                equ 40h
                                        (0326) ;         I2CHW_ISR_ACTIVE:                 equ 80h
                                        (0327) ;
                                        (0328) ;  SIDE EFFECTS:
                                        (0329) ;    The A and X registers may be modified by this or future implementations
                                        (0330) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0331) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0332) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0333) ;    functions.
                                        (0334) ;          
                                        (0335) ;    Currently only the page pointer registers listed below are modified: 
                                        (0336) ;          CUR_PP
                                        (0337) ;          
                                        (0338)  I2CHW_bReadI2CStatus:
                                        (0339) _I2CHW_bReadI2CStatus:
                                        (0340)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0341) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0950: 51 05    MOV   A,[0x5]            (0342)     mov   A, [I2CHW_RsrcStatus]                                      ;return the status in A
                                        (0343)     RAM_EPILOGUE RAM_USE_CLASS_4
0952: 7F       RET                      (0344)     ret
0953: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0345) 
                                        (0346) .ENDSECTION
                                        (0347) 
                                        (0348) .SECTION
                                        (0349) ;-----------------------------------------------------------------------------
                                        (0350) ;  FUNCTION NAME: I2CHW_ClrRdStatus
                                        (0351) ;
                                        (0352) ;  DESCRIPTION:
                                        (0353) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0354) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0355) ;
                                        (0356) ;-----------------------------------------------------------------------------
                                        (0357) ;
                                        (0358) ;  ARGUMENTS: none
                                        (0359) ;
                                        (0360) ;  RETURNS: none
                                        (0361) ;
                                        (0362) ;  SIDE EFFECTS:
                                        (0363) ;    The A and X registers may be modified by this or future implementations
                                        (0364) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0365) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0366) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0367) ;    functions.
                                        (0368) ;          
                                        (0369) ;    Currently only the page pointer registers listed below are modified: 
                                        (0370) ;          CUR_PP
                                        (0371) ;          
                                        (0372)  I2CHW_ClrRdStatus:
                                        (0373) _I2CHW_ClrRdStatus:
                                        (0374)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0375) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0956: 26 05 F8 AND   [0x5],0xF8         (0376)     and   [I2CHW_RsrcStatus], ~0x07                                  ; clear the lower 3 (read status bits)
                                        (0377)     RAM_EPILOGUE RAM_USE_CLASS_4
0959: 7F       RET                      (0378)     ret
095A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0379) 
                                        (0380) .ENDSECTION
                                        (0381) 
                                        (0382) .SECTION
                                        (0383) ;-----------------------------------------------------------------------------
                                        (0384) ;  FUNCTION NAME: I2CHW_ClrWrStatus
                                        (0385) ;
                                        (0386) ;  DESCRIPTION:
                                        (0387) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0388) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0389) ;
                                        (0390) ;-----------------------------------------------------------------------------
                                        (0391) ;
                                        (0392) ;  ARGUMENTS: none
                                        (0393) ;
                                        (0394) ;  RETURNS: none
                                        (0395) ;
                                        (0396) ;  SIDE EFFECTS:
                                        (0397) ;    The A and X registers may be modified by this or future implementations
                                        (0398) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0399) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0400) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0401) ;    functions.
                                        (0402) ;          
                                        (0403) ;    Currently only the page pointer registers listed below are modified: 
                                        (0404) ;          CUR_PP
                                        (0405) ;          
                                        (0406)  I2CHW_ClrWrStatus:
                                        (0407) _I2CHW_ClrWrStatus:
                                        (0408)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0409) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
095D: 26 05 8F AND   [0x5],0x8F         (0410)     and   [I2CHW_RsrcStatus], ~0x70                                  ; clear bits 10,20 (write status bits)
                                        (0411)     RAM_EPILOGUE RAM_USE_CLASS_4
0960: 7F       RET                      (0412)     ret
                                        (0413) 
                                        (0414) .ENDSECTION
                                        (0415) ; End of File I2CHW.asm
FILE: H:\Hobby\PROGRA~1\PSOCPR~1\DS1307\DS1307\DS1307\main.c
(0001) // Write a value 0x10 to the control register of the RTC
(0002) // This will set the clock SQW/OUT to 1Hz and enable the output
(0003) // SQWE = 1 and output freq is set as 1Hz.
(0004) // OUT  0   0    SQWE   0   0   RS1   RS0
(0005) //  0   0   0     1     0   0    0     0 => 0001 0000 (0x10)
(0006) //
(0007) //	RS1   RS0   SQW/OUT O/P    SQWE   OUT
(0008) //   0     0      1Hz           1      X
(0009) //   0     1      4.096KHz      1      X
(0010) //   1	   0      8.192KHz		1      X
(0011) //	 1	   1	 32.768KHz      1      X
(0012) //	 X	   X	  0             0      0
(0013) //	 X	   X	  1             0      0
(0014) 	
(0015) #include <m8c.h>       																// Part specific constants and macros
(0016) #include "PSoCAPI.h"    															// PSoC API definitions for all User Modules
(0017) #pragma interrupt_handler RTC_Read_ISR												// Declares the interrupt handler for the timer interrupt 
(0018) 
(0019) typedef struct{																		// Deffiniert einen Variablentypen vom Aufbau eines Structs
(0020) 	BYTE Address;																	// welche 8 Variablen enthält und "RTC_Struct" heißt
(0021) 	BYTE Seconds;
(0022) 	BYTE Minutes;
(0023) 	BYTE Hours;
(0024) 	BYTE Day;
(0025) 	BYTE Date;
(0026) 	BYTE Month;
(0027) 	BYTE Year;
(0028) }RTC_Struct;
(0029) 
(0030) // Funktionen deklarieren
(0031) void I2C_Init(void);
(0032) void RTC_WriteReg(BYTE RegAddress, BYTE RegData);									// Deffiniert eine Funktion. Diese erwartet als Übergabewerte zwei Bytes
(0033) void RTC_SetRegAddress(BYTE RegAddress);
(0034) void RTC_ReadTime(RTC_Struct *pTime);
(0035) void RTC_SetTime(RTC_Struct *pTime);												// Deffiniert eine Funktion wo ein Pointer rein übergeben wird der vom Typ "RTC_Struct" ist
(0036) void Print_Time(RTC_Struct *pTime);
(0037) 
(0038) unsigned char bRTC_RegPointer ;														// Contains the address of the register from/to which data has to be read/written
(0039) unsigned char fReadRTC;																// Flags used to indicate occurence of various events
(0040) 
(0041) RTC_Struct Time;																	// Erzeugt eine Variable mit Namen "Time" vom Typen RTC_Struct
(0042) RTC_Struct SetTime;																	// Erzeugt eine Variable mit Namen "SetTime" vom Typen RTC_Struct
(0043) 
(0044) #define RTC_Addr 0x68																// Konstante Variable
(0045) #define TIME_LEN sizeof(Time)														// Konstante Variable die die Größe von der Variable "Time" enthält
(0046) 
(0047) void main(void)
(0048) {
(0049)     M8C_EnableGInt;																	// Globale Interrupts aktivieren
__UserModules_end|__text_start|_main|_main:
    0961: 71 01    OR    F,0x1
(0050) 	LCD_Start();																	// LCD starten und initialisieren
    0963: 10       PUSH  X
    0964: 7C 04 D5 LCALL _LCD_Init|LCD_Start|_LCD_Start|LCD_Init
    0967: 20       POP   X
(0051) 	I2C_Init();																		// I²C Modul starten und initialisieren
    0968: 90 4B    CALL  _I2C_Init
(0052) 	
(0053) 	RTC_WriteReg(0x07, 0x11);														// Ruft die Funktion "RTC_WriteReg" auf und übergibt die Zahl 0x07 als "RegAdress"
    096A: 50 11    MOV   A,0x11
    096C: 08       PUSH  A
    096D: 50 07    MOV   A,0x7
    096F: 08       PUSH  A
    0970: 90 BD    CALL  _RTC_WriteReg
(0054) 																					// sowie die Zahl 0x10 als RegData
(0055) 	SetTime.Address = 0x00;															// Schreibt in das Struct "SetTime" eine 0x00 in die Variable "Adress"
    0972: 62 D0 00 MOV   REG[0xD0],0x0
    0975: 55 23 00 MOV   [SetTime],0x0
(0056) 	
(0057) 	// Hier wird die Zeit und das Datum eingestellt
(0058) 	SetTime.Seconds = 0x00; 														// Setzt die Sekunden (BCD Format)	
    0978: 55 24 00 MOV   [SetTime+1],0x0
(0059) 	
(0060) 	SetTime.Minutes = 0x20;															// Setzt die Minuten (BCD Format) 
    097B: 55 25 20 MOV   [SetTime+2],0x20
(0061) 	
(0062) 	SetTime.Hours = 0x10;															// Setzt die Uhr in den 12-Stunden Modus und aktiviert PM. Setzt die Stunden
    097E: 55 26 10 MOV   [SetTime+3],0x10
(0063) 																					//  0     12/24     10 Hour/(PM/AM)  10 Hour     Hours
(0064) 																					//  0     1(12)         1(PM)           0       0 1 0 0 => 0110 0100 (0x64)
(0065) 	
(0066) 	SetTime.Day = 0x07;																// Setzt den Wochentag. 1 = Sonntag und 7 = Samstag
    0981: 55 27 07 MOV   [SetTime+4],0x7
(0067) 	
(0068) 	SetTime.Date = 0x30;															// Setzt den Tag als Datum  (BCD Format)
    0984: 55 28 30 MOV   [SetTime+5],0x30
(0069) 	
(0070) 	SetTime.Month = 0x07;															// Setzt den Monat (BCD Format 1 = Januar und 12 = Dezember
    0987: 55 29 07 MOV   [SetTime+6],0x7
(0071) 	
(0072) 	SetTime.Year = 0x11;															// setzt das Jahr (BCD Format)
    098A: 55 2A 11 MOV   [SetTime+7],0x11
(0073) 	
(0074) 	RTC_SetTime(&SetTime);														// Ruft die Funktion "RTC_SetTime" auf. Übergibt die Adresse von "SetTime" in die Funktion
    098D: 50 00    MOV   A,0x0
    098F: 08       PUSH  A
    0990: 50 23    MOV   A,0x23
    0992: 08       PUSH  A
    0993: 90 6C    CALL  _RTC_SetTime
    0995: 38 FC    ADD   SP,0xFC
(0075) 		
(0076) 	M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);										// GPIO Interrupts aktivieren
    0997: 43 E0 20 OR    REG[0xE0],0x20
    099A: 80 16    JMP   0x09B1
(0077) 
(0078) 	while(1)
(0079) 	{
(0080) 		if(fReadRTC)																// If interrupt has occured
    099C: 62 D0 00 MOV   REG[0xD0],0x0
    099F: 3C 2C 00 CMP   [fReadRTC],0x0
    09A2: A0 0E    JZ    0x09B1
(0081) 		{
(0082) 			fReadRTC = 0x00;														// Clear the Read Flag
    09A4: 55 2C 00 MOV   [fReadRTC],0x0
(0083) 			RTC_ReadTime(&Time);													// Ruft die Funktion "RTC_ReadTime" auf und übergibt die Adresse von "Time" in die Funktion
    09A7: 50 00    MOV   A,0x0
    09A9: 08       PUSH  A
    09AA: 50 1B    MOV   A,0x1B
    09AC: 08       PUSH  A
    09AD: 90 12    CALL  _RTC_ReadTime
    09AF: 38 FE    ADD   SP,0xFE
(0084) 		}
(0085) 	}
    09B1: 8F EA    JMP   0x099C
    09B3: 8F FF    JMP   0x09B3
(0086) }
(0087) 
(0088) 
(0089) void I2C_Init(void)																	// Funktion um das I²C Modul zu initialisieren
(0090) {
(0091) 	I2CHW_Start();																	// I²C Modul starten
_I2C_Init:
    09B5: 10       PUSH  X
    09B6: 7C 05 7A LCALL _I2CHW_Start
(0092) 	I2CHW_EnableInt();																// I²C Interrupts aktivieren
    09B9: 7C 05 7E LCALL _I2CHW_EnableInt
(0093) 	I2CHW_EnableMstr();																// Modul auf "Master" stellen
    09BC: 7C 05 93 LCALL _I2CHW_EnableMstr
    09BF: 20       POP   X
    09C0: 7F       RET   
(0094) }
(0095) 
(0096) // Diese Funktion ließt die Zeit aus dem DS1307 und speichert diese in dem Buffer
(0097) // dessen Adresse mit in die Funktion übergeben wurde
(0098) void RTC_ReadTime(RTC_Struct *pTime)
(0099) {
_RTC_ReadTime:
  pTime                --> X-5
    09C1: 10       PUSH  X
    09C2: 4F       MOV   X,SP
(0100) 	RTC_SetRegAddress(0x00);														// Ruft die Funktion "RTC_SetRegAdress" auf und übergibt eine 0x00 (Register für die Sekunden)
    09C3: 50 00    MOV   A,0x0
    09C5: 08       PUSH  A
    09C6: 90 A2    CALL  _RTC_SetRegAddress
    09C8: 38 FF    ADD   SP,0xFF
(0101) 	I2CHW_fReadBytes(RTC_Addr, (char*)&(pTime->Seconds), 7, I2CHW_CompleteXfer);	// Ließt 7 Bytes aus der RTC und speichert sie unter pTime, beginnend bei "Seconds"
    09CA: 10       PUSH  X
    09CB: 50 00    MOV   A,0x0
    09CD: 08       PUSH  A
    09CE: 50 07    MOV   A,0x7
    09D0: 08       PUSH  A
    09D1: 62 D0 00 MOV   REG[0xD0],0x0
    09D4: 52 FC    MOV   A,[X-4]
    09D6: 01 01    ADD   A,0x1
    09D8: 53 19    MOV   [__r1],A
    09DA: 52 FB    MOV   A,[X-5]
    09DC: 09 00    ADC   A,0x0
    09DE: 08       PUSH  A
    09DF: 51 19    MOV   A,[__r1]
    09E1: 08       PUSH  A
    09E2: 50 68    MOV   A,0x68
    09E4: 08       PUSH  A
    09E5: 7C 05 AB LCALL _I2CHW_fReadBytes
    09E8: 38 FB    ADD   SP,0xFB
    09EA: 20       POP   X
(0102) 	while(!(I2CHW_bReadI2CStatus() & I2CHW_RD_COMPLETE));							// Warten bis der Lesevorgang abgeschlossen ist
    09EB: 10       PUSH  X
    09EC: 7C 09 4D LCALL _I2CHW_bReadI2CStatus
    09EF: 20       POP   X
    09F0: 62 D0 00 MOV   REG[0xD0],0x0
    09F3: 53 1A    MOV   [__r0],A
    09F5: 47 1A 04 TST   [__r0],0x4
    09F8: AF F2    JZ    0x09EB
(0103) 	I2CHW_ClrRdStatus();															// Löscht das "Read Complete" Flag
    09FA: 10       PUSH  X
    09FB: 7C 09 53 LCALL _I2CHW_ClrRdStatus
    09FE: 20       POP   X
    09FF: 20       POP   X
    0A00: 7F       RET   
(0104) }
(0105) 
(0106) // Diese Funktion speichert die Zeit und das Datum in der RTC
(0107) void RTC_SetTime(RTC_Struct *pTime)
(0108) {	
_RTC_SetTime:
  pTime                --> X-5
    0A01: 10       PUSH  X
    0A02: 4F       MOV   X,SP
(0109)     I2CHW_bWriteBytes(RTC_Addr, (char *)pTime, TIME_LEN, I2CHW_CompleteXfer);		// Schreibt die Daten in die RTC. Das erste Byte von pTime (vom Typ RTC_Struct) 
    0A03: 10       PUSH  X
    0A04: 50 00    MOV   A,0x0
    0A06: 08       PUSH  A
    0A07: 50 08    MOV   A,0x8
    0A09: 08       PUSH  A
    0A0A: 52 FB    MOV   A,[X-5]
    0A0C: 08       PUSH  A
    0A0D: 52 FC    MOV   A,[X-4]
    0A0F: 08       PUSH  A
    0A10: 50 68    MOV   A,0x68
    0A12: 08       PUSH  A
    0A13: 7C 05 EF LCALL _I2CHW_bWriteBytes
    0A16: 38 FB    ADD   SP,0xFB
    0A18: 20       POP   X
(0110) 																					// ist das RTC Regster "Adress" und wird gefolgt von 7 Bytes (Datum und Uhrzeit)
(0111) 	while(!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));							// Warten bis die Übertragung abgeschlossen wurde
    0A19: 10       PUSH  X
    0A1A: 7C 09 4D LCALL _I2CHW_bReadI2CStatus
    0A1D: 20       POP   X
    0A1E: 62 D0 00 MOV   REG[0xD0],0x0
    0A21: 53 1A    MOV   [__r0],A
    0A23: 47 1A 40 TST   [__r0],0x40
    0A26: AF F2    JZ    0x0A19
(0112) 	I2CHW_ClrWrStatus();															// Löscht das "Write Complete" Flag
    0A28: 10       PUSH  X
    0A29: 7C 09 5A LCALL _I2CHW_ClrWrStatus
    0A2C: 20       POP   X
    0A2D: 20       POP   X
    0A2E: 7F       RET   
(0113) }
(0114) 
(0115) // Diese Funktion wird verwendet um ein einzelnes Register der RTC zu beschreiben
(0116) void RTC_WriteReg(BYTE RegAddress, BYTE RegData)
(0117) {
_RTC_WriteReg:
  RTCData              --> X+0
  RegData              --> X-5
  RegAddress           --> X-4
    0A2F: 10       PUSH  X
    0A30: 4F       MOV   X,SP
    0A31: 38 02    ADD   SP,0x2
(0118) 	BYTE RTCData[2];																// Deffiniert ein lokales Array mit Namen "RTCData". Dieses Feld
(0119) 																					// ist zwei Byte groß
(0120) 	RTCData[0] = RegAddress;														// Schreibt an die 1. Stelle (0) des Feldes das was unter "RegAdress" in die Funktion
    0A33: 52 FC    MOV   A,[X-4]
    0A35: 54 00    MOV   [X+0],A
(0121) 																					// übergeben wurde
(0122) 	RTCData[1] = RegData;															// Schreibt an die 2. Stelle (1) des Feldes das was unter "RegData" in die Funktion
    0A37: 52 FB    MOV   A,[X-5]
    0A39: 54 01    MOV   [X+1],A
(0123) 																					// übergeben wurde
(0124)     I2CHW_bWriteBytes(RTC_Addr, RTCData, 2, I2CHW_CompleteXfer);					// Schreibt den Inhalt des Feldes "RTCData" in die RTC
    0A3B: 10       PUSH  X
    0A3C: 50 00    MOV   A,0x0
    0A3E: 08       PUSH  A
    0A3F: 50 02    MOV   A,0x2
    0A41: 08       PUSH  A
    0A42: 62 D0 00 MOV   REG[0xD0],0x0
    0A45: 50 07    MOV   A,0x7
    0A47: 08       PUSH  A
    0A48: 10       PUSH  X
    0A49: 50 68    MOV   A,0x68
    0A4B: 08       PUSH  A
    0A4C: 7C 05 EF LCALL _I2CHW_bWriteBytes
    0A4F: 38 FB    ADD   SP,0xFB
    0A51: 20       POP   X
(0125) 	while(!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));							// Warten bis die Übertragung abgeschlossen wurde
    0A52: 10       PUSH  X
    0A53: 7C 09 4D LCALL _I2CHW_bReadI2CStatus
    0A56: 20       POP   X
    0A57: 62 D0 00 MOV   REG[0xD0],0x0
    0A5A: 53 1A    MOV   [__r0],A
    0A5C: 47 1A 40 TST   [__r0],0x40
    0A5F: AF F2    JZ    0x0A52
(0126) 	I2CHW_ClrWrStatus();															// Löscht das "Write Complete" Flag
    0A61: 10       PUSH  X
    0A62: 7C 09 5A LCALL _I2CHW_ClrWrStatus
    0A65: 20       POP   X
    0A66: 38 FE    ADD   SP,0xFE
    0A68: 20       POP   X
    0A69: 7F       RET   
(0127) }
(0128) 
(0129) // Diese Funktion wird verwendet um die Registeradresse zu setzen
(0130) void RTC_SetRegAddress(BYTE RegAddress)
(0131) {
_RTC_SetRegAddress:
  RegAddress           --> X-4
    0A6A: 10       PUSH  X
    0A6B: 4F       MOV   X,SP
(0132)     I2CHW_bWriteBytes(RTC_Addr, &RegAddress, 1, I2CHW_CompleteXfer);				// Schreibt die Registeradresse in die RTC
    0A6C: 10       PUSH  X
    0A6D: 50 00    MOV   A,0x0
    0A6F: 08       PUSH  A
    0A70: 50 01    MOV   A,0x1
    0A72: 08       PUSH  A
    0A73: 62 D0 00 MOV   REG[0xD0],0x0
    0A76: 5A 19    MOV   [__r1],X
    0A78: 16 19 04 SUB   [__r1],0x4
    0A7B: 50 07    MOV   A,0x7
    0A7D: 08       PUSH  A
    0A7E: 51 19    MOV   A,[__r1]
    0A80: 08       PUSH  A
    0A81: 50 68    MOV   A,0x68
    0A83: 08       PUSH  A
    0A84: 7C 05 EF LCALL _I2CHW_bWriteBytes
    0A87: 38 FB    ADD   SP,0xFB
    0A89: 20       POP   X
(0133) 	while(!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));							// Wartet bis die Übertragung abgeschlossen wurde
    0A8A: 10       PUSH  X
    0A8B: 7C 09 4D LCALL _I2CHW_bReadI2CStatus
    0A8E: 20       POP   X
    0A8F: 62 D0 00 MOV   REG[0xD0],0x0
    0A92: 53 1A    MOV   [__r0],A
    0A94: 47 1A 40 TST   [__r0],0x40
    0A97: AF F2    JZ    0x0A8A
(0134) 	I2CHW_ClrWrStatus();															// Löscht das "Write Complete" Flag
    0A99: 10       PUSH  X
    0A9A: 7C 09 5A LCALL _I2CHW_ClrWrStatus
    0A9D: 20       POP   X
    0A9E: 20       POP   X
    0A9F: 7F       RET   
(0135) }
(0136) 
(0137) // Zeit und Datum auf dem LCD anzeigen
(0138) void Print_Time(RTC_Struct *pTime)
(0139) {
_Print_Time:
  pTime                --> X-5
    0AA0: 10       PUSH  X
    0AA1: 4F       MOV   X,SP
    0AA2: 38 02    ADD   SP,0x2
(0140) 	LCD_Position(0,0);																// Position the cursor on the LCD for displaying data
    0AA4: 10       PUSH  X
    0AA5: 50 00    MOV   A,0x0
    0AA7: 57 00    MOV   X,0x0
    0AA9: 7C 05 48 LCALL _LCD_Position
    0AAC: 20       POP   X
(0141) 	if(pTime->Hours & 0x40)															// True if 12 hours format is used and false if 24 hours format is used																				
    0AAD: 62 D0 00 MOV   REG[0xD0],0x0
    0AB0: 52 FC    MOV   A,[X-4]
    0AB2: 01 03    ADD   A,0x3
    0AB4: 53 19    MOV   [__r1],A
    0AB6: 52 FB    MOV   A,[X-5]
    0AB8: 09 00    ADC   A,0x0
    0ABA: 60 D4    MOV   REG[0xD4],A
    0ABC: 3E 19    MVI   A,[__r1]
    0ABE: 53 1A    MOV   [__r0],A
    0AC0: 47 1A 40 TST   [__r0],0x40
    0AC3: A0 1D    JZ    0x0AE1
(0142) 	{																				// Display Hours on the LCD
(0143) 		LCD_PrHexByte(pTime->Hours & 0x1F);
    0AC5: 52 FC    MOV   A,[X-4]
    0AC7: 01 03    ADD   A,0x3
    0AC9: 53 19    MOV   [__r1],A
    0ACB: 52 FB    MOV   A,[X-5]
    0ACD: 09 00    ADC   A,0x0
    0ACF: 60 D4    MOV   REG[0xD4],A
    0AD1: 3E 19    MVI   A,[__r1]
    0AD3: 53 1A    MOV   [__r0],A
    0AD5: 26 1A 1F AND   [__r0],0x1F
    0AD8: 10       PUSH  X
    0AD9: 51 1A    MOV   A,[__r0]
    0ADB: 7C 03 E5 LCALL _LCD_PrHexByte
    0ADE: 20       POP   X
(0144) 	}
    0ADF: 80 1E    JMP   0x0AFE
(0145) 	else
(0146) 	{
(0147) 		LCD_PrHexByte(pTime->Hours & 0x3F);
    0AE1: 62 D0 00 MOV   REG[0xD0],0x0
    0AE4: 52 FC    MOV   A,[X-4]
    0AE6: 01 03    ADD   A,0x3
    0AE8: 53 19    MOV   [__r1],A
    0AEA: 52 FB    MOV   A,[X-5]
    0AEC: 09 00    ADC   A,0x0
    0AEE: 60 D4    MOV   REG[0xD4],A
    0AF0: 3E 19    MVI   A,[__r1]
    0AF2: 53 1A    MOV   [__r0],A
    0AF4: 26 1A 3F AND   [__r0],0x3F
    0AF7: 10       PUSH  X
    0AF8: 51 1A    MOV   A,[__r0]
    0AFA: 7C 03 E5 LCALL _LCD_PrHexByte
    0AFD: 20       POP   X
(0148) 	}	
(0149) 	
(0150) 	LCD_PrCString(":");																// Zeigt einen ":" an
    0AFE: 10       PUSH  X
    0AFF: 50 01    MOV   A,0x1
    0B01: 08       PUSH  A
    0B02: 50 DB    MOV   A,0xDB
    0B04: 5C       MOV   X,A
    0B05: 18       POP   A
    0B06: 7C 03 C3 LCALL _LCD_PrCString
    0B09: 20       POP   X
(0151) 	
(0152) 	LCD_PrHexByte(pTime->Minutes);													// Zeigt die Minuten auf dem LCD an
    0B0A: 62 D0 00 MOV   REG[0xD0],0x0
    0B0D: 52 FC    MOV   A,[X-4]
    0B0F: 01 02    ADD   A,0x2
    0B11: 53 19    MOV   [__r1],A
    0B13: 52 FB    MOV   A,[X-5]
    0B15: 09 00    ADC   A,0x0
    0B17: 60 D4    MOV   REG[0xD4],A
    0B19: 3E 19    MVI   A,[__r1]
    0B1B: 10       PUSH  X
    0B1C: 7C 03 E5 LCALL _LCD_PrHexByte
(0153) 	LCD_PrCString(":");
    0B1F: 50 01    MOV   A,0x1
    0B21: 08       PUSH  A
    0B22: 50 DB    MOV   A,0xDB
    0B24: 5C       MOV   X,A
    0B25: 18       POP   A
    0B26: 7C 03 C3 LCALL _LCD_PrCString
    0B29: 20       POP   X
(0154) 	
(0155) 	LCD_PrHexByte(pTime->Seconds);													// Zeigt die Sekunden auf dem LCD an
    0B2A: 62 D0 00 MOV   REG[0xD0],0x0
    0B2D: 52 FC    MOV   A,[X-4]
    0B2F: 01 01    ADD   A,0x1
    0B31: 53 19    MOV   [__r1],A
    0B33: 52 FB    MOV   A,[X-5]
    0B35: 09 00    ADC   A,0x0
    0B37: 60 D4    MOV   REG[0xD4],A
    0B39: 3E 19    MVI   A,[__r1]
    0B3B: 10       PUSH  X
    0B3C: 7C 03 E5 LCALL _LCD_PrHexByte
    0B3F: 20       POP   X
(0156) 		
(0157) 	if(pTime->Hours & 0x40)															// Der Zeiger "pTime" zeigt auf die Stelle "Hours" und es 
    0B40: 62 D0 00 MOV   REG[0xD0],0x0
    0B43: 52 FC    MOV   A,[X-4]
    0B45: 01 03    ADD   A,0x3
    0B47: 53 19    MOV   [__r1],A
    0B49: 52 FB    MOV   A,[X-5]
    0B4B: 09 00    ADC   A,0x0
    0B4D: 60 D4    MOV   REG[0xD4],A
    0B4F: 3E 19    MVI   A,[__r1]
    0B51: 53 1A    MOV   [__r0],A
    0B53: 47 1A 40 TST   [__r0],0x40
    0B56: A0 30    JZ    0x0B87
(0158) 	{																				// wird entschieden ob 12h oder 24h Modus
(0159) 		if(pTime->Hours & 0x20)														// Prüft ob "PM" oder "AM" angezeigt werden muss
    0B58: 52 FC    MOV   A,[X-4]
    0B5A: 01 03    ADD   A,0x3
    0B5C: 53 19    MOV   [__r1],A
    0B5E: 52 FB    MOV   A,[X-5]
    0B60: 09 00    ADC   A,0x0
    0B62: 60 D4    MOV   REG[0xD4],A
    0B64: 3E 19    MVI   A,[__r1]
    0B66: 53 1A    MOV   [__r0],A
    0B68: 47 1A 20 TST   [__r0],0x20
    0B6B: A0 0F    JZ    0x0B7B
(0160) 		LCD_PrCString(" PM");
    0B6D: 10       PUSH  X
    0B6E: 50 01    MOV   A,0x1
    0B70: 08       PUSH  A
    0B71: 50 D7    MOV   A,0xD7
    0B73: 5C       MOV   X,A
    0B74: 18       POP   A
    0B75: 7C 03 C3 LCALL _LCD_PrCString
    0B78: 20       POP   X
    0B79: 80 0D    JMP   0x0B87
(0161) 		else
(0162) 		LCD_PrCString(" AM");
    0B7B: 10       PUSH  X
    0B7C: 50 01    MOV   A,0x1
    0B7E: 08       PUSH  A
    0B7F: 50 D3    MOV   A,0xD3
    0B81: 5C       MOV   X,A
    0B82: 18       POP   A
    0B83: 7C 03 C3 LCALL _LCD_PrCString
    0B86: 20       POP   X
(0163) 	}
(0164) 	
(0165) 	// Zeigt das Datum an
(0166) 	LCD_Position(1,0);
    0B87: 10       PUSH  X
    0B88: 57 00    MOV   X,0x0
    0B8A: 50 01    MOV   A,0x1
    0B8C: 7C 05 48 LCALL _LCD_Position
    0B8F: 20       POP   X
(0167) 	LCD_PrHexByte(pTime->Date);
    0B90: 62 D0 00 MOV   REG[0xD0],0x0
    0B93: 52 FC    MOV   A,[X-4]
    0B95: 01 05    ADD   A,0x5
    0B97: 53 19    MOV   [__r1],A
    0B99: 52 FB    MOV   A,[X-5]
    0B9B: 09 00    ADC   A,0x0
    0B9D: 60 D4    MOV   REG[0xD4],A
    0B9F: 3E 19    MVI   A,[__r1]
    0BA1: 10       PUSH  X
    0BA2: 7C 03 E5 LCALL _LCD_PrHexByte
(0168) 	LCD_PrCString("/");
    0BA5: 50 01    MOV   A,0x1
    0BA7: 08       PUSH  A
    0BA8: 50 D1    MOV   A,0xD1
    0BAA: 5C       MOV   X,A
    0BAB: 18       POP   A
    0BAC: 7C 03 C3 LCALL _LCD_PrCString
    0BAF: 20       POP   X
(0169) 	
(0170) 	// Zeigt den Monat an
(0171) 	LCD_PrHexByte(pTime->Month);
    0BB0: 62 D0 00 MOV   REG[0xD0],0x0
    0BB3: 52 FC    MOV   A,[X-4]
    0BB5: 01 06    ADD   A,0x6
    0BB7: 53 19    MOV   [__r1],A
    0BB9: 52 FB    MOV   A,[X-5]
    0BBB: 09 00    ADC   A,0x0
    0BBD: 60 D4    MOV   REG[0xD4],A
    0BBF: 3E 19    MVI   A,[__r1]
    0BC1: 10       PUSH  X
    0BC2: 7C 03 E5 LCALL _LCD_PrHexByte
(0172) 	LCD_PrCString("/");
    0BC5: 50 01    MOV   A,0x1
    0BC7: 08       PUSH  A
    0BC8: 50 D1    MOV   A,0xD1
    0BCA: 5C       MOV   X,A
    0BCB: 18       POP   A
    0BCC: 7C 03 C3 LCALL _LCD_PrCString
    0BCF: 20       POP   X
(0173) 	
(0174) 	// Zeigt das Jahr an
(0175) 	LCD_PrHexByte(pTime->Year);
    0BD0: 62 D0 00 MOV   REG[0xD0],0x0
    0BD3: 52 FC    MOV   A,[X-4]
    0BD5: 01 07    ADD   A,0x7
    0BD7: 53 19    MOV   [__r1],A
    0BD9: 52 FB    MOV   A,[X-5]
    0BDB: 09 00    ADC   A,0x0
    0BDD: 60 D4    MOV   REG[0xD4],A
    0BDF: 3E 19    MVI   A,[__r1]
    0BE1: 10       PUSH  X
    0BE2: 7C 03 E5 LCALL _LCD_PrHexByte
    0BE5: 20       POP   X
(0176) 	
(0177) 	// Zeigt den Wochentag an
(0178) 	switch(pTime->Day)
    0BE6: 62 D0 00 MOV   REG[0xD0],0x0
    0BE9: 52 FC    MOV   A,[X-4]
    0BEB: 01 04    ADD   A,0x4
    0BED: 53 19    MOV   [__r1],A
    0BEF: 52 FB    MOV   A,[X-5]
    0BF1: 09 00    ADC   A,0x0
    0BF3: 60 D4    MOV   REG[0xD4],A
    0BF5: 3E 19    MVI   A,[__r1]
    0BF7: 54 01    MOV   [X+1],A
    0BF9: 56 00 00 MOV   [X+0],0x0
    0BFC: 3D 00 00 CMP   [X+0],0x0
    0BFF: B0 06    JNZ   0x0C06
    0C01: 3D 01 01 CMP   [X+1],0x1
    0C04: A0 3F    JZ    0x0C44
    0C06: 3D 00 00 CMP   [X+0],0x0
    0C09: B0 06    JNZ   0x0C10
    0C0B: 3D 01 02 CMP   [X+1],0x2
    0C0E: A0 43    JZ    0x0C52
    0C10: 3D 00 00 CMP   [X+0],0x0
    0C13: B0 06    JNZ   0x0C1A
    0C15: 3D 01 03 CMP   [X+1],0x3
    0C18: A0 47    JZ    0x0C60
    0C1A: 3D 00 00 CMP   [X+0],0x0
    0C1D: B0 06    JNZ   0x0C24
    0C1F: 3D 01 04 CMP   [X+1],0x4
    0C22: A0 4B    JZ    0x0C6E
    0C24: 3D 00 00 CMP   [X+0],0x0
    0C27: B0 06    JNZ   0x0C2E
    0C29: 3D 01 05 CMP   [X+1],0x5
    0C2C: A0 4F    JZ    0x0C7C
    0C2E: 3D 00 00 CMP   [X+0],0x0
    0C31: B0 06    JNZ   0x0C38
    0C33: 3D 01 06 CMP   [X+1],0x6
    0C36: A0 53    JZ    0x0C8A
    0C38: 3D 00 00 CMP   [X+0],0x0
    0C3B: B0 06    JNZ   0x0C42
    0C3D: 3D 01 07 CMP   [X+1],0x7
    0C40: A0 57    JZ    0x0C98
    0C42: 80 61    JMP   0x0CA4
(0179) 	{
(0180) 		case 1:	LCD_PrCString(" (SUN)");
    0C44: 10       PUSH  X
    0C45: 50 01    MOV   A,0x1
    0C47: 08       PUSH  A
    0C48: 50 CA    MOV   A,0xCA
    0C4A: 5C       MOV   X,A
    0C4B: 18       POP   A
    0C4C: 7C 03 C3 LCALL _LCD_PrCString
    0C4F: 20       POP   X
(0181) 				break;
    0C50: 80 53    JMP   0x0CA4
(0182) 				
(0183) 		case 2:	LCD_PrCString(" (MON)");
    0C52: 10       PUSH  X
    0C53: 50 01    MOV   A,0x1
    0C55: 08       PUSH  A
    0C56: 50 C3    MOV   A,0xC3
    0C58: 5C       MOV   X,A
    0C59: 18       POP   A
    0C5A: 7C 03 C3 LCALL _LCD_PrCString
    0C5D: 20       POP   X
(0184) 				break;
    0C5E: 80 45    JMP   0x0CA4
(0185) 				
(0186) 		case 3:	LCD_PrCString(" (TUE)");
    0C60: 10       PUSH  X
    0C61: 50 01    MOV   A,0x1
    0C63: 08       PUSH  A
    0C64: 50 BC    MOV   A,0xBC
    0C66: 5C       MOV   X,A
    0C67: 18       POP   A
    0C68: 7C 03 C3 LCALL _LCD_PrCString
    0C6B: 20       POP   X
(0187) 				break;
    0C6C: 80 37    JMP   0x0CA4
(0188) 				
(0189) 		case 4:	LCD_PrCString(" (WED)");
    0C6E: 10       PUSH  X
    0C6F: 50 01    MOV   A,0x1
    0C71: 08       PUSH  A
    0C72: 50 B5    MOV   A,0xB5
    0C74: 5C       MOV   X,A
    0C75: 18       POP   A
    0C76: 7C 03 C3 LCALL _LCD_PrCString
    0C79: 20       POP   X
(0190) 				break;
    0C7A: 80 29    JMP   0x0CA4
(0191) 				
(0192) 		case 5:	LCD_PrCString(" (THU)");
    0C7C: 10       PUSH  X
    0C7D: 50 01    MOV   A,0x1
    0C7F: 08       PUSH  A
    0C80: 50 AE    MOV   A,0xAE
    0C82: 5C       MOV   X,A
    0C83: 18       POP   A
    0C84: 7C 03 C3 LCALL _LCD_PrCString
    0C87: 20       POP   X
(0193) 				break;
    0C88: 80 1B    JMP   0x0CA4
(0194) 		
(0195) 		case 6:	LCD_PrCString(" (FRI)");
    0C8A: 10       PUSH  X
    0C8B: 50 01    MOV   A,0x1
    0C8D: 08       PUSH  A
    0C8E: 50 A7    MOV   A,0xA7
    0C90: 5C       MOV   X,A
    0C91: 18       POP   A
    0C92: 7C 03 C3 LCALL _LCD_PrCString
    0C95: 20       POP   X
(0196) 				break;
    0C96: 80 0D    JMP   0x0CA4
(0197) 				
(0198) 		case 7:	LCD_PrCString(" (SAT)");
    0C98: 10       PUSH  X
    0C99: 50 01    MOV   A,0x1
    0C9B: 08       PUSH  A
    0C9C: 50 A0    MOV   A,0xA0
    0C9E: 5C       MOV   X,A
    0C9F: 18       POP   A
    0CA0: 7C 03 C3 LCALL _LCD_PrCString
    0CA3: 20       POP   X
(0199) 				break;
    0CA4: 38 FE    ADD   SP,0xFE
    0CA6: 20       POP   X
    0CA7: 7F       RET   
(0200) 				
(0201) 	}
(0202) }
(0203) 
(0204) // ISR um die RTC auszulesen
(0205) void RTC_Read_ISR(void)
(0206) {
_RTC_Read_ISR:
  dummy                --> X+0
    0CA8: 71 C0    OR    F,0xC0
    0CAA: 08       PUSH  A
    0CAB: 5D D0    MOV   A,REG[0xD0]
    0CAD: 08       PUSH  A
    0CAE: 5D D3    MOV   A,REG[0xD3]
    0CB0: 08       PUSH  A
    0CB1: 5D D4    MOV   A,REG[0xD4]
    0CB3: 08       PUSH  A
    0CB4: 5D D5    MOV   A,REG[0xD5]
    0CB6: 08       PUSH  A
    0CB7: 62 D0 00 MOV   REG[0xD0],0x0
    0CBA: 51 1A    MOV   A,[__r0]
    0CBC: 08       PUSH  A
    0CBD: 51 19    MOV   A,[__r1]
    0CBF: 08       PUSH  A
    0CC0: 51 18    MOV   A,[__r2]
    0CC2: 08       PUSH  A
    0CC3: 51 17    MOV   A,[__r3]
    0CC5: 08       PUSH  A
    0CC6: 51 16    MOV   A,[__r4]
    0CC8: 08       PUSH  A
    0CC9: 51 15    MOV   A,[__r5]
    0CCB: 08       PUSH  A
    0CCC: 51 14    MOV   A,[__r6]
    0CCE: 08       PUSH  A
    0CCF: 51 13    MOV   A,[__r7]
    0CD1: 08       PUSH  A
    0CD2: 51 12    MOV   A,[__r8]
    0CD4: 08       PUSH  A
    0CD5: 51 11    MOV   A,[__r9]
    0CD7: 08       PUSH  A
    0CD8: 51 10    MOV   A,[__r10]
    0CDA: 08       PUSH  A
    0CDB: 51 0F    MOV   A,[__r11]
    0CDD: 08       PUSH  A
    0CDE: 51 0E    MOV   A,[__rX]
    0CE0: 08       PUSH  A
    0CE1: 51 0D    MOV   A,[__rY]
    0CE3: 08       PUSH  A
    0CE4: 51 0C    MOV   A,[__rZ]
    0CE6: 08       PUSH  A
    0CE7: 10       PUSH  X
    0CE8: 4F       MOV   X,SP
    0CE9: 38 01    ADD   SP,0x1
(0207) 	BYTE dummy;
(0208) 	fReadRTC = 0x01;																	// Event used to read data from RTC 
    0CEB: 62 D0 00 MOV   REG[0xD0],0x0
    0CEE: 55 2C 01 MOV   [fReadRTC],0x1
(0209) 	dummy = PRT1DR;																		// Ließt Port1 um den "ChangeFromRead" Interrupt auszulösen
    0CF1: 5D 04    MOV   A,REG[0x4]
    0CF3: 54 00    MOV   [X+0],A
(0210) 	Print_Time(&Time);																	// Ruft die Funktion "Print_Time" auf und übergibt die Adresse
    0CF5: 50 00    MOV   A,0x0
    0CF7: 08       PUSH  A
    0CF8: 50 1B    MOV   A,0x1B
    0CFA: 08       PUSH  A
    0CFB: 9D A3    CALL  _Print_Time
    0CFD: 38 FE    ADD   SP,0xFE
    0CFF: 38 FF    ADD   SP,0xFF
    0D01: 20       POP   X
    0D02: 62 D0 00 MOV   REG[0xD0],0x0
    0D05: 18       POP   A
    0D06: 53 0C    MOV   [__rZ],A
    0D08: 18       POP   A
    0D09: 53 0D    MOV   [__rY],A
    0D0B: 18       POP   A
    0D0C: 53 0E    MOV   [__rX],A
    0D0E: 18       POP   A
    0D0F: 53 0F    MOV   [__r11],A
    0D11: 18       POP   A
    0D12: 53 10    MOV   [__r10],A
    0D14: 18       POP   A
    0D15: 53 11    MOV   [__r9],A
    0D17: 18       POP   A
    0D18: 53 12    MOV   [__r8],A
    0D1A: 18       POP   A
    0D1B: 53 13    MOV   [__r7],A
    0D1D: 18       POP   A
    0D1E: 53 14    MOV   [__r6],A
    0D20: 18       POP   A
    0D21: 53 15    MOV   [__r5],A
    0D23: 18       POP   A
    0D24: 53 16    MOV   [__r4],A
    0D26: 18       POP   A
    0D27: 53 17    MOV   [__r3],A
    0D29: 18       POP   A
    0D2A: 53 18    MOV   [__r2],A
    0D2C: 18       POP   A
    0D2D: 53 19    MOV   [__r1],A
    0D2F: 18       POP   A
    0D30: 53 1A    MOV   [__r0],A
    0D32: 18       POP   A
    0D33: 60 D5    MOV   REG[0xD5],A
    0D35: 18       POP   A
    0D36: 60 D4    MOV   REG[0xD4],A
    0D38: 18       POP   A
    0D39: 60 D3    MOV   REG[0xD3],A
    0D3B: 18       POP   A
    0D3C: 60 D0    MOV   REG[0xD0],A
    0D3E: 18       POP   A
    0D3F: 7E       RETI  
FILE: lib\psocgpioint.asm               (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;;*****************************************************************************
                                        (0004) ;;*****************************************************************************
                                        (0005) ;;  FILENAME: PSoCGPIOINT.asm
                                        (0006) ;;   Version: 2.0.0.20, Updated on 2003/07/17 at 12:10:35
                                        (0007) ;;  @PSOC_VERSION
                                        (0008) ;;
                                        (0009) ;;  DESCRIPTION: PSoC GPIO Interrupt Service Routine
                                        (0010) ;;-----------------------------------------------------------------------------
                                        (0011) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;;*****************************************************************************
                                        (0013) ;;*****************************************************************************
                                        (0014) 
                                        (0015) include "m8c.inc"
                                        (0016) include "PSoCGPIOINT.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export   PSoC_GPIO_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) ;-----------------------------------------------
                                        (0025) ;  Constant Definitions
                                        (0026) ;-----------------------------------------------
                                        (0027) 
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) 	
                                        (0033) 
                                        (0034) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0035) ;---------------------------------------------------
                                        (0036) ; Insert your custom declarations below this banner
                                        (0037) ;---------------------------------------------------
                                        (0038) 
                                        (0039) ;---------------------------------------------------
                                        (0040) ; Insert your custom declarations above this banner
                                        (0041) ;---------------------------------------------------
                                        (0042) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0043) 
                                        (0044) 
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;  FUNCTION NAME: PSoC_GPIO_ISR
                                        (0047) ;
                                        (0048) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0049) ;
                                        (0050) ;-----------------------------------------------------------------------------
                                        (0051) ;
                                        (0052) PSoC_GPIO_ISR:
                                        (0053) 
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom code below this banner
                                        (0058)    ;---------------------------------------------------
0D40: 7D 0C A8 LJMP  _RTC_Read_ISR      (0059)    	ljmp _RTC_Read_ISR
                                        (0060)    ;---------------------------------------------------
                                        (0061)    ; Insert your custom code above this banner
                                        (0062)    ;---------------------------------------------------
                                        (0063)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0064) 
0D43: 7E       RETI                     (0065)    reti
                                        (0066) 
                                        (0067) 
                                        (0068) ; end of file PSoCGPIOINT.asm
