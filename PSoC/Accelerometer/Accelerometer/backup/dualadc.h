//*****************************************************************************
//*****************************************************************************
//  FILENAME:  DUALADC.h
//  Version: 2.30, Updated on 2012/3/2 at 9:14:34
//  Generated by PSoC Designer 5.2.2551
//
//  DESCRIPTION: DualADC User Module C Language interface file.
//
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
//
#ifndef DUALADC_INCLUDE
#define DUALADC_INCLUDE

#include <m8C.h>

//-------------------------------------------------
// Defines for DUALADC API's.
//-------------------------------------------------

// Power Setting Constants
#define DUALADC_OFF            0
#define DUALADC_LOWPOWER       1
#define DUALADC_MEDPOWER       2
#define DUALADC_HIGHPOWER      3

// Function fastcall16 Pragmas
#pragma fastcall16 DUALADC_Start
#pragma fastcall16 DUALADC_SetPower
#pragma fastcall16 DUALADC_GetSamples
#pragma fastcall16 DUALADC_StopAD
#pragma fastcall16 DUALADC_Stop
#pragma fastcall16 DUALADC_fIsData
#pragma fastcall16 DUALADC_fIsDataAvailable
#pragma fastcall16 DUALADC_iGetData1
#pragma fastcall16 DUALADC_iGetData1ClearFlag
#pragma fastcall16 DUALADC_iGetData2
#pragma fastcall16 DUALADC_iGetData2ClearFlag
#pragma fastcall16 DUALADC_ClearFlag
#pragma fastcall16 DUALADC_SetResolution

//-------------------------------------------------
// Prototypes of the DUALADC API.
//-------------------------------------------------
extern void DUALADC_Start(BYTE bPower);
extern void DUALADC_SetPower(BYTE bPower);
extern void DUALADC_GetSamples(BYTE bNumSamples);
extern void DUALADC_StopAD(void);
extern void DUALADC_Stop(void);
extern CHAR DUALADC_fIsData(void);
extern CHAR DUALADC_fIsDataAvailable(void);
extern INT  DUALADC_iGetData1(void);
extern INT  DUALADC_iGetData2(void);
extern INT  DUALADC_iGetData1ClearFlag(void);
extern INT  DUALADC_iGetData2ClearFlag(void);
extern void DUALADC_ClearFlag(void);

extern void DUALADC_SetResolution(BYTE bResolution);

#define DUALADC_bNUMBITS  0x0c

//-------------------------------------------------
// Hardware Register Definitions
//-------------------------------------------------

// ADC1 Integrator Block Register Definitions
#pragma ioport  DUALADC_bfADC1cr0:  0x080
BYTE            DUALADC_bfADC1cr0;
#pragma ioport  DUALADC_bfADC1cr1:  0x081
BYTE            DUALADC_bfADC1cr1;
#pragma ioport  DUALADC_bfADC1cr2:  0x082
BYTE            DUALADC_bfADC1cr2;
#pragma ioport  DUALADC_bfADC1cr3:  0x083
BYTE            DUALADC_bfADC1cr3;

// ADC2 Integrator Block Register Definitions
#pragma ioport  DUALADC_bfADC2cr0:  0x084
BYTE            DUALADC_bfADC2cr0;
#pragma ioport  DUALADC_bfADC2cr1:  0x085
BYTE            DUALADC_bfADC2cr1;
#pragma ioport  DUALADC_bfADC2cr2:  0x086
BYTE            DUALADC_bfADC2cr2;
#pragma ioport  DUALADC_bfADC2cr3:  0x087
BYTE            DUALADC_bfADC2cr3;

// Counter Block Register Definitions
#pragma ioport  DUALADC_fCounter1FN:    0x120
BYTE            DUALADC_fCounter1FN;
#pragma ioport  DUALADC_fCounter1SL:    0x121
BYTE            DUALADC_fCounter1SL;
#pragma ioport  DUALADC_fCounter1OS:    0x122
BYTE            DUALADC_fCounter1OS;
#pragma ioport  DUALADC_bCount1:    0x020
BYTE            DUALADC_bCount1;
#pragma ioport  DUALADC_bPeriod1:   0x021
BYTE            DUALADC_bPeriod1;
#pragma ioport  DUALADC_bCompare1:  0x022
BYTE            DUALADC_bCompare1;
#pragma ioport  DUALADC_bCounter1_CR0:  0x023
BYTE            DUALADC_bCounter1_CR0;

// Counter Block Register Definitions
#pragma ioport  DUALADC_fCounter2FN:    0x12c
BYTE            DUALADC_fCounter2FN;
#pragma ioport  DUALADC_fCounter2SL:    0x12d
BYTE            DUALADC_fCounter2SL;
#pragma ioport  DUALADC_fCounter2OS:    0x12e
BYTE            DUALADC_fCounter2OS;
#pragma ioport  DUALADC_bCount2:    0x02c
BYTE            DUALADC_bCount2;
#pragma ioport  DUALADC_bPeriod2:   0x02d
BYTE            DUALADC_bPeriod2;
#pragma ioport  DUALADC_bCompare2:  0x02e
BYTE            DUALADC_bCompare2;
#pragma ioport  DUALADC_bCounter2_CR0:  0x02f
BYTE            DUALADC_bCounter2_CR0;

// PWM16 Block Register Definitions
#pragma ioport  DUALADC_bfPWM_LSB_FN:   0x124
BYTE            DUALADC_bfPWM_LSB_FN;
#pragma ioport  DUALADC_bfPWM_MSB_FN:   0x128
BYTE            DUALADC_bfPWM_MSB_FN;
#pragma ioport  DUALADC_fPWM_LSB_CR0:   0x027
BYTE            DUALADC_fPWM_LSB_CR0;
#pragma ioport  DUALADC_fPWM_MSB_CR0:   0x02b
BYTE            DUALADC_fPWM_MSB_CR0;
#pragma ioport  DUALADC_bPWM_Count_MSB: 0x028
BYTE            DUALADC_bPWM_Count_MSB;
#pragma ioport  DUALADC_bPWM_Count_LSB: 0x024
BYTE            DUALADC_bPWM_Count_LSB;
#pragma ioport  DUALADC_bPWM_Period_MSB:    0x029
BYTE            DUALADC_bPWM_Period_MSB;
#pragma ioport  DUALADC_bPWM_Period_LSB:    0x025
BYTE            DUALADC_bPWM_Period_LSB;
#pragma ioport  DUALADC_bPWM_IntTime_MSB:   0x02a
BYTE            DUALADC_bPWM_IntTime_MSB;
#pragma ioport  DUALADC_bPWM_IntTime_LSB:   0x026
BYTE            DUALADC_bPWM_IntTime_LSB;
#pragma ioport  DUALADC_bfPWM_LSB_FN:   0x124
BYTE            DUALADC_bfPWM_LSB_FN;
#pragma ioport  DUALADC_bfPWM_MSB_FN:   0x128
BYTE            DUALADC_bfPWM_MSB_FN;

#endif
// end of file DUALADC.h
