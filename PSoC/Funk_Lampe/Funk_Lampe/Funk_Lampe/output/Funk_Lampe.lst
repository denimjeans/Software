FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.40
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C21x23 microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0068) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0069) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0070) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0071) ; bytes on the stack which are otherwise required for the return address. If
                                        (0072) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0073) ; release, the C compiler automatically places an infinite loop at the end
                                        (0074) ; of main, rather than a return instruction.)
                                        (0075) ;
                                        (0076) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0077) 
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ; Interrupt Vector Table
                                        (0081) ;-----------------------------------------------------------------------------
                                        (0082) ;
                                        (0083) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0084) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0085) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0086) ; vector jump targets are modified automatically according to the user
                                        (0087) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0088) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0089) ; configuration files. If you need to hard code a vector, update the
                                        (0090) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0091) ; of this file.
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) 
                                        (0094)     AREA TOP (ROM, ABS, CON)
                                        (0095) 
                                        (0096)     org   0                        ;Reset Interrupt Vector
                                        (0097) IF	(TOOLCHAIN & HITECH)
                                        (0098) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0099) ELSE
0000: 80 67    JMP   0x0068             (0100)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0101) ENDIF
                                        (0102)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0103)     ;---------------------------------------------------
                                        (0104)     ; Insert your custom code below this banner
                                        (0105)     ;---------------------------------------------------
                                        (0106) 
                                        (0107)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0108)     halt                           ;Stop execution if power falls too low
                                        (0109) 
                                        (0110)     org   08h                      ;Analog Column 0 Interrupt Vector
0008: 7D 04 E8 LJMP  _ADC8_ADC_ISR      (0111)     ljmp	_ADC8_ADC_ISR
000B: 7E       RETI                     (0112)     reti
                                        (0113) 
                                        (0114)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0115)     // call	void_handler
000C: 7E       RETI                     (0116)     reti
                                        (0117) 
                                        (0118)     org   18h                      ;VC3 Interrupt Vector
                                        (0119)     // call	void_handler
0018: 7E       RETI                     (0120)     reti
                                        (0121) 
                                        (0122)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0123)     // call	void_handler
001C: 7E       RETI                     (0124)     reti
                                        (0125) 
                                        (0126)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0127)     // call	void_handler
0020: 7E       RETI                     (0128)     reti
                                        (0129) 
                                        (0130)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 04 9F LJMP  _Timer8_ISR        (0131)     ljmp	_Timer8_ISR
0027: 7E       RETI                     (0132)     reti
                                        (0133) 
                                        (0134)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 02 A5 LJMP  _UART_TX_ISR       (0135)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0136)     reti
                                        (0137) 
                                        (0138)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 02 A6 LJMP  _UART_RX_ISR       (0139)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0140)     reti
                                        (0141) 
                                        (0142)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0143)     // call	void_handler
0060: 7E       RETI                     (0144)     reti
                                        (0145) 
                                        (0146)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0147)     // call	void_handler
0064: 7E       RETI                     (0148)     reti
0068: 71 10    OR    F,0x10             
                                        (0149)     ;---------------------------------------------------
                                        (0150)     ; Insert your custom code above this banner
                                        (0151)     ;---------------------------------------------------
                                        (0152)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0153) 
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  Start of Execution.
                                        (0156) ;-----------------------------------------------------------------------------
                                        (0157) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0158) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0159) ;
                                        (0160) 
                                        (0161) IF	(TOOLCHAIN & HITECH)
                                        (0162)  	AREA PD_startup(CODE, REL, CON)
                                        (0163) ELSE
                                        (0164)     org 68h
                                        (0165) ENDIF
                                        (0166) __Start:
                                        (0167) 
                                        (0168)     ; initialize SMP values for voltage stabilization, if required,
                                        (0169)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0170)     ; least for now. 
                                        (0171)     ;
                                        (0172)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[0xE3],0x87     (0173)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,0xEF             
006F: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0174)     M8C_SetBank0
                                        (0175) 
                                        (0176) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0177) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0178)     M8C_EnableWatchDog
                                        (0179) ENDIF
                                        (0180) 
0072: 41 FE FB AND   REG[0xFE],0xFB     (0181)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0182) 
                                        (0183) IF	(TOOLCHAIN & HITECH)
                                        (0184)     ;---------------------------
                                        (0185)     ; Set up the Temporary stack
                                        (0186)     ;---------------------------
                                        (0187)     ; A temporary stack is set up for the SSC instructions.
                                        (0188)     ; The real stack start will be assigned later.
                                        (0189)     ;
                                        (0190) 	global		__Lstackps
                                        (0191) 	mov     a,low __Lstackps
                                        (0192) 	swap    a,sp
                                        (0193) ELSE
                                        (0194)     ;------------------
                                        (0195)     ; Set up the stack
                                        (0196)     ;------------------
0075: 50 2B    MOV   A,0x2B             (0197)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
0077: 4E       SWAP  SP,A               (0198)     swap  SP, A                    ; This is only temporary if going to LMM
0078: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0199) ENDIF
                                        (0200) 
                                        (0201)     ;-----------------------------------------------
                                        (0202)     ; Set Power-related Trim.
                                        (0203)     ;-----------------------------------------------
                                        (0204) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0205) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0206)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0207)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0208)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V
                                        (0209)  ENDIF
                                        (0210) ENDIF ; 5.0 V Operation
                                        (0211) 
                                        (0212) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0213)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0214)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0215)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V
                                        (0216)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0217)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V
                                        (0218)  ENDIF
                                        (0219) ENDIF ; 3.3 Volt Operation
                                        (0220) 
                                        (0221) IF ( POWER_SETTING & POWER_SET_2V7_12MHZ)      ; *** 2.7 Volts / 12MHZ operation ***
                                        (0222)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0223)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_12MHZ, SSCTBL2_TRIM_BGR_2V
                                        (0224) ENDIF ; *** 2.7 Volts / 12MHZ operation ***
                                        (0225) 
                                        (0226) IF ( POWER_SETTING & POWER_SET_2V7_6MHZ)       ; *** 2.7 Volts /  6MHZ operation ***
                                        (0227)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0228)     M8SSC_SetTableTrims  2, SSCTBL2_TRIM_IMO_2V_6MHZ,  SSCTBL2_TRIM_BGR_2V
                                        (0229) ENDIF ; *** 2.7 Volts /  6MHZ operation ***
                                        (0230) 
007B: 55 F8 00 MOV   [String+240],0x0   (0231)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
007E: 55 F9 00 MOV   [String+241],0x0   (0232)     mov  [bSSC_KEYSP], 0
0081: 71 10    OR    F,0x10             
                                        (0233) 
                                        (0234)     ;---------------------------------------
                                        (0235)     ; Initialize Crystal Oscillator and PLL
                                        (0236)     ;---------------------------------------
                                        (0237) IF ( POWER_SETTING & POWER_SET_2V7)       ; *** 2.7 Volts  ***
                                        (0238)     M8C_SetBank1
                                        (0239)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_3MHz)
                                        (0240)     M8C_SetBank0
                                        (0241)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0242) 
                                        (0243) ELSE 	 ;*** all other voltages OK for 12Mhz ***
                                        (0244)     M8C_SetBank1
0083: 62 E0 02 MOV   REG[0xE0],0x2      (0245)     mov   reg[OSC_CR0], (SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0086: 70 EF    AND   F,0xEF             
0088: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0246)     M8C_SetBank0
                                        (0247)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0248) 
                                        (0249) ENDIF
                                        (0250) 
                                        (0251)     ;-------------------------------------------------------
                                        (0252)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0253)     ;-------------------------------------------------------
                                        (0254) 
                                        (0255)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0256) 
                                        (0257) IF (SYSCLK_SOURCE)
                                        (0258)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0259) ENDIF
                                        (0260)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0261) 
                                        (0262)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0263)     ;---------------------------------------------------
                                        (0264)     ; Insert your custom code below this banner
                                        (0265)     ;---------------------------------------------------
                                        (0266) 
                                        (0267)     ;---------------------------------------------------
                                        (0268)     ; Insert your custom code above this banner
                                        (0269)     ;---------------------------------------------------
                                        (0270)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0271) 
                                        (0272)     ;-------------------------
                                        (0273)     ; Load Base Configuration
                                        (0274)     ;-------------------------
                                        (0275)     ; Load global parameter settings and load the user modules in the
                                        (0276)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0277)     ; to minimize start up time; (2) We may still need to play with the
                                        (0278)     ; Sleep Timer.
                                        (0279)     ;
008B: 7C 02 47 LCALL 0x0247             (0280)     lcall LoadConfigInit
                                        (0281) 
                                        (0282)     ;-----------------------------------
                                        (0283)     ; Initialize C Run-Time Environment
                                        (0284)     ;-----------------------------------
                                        (0285) IF ( C_LANGUAGE_SUPPORT )
008E: 50 00    MOV   A,0x0              (0286)     mov  A,0                           ; clear the 'bss' segment to zero
0090: 55 03 08 MOV   [__r0],0x8         (0287)     mov  [__r0],<__bss_start
                                        (0288) BssLoop:
0093: 3C 03 0A CMP   [__r0],0xA         (0289)     cmp  [__r0],<__bss_end
0096: A0 05    JZ    0x009C             (0290)     jz   BssDone
0098: 3F 03    MVI   [__r0],A           (0291)     mvi  [__r0],A
009A: 8F F8    JMP   0x0093             (0292)     jmp  BssLoop
                                        (0293) BssDone:
009C: 50 02    MOV   A,0x2              (0294)     mov  A,>__idata_start              ; copy idata to data segment
009E: 57 00    MOV   X,0x0              (0295)     mov  X,<__idata_start
00A0: 55 03 00 MOV   [__r0],0x0         (0296)     mov  [__r0],<__data_start
                                        (0297) IDataLoop:
00A3: 3C 03 02 CMP   [__r0],0x2         (0298)     cmp  [__r0],<__data_end
00A6: A0 0B    JZ    0x00B2             (0299)     jz   C_RTE_Done
00A8: 08       PUSH  A                  (0300)     push A
00A9: 28       ROMX                     (0301)     romx
00AA: 3F 03    MVI   [__r0],A           (0302)     mvi  [__r0],A
00AC: 18       POP   A                  (0303)     pop  A
00AD: 75       INC   X                  (0304)     inc  X
00AE: 09 00    ADC   A,0x0              (0305)     adc  A,0
00B0: 8F F2    JMP   0x00A3             (0306)     jmp  IDataLoop
00B2: 71 10    OR    F,0x10             
                                        (0307) 
                                        (0308) C_RTE_Done:
                                        (0309) 
                                        (0310) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0311) 
                                        (0312)     ;-------------------------------
                                        (0313)     ; Voltage Stabilization for SMP
                                        (0314)     ;-------------------------------
                                        (0315) 
                                        (0316) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0317) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0318)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0319)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0320)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0321)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0322)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0323)     M8C_SetBank1
                                        (0324)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0325)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0326)     M8C_SetBank0
                                        (0327)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0328)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0329) .WaitFor2ms:
                                        (0330)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0331)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0332) ENDIF ; SMP is operational
                                        (0333) ENDIF ; 5.0V Operation
                                        (0334) 
                                        (0335)     ;-------------------------------
                                        (0336)     ; Set Power-On Reset (POR) Level
                                        (0337)     ;-------------------------------
                                        (0338)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH,
                                        (0339)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper
                                        (0340)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0341)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0342)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0343) 
                                        (0344)     M8C_SetBank1
                                        (0345) 
                                        (0346) IF (POWER_SETTING & POWER_SET_2V7)             ; 2.7V Operation?
                                        (0347)                                                ;  Yes, lowest trip already set
                                        (0348) ELSE                                           ;   No, must adjust POR...
                                        (0349) IF (POWER_SETTING & POWER_SET_3V3)             ; 3.3V Operation?
                                        (0350)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, change to midpoint trip
                                        (0351) ELSE
                                        (0352) IF (POWER_SETTING & POWER_SET_5V0)             ; 5.0V Operation?
                                        (0353)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)       ; and Slow Mode?
                                        (0354)     or   reg[VLT_CR], VLT_CR_POR_MID           ;   Yes, set to midpoint trip
                                        (0355)  ELSE                                          ;    No, fast mode
                                        (0356)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz )    ;      As fast as 24MHz?
                                        (0357)     or   reg[VLT_CR], VLT_CR_POR_MID           ;         No, change to midpoint trip
                                        (0358)   ELSE ; 24HMz                                 ;
00B4: 43 E3 20 OR    REG[0xE3],0x20     (0359)     or    reg[VLT_CR], VLT_CR_POR_HIGH         ;        Yes, switch to	highest setting
00B7: 70 EF    AND   F,0xEF             
                                        (0360)   ENDIF ; 24MHz
                                        (0361)  ENDIF ; Slow Mode
                                        (0362) ENDIF ; 5.0V Operation
                                        (0363) ENDIF ; 3.3V Operation
                                        (0364) ENDIF ; 2.7V Operation
                                        (0365) 
                                        (0366)     M8C_SetBank0
                                        (0367) 
                                        (0368)     ;----------------------------
                                        (0369)     ; Wrap up and invoke "main"
                                        (0370)     ;----------------------------
                                        (0371) 
                                        (0372)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0373)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0374)     ;
00B9: 62 E0 00 MOV   REG[0xE0],0x0      (0375)     mov  reg[INT_MSK0],0
00BC: 71 10    OR    F,0x10             
                                        (0376) 
                                        (0377)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0378)     ;
                                        (0379)     M8C_SetBank1
00BE: 62 E0 03 MOV   REG[0xE0],0x3      (0380)     mov  reg[OSC_CR0],(SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
00C1: 70 EF    AND   F,0xEF             
                                        (0381)     M8C_SetBank0
                                        (0382) 
                                        (0383)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0384)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0385)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0386)     ;
00C3: 62 E2 00 MOV   REG[0xE2],0x0      (0387)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0388)                                    ; have been set during the boot process.
                                        (0389) IF	(TOOLCHAIN & HITECH)
                                        (0390) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0391) ELSE
                                        (0392) IF ENABLE_LJMP_TO_MAIN
                                        (0393)     ljmp  _main                    ; goto main (no return)
                                        (0394) ELSE
00C6: 7C 05 07 LCALL __UserModules_end|__text_start|_main|_main(0395)     lcall _main                    ; call main
                                        (0396) .Exit:
00C9: 8F FF    JMP   0x00C9             (0397)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0398) ENDIF
                                        (0399) ENDIF ; TOOLCHAIN
                                        (0400) 
                                        (0401)     ;---------------------------------
                                        (0402)     ; Library Access to Global Parms
                                        (0403)     ;---------------------------------
                                        (0404)     ;
                                        (0405)  bGetPowerSetting:
                                        (0406) _bGetPowerSetting:
                                        (0407)     ; Returns value of POWER_SETTING in the A register.
                                        (0408)     ; No inputs. No Side Effects.
                                        (0409)     ;
                                        (0410) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0411)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0412) ELSE
00CB: 50 10    MOV   A,0x10             (0413)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0414) ENDIF
00CD: 7F       RET                      (0415)     ret
                                        (0416) 
                                        (0417) IF	(TOOLCHAIN & HITECH)
                                        (0418) ELSE
                                        (0419)     ;---------------------------------
                                        (0420)     ; Order Critical RAM & ROM AREAs
                                        (0421)     ;---------------------------------
                                        (0422)     ;  'TOP' is all that has been defined so far...
                                        (0423) 
                                        (0424)     ;  ROM AREAs for C CONST, static & global items
                                        (0425)     ;
                                        (0426)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0427)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0428) __idata_start:
                                        (0429) 
                                        (0430)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0431) __func_lit_start:
                                        (0432) 
                                        (0433)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0434)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0435) 
                                        (0436)     ; CODE segment for general use
                                        (0437)     ;
                                        (0438)     AREA text (ROM, REL, CON)
                                        (0439) __text_start:
                                        (0440) 
                                        (0441)     ; RAM area usage
                                        (0442)     ;
                                        (0443)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0444) __data_start:
                                        (0445) 
                                        (0446)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0447)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0448)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0449) __bss_start:
                                        (0450) 
                                        (0451) ENDIF ; TOOLCHAIN
                                        (0452) 
                                        (0453) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.2.2551
0202: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) include "m8c.inc"
                                        (0004) ;  Personalization tables 
                                        (0005) export LoadConfigTBL_funk_lampe_Bank1
                                        (0006) export LoadConfigTBL_funk_lampe_Bank0
                                        (0007) export LoadConfigTBL_funk_lampe_Ordered
                                        (0008) AREA lit(rom, rel)
                                        (0009) LoadConfigTBL_funk_lampe_Bank0:
                                        (0010) ;  Instance name ADC8, User Module ADC8
                                        (0011) ;       Instance name ADC8, Block Name ADC(ACE00)
                                        (0012) 	db		72h, 69h		;ADC8_ACE_CR1(ACE00CR1)
                                        (0013) 	db		73h, 00h		;ADC8_ACE_CR2(ACE00CR2)
                                        (0014) ;       Instance name ADC8, Block Name CNT(DBB00)
                                        (0015) 	db		23h, 00h		;ADC8_CNT_CR0(DBB00CR0)
                                        (0016) 	db		21h, 00h		;ADC8_CNT_DR1(DBB00DR1)
                                        (0017) 	db		22h, 00h		;ADC8_CNT_DR2(DBB00DR2)
                                        (0018) ;       Instance name ADC8, Block Name RAMP(ASE10)
                                        (0019) 	db		68h, 24h		;ADC8_ADC_CR(ADC0_CR)
                                        (0020) 	db		80h, 00h		;ADC8_ASE_CR0(ASE10CR0)
                                        (0021) ;  Instance name E2PROM, User Module E2PROM
                                        (0022) ;  Instance name Timer8, User Module Timer8
                                        (0023) ;       Instance name Timer8, Block Name TIMER8(DBB01)
                                        (0024) 	db		27h, 04h		;Timer8_CONTROL_REG(DBB01CR0)
                                        (0025) 	db		25h, ffh		;Timer8_PERIOD_REG(DBB01DR1)
                                        (0026) 	db		26h, 00h		;Timer8_COMPARE_REG(DBB01DR2)
                                        (0027) ;  Instance name UART, User Module UART
                                        (0028) ;       Instance name UART, Block Name RX(DCB03)
                                        (0029) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0030) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0031) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0032) ;       Instance name UART, Block Name TX(DCB02)
                                        (0033) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0034) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0035) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0036) ;  Global Register values Bank 0
                                        (0037) 	db		60h, 0ah		; AnalogColumnInputSelect register (AMX_IN)
                                        (0038) 	db		64h, 00h		; AnalogComparatorControl0 register (CMP_CR0)
                                        (0039) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0040) 	db		e6h, 10h		; DecimatorControl_0 register (DEC_CR0)
                                        (0041) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0042) 	db		d6h, 00h		; I2CConfig register (I2CCFG)
                                        (0043) 	db		62h, 00h		; PWM_Control register (PWM_CR)
                                        (0044) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0045) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0046) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0047) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0048) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0049) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0050) 	db		b6h, 10h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0051) 	db		ffh
                                        (0052) LoadConfigTBL_funk_lampe_Bank1:
                                        (0053) ;  Instance name ADC8, User Module ADC8
                                        (0054) ;       Instance name ADC8, Block Name ADC(ACE00)
                                        (0055) ;       Instance name ADC8, Block Name CNT(DBB00)
                                        (0056) 	db		20h, 21h		;ADC8_CNT_FN(DBB00FN)
                                        (0057) 	db		21h, 45h		;ADC8_CNT_IN(DBB00IN)
                                        (0058) 	db		22h, 40h		;ADC8_CNT_OUT(DBB00OU)
                                        (0059) ;       Instance name ADC8, Block Name RAMP(ASE10)
                                        (0060) 	db		e5h, 00h		;ADC8_ADC_TR(ADC0_TR)
                                        (0061) 	db		63h, 00h		;ADC8_(AMD_CR0)
                                        (0062) ;  Instance name E2PROM, User Module E2PROM
                                        (0063) ;  Instance name Timer8, User Module Timer8
                                        (0064) ;       Instance name Timer8, Block Name TIMER8(DBB01)
                                        (0065) 	db		24h, 20h		;Timer8_FUNC_REG(DBB01FN)
                                        (0066) 	db		25h, 07h		;Timer8_INPUT_REG(DBB01IN)
                                        (0067) 	db		26h, 40h		;Timer8_OUTPUT_REG(DBB01OU)
                                        (0068) ;  Instance name UART, User Module UART
                                        (0069) ;       Instance name UART, Block Name RX(DCB03)
                                        (0070) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0071) 	db		2dh, e1h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0072) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0073) ;       Instance name UART, Block Name TX(DCB02)
                                        (0074) 	db		28h, 0dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0075) 	db		29h, 01h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0076) 	db		2ah, 47h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0077) ;  Global Register values Bank 1
                                        (0078) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0079) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0080) 	db		62h, 80h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0081) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0082) 	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
                                        (0083) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0084) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0085) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0086) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0087) 	db		e1h, 00h		; OscillatorControl_1 register (OSC_CR1)
                                        (0088) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0089) 	db		dfh, 9bh		; OscillatorControl_3 register (OSC_CR3)
                                        (0090) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0091) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0092) 	db		ffh
                                        (0093) AREA psoc_config(rom, rel)
                                        (0094) LoadConfigTBL_funk_lampe_Ordered:
                                        (0095) ;  Ordered Global Register values
                                        (0096) 	M8C_SetBank0
0204: 62 00 00 MOV   REG[0x0],0x0       (0097) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0207: 71 10    OR    F,0x10             
                                        (0098) 	M8C_SetBank1
0209: 62 00 08 MOV   REG[0x0],0x8       (0099) 	mov	reg[00h], 08h		; Port_0_DriveMode_0 register (PRT0DM0)
020C: 62 01 34 MOV   REG[0x1],0x34      (0100) 	mov	reg[01h], 34h		; Port_0_DriveMode_1 register (PRT0DM1)
020F: 70 EF    AND   F,0xEF             
                                        (0101) 	M8C_SetBank0
0211: 62 03 30 MOV   REG[0x3],0x30      (0102) 	mov	reg[03h], 30h		; Port_0_DriveMode_2 register (PRT0DM2)
0214: 62 02 0C MOV   REG[0x2],0xC       (0103) 	mov	reg[02h], 0ch		; Port_0_GlobalSelect register (PRT0GS)
0217: 71 10    OR    F,0x10             
                                        (0104) 	M8C_SetBank1
0219: 62 02 00 MOV   REG[0x2],0x0       (0105) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
021C: 62 03 00 MOV   REG[0x3],0x0       (0106) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
021F: 70 EF    AND   F,0xEF             
                                        (0107) 	M8C_SetBank0
0221: 62 01 00 MOV   REG[0x1],0x0       (0108) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0224: 62 04 00 MOV   REG[0x4],0x0       (0109) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0227: 71 10    OR    F,0x10             
                                        (0110) 	M8C_SetBank1
0229: 62 04 00 MOV   REG[0x4],0x0       (0111) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
022C: 62 05 01 MOV   REG[0x5],0x1       (0112) 	mov	reg[05h], 01h		; Port_1_DriveMode_1 register (PRT1DM1)
022F: 70 EF    AND   F,0xEF             
                                        (0113) 	M8C_SetBank0
0231: 62 07 01 MOV   REG[0x7],0x1       (0114) 	mov	reg[07h], 01h		; Port_1_DriveMode_2 register (PRT1DM2)
0234: 62 06 00 MOV   REG[0x6],0x0       (0115) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0237: 71 10    OR    F,0x10             
                                        (0116) 	M8C_SetBank1
0239: 62 06 00 MOV   REG[0x6],0x0       (0117) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
023C: 62 07 00 MOV   REG[0x7],0x0       (0118) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
023F: 70 EF    AND   F,0xEF             
                                        (0119) 	M8C_SetBank0
0241: 62 05 00 MOV   REG[0x5],0x0       (0120) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0244: 70 EF    AND   F,0xEF             
                                        (0121) 	M8C_SetBank0
0246: 7F       RET                      (0122) 	ret
                                        (0123) 
                                        (0124) 
                                        (0125) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.2.2551
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_funk_lampe
                                        (0026) export _LoadConfig_funk_lampe
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
0247: 7C 02 4E LCALL 0x024E             (0058) 	lcall	LoadConfig_funk_lampe
024A: 7C 02 02 LCALL 0x0202             (0059) 	lcall	LoadConfigTBL_funk_lampe_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
024D: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration funk_lampe
                                        (0067) ;
                                        (0068) ;    Load configuration registers for funk_lampe.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_funk_lampe:
                                        (0085)  LoadConfig_funk_lampe:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
024E: 10       PUSH  X                  (0088) 	push	x
024F: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
0251: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
0253: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
0254: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_funk_lampe_Bank0
0256: 57 8A    MOV   X,0x8A             (0094)     mov     X, <LoadConfigTBL_funk_lampe_Bank0
0258: 7C 02 69 LCALL 0x0269             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
025B: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
025D: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
025E: 50 01    MOV   A,0x1              (0100)     mov     A, >LoadConfigTBL_funk_lampe_Bank1
0260: 57 C7    MOV   X,0xC7             (0101)     mov     X, <LoadConfigTBL_funk_lampe_Bank1
0262: 7C 02 69 LCALL 0x0269             (0102)     lcall   LoadConfig              ; Load the bank 1 values
0265: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
0267: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
0268: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
0269: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
026B: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
026C: 08       PUSH  A                  (0132)     push    A
026D: 4F       MOV   X,SP               (0133)     mov     X, SP
026E: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
0271: D0 04    JNC   0x0276             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0273: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
0276: 18       POP   A                  (0138)     pop     A
0277: 20       POP   X                  (0139)     pop     X
0278: 70 EF    AND   F,0xEF             
027A: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
027D: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
027E: 08       PUSH  A                  (0145)     push    A
027F: 28       ROMX                     (0146)     romx                            ; Load register address from table
0280: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
0282: A0 1F    JZ    0x02A2             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
0284: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
0285: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
0288: A0 03    JZ    0x028C             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
028A: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
028C: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
028E: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
028F: 20       POP   X                  (0156)     pop     X
0290: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
0291: 09 00    ADC   A,0x0              (0158)     adc     A, 0
0293: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
0294: 08       PUSH  A                  (0160)     push    A
0295: 28       ROMX                     (0161)     romx                            ; load config data from the table
0296: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
0297: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
0299: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
029B: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
029C: 20       POP   X                  (0166)     pop     X
029D: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
029E: 09 00    ADC   A,0x0              (0168)     adc     A, 0
02A0: 8F D7    JMP   0x0278             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
02A2: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
02A4: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2012/3/2 at 9:15:34
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
02A5: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;---------------------------------------------------
                                        (0158)    ; Insert your custom assembly code above this banner
                                        (0159)    ;---------------------------------------------------
                                        (0160)    
                                        (0161)    ;---------------------------------------------------
                                        (0162)    ; Insert a lcall to a C function below this banner
                                        (0163)    ; and un-comment the lines between these banners
                                        (0164)    ;---------------------------------------------------
                                        (0165)    
                                        (0166)    ;PRESERVE_CPU_CONTEXT
                                        (0167)    ;lcall _My_C_Function
                                        (0168)    ;RESTORE_CPU_CONTEXT
                                        (0169)    
                                        (0170)    ;---------------------------------------------------
                                        (0171)    ; Insert a lcall to a C function above this banner
                                        (0172)    ; and un-comment the lines between these banners
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0175) 
                                        (0176) IF (UART_RXBUF_ENABLE)
02A6: 08       PUSH  A                  (0177)    push A
02A7: 10       PUSH  X                  (0178)    push X
                                        (0179)    
                                        (0180)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0181)       REG_PRESERVE IDX_PP
                                        (0182)    ENDIF
                                        (0183)    
02A8: 58 05    MOV   X,[0x5]            (0184)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
02AA: 5D 2F    MOV   A,REG[0x2F]        (0185)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
02AC: 08       PUSH  A                  (0186)    push A                                                  ; Store copy for later test
                                        (0187)                                                            ; IF real RX interrupt
02AD: 21 08    AND   A,0x8              (0188)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
02AF: B0 04    JNZ   0x02B4             (0189)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
02B1: 18       POP   A                  (0190)    pop  A                                                  ; Restore stack
02B2: 80 40    JMP   0x02F3             (0191)    jmp  .RESTORE_IDX_PP
                                        (0192) 
                                        (0193) .UARTRX_ReadRx:
02B4: 18       POP   A                  (0194)    pop  A                                                  ; Restore status flags
                                        (0195)                                                            ; IF there is no error, get data
                                        (0196)                                                            ; Check for parity or framing error
02B5: 21 E0    AND   A,0xE0             (0197)    and  A,UART_RX_ERROR
02B7: A0 12    JZ    0x02CA             (0198)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0199) 
02B9: 2C 04    OR    [0x4],A            (0200)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
02BB: 49 2E 00 TST   REG[0x2E],0x0      (0201)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
02BE: 21 20    AND   A,0x20             (0202)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
02C0: A0 32    JZ    0x02F3             (0203)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0204) 
                                        (0205)                                                            ; Disable and re-enable RX to reset after
                                        (0206)                                                            ; framing error.
02C2: 41 2F FE AND   REG[0x2F],0xFE     (0207)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
02C5: 43 2F 01 OR    REG[0x2F],0x1      (0208)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
02C8: 80 2A    JMP   0x02F3             (0209)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0210) 
                                        (0211) 
                                        (0212) .UARTRX_NO_ERROR:
02CA: 5D 2E    MOV   A,REG[0x2E]        (0213)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0214) 
                                        (0215)                                                            ; IF buffer not full
02CC: 47 04 01 TST   [0x4],0x1          (0216)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
02CF: B0 23    JNZ   0x02F3             (0217)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0218) 
02D1: 39 0D    CMP   A,0xD              (0219)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
02D3: B0 09    JNZ   0x02DD             (0220)    jnz  .UARTRX_CHK_BACKSPACE
02D5: 2E 04 01 OR    [0x4],0x1          (0221)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0222) 
                                        (0223) 
                                        (0224) 
                                        (0225)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0226)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
02D8: 56 0A 00 MOV   [X+10],0x0         (0227)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0228)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
02DB: 80 17    JMP   0x02F3             (0229)    jmp  .RESTORE_IDX_PP
                                        (0230) 
                                        (0231) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0232) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0233)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0234)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0235)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0236)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0237)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0238)    jmp  .RESTORE_IDX_PP
                                        (0239) ENDIF                                                      ; 
                                        (0240) 
                                        (0241) .UARTRX_IGNORE:
                                        (0242) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
02DD: 39 20    CMP   A,0x20             (0243)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
02DF: C0 13    JC    0x02F3             (0244)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0245) ENDIF
                                        (0246) 
                                        (0247) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0248) 	
                                        (0249)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
02E1: 3C 05 1F CMP   [0x5],0x1F         (0250)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
02E4: C0 09    JC    0x02EE             (0251)    jc   .UARTRX_ISR_GETDATA
                                        (0252)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
02E6: 56 0A 00 MOV   [X+10],0x0         (0253)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0254)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
02E9: 2E 04 10 OR    [0x4],0x10         (0255)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
02EC: 80 06    JMP   0x02F3             (0256)    jmp  .RESTORE_IDX_PP
                                        (0257) 
                                        (0258) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0259)                                                            ; X is already loaded with pointer
                                        (0260)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
02EE: 54 0A    MOV   [X+10],A           (0261)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0262)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
02F0: 75       INC   X                  (0263)    inc  X                                                  ; Inc the pointer
02F1: 5A 05    MOV   [0x5],X            (0264)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0265)                                                            ; ENDIF max string size
                                        (0266) .RESTORE_IDX_PP:
                                        (0267)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0268)       REG_RESTORE IDX_PP
                                        (0269)    ENDIF
                                        (0270) 
                                        (0271) .END_UARTRX_ISR:
02F3: 20       POP   X                  (0272)    pop  X
02F4: 18       POP   A                  (0273)    pop  A
                                        (0274) 
                                        (0275) ENDIF
                                        (0276) 
                                        (0277) UART_RX_ISR_END:
02F5: 7E       RETI                     (0278)    reti
                                        (0279) 
                                        (0280) ; end of file UARTINT.asm
                                        (0281) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
02F6: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
02F9: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2012/3/2 at 9:15:34
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
02FC: 7F       RET                      (0182)    ret
02FD: 41 E1 FB AND   REG[0xE1],0xFB     
0300: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0303: 7F       RET                      (0214)    ret
0304: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
0306: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
0308: A0 07    JZ    0x0310             (0249)    jz    .SetModeRegEmpty
030A: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
030D: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
030F: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
0310: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
0313: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
0315: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
0316: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0318: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
031A: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
031C: 91 0E    CALL  _UART_CmdReset     (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
031E: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
031F: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
0322: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
0325: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0326: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0328: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0329: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
032B: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
032C: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
032E: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
032F: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
0331: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
0332: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
0334: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
0336: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
0338: A0 06    JZ    0x033F             (0492)    jz   .SetTxCmpMode
                                        (0493) 
033A: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
033D: 80 04    JMP   0x0342             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
033F: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
0342: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
0344: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
0345: 08       PUSH  A                  (0536)    push A
0346: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
0348: A0 06    JZ    0x034F             (0538)    jz   .DisRxInt
034A: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
034D: 80 04    JMP   0x0352             (0541)    jmp  .CheckTxInt
034F: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
0352: 18       POP   A                  (0547)    pop  A
0353: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
0355: A0 06    JZ    0x035C             (0549)    jz   .DisTxInt
0357: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
035A: 80 04    JMP   0x035F             (0552)    jmp  .End_IntCntl
035C: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
035F: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0370: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0371: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0372: 67       ASR   A                  (0603)    asr   A
0373: 67       ASR   A                  (0604)    asr   A
0374: 67       ASR   A                  (0605)    asr   A
0375: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0377: FF E7    INDEX 0x0360             (0607)    index UART_HEX_STR                  ; Get Hex value
0379: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
037B: 18       POP   A                  (0609)    pop   A                             ; Restore value
037C: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
037E: FF E0    INDEX 0x0360             (0611)    index UART_HEX_STR                  ; Get Hex value
0380: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0382: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
0383: 4B       SWAP  A,X                (0645)    swap  A,X
0384: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
0386: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
0387: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0389: 7F       RET                      (0650)    ret
038A: 49 2B 10 TST   REG[0x2B],0x10     
038D: AF FC    JZ    _UART_PutChar      
038F: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0391: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0392: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
0395: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
0397: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0399: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
039A: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
039C: 08       PUSH  A                  (0756)    push A
039D: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
039F: B0 04    JNZ   0x03A4             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
03A1: 18       POP   A                  (0759)    pop  A
03A2: 80 0B    JMP   0x03AE             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
03A4: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
03A6: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
03A7: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
03A8: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
03AA: B0 03    JNZ   0x03AE             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
03AC: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
03AD: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
03AE: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
03B0: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
03B1: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
03B3: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
03B5: 08       PUSH  A                  (0819)    push A
03B6: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
03B8: B0 07    JNZ   0x03C0             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
03BA: 18       POP   A                  (0822)    pop  A
03BB: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
03BD: 4B       SWAP  A,X                (0824)    swap A,X
03BE: 80 07    JMP   0x03C6             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
03C0: 18       POP   A                  (0828)    pop  A
03C1: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
03C3: 4B       SWAP  A,X                (0830)    swap A,X
03C4: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
03C6: 7F       RET                      (0836)    ret
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
03C7: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
03C9: A0 06    JZ    0x03D0             (0872)    jz    End_PutString                           ; Check for end of string
03CB: 9F BD    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
03CD: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
03CE: 8F F8    JMP   _UART_PutString    (0875)    jmp   .PutStringLoop                          ; Get next character
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
03D0: 7F       RET                      (0879)    ret
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
03D1: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
03D2: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
03D4: A0 13    JZ    0x03E8             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
03D6: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
03D8: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
03DA: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
03DC: 49 2B 10 TST   REG[0x2B],0x10     
03DF: AF FC    JZ    0x03DC             
03E1: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
03E3: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
03E4: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
03E6: 8F EB    JMP   0x03D2             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
03E8: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
03E9: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
03EA: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
03ED: B0 06    JNZ   0x03F4             (0980)    jnz   .CW_WRITEIT
03EF: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
03F2: A0 1D    JZ    0x0410             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
03F4: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
03F5: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
03F7: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
03F9: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
03FA: 49 2B 10 TST   REG[0x2B],0x10     
03FD: AF FC    JZ    0x03FA             
03FF: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
0401: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
0402: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0405: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0408: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
040B: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
040E: 8F DB    JMP   0x03EA             (0995)    jmp   .CW_Loop
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0410: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0411: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0412: 10       PUSH  X                  (1030)    push  X
0413: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0414: A0 0B    JZ    0x0420             (1032)    jz    .End_CPutString
0416: 9F 72    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
0418: 20       POP   X                  (1034)    pop   X
0419: 18       POP   A                  (1035)    pop   A
041A: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
041B: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
041D: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
041E: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
0420: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0422: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0423: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
0425: 9F 63    CALL  _UART_PutChar      (1074)    call UART_PutChar
0427: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
0429: 9F 5F    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
042B: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
042C: 55 0A 00 MOV   [String+2],0x0     (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
042F: 55 05 00 MOV   [0x5],0x0          (1124)    mov [UART_bRxCnt], 0x00
0432: 26 04 00 AND   [0x4],0x0          (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
0435: 55 2A 00 MOV   [String+34],0x0    (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
0438: 7F       RET                      (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
0439: 51 04    MOV   A,[0x4]            (1165)    mov A,  [UART_fStatus]
043B: 21 01    AND   A,0x1              (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
043D: 7F       RET                      (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
043E: 51 04    MOV   A,[0x4]            (1209)    mov A,  [UART_fStatus]
0440: 21 F0    AND   A,0xF0             (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
0442: 26 04 0F AND   [0x4],0xF          (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
0445: 7F       RET                      (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
0446: 51 05    MOV   A,[0x5]            (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
0448: 7F       RET                      (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
0449: 50 0A    MOV   A,0xA              (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
044B: 02 2A    ADD   A,[String+34]      (1305)    add   A, [ptrParam]                      ; Add string offset
044D: 5C       MOV   X,A                (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
044E: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
0450: B0 04    JNZ   0x0455             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
0452: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
0453: 80 33    JMP   0x0487             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
0455: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
0457: B0 11    JNZ   0x0469             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
0459: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
045A: 76 2A    INC   [String+34]        (1318)    inc   [ptrParam]                         ;          the stored pointer.
045C: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
045E: 3C 2A 1F CMP   [String+34],0x1F   (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
0461: BF F3    JNZ   0x0455             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
0463: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
0464: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
0467: 80 1F    JMP   0x0487             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
0469: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
046A: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
046B: 76 2A    INC   [String+34]        (1334)    inc   [ptrParam]
046D: 3C 2A 1F CMP   [String+34],0x1F   (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
0470: AF F3    JZ    0x0464             (1336)    jz    .TerminateString
0472: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
0474: A0 12    JZ    0x0487             (1338)    jz    .End_GetNextParam
0476: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
0478: BF F1    JNZ   0x046A             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
047A: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
047D: 76 2A    INC   [String+34]        (1342)    inc   [ptrParam]
047F: 3C 2A 1F CMP   [String+34],0x1F   (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
0482: B0 04    JNZ   0x0487             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
0484: 55 2A 1F MOV   [String+34],0x1F   (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
0487: 20       POP   X                  (1348)    pop   X
0488: 10       PUSH  X                  (1349)    push  X
0489: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
048C: B0 06    JNZ   0x0493             (1351)    jnz   .NotNullString
048E: 20       POP   X                  (1352)    pop   X
048F: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
0491: 5B       MOV   A,X                (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
0492: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
0493: 20       POP   X                  (1360)    pop  X
0494: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
0496: 7F       RET                      (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
0497: 50 0A    MOV   A,0xA              (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
0499: 02 2A    ADD   A,[String+34]      (1397)    add  A, [ptrParam]                       ; Add string offset
049B: 5C       MOV   X,A                (1398)    mov  X,A
049C: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
049E: 7F       RET                      (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\timer8int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8INT.asm
                                        (0004) ;;   Version: 2.70, Updated on 2012/3/2 at 9:15:29
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer8.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer8_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer8_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer8_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
049F: 7D 05 A8 LJMP  _Timer             (0068) 	ljmp _Timer
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ; Insert your custom assembly code above this banner
                                        (0071)    ;---------------------------------------------------
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert a lcall to a C function below this banner
                                        (0075)    ; and un-comment the lines between these banners
                                        (0076)    ;---------------------------------------------------
                                        (0077)    
                                        (0078)    ;PRESERVE_CPU_CONTEXT
                                        (0079)    ;lcall _My_C_Function
                                        (0080)    ;RESTORE_CPU_CONTEXT
                                        (0081)    
                                        (0082)    ;---------------------------------------------------
                                        (0083)    ; Insert a lcall to a C function above this banner
                                        (0084)    ; and un-comment the lines between these banners
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0087) 
04A2: 7E       RETI                     (0088)    reti
                                        (0089) 
                                        (0090) 
                                        (0091) ; end of file Timer8INT.asm
FILE: lib\timer8.asm                    (0001) ;;*****************************************************************************
04A3: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer8.asm
                                        (0004) ;;   Version: 2.70, Updated on 2012/3/2 at 9:15:29
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2012. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer8.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer8_EnableInt
                                        (0030) export _Timer8_EnableInt
                                        (0031) export  Timer8_DisableInt
                                        (0032) export _Timer8_DisableInt
                                        (0033) export  Timer8_Start
                                        (0034) export _Timer8_Start
                                        (0035) export  Timer8_Stop
                                        (0036) export _Timer8_Stop
                                        (0037) export  Timer8_WritePeriod
                                        (0038) export _Timer8_WritePeriod
                                        (0039) export  Timer8_WriteCompareValue
                                        (0040) export _Timer8_WriteCompareValue
                                        (0041) export  Timer8_bReadCompareValue
                                        (0042) export _Timer8_bReadCompareValue
                                        (0043) export  Timer8_bReadTimer
                                        (0044) export _Timer8_bReadTimer
                                        (0045) export  Timer8_bReadTimerSaveCV
                                        (0046) export _Timer8_bReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  bTimer8_ReadCompareValue  ; deprecated
                                        (0051) export _bTimer8_ReadCompareValue  ; deprecated
                                        (0052) export  bTimer8_ReadTimer         ; deprecated
                                        (0053) export _bTimer8_ReadTimer         ; deprecated
                                        (0054) export  bTimer8_ReadTimerSaveCV   ; deprecated
                                        (0055) export _bTimer8_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  bTimer8_ReadCounter       ; obsolete
                                        (0058) export _bTimer8_ReadCounter       ; obsolete
                                        (0059) export  bTimer8_CaptureCounter    ; obsolete
                                        (0060) export _bTimer8_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA funk_lampe_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer8_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer8_EnableInt:
                                        (0098) _Timer8_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer8_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
04A6: 7F       RET                      (0102)    ret
04A7: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer8_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer8_DisableInt:
                                        (0126) _Timer8_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer8_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
04AA: 7F       RET                      (0130)    ret
04AB: 43 27 01 OR    REG[0x27],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer8_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer8_Start:
                                        (0154) _Timer8_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer8_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
04AE: 7F       RET                      (0158)    ret
04AF: 41 27 FE AND   REG[0x27],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer8_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer8_Stop:
                                        (0182) _Timer8_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer8_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
04B2: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer8_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 8-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS: 
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer8_WritePeriod:
                                        (0211) _Timer8_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
04B3: 60 25    MOV   REG[0x25],A        (0213)    mov   reg[Timer8_PERIOD_REG], A
                                        (0214)    RAM_EPILOGUE RAM_USE_CLASS_1
04B5: 7F       RET                      (0215)    ret
                                        (0216) 
                                        (0217) .ENDSECTION
                                        (0218) 
                                        (0219) 
                                        (0220) .SECTION
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;  FUNCTION NAME: Timer8_WriteCompareValue
                                        (0223) ;
                                        (0224) ;  DESCRIPTION:
                                        (0225) ;     Writes compare value into the Compare register (DR2).
                                        (0226) ;
                                        (0227) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0228) ;           Compare register. (Call Timer8_Stop to disable).
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0232) ;  RETURNS:      Nothing
                                        (0233) ;  SIDE EFFECTS: 
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240)  Timer8_WriteCompareValue:
                                        (0241) _Timer8_WriteCompareValue:
                                        (0242)    RAM_PROLOGUE RAM_USE_CLASS_1
04B6: 60 26    MOV   REG[0x26],A        (0243)    mov   reg[Timer8_COMPARE_REG], A
                                        (0244)    RAM_EPILOGUE RAM_USE_CLASS_1
04B8: 7F       RET                      (0245)    ret
                                        (0246) 
                                        (0247) .ENDSECTION
                                        (0248) 
                                        (0249) 
                                        (0250) .SECTION
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;  FUNCTION NAME: Timer8_bReadCompareValue
                                        (0253) ;
                                        (0254) ;  DESCRIPTION:
                                        (0255) ;     Reads the Compare register.
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;
                                        (0258) ;  ARGUMENTS:    None
                                        (0259) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0260) ;  SIDE EFFECTS: 
                                        (0261) ;    The A and X registers may be modified by this or future implementations
                                        (0262) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0263) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0264) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0265) ;    functions.
                                        (0266) ;
                                        (0267)  Timer8_bReadCompareValue:
                                        (0268) _Timer8_bReadCompareValue:
                                        (0269)  bTimer8_ReadCompareValue:                       ; this name deprecated
                                        (0270) _bTimer8_ReadCompareValue:                       ; this name deprecated
                                        (0271)    RAM_PROLOGUE RAM_USE_CLASS_1
04B9: 5D 26    MOV   A,REG[0x26]        (0272)    mov   A, reg[Timer8_COMPARE_REG]
                                        (0273)    RAM_EPILOGUE RAM_USE_CLASS_1
04BB: 7F       RET                      (0274)    ret
                                        (0275) 
                                        (0276) .ENDSECTION
                                        (0277) 
                                        (0278) 
                                        (0279) .SECTION
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;  FUNCTION NAME: Timer8_bReadTimerSaveCV
                                        (0282) ;
                                        (0283) ;  DESCRIPTION:
                                        (0284) ;     Returns the value in the Count register (DR0), preserving the
                                        (0285) ;     value in the compare register (DR2).
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0292) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0293) ;     3) The user module is stopped momentarily while the compare value is
                                        (0294) ;        restored.  This may cause the Count register to miss one or more
                                        (0295) ;        counts depending on the input clock speed.
                                        (0296) ;     4) The A and X registers may be modified by this or future implementations
                                        (0297) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0298) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0299) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0300) ;        functions.
                                        (0301) ;
                                        (0302) ;  THEORY of OPERATION:
                                        (0303) ;     1) Read and save the Compare register.
                                        (0304) ;     2) Read the Count register, causing its data to be latched into
                                        (0305) ;        the Compare register.
                                        (0306) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0307) ;        to the buffer.
                                        (0308) ;     4) Disable global interrupts
                                        (0309) ;     5) Halt the timer
                                        (0310) ;     6) Restore the Compare register values
                                        (0311) ;     7) Start the Timer again
                                        (0312) ;     8) Restore global interrupt state
                                        (0313) ;
                                        (0314)  Timer8_bReadTimerSaveCV:
                                        (0315) _Timer8_bReadTimerSaveCV:
                                        (0316)  bTimer8_ReadTimerSaveCV:                        ; this name deprecated
                                        (0317) _bTimer8_ReadTimerSaveCV:                        ; this name deprecated
                                        (0318)  bTimer8_ReadCounter:                            ; this name deprecated
                                        (0319) _bTimer8_ReadCounter:                            ; this name deprecated
                                        (0320) 
                                        (0321) CpuFlags:      equ   0
                                        (0322) bCount:        equ   1
                                        (0323) 
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_2
04BC: 4F       MOV   X,SP               (0325)    mov   X, SP                                   ; X <- stack frame pointer
04BD: 38 02    ADD   SP,0x2             (0326)    add   SP, 2                                   ; Reserve space for flags, count
04BF: 5D 27    MOV   A,REG[0x27]        (0327)    mov   A, reg[Timer8_CONTROL_REG]              ; save the Control register
04C1: 08       PUSH  A                  (0328)    push  A
04C2: 5D 26    MOV   A,REG[0x26]        (0329)    mov   A, reg[Timer8_COMPARE_REG]              ; save the Compare register
04C4: 08       PUSH  A                  (0330)    push  A
04C5: 5D 24    MOV   A,REG[0x24]        (0331)    mov   A, reg[Timer8_COUNTER_REG]              ; synchronous copy DR2 <- DR0
                                        (0332)                                                  ; This may cause an interrupt!
04C7: 5D 26    MOV   A,REG[0x26]        (0333)    mov   A, reg[Timer8_COMPARE_REG]              ; Now grab DR2 (DR0) and save
04C9: 54 01    MOV   [X+1],A            (0334)    mov   [X+bCount], A
04CB: 50 00    MOV   A,0x0              (0335)    mov   A, 0                                    ; Guess the global interrupt state
04CD: 49 F7 01 TST   REG[0xF7],0x1      (0336)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
04D0: A0 03    JZ    0x04D4             (0337)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
04D2: 50 01    MOV   A,0x1              (0338)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0339) .SetupStatusFlag:                                ; and ...
04D4: 54 00    MOV   [X+0],A            (0340)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
04D6: 70 FE    AND   F,0xFE             
04D8: 41 27 FE AND   REG[0x27],0xFE     
                                        (0341)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0342)    Timer8_Stop_M                                 ; Stop the timer
04DB: 18       POP   A                  (0343)    pop   A                                       ; Restore the Compare register
04DC: 60 26    MOV   REG[0x26],A        (0344)    mov   reg[Timer8_COMPARE_REG], A
04DE: 18       POP   A                  (0345)    pop   A                                       ; restore start state of the timer
04DF: 60 27    MOV   REG[0x27],A        (0346)    mov   reg[Timer8_CONTROL_REG], A
04E1: 18       POP   A                  (0347)    pop   A                                       ; Return result stored in stack frame
                                        (0348)    RAM_EPILOGUE RAM_USE_CLASS_2
04E2: 7E       RETI                     (0349)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0350) 
                                        (0351) .ENDSECTION
                                        (0352) 
                                        (0353) 
                                        (0354) .SECTION
                                        (0355) ;-----------------------------------------------------------------------------
                                        (0356) ;  FUNCTION NAME: Timer8_bReadTimer
                                        (0357) ;
                                        (0358) ;  DESCRIPTION:
                                        (0359) ;     Performs a software capture of the Count register.  A synchronous
                                        (0360) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0361) ;
                                        (0362) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;
                                        (0365) ;  ARGUMENTS:    None
                                        (0366) ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
                                        (0367) ;  SIDE EFFECTS:
                                        (0368) ;    May cause an interrupt.
                                        (0369) ;
                                        (0370) ;    The A and X registers may be modified by this or future implementations
                                        (0371) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0372) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0373) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0374) ;    functions.
                                        (0375) ;
                                        (0376) ;  THEORY of OPERATION:
                                        (0377) ;     1) Read the Count register - this causes the count value to be
                                        (0378) ;        latched into the Compare register.
                                        (0379) ;     2) Read and return the Count register values from the Compare
                                        (0380) ;        registers into the return buffer.
                                        (0381) ;
                                        (0382)  Timer8_bReadTimer:
                                        (0383) _Timer8_bReadTimer:
                                        (0384)  bTimer8_ReadTimer:                              ; this name deprecated
                                        (0385) _bTimer8_ReadTimer:                              ; this name deprecated
                                        (0386)  bTimer8_CaptureCounter:                         ; this name deprecated
                                        (0387) _bTimer8_CaptureCounter:                         ; this name deprecated
                                        (0388) 
                                        (0389)    RAM_PROLOGUE RAM_USE_CLASS_1
04E3: 5D 24    MOV   A,REG[0x24]        (0390)    mov   A, reg[Timer8_COUNTER_REG]              ; synchronous copy DR2 <- DR0
                                        (0391)                                                  ; This may cause an interrupt!
04E5: 5D 26    MOV   A,REG[0x26]        (0392)    mov   A, reg[Timer8_COMPARE_REG]              ; Return DR2 (actually DR0)
                                        (0393)    RAM_EPILOGUE RAM_USE_CLASS_1
04E7: 7F       RET                      (0394)    ret
                                        (0395) 
                                        (0396) .ENDSECTION
                                        (0397) 
                                        (0398) ; End of File Timer8.asm
FILE: lib\adc8int.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  ADC8INT.asm
                                        (0004) ;;  Version: 1.1, Updated on 2012/3/2 at 9:12:17
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADC8 User Module ISR implementation file.
                                        (0008) ;;*****************************************************************************
                                        (0009) ;;*****************************************************************************
                                        (0010) 
                                        (0011) include "m8c.inc"
                                        (0012) include "memory.inc"
                                        (0013) include "ADC8.inc"
                                        (0014) 
                                        (0015) export _ADC8_ADC_ISR
                                        (0016) 
                                        (0017) export _ADC8_bResult
                                        (0018) export  ADC8_bResult
                                        (0019) export _ADC8_bfStatus
                                        (0020) export  ADC8_bfStatus
                                        (0021) 
                                        (0022) AREA InterruptRAM(RAM)
                                        (0023)   _ADC8_bResult:
                                        (0024)    ADC8_bResult:       BLK   1  ;A/D value
                                        (0025)   _ADC8_bfStatus:
                                        (0026)    ADC8_bfStatus:      BLK   1  ;Data Valid Flag
                                        (0027) 
                                        (0028) 
                                        (0029) AREA UserModules (ROM, REL)
                                        (0030) 
                                        (0031) _ADC8_ADC_ISR:
                                        (0032) ; ISR ,including jmptable takes 119 cpu cycles.)
04E8: 08       PUSH  A                  (0033)    push A
04E9: 49 68 80 TST   REG[0x68],0x80     (0034)    tst  reg[ADC8_ADC_CR],80h
04EC: A0 05    JZ    0x04F2             (0035)    jz   .InRange
                                        (0036) 
                                        (0037) ; Read Counter
                                        (0038) .OverRange:
04EE: 50 FF    MOV   A,0xFF             (0039)    mov  A,ffh
04F0: 80 06    JMP   0x04F7             (0040)    jmp  .Done
                                        (0041) 
                                        (0042) .InRange:
04F2: 5D 20    MOV   A,REG[0x20]        (0043)    mov  A,reg[ADC8_CNT_DR0]
04F4: 5D 22    MOV   A,REG[0x22]        (0044)    mov  A,reg[ADC8_CNT_DR2]   ;A contains next prev value
04F6: 73       CPL   A                  (0045)    cpl  A
                                        (0046) 
                                        (0047) .Done:
04F7: 41 23 FE AND   REG[0x23],0xFE     (0048)    and  reg[ADC8_CNT_CR0], ~ADC8_ON 
04FA: 62 21 FF MOV   REG[0x21],0xFF     (0049)    mov  reg[ADC8_CNT_DR1], 0xFF
04FD: 43 23 01 OR    REG[0x23],0x1      (0050)    or   reg[ADC8_CNT_CR0], ADC8_ON
                                        (0051) 
0500: 55 07 01 MOV   [0x7],0x1          (0052)    mov  [ADC8_bfStatus],01h
0503: 53 06    MOV   [0x6],A            (0053)    mov  [ADC8_bResult],A
                                        (0054) 
                                        (0055)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0056)    ;---------------------------------------------------
                                        (0057)    ; Insert your custom assembly code below this banner
                                        (0058)    ;---------------------------------------------------
                                        (0059)    ;   NOTE: interrupt service routines must preserve
                                        (0060)    ;   the values of the A and X CPU registers.
                                        (0061)    
                                        (0062)    ;---------------------------------------------------
                                        (0063)    ; Insert your custom assembly code above this banner
                                        (0064)    ;---------------------------------------------------
                                        (0065)    
                                        (0066)    ;---------------------------------------------------
                                        (0067)    ; Insert a lcall to a C function below this banner
                                        (0068)    ; and un-comment the lines between these banners
                                        (0069)    ;---------------------------------------------------
                                        (0070)    
                                        (0071)    ;PRESERVE_CPU_CONTEXT
                                        (0072)    ;lcall _My_C_Function
                                        (0073)    ;RESTORE_CPU_CONTEXT
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function above this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0080) 
0505: 18       POP   A                  (0081)    pop A
0506: 7E       RETI                     (0082)    reti
FILE: I:\Hobby\PROGRA~1\PSOCPR~1\FUNK_L~1\FUNK_L~1\FUNK_L~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>       
(0006) #include "PSoCAPI.h"  
(0007) #pragma interrupt_handler Timer;
(0008) 
(0009) char *String; 
(0010) int Value = 0x00;
(0011) 
(0012) void main(void)
(0013) {
(0014)     M8C_EnableGInt ;
__UserModules_end|__text_start|_main|_main:
    0507: 71 01    OR    F,0x1
(0015)     UART_CmdReset(); 
    0509: 10       PUSH  X
    050A: 7C 04 2C LCALL _UART_CmdReset
(0016) 	UART_IntCntl(UART_ENABLE_RX_INT);       
    050D: 50 01    MOV   A,0x1
    050F: 7C 03 45 LCALL _UART_IntCntl
(0017)     UART_Start(UART_PARITY_NONE);  
    0512: 50 00    MOV   A,0x0
    0514: 7C 03 16 LCALL _UART_Start
(0018) 	ADC8_Start(ADC8_FULLRANGE); 
    0517: 50 03    MOV   A,0x3
    0519: 7C 05 AB LCALL _ADC8_Start
(0019) 	//ADC8_bCal(0x42, ADC8_CAL_VBG);
(0020) 	ADC8_StartADC();
    051C: 7C 05 CF LCALL _ADC8_StartADC
(0021) 	Timer8_EnableInt();
    051F: 7C 04 A3 LCALL _Timer8_EnableInt
(0022)     Timer8_Start();
    0522: 7C 04 AB LCALL _Timer8_Start
    0525: 20       POP   X
    0526: 80 7D    JMP   0x05A4
(0023) 	
(0024)    	while(1) 
(0025) 	{
(0026)    		if(UART_bCmdCheck()) 
    0528: 10       PUSH  X
    0529: 7C 04 39 LCALL _UART_bCmdCheck
    052C: 20       POP   X
    052D: 39 00    CMP   A,0x0
    052F: A0 74    JZ    0x05A4
(0027) 		{                 
(0028)          	if(String = UART_szGetParam()) 
    0531: 10       PUSH  X
    0532: 7C 04 49 LCALL _UART_szGetParam
    0535: 5A 02    MOV   [__r1],X
    0537: 20       POP   X
    0538: 5F 09 02 MOV   [String+1],[__r1]
    053B: 53 08    MOV   [String],A
    053D: 3C 08 00 CMP   [String],0x0
    0540: B0 06    JNZ   0x0547
    0542: 3C 02 00 CMP   [__r1],0x0
    0545: A0 59    JZ    0x059F
(0029) 			{       
(0030)              	UART_CPutString("Found valid command\r\nCommand =>");  
    0547: 10       PUSH  X
    0548: 50 01    MOV   A,0x1
    054A: 08       PUSH  A
    054B: 50 6A    MOV   A,0x6A
    054D: 5C       MOV   X,A
    054E: 18       POP   A
    054F: 7C 04 11 LCALL _UART_CPutString
(0031)             	UART_PutString(String);            
    0552: 51 08    MOV   A,[String]
    0554: 08       PUSH  A
    0555: 51 09    MOV   A,[String+1]
    0557: 5C       MOV   X,A
    0558: 18       POP   A
    0559: 7C 03 C7 LCALL _UART_PutString
(0032)             	UART_CPutString("<\r\nParamaters:\r\n");  
    055C: 50 01    MOV   A,0x1
    055E: 08       PUSH  A
    055F: 50 59    MOV   A,0x59
    0561: 5C       MOV   X,A
    0562: 18       POP   A
    0563: 7C 04 11 LCALL _UART_CPutString
    0566: 20       POP   X
    0567: 80 21    JMP   0x0589
(0033) 				
(0034)             	while(String = UART_szGetParam()) 
(0035) 				{
(0036)                		UART_CPutString("   <");  
    0569: 10       PUSH  X
    056A: 50 01    MOV   A,0x1
    056C: 08       PUSH  A
    056D: 50 54    MOV   A,0x54
    056F: 5C       MOV   X,A
    0570: 18       POP   A
    0571: 7C 04 11 LCALL _UART_CPutString
(0037)                		UART_PutString(String);          
    0574: 51 08    MOV   A,[String]
    0576: 08       PUSH  A
    0577: 51 09    MOV   A,[String+1]
    0579: 5C       MOV   X,A
    057A: 18       POP   A
    057B: 7C 03 C7 LCALL _UART_PutString
(0038)                		UART_CPutString(">\r\n");  
    057E: 50 01    MOV   A,0x1
    0580: 08       PUSH  A
    0581: 50 50    MOV   A,0x50
    0583: 5C       MOV   X,A
    0584: 18       POP   A
    0585: 7C 04 11 LCALL _UART_CPutString
    0588: 20       POP   X
(0039)             	} 
    0589: 10       PUSH  X
    058A: 7C 04 49 LCALL _UART_szGetParam
    058D: 5A 02    MOV   [__r1],X
    058F: 20       POP   X
    0590: 5F 09 02 MOV   [String+1],[__r1]
    0593: 53 08    MOV   [String],A
    0595: 3C 08 00 CMP   [String],0x0
    0598: BF D0    JNZ   0x0569
    059A: 3C 02 00 CMP   [__r1],0x0
    059D: BF CB    JNZ   0x0569
(0040)         	} 
(0041) 			
(0042)    		UART_CmdReset(); 
    059F: 10       PUSH  X
    05A0: 7C 04 2C LCALL _UART_CmdReset
    05A3: 20       POP   X
(0043) 	  
(0044) 		}
(0045)  	}
    05A4: 8F 83    JMP   0x0528
    05A6: 8F FF    JMP   0x05A6
(0046) } 
(0047) 
(0048) void Timer(void) 
(0049) {
_Timer:
    05A8: 08       PUSH  A
    05A9: 18       POP   A
(0050) 
(0051) }FILE: lib\adc8.asm                      (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  ADC8.asm
                                        (0004) ;;  Version: 1.1, Updated on 2012/3/2 at 9:12:17
                                        (0005) ;;  Generated by PSoC Designer 5.2.2551
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADC8 User Module software implementation file.
                                        (0008) ;;*****************************************************************************
                                        (0009) ;;*****************************************************************************
                                        (0010) 
                                        (0011) include "m8c.inc"
                                        (0012) include "memory.inc"
                                        (0013) include "ADC8.inc"
                                        (0014) ;-----------------------------------------------
                                        (0015) ;  Global Symbols
                                        (0016) ;-----------------------------------------------
                                        (0017) 
                                        (0018) export _ADC8_Start
                                        (0019) export  ADC8_Start
                                        (0020) export _ADC8_Stop
                                        (0021) export  ADC8_Stop
                                        (0022) export _ADC8_StartADC
                                        (0023) export  ADC8_StartADC
                                        (0024) export _ADC8_StopADC
                                        (0025) export  ADC8_StopADC
                                        (0026) export _ADC8_fIsDataAvailable
                                        (0027) export  ADC8_fIsDataAvailable
                                        (0028) export _ADC8_bGetData
                                        (0029) export  ADC8_bGetData
                                        (0030) export _ADC8_ClearFlag
                                        (0031) export  ADC8_ClearFlag
                                        (0032) export _ADC8_bGetDataClearFlag
                                        (0033) export  ADC8_bGetDataClearFlag
                                        (0034) export _ADC8_bCal
                                        (0035) export  ADC8_bCal
                                        (0036) 
                                        (0037) 
                                        (0038) .SECTION
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;  FUNCTION NAME: ADC8_Start
                                        (0041) ;
                                        (0042) ;  DESCRIPTION:
                                        (0043) ;  Applies power setting to the module's analog blocks
                                        (0044) ;
                                        (0045) ;-----------------------------------------------------------------------------
                                        (0046) ;
                                        (0047) ;  ARGUMENTS: 
                                        (0048) ;     A has Power Level to use
                                        (0049) ; 
                                        (0050) ;  RETURNS: None
                                        (0051) ;
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053)  ADC8_Start:
                                        (0054) _ADC8_Start:
                                        (0055)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0056) ;Turn on Power to analog block
05AB: 60 73    MOV   REG[0x73],A        (0057)    mov   reg[ADC8_ACE_CR2],A
                                        (0058) 
05AD: 50 68    MOV   A,0x68             (0059)    mov   A, ADC8_ADC_CR
05AF: 39 68    CMP   A,0x68             (0060)    cmp   A, 68h
05B1: B0 09    JNZ   0x05BB             (0061)    jnz   .Column1
                                        (0062) .Column0:
05B3: 62 64 11 MOV   REG[0x64],0x11     (0063)    mov   reg[CMP_CR0],11h  ;specify column interrupt
05B6: 62 E6 11 MOV   REG[0xE6],0x11     (0064)    mov   reg[DEC_CR0],11h   ;gate the comp1
05B9: 80 07    JMP   0x05C1             (0065)    jmp   .SkipCol1
                                        (0066) .Column1:
05BB: 62 64 22 MOV   REG[0x64],0x22     (0067)    mov   reg[CMP_CR0],22h  ;specify column interrupt
05BE: 62 E6 22 MOV   REG[0xE6],0x22     (0068)    mov   reg[DEC_CR0],22h   ;gate the comp1
                                        (0069) .SkipCol1:
                                        (0070) 
05C1: 62 62 0A MOV   REG[0x62],0xA      (0071)    mov   reg[PWM_CR], (PWM_High+PWM_Low)              
                                        (0072) ;Turn on Power to ADC Control
05C4: 43 68 01 OR    REG[0x68],0x1      (0073)    or    reg[ADC8_ADC_CR], ADC8_ON
                                        (0074)    RAM_EPILOGUE RAM_USE_CLASS_1
05C7: 7F       RET                      (0075)    ret
                                        (0076) .ENDSECTION
                                        (0077) 
                                        (0078) .SECTION
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: ADC8_Stop
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;  Removes power setting to the module's analog blocks.
                                        (0084) ;
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;
                                        (0087) ;  ARGUMENTS: None
                                        (0088) ;
                                        (0089) ;  RETURNS:   None
                                        (0090) ;
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092)  ADC8_Stop:
                                        (0093) _ADC8_Stop:
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0095) ;Turn off Power to analog block
05C8: 41 73 FE AND   REG[0x73],0xFE     (0096)    and   reg[ADC8_ACE_CR2],~ADC8_ON
                                        (0097) ;Turn off Power to ADC Control
05CB: 41 68 FE AND   REG[0x68],0xFE     (0098)    and   reg[ADC8_ADC_CR], ~ADC8_ON
                                        (0099)    RAM_EPILOGUE RAM_USE_CLASS_1
05CE: 7F       RET                      (0100)    ret
                                        (0101) .ENDSECTION
                                        (0102) 
                                        (0103) .SECTION
                                        (0104) ;-----------------------------------------------------------------------------
                                        (0105) ;  FUNCTION NAME: ADC8_StartADC
                                        (0106) ;
                                        (0107) ;  DESCRIPTION:
                                        (0108) ;  Starts the A/D convertor
                                        (0109) ;
                                        (0110) ;-----------------------------------------------------------------------------
                                        (0111) ;
                                        (0112) ;  ARGUMENTS: None
                                        (0113) ;
                                        (0114) ;  RETURNS: None
                                        (0115) ;
                                        (0116) ;-----------------------------------------------------------------------------
                                        (0117)  ADC8_StartADC:
                                        (0118) _ADC8_StartADC:
                                        (0119)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0120)    RAM_SETPAGE_CUR >ADC8_bfStatus
05CF: 90 13    CALL  _ADC8_StopADC      (0121)    call ADC8_StopADC
05D1: 62 21 FF MOV   REG[0x21],0xFF     (0122)    mov  reg[ADC8_CNT_DR1],ffh ;reload Counter
05D4: 43 23 01 OR    REG[0x23],0x1      (0123)    or   reg[ADC8_CNT_CR0],01h ;start counter
                                        (0124) ; clr interrupt
05D7: 41 DA FD AND   REG[0xDA],0xFD     (0125)    and   reg[INT_CLR0],~ADC8_ADCMask  ;clear residue ACol1 interrupt
                                        (0126) ; enable interupt
05DA: 43 E0 02 OR    REG[0xE0],0x2      (0127)    or    reg[ADC8_ADCIntReg],ADC8_ADCMask  ;enable ACol1 interrupt
05DD: 55 07 00 MOV   [0x7],0x0          (0128)    mov   [ADC8_bfStatus],0
                                        (0129) ;Start PWM
05E0: 43 62 01 OR    REG[0x62],0x1      (0130)    or    reg[PWM_CR],01h
                                        (0131)    RAM_EPILOGUE RAM_USE_CLASS_4
05E3: 7F       RET                      (0132)    ret
                                        (0133) .ENDSECTION
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: ADC8_StopAD
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;  Completely shuts down the A/D is an orderly manner.
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:  None
                                        (0145) ;
                                        (0146) ;  RETURNS: None
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148)  ADC8_StopADC:
                                        (0149) _ADC8_StopADC:
                                        (0150)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0151) ; disable interupt
05E4: 41 E0 FD AND   REG[0xE0],0xFD     (0152)    and   reg[ADC8_ADCIntReg],~ADC8_ADCMask  ;disable ACol1 interrupt
                                        (0153) ; turn off pwm
05E7: 41 62 FE AND   REG[0x62],0xFE     (0154)    and   reg[PWM_CR],~01h
                                        (0155) 
                                        (0156) 
                                        (0157) ; stop counter
05EA: 41 23 FE AND   REG[0x23],0xFE     (0158)    and  reg[ADC8_CNT_CR0],~ADC8_ON      ;stop counter
                                        (0159)    RAM_EPILOGUE RAM_USE_CLASS_1
05ED: 7F       RET                      (0160)    ret
                                        (0161) .ENDSECTION
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: ADC8_fIsDataAvailable
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;  Returns the status of the Data Available flag
                                        (0169) ;
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS: None
                                        (0173) ;
                                        (0174) ;  RETURNS:
                                        (0175) ;  A  Returns data status  A == 0 no data available
                                        (0176) ;                          A != 0 data available
                                        (0177) ;
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179)  ADC8_fIsDataAvailable:
                                        (0180) _ADC8_fIsDataAvailable:
                                        (0181)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0182)    RAM_SETPAGE_CUR >ADC8_bfStatus
05EE: 51 07    MOV   A,[0x7]            (0183)    mov   A,[ADC8_bfStatus]                     ; Get status byte
                                        (0184)    RAM_EPILOGUE RAM_USE_CLASS_4
05F0: 7F       RET                      (0185)    ret
                                        (0186) .ENDSECTION
                                        (0187) 
                                        (0188) .SECTION
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;  FUNCTION NAME: ADC8_bGetDataClearFlag
                                        (0191) ;  FUNCTION NAME: ADC8_bGetData
                                        (0192) ;
                                        (0193) ;  DESCRIPTION:
                                        (0194) ;  Returns the data from the A/D.  Does not check if data is available.
                                        (0195) ;  bGetDataClearFlag clears the result ready flag as well.
                                        (0196) ;
                                        (0197) ;-----------------------------------------------------------------------------
                                        (0198) ;
                                        (0199) ;  ARGUMENTS: None
                                        (0200) ;
                                        (0201) ;  RETURNS:
                                        (0202) ;    A: The ADC result.
                                        (0203) ;
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205)  ADC8_bGetDataClearFlag:
                                        (0206) _ADC8_bGetDataClearFlag:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0208)    RAM_SETPAGE_CUR >ADC8_bfStatus
05F1: 55 07 00 MOV   [0x7],0x0          (0209)    mov   [ADC8_bfStatus],0
05F4: 51 06    MOV   A,[0x6]            (0210)    mov   A,[ADC8_bResult]
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_4
05F6: 7F       RET                      (0212)    ret
                                        (0213)  ADC8_bGetData:
                                        (0214) _ADC8_bGetData:
                                        (0215)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0216)    RAM_SETPAGE_CUR >ADC8_bfStatus
05F7: 51 06    MOV   A,[0x6]            (0217)    mov   A,[ADC8_bResult]
                                        (0218)    RAM_EPILOGUE RAM_USE_CLASS_4
05F9: 7F       RET                      (0219)    ret
                                        (0220) .ENDSECTION
                                        (0221) 
                                        (0222) 
                                        (0223) .SECTION
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  FUNCTION NAME: ADC8_ClearFlag
                                        (0226) ;
                                        (0227) ;  DESCRIPTION:
                                        (0228) ;  Clears the data ready flag.
                                        (0229) ;
                                        (0230) ;-----------------------------------------------------------------------------
                                        (0231) ;
                                        (0232) ;  ARGUMENTS: None
                                        (0233) ;
                                        (0234) ;  RETURNS: None
                                        (0235) ;
                                        (0236) ;------------------------------------------------------------------------
                                        (0237)  ADC8_ClearFlag:
                                        (0238) _ADC8_ClearFlag:
                                        (0239)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0240)    RAM_SETPAGE_CUR >ADC8_bfStatus
05FA: 55 07 00 MOV   [0x7],0x0          (0241)    mov   [ADC8_bfStatus],0
                                        (0242)    RAM_EPILOGUE RAM_USE_CLASS_4
05FD: 7F       RET                      (0243)    ret
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: ADC8_bCal
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;  Adjusts the trim till the ADC value matchs the argument value.
                                        (0252) ;
                                        (0253) ;-----------------------------------------------------------------------------
                                        (0254) ;
                                        (0255) ;  ARGUMENTS: 
                                        (0256) ;    A contains the target value of the conversion 
                                        (0257) ;    X contains the Voltage Source for the calibration
                                        (0258) ;
                                        (0259) ;  RETURNS: None
                                        (0260) ;
                                        (0261) ;-----------------------------------------------------------------------------
                                        (0262) PMux_Save:  equ -5
                                        (0263) AMux_Save:  equ -4
                                        (0264) Desired:	equ -3
                                        (0265) Toggle:		equ -2
                                        (0266) Closest:	equ -1
                                        (0267) 
                                        (0268) ADC8_bCal:
                                        (0269) _ADC8_bCal:
                                        (0270)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0271)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0272)    RAM_SETPAGE_CUR >ADC8_bfStatus
                                        (0273) 
05FE: 38 02    ADD   SP,0x2             (0274)    add  SP, 2	                        	;create some extra stack space
0600: 08       PUSH  A                  (0275)    push A		                        	;Save the arguments 
0601: 10       PUSH  X                  (0276)    push X		                        	;on the stack
0602: 4F       MOV   X,SP               (0277)    mov  X, SP	                        	;get the stack pointer
0603: 5D 72    MOV   A,REG[0x72]        (0278)    mov  A, reg[ADC8_ACE_CR1]
0605: 54 FC    MOV   [X-4],A            (0279)    mov  [X-4], A							;save the original value of ADC_CR1
0607: 5D 60    MOV   A,REG[0x60]        (0280)    mov  A, reg[AMX_IN]
0609: 54 FD    MOV   [X-3],A            (0281)    mov  [X-3], A							;save the origianl value of AMX_IN
060B: 27 FD 7F AND   [X-3],0x7F         (0282)    and  [X-3], 7Fh
060E: 71 10    OR    F,0x10             
                                        (0283)    M8C_SetBank1
0610: 5D 62    MOV   A,REG[0x62]        (0284)    mov  A, reg[ABF_CR0]
0612: 70 EF    AND   F,0xEF             
                                        (0285)    M8C_SetBank0
0614: 21 80    AND   A,0x80             (0286)    and  A, 80h
0616: 2D FD    OR    [X-3],A            (0287)    or   [X-3], A							;save the original value of ABF_CR0
0618: 52 FF    MOV   A,[X-1]            (0288)    mov  A, [X-1]
061A: 90 5B    CALL  0x0677             (0289)    call SetInput							;Set the input to desired reference source
                                        (0290) 
061C: 38 01    ADD   SP,0x1             (0291)    add  SP,1 
061E: 4F       MOV   X,SP               (0292)    mov  X,SP ;X points to new desired cal valueouput
                                        (0293) 
061F: 56 FE 80 MOV   [X-2],0x80         (0294)    mov  [X + Toggle],80h
0622: 71 10    OR    F,0x10             
                                        (0295) 
                                        (0296)    M8C_SetBank1 ;Set Cap for Largest Value
0624: 62 E5 00 MOV   REG[0xE5],0x0      (0297)    mov  reg[ADC8_ADC_TR],00h
0627: 70 EF    AND   F,0xEF             
0629: 71 10    OR    F,0x10             
                                        (0298)    M8C_SetBank0
                                        (0299) 
                                        (0300) .Repeat: ;repeat
                                        (0301)    M8C_SetBank1
062B: 5D E5    MOV   A,REG[0xE5]        (0302)    mov  A,reg[ADC8_ADC_TR]
062D: 33 FE    XOR   A,[X-2]            (0303)    xor  A,[X + Toggle] ; toggle trim
062F: 60 E5    MOV   REG[0xE5],A        (0304)    mov  reg[ADC8_ADC_TR],A
0631: 70 EF    AND   F,0xEF             
                                        (0305)    M8C_SetBank0
                                        (0306)    
0633: 9F 9A    CALL  _ADC8_StartADC     (0307)    call ADC8_StartADC ; readADC
                                        (0308) 
                                        (0309) .GetData: 
0635: 47 07 FF TST   [0x7],0xFF         (0310)    tst  [ADC8_bfStatus],ffh
0638: AF FC    JZ    0x0635             (0311)    jz   .GetData
063A: 51 06    MOV   A,[0x6]            (0312)    mov  A,[ADC8_bResult]
                                        (0313) 
063C: 3B FD    CMP   A,[X-3]            (0314)    cmp  A,[X + Desired]
063E: B0 07    JNZ   0x0646             (0315)    jnz  .NotZero ; if ADC == Desired
0640: 9F A2    CALL  _ADC8_StopADC      (0316)    call ADC8_StopADC
0642: 54 FF    MOV   [X-1],A            (0317)    mov  [X+Closest], A
0644: 80 19    JMP   0x065E             (0318)    jmp  .Done
                                        (0319) 
                                        (0320) .NotZero:
0646: C0 05    JC    0x064C             (0321)    jc   .LessThan       ; elseif ADC > Desired (cap is too large)
0648: 54 FF    MOV   [X-1],A            (0322)    mov  [X + Closest],A ; closest = ADC
064A: 80 0B    JMP   0x0656             (0323)    jmp  .AllDone
064C: 71 10    OR    F,0x10             
                                        (0324) 
                                        (0325) .LessThan: ; else ADC < Desired (Cap is too small)
                                        (0326)    M8C_SetBank1
064E: 5D E5    MOV   A,REG[0xE5]        (0327)    mov  A,reg[ADC8_ADC_TR]
0650: 33 FE    XOR   A,[X-2]            (0328)    xor  A,[X + Toggle] ; toggle trim
0652: 60 E5    MOV   REG[0xE5],A        (0329)    mov  reg[ADC8_ADC_TR],A
0654: 70 EF    AND   F,0xEF             
                                        (0330)    M8C_SetBank0
                                        (0331) .AllDone:
0656: 01 00    ADD   A,0x0              (0332)    add  A,0 ; toggle = toggle/2
0658: 6F FE    RRC   [X-2]              (0333)    rrc  [X+ Toggle]
                                        (0334) .Until:
065A: BF CE    JNZ   0x0629             (0335)    jnz  .Repeat ;until toggle is done
065C: 9F 86    CALL  _ADC8_StopADC      (0336)    call ADC8_StopADC ;return( Closest)
                                        (0337)       
                                        (0338) .Done:
065E: 52 FB    MOV   A,[X-5]            (0339)    mov  A, [X+PMux_Save]						    
0660: 60 72    MOV   REG[0x72],A        (0340)    mov  reg[ADC8_ACE_CR1], A			;restore original value of ACE_CR1
0662: 52 FC    MOV   A,[X-4]            (0341)    mov  A, [X+AMux_Save]
0664: 21 0F    AND   A,0xF              (0342)    and  A, 0Fh
0666: 60 60    MOV   REG[0x60],A        (0343)    mov  reg[AMX_IN], A								;restore original value of AMX_IN
0668: 52 FC    MOV   A,[X-4]            (0344)    mov  A, [X+AMux_Save]
066A: 21 80    AND   A,0x80             (0345)    and  A, 80h
066C: 71 10    OR    F,0x10             
                                        (0346)    M8C_SetBank1
066E: 60 62    MOV   REG[0x62],A        (0347)    mov  reg[ABF_CR0], A								;restore original value of ABF_CR0
0670: 70 EF    AND   F,0xEF             
                                        (0348)    M8C_SetBank0
0672: 52 FF    MOV   A,[X-1]            (0349)    mov  A,[X + Closest]								;Get the return value
0674: 38 FB    ADD   SP,0xFB            (0350)    add  SP,-5
                                        (0351)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0352)    RAM_EPILOGUE RAM_USE_CLASS_4
0676: 7F       RET                      (0353)    ret
                                        (0354) .ENDSECTION
                                        (0355) 
                                        (0356) 
                                        (0357) SetInput:
0677: 21 10    AND   A,0x10             (0358)    and   A, 10h
0679: B0 0D    JNZ   0x0687             (0359)    jnz   .PortInput
067B: 27 FF 07 AND   [X-1],0x7          (0360)    and   [X-1], 07h
067E: 5D 72    MOV   A,REG[0x72]        (0361)    mov   A, reg[ADC8_ACE_CR1]
0680: 21 F8    AND   A,0xF8             (0362)    and   A, F8h
0682: 2B FF    OR    A,[X-1]            (0363)    or    A, [X-1]
0684: 60 72    MOV   REG[0x72],A        (0364)    mov   reg[ADC8_ACE_CR1], A
0686: 7F       RET                      (0365)    ret
                                        (0366) 
                                        (0367) .PortInput:
0687: 50 68    MOV   A,0x68             (0368)    mov   A, ADC8_ADC_CR
0689: 39 68    CMP   A,0x68             (0369)    cmp   A, 68h
068B: B0 0D    JNZ   0x0699             (0370)    jnz   .Column1
068D: 27 FF 03 AND   [X-1],0x3          (0371)    and   [X-1], 03h
0690: 5D 60    MOV   A,REG[0x60]        (0372)    mov   A, reg[AMX_IN]
0692: 21 FC    AND   A,0xFC             (0373)    and   A, FCh
0694: 2B FF    OR    A,[X-1]            (0374)    or    A, [X-1]
0696: 60 60    MOV   REG[0x60],A        (0375)    mov   reg[AMX_IN], A
0698: 7F       RET                      (0376)    ret
                                        (0377) 
                                        (0378) .Column1:
0699: 52 FF    MOV   A,[X-1]            (0379)    mov   A, [X-1]
069B: 21 80    AND   A,0x80             (0380)    and   A, 80h
069D: 71 10    OR    F,0x10             
                                        (0381)    M8C_SetBank1
069F: 60 62    MOV   REG[0x62],A        (0382)    mov   reg[ABF_CR0], A
06A1: 70 EF    AND   F,0xEF             
                                        (0383)    M8C_SetBank0
06A3: A0 06    JZ    0x06AA             (0384)    jz    .Even
06A5: 41 60 FC AND   REG[0x60],0xFC     (0385)    and   reg[AMX_IN], FCh
06A8: 80 04    JMP   0x06AD             (0386)    jmp   .SkipEven
                                        (0387) .Even:
06AA: 41 60 F3 AND   REG[0x60],0xF3     (0388)    and   reg[AMX_IN], F3h
                                        (0389) .SkipEven:
06AD: 27 FF 0F AND   [X-1],0xF          (0390)    and   [X-1], 0Fh
06B0: 5D 60    MOV   A,REG[0x60]        (0391)    mov   A, reg[AMX_IN]
06B2: 2B FF    OR    A,[X-1]            (0392)    or    A, [X-1]
06B4: 60 60    MOV   REG[0x60],A        (0393)    mov   reg[AMX_IN], A
06B6: 7F       RET                      (0394)    ret
